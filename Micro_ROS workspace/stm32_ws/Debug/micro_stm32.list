
micro_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000164e0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cf8  080166b0  080166b0  000266b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080173a8  080173a8  000300f8  2**0
                  CONTENTS
  4 .ARM          00000008  080173a8  080173a8  000273a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080173b0  080173b0  000300f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080173b0  080173b0  000273b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080173b4  080173b4  000273b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  080173b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010b70  200000f8  080174b0  000300f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20010c68  080174b0  00030c68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ebde  00000000  00000000  00030128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046ba  00000000  00000000  0004ed06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b0  00000000  00000000  000533c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c8  00000000  00000000  00054b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f8e  00000000  00000000  00056138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001db79  00000000  00000000  0007e0c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5a88  00000000  00000000  0009bc3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000a9  00000000  00000000  001816c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007060  00000000  00000000  00181770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000f8 	.word	0x200000f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016698 	.word	0x08016698

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000fc 	.word	0x200000fc
 800020c:	08016698 	.word	0x08016698

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__aeabi_d2uiz>:
 8000a7c:	004a      	lsls	r2, r1, #1
 8000a7e:	d211      	bcs.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d211      	bcs.n	8000aaa <__aeabi_d2uiz+0x2e>
 8000a86:	d50d      	bpl.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d40e      	bmi.n	8000ab0 <__aeabi_d2uiz+0x34>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_d2uiz+0x3a>
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	4770      	bx	lr

08000abc <__aeabi_d2f>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac4:	bf24      	itt	cs
 8000ac6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ace:	d90d      	bls.n	8000aec <__aeabi_d2f+0x30>
 8000ad0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000adc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae4:	bf08      	it	eq
 8000ae6:	f020 0001 	biceq.w	r0, r0, #1
 8000aea:	4770      	bx	lr
 8000aec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af0:	d121      	bne.n	8000b36 <__aeabi_d2f+0x7a>
 8000af2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af6:	bfbc      	itt	lt
 8000af8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	4770      	bxlt	lr
 8000afe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b06:	f1c2 0218 	rsb	r2, r2, #24
 8000b0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b12:	fa20 f002 	lsr.w	r0, r0, r2
 8000b16:	bf18      	it	ne
 8000b18:	f040 0001 	orrne.w	r0, r0, #1
 8000b1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b28:	ea40 000c 	orr.w	r0, r0, ip
 8000b2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b34:	e7cc      	b.n	8000ad0 <__aeabi_d2f+0x14>
 8000b36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3a:	d107      	bne.n	8000b4c <__aeabi_d2f+0x90>
 8000b3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b40:	bf1e      	ittt	ne
 8000b42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b4a:	4770      	bxne	lr
 8000b4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_ldivmod>:
 8000b5c:	b97b      	cbnz	r3, 8000b7e <__aeabi_ldivmod+0x22>
 8000b5e:	b972      	cbnz	r2, 8000b7e <__aeabi_ldivmod+0x22>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bfbe      	ittt	lt
 8000b64:	2000      	movlt	r0, #0
 8000b66:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b6a:	e006      	blt.n	8000b7a <__aeabi_ldivmod+0x1e>
 8000b6c:	bf08      	it	eq
 8000b6e:	2800      	cmpeq	r0, #0
 8000b70:	bf1c      	itt	ne
 8000b72:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b76:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b7a:	f000 b9bf 	b.w	8000efc <__aeabi_idiv0>
 8000b7e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b82:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b86:	2900      	cmp	r1, #0
 8000b88:	db09      	blt.n	8000b9e <__aeabi_ldivmod+0x42>
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	db1a      	blt.n	8000bc4 <__aeabi_ldivmod+0x68>
 8000b8e:	f000 f84d 	bl	8000c2c <__udivmoddi4>
 8000b92:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b9a:	b004      	add	sp, #16
 8000b9c:	4770      	bx	lr
 8000b9e:	4240      	negs	r0, r0
 8000ba0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	db1b      	blt.n	8000be0 <__aeabi_ldivmod+0x84>
 8000ba8:	f000 f840 	bl	8000c2c <__udivmoddi4>
 8000bac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb4:	b004      	add	sp, #16
 8000bb6:	4240      	negs	r0, r0
 8000bb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bbc:	4252      	negs	r2, r2
 8000bbe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bc2:	4770      	bx	lr
 8000bc4:	4252      	negs	r2, r2
 8000bc6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bca:	f000 f82f 	bl	8000c2c <__udivmoddi4>
 8000bce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd6:	b004      	add	sp, #16
 8000bd8:	4240      	negs	r0, r0
 8000bda:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bde:	4770      	bx	lr
 8000be0:	4252      	negs	r2, r2
 8000be2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000be6:	f000 f821 	bl	8000c2c <__udivmoddi4>
 8000bea:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf2:	b004      	add	sp, #16
 8000bf4:	4252      	negs	r2, r2
 8000bf6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c10:	f000 b974 	b.w	8000efc <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9d08      	ldr	r5, [sp, #32]
 8000c32:	4604      	mov	r4, r0
 8000c34:	468e      	mov	lr, r1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d14d      	bne.n	8000cd6 <__udivmoddi4+0xaa>
 8000c3a:	428a      	cmp	r2, r1
 8000c3c:	4694      	mov	ip, r2
 8000c3e:	d969      	bls.n	8000d14 <__udivmoddi4+0xe8>
 8000c40:	fab2 f282 	clz	r2, r2
 8000c44:	b152      	cbz	r2, 8000c5c <__udivmoddi4+0x30>
 8000c46:	fa01 f302 	lsl.w	r3, r1, r2
 8000c4a:	f1c2 0120 	rsb	r1, r2, #32
 8000c4e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c52:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c56:	ea41 0e03 	orr.w	lr, r1, r3
 8000c5a:	4094      	lsls	r4, r2
 8000c5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c60:	0c21      	lsrs	r1, r4, #16
 8000c62:	fbbe f6f8 	udiv	r6, lr, r8
 8000c66:	fa1f f78c 	uxth.w	r7, ip
 8000c6a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c72:	fb06 f107 	mul.w	r1, r6, r7
 8000c76:	4299      	cmp	r1, r3
 8000c78:	d90a      	bls.n	8000c90 <__udivmoddi4+0x64>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c82:	f080 811f 	bcs.w	8000ec4 <__udivmoddi4+0x298>
 8000c86:	4299      	cmp	r1, r3
 8000c88:	f240 811c 	bls.w	8000ec4 <__udivmoddi4+0x298>
 8000c8c:	3e02      	subs	r6, #2
 8000c8e:	4463      	add	r3, ip
 8000c90:	1a5b      	subs	r3, r3, r1
 8000c92:	b2a4      	uxth	r4, r4
 8000c94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c98:	fb08 3310 	mls	r3, r8, r0, r3
 8000c9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca0:	fb00 f707 	mul.w	r7, r0, r7
 8000ca4:	42a7      	cmp	r7, r4
 8000ca6:	d90a      	bls.n	8000cbe <__udivmoddi4+0x92>
 8000ca8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cb0:	f080 810a 	bcs.w	8000ec8 <__udivmoddi4+0x29c>
 8000cb4:	42a7      	cmp	r7, r4
 8000cb6:	f240 8107 	bls.w	8000ec8 <__udivmoddi4+0x29c>
 8000cba:	4464      	add	r4, ip
 8000cbc:	3802      	subs	r0, #2
 8000cbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc2:	1be4      	subs	r4, r4, r7
 8000cc4:	2600      	movs	r6, #0
 8000cc6:	b11d      	cbz	r5, 8000cd0 <__udivmoddi4+0xa4>
 8000cc8:	40d4      	lsrs	r4, r2
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e9c5 4300 	strd	r4, r3, [r5]
 8000cd0:	4631      	mov	r1, r6
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d909      	bls.n	8000cee <__udivmoddi4+0xc2>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	f000 80ef 	beq.w	8000ebe <__udivmoddi4+0x292>
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	fab3 f683 	clz	r6, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d14a      	bne.n	8000d8c <__udivmoddi4+0x160>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0xd4>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 80f9 	bhi.w	8000ef2 <__udivmoddi4+0x2c6>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb61 0303 	sbc.w	r3, r1, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	469e      	mov	lr, r3
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0e0      	beq.n	8000cd0 <__udivmoddi4+0xa4>
 8000d0e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d12:	e7dd      	b.n	8000cd0 <__udivmoddi4+0xa4>
 8000d14:	b902      	cbnz	r2, 8000d18 <__udivmoddi4+0xec>
 8000d16:	deff      	udf	#255	; 0xff
 8000d18:	fab2 f282 	clz	r2, r2
 8000d1c:	2a00      	cmp	r2, #0
 8000d1e:	f040 8092 	bne.w	8000e46 <__udivmoddi4+0x21a>
 8000d22:	eba1 010c 	sub.w	r1, r1, ip
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f fe8c 	uxth.w	lr, ip
 8000d2e:	2601      	movs	r6, #1
 8000d30:	0c20      	lsrs	r0, r4, #16
 8000d32:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d36:	fb07 1113 	mls	r1, r7, r3, r1
 8000d3a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3e:	fb0e f003 	mul.w	r0, lr, r3
 8000d42:	4288      	cmp	r0, r1
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x12c>
 8000d46:	eb1c 0101 	adds.w	r1, ip, r1
 8000d4a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x12a>
 8000d50:	4288      	cmp	r0, r1
 8000d52:	f200 80cb 	bhi.w	8000eec <__udivmoddi4+0x2c0>
 8000d56:	4643      	mov	r3, r8
 8000d58:	1a09      	subs	r1, r1, r0
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d60:	fb07 1110 	mls	r1, r7, r0, r1
 8000d64:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d68:	fb0e fe00 	mul.w	lr, lr, r0
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	d908      	bls.n	8000d82 <__udivmoddi4+0x156>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d78:	d202      	bcs.n	8000d80 <__udivmoddi4+0x154>
 8000d7a:	45a6      	cmp	lr, r4
 8000d7c:	f200 80bb 	bhi.w	8000ef6 <__udivmoddi4+0x2ca>
 8000d80:	4608      	mov	r0, r1
 8000d82:	eba4 040e 	sub.w	r4, r4, lr
 8000d86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d8a:	e79c      	b.n	8000cc6 <__udivmoddi4+0x9a>
 8000d8c:	f1c6 0720 	rsb	r7, r6, #32
 8000d90:	40b3      	lsls	r3, r6
 8000d92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d9a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000da2:	431c      	orrs	r4, r3
 8000da4:	40f9      	lsrs	r1, r7
 8000da6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000daa:	fa00 f306 	lsl.w	r3, r0, r6
 8000dae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000db2:	0c20      	lsrs	r0, r4, #16
 8000db4:	fa1f fe8c 	uxth.w	lr, ip
 8000db8:	fb09 1118 	mls	r1, r9, r8, r1
 8000dbc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dc0:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	fa02 f206 	lsl.w	r2, r2, r6
 8000dca:	d90b      	bls.n	8000de4 <__udivmoddi4+0x1b8>
 8000dcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dd4:	f080 8088 	bcs.w	8000ee8 <__udivmoddi4+0x2bc>
 8000dd8:	4288      	cmp	r0, r1
 8000dda:	f240 8085 	bls.w	8000ee8 <__udivmoddi4+0x2bc>
 8000dde:	f1a8 0802 	sub.w	r8, r8, #2
 8000de2:	4461      	add	r1, ip
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dec:	fb09 1110 	mls	r1, r9, r0, r1
 8000df0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df8:	458e      	cmp	lr, r1
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x1e2>
 8000dfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000e00:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e04:	d26c      	bcs.n	8000ee0 <__udivmoddi4+0x2b4>
 8000e06:	458e      	cmp	lr, r1
 8000e08:	d96a      	bls.n	8000ee0 <__udivmoddi4+0x2b4>
 8000e0a:	3802      	subs	r0, #2
 8000e0c:	4461      	add	r1, ip
 8000e0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e12:	fba0 9402 	umull	r9, r4, r0, r2
 8000e16:	eba1 010e 	sub.w	r1, r1, lr
 8000e1a:	42a1      	cmp	r1, r4
 8000e1c:	46c8      	mov	r8, r9
 8000e1e:	46a6      	mov	lr, r4
 8000e20:	d356      	bcc.n	8000ed0 <__udivmoddi4+0x2a4>
 8000e22:	d053      	beq.n	8000ecc <__udivmoddi4+0x2a0>
 8000e24:	b15d      	cbz	r5, 8000e3e <__udivmoddi4+0x212>
 8000e26:	ebb3 0208 	subs.w	r2, r3, r8
 8000e2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e32:	fa22 f306 	lsr.w	r3, r2, r6
 8000e36:	40f1      	lsrs	r1, r6
 8000e38:	431f      	orrs	r7, r3
 8000e3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3e:	2600      	movs	r6, #0
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	f1c2 0320 	rsb	r3, r2, #32
 8000e4a:	40d8      	lsrs	r0, r3
 8000e4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e50:	fa21 f303 	lsr.w	r3, r1, r3
 8000e54:	4091      	lsls	r1, r2
 8000e56:	4301      	orrs	r1, r0
 8000e58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5c:	fa1f fe8c 	uxth.w	lr, ip
 8000e60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e64:	fb07 3610 	mls	r6, r7, r0, r3
 8000e68:	0c0b      	lsrs	r3, r1, #16
 8000e6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e72:	429e      	cmp	r6, r3
 8000e74:	fa04 f402 	lsl.w	r4, r4, r2
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x260>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e82:	d22f      	bcs.n	8000ee4 <__udivmoddi4+0x2b8>
 8000e84:	429e      	cmp	r6, r3
 8000e86:	d92d      	bls.n	8000ee4 <__udivmoddi4+0x2b8>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	1b9b      	subs	r3, r3, r6
 8000e8e:	b289      	uxth	r1, r1
 8000e90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e94:	fb07 3316 	mls	r3, r7, r6, r3
 8000e98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000ea0:	428b      	cmp	r3, r1
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x28a>
 8000ea4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000eac:	d216      	bcs.n	8000edc <__udivmoddi4+0x2b0>
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d914      	bls.n	8000edc <__udivmoddi4+0x2b0>
 8000eb2:	3e02      	subs	r6, #2
 8000eb4:	4461      	add	r1, ip
 8000eb6:	1ac9      	subs	r1, r1, r3
 8000eb8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ebc:	e738      	b.n	8000d30 <__udivmoddi4+0x104>
 8000ebe:	462e      	mov	r6, r5
 8000ec0:	4628      	mov	r0, r5
 8000ec2:	e705      	b.n	8000cd0 <__udivmoddi4+0xa4>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	e6e3      	b.n	8000c90 <__udivmoddi4+0x64>
 8000ec8:	4618      	mov	r0, r3
 8000eca:	e6f8      	b.n	8000cbe <__udivmoddi4+0x92>
 8000ecc:	454b      	cmp	r3, r9
 8000ece:	d2a9      	bcs.n	8000e24 <__udivmoddi4+0x1f8>
 8000ed0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed8:	3801      	subs	r0, #1
 8000eda:	e7a3      	b.n	8000e24 <__udivmoddi4+0x1f8>
 8000edc:	4646      	mov	r6, r8
 8000ede:	e7ea      	b.n	8000eb6 <__udivmoddi4+0x28a>
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	e794      	b.n	8000e0e <__udivmoddi4+0x1e2>
 8000ee4:	4640      	mov	r0, r8
 8000ee6:	e7d1      	b.n	8000e8c <__udivmoddi4+0x260>
 8000ee8:	46d0      	mov	r8, sl
 8000eea:	e77b      	b.n	8000de4 <__udivmoddi4+0x1b8>
 8000eec:	3b02      	subs	r3, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	e732      	b.n	8000d58 <__udivmoddi4+0x12c>
 8000ef2:	4630      	mov	r0, r6
 8000ef4:	e709      	b.n	8000d0a <__udivmoddi4+0xde>
 8000ef6:	4464      	add	r4, ip
 8000ef8:	3802      	subs	r0, #2
 8000efa:	e742      	b.n	8000d82 <__udivmoddi4+0x156>

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000f0c:	f006 fc5c 	bl	80077c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000f10:	4b58      	ldr	r3, [pc, #352]	; (8001074 <pvPortMallocMicroROS+0x174>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d101      	bne.n	8000f1c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000f18:	f000 f980 	bl	800121c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000f1c:	4b56      	ldr	r3, [pc, #344]	; (8001078 <pvPortMallocMicroROS+0x178>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f040 808e 	bne.w	8001046 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d01d      	beq.n	8000f6c <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8000f30:	2208      	movs	r2, #8
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d014      	beq.n	8000f6c <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f023 0307 	bic.w	r3, r3, #7
 8000f48:	3308      	adds	r3, #8
 8000f4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d00a      	beq.n	8000f6c <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f5a:	f383 8811 	msr	BASEPRI, r3
 8000f5e:	f3bf 8f6f 	isb	sy
 8000f62:	f3bf 8f4f 	dsb	sy
 8000f66:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000f68:	bf00      	nop
 8000f6a:	e7fe      	b.n	8000f6a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d069      	beq.n	8001046 <pvPortMallocMicroROS+0x146>
 8000f72:	4b42      	ldr	r3, [pc, #264]	; (800107c <pvPortMallocMicroROS+0x17c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d864      	bhi.n	8001046 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000f7c:	4b40      	ldr	r3, [pc, #256]	; (8001080 <pvPortMallocMicroROS+0x180>)
 8000f7e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000f80:	4b3f      	ldr	r3, [pc, #252]	; (8001080 <pvPortMallocMicroROS+0x180>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000f86:	e004      	b.n	8000f92 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8000f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d903      	bls.n	8000fa4 <pvPortMallocMicroROS+0xa4>
 8000f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d1f1      	bne.n	8000f88 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000fa4:	4b33      	ldr	r3, [pc, #204]	; (8001074 <pvPortMallocMicroROS+0x174>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d04b      	beq.n	8001046 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000fae:	6a3b      	ldr	r3, [r7, #32]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2208      	movs	r2, #8
 8000fb4:	4413      	add	r3, r2
 8000fb6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	6a3b      	ldr	r3, [r7, #32]
 8000fbe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	1ad2      	subs	r2, r2, r3
 8000fc8:	2308      	movs	r3, #8
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d91f      	bls.n	8001010 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d00a      	beq.n	8000ff8 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 8000fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fe6:	f383 8811 	msr	BASEPRI, r3
 8000fea:	f3bf 8f6f 	isb	sy
 8000fee:	f3bf 8f4f 	dsb	sy
 8000ff2:	613b      	str	r3, [r7, #16]
}
 8000ff4:	bf00      	nop
 8000ff6:	e7fe      	b.n	8000ff6 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	1ad2      	subs	r2, r2, r3
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800100a:	69b8      	ldr	r0, [r7, #24]
 800100c:	f000 f968 	bl	80012e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001010:	4b1a      	ldr	r3, [pc, #104]	; (800107c <pvPortMallocMicroROS+0x17c>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	4a18      	ldr	r2, [pc, #96]	; (800107c <pvPortMallocMicroROS+0x17c>)
 800101c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <pvPortMallocMicroROS+0x17c>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	4b18      	ldr	r3, [pc, #96]	; (8001084 <pvPortMallocMicroROS+0x184>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	429a      	cmp	r2, r3
 8001028:	d203      	bcs.n	8001032 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800102a:	4b14      	ldr	r3, [pc, #80]	; (800107c <pvPortMallocMicroROS+0x17c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a15      	ldr	r2, [pc, #84]	; (8001084 <pvPortMallocMicroROS+0x184>)
 8001030:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <pvPortMallocMicroROS+0x178>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	431a      	orrs	r2, r3
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001046:	f006 fbcd 	bl	80077e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	f003 0307 	and.w	r3, r3, #7
 8001050:	2b00      	cmp	r3, #0
 8001052:	d00a      	beq.n	800106a <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8001054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001058:	f383 8811 	msr	BASEPRI, r3
 800105c:	f3bf 8f6f 	isb	sy
 8001060:	f3bf 8f4f 	dsb	sy
 8001064:	60fb      	str	r3, [r7, #12]
}
 8001066:	bf00      	nop
 8001068:	e7fe      	b.n	8001068 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 800106a:	69fb      	ldr	r3, [r7, #28]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3728      	adds	r7, #40	; 0x28
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20003d1c 	.word	0x20003d1c
 8001078:	20003d28 	.word	0x20003d28
 800107c:	20003d20 	.word	0x20003d20
 8001080:	20003d14 	.word	0x20003d14
 8001084:	20003d24 	.word	0x20003d24

08001088 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d048      	beq.n	800112c <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800109a:	2308      	movs	r3, #8
 800109c:	425b      	negs	r3, r3
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	4413      	add	r3, r2
 80010a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	4b21      	ldr	r3, [pc, #132]	; (8001134 <vPortFreeMicroROS+0xac>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4013      	ands	r3, r2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d10a      	bne.n	80010cc <vPortFreeMicroROS+0x44>
	__asm volatile
 80010b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010ba:	f383 8811 	msr	BASEPRI, r3
 80010be:	f3bf 8f6f 	isb	sy
 80010c2:	f3bf 8f4f 	dsb	sy
 80010c6:	60fb      	str	r3, [r7, #12]
}
 80010c8:	bf00      	nop
 80010ca:	e7fe      	b.n	80010ca <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00a      	beq.n	80010ea <vPortFreeMicroROS+0x62>
	__asm volatile
 80010d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010d8:	f383 8811 	msr	BASEPRI, r3
 80010dc:	f3bf 8f6f 	isb	sy
 80010e0:	f3bf 8f4f 	dsb	sy
 80010e4:	60bb      	str	r3, [r7, #8]
}
 80010e6:	bf00      	nop
 80010e8:	e7fe      	b.n	80010e8 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <vPortFreeMicroROS+0xac>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4013      	ands	r3, r2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d019      	beq.n	800112c <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d115      	bne.n	800112c <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <vPortFreeMicroROS+0xac>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	43db      	mvns	r3, r3
 800110a:	401a      	ands	r2, r3
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001110:	f006 fb5a 	bl	80077c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <vPortFreeMicroROS+0xb0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4413      	add	r3, r2
 800111e:	4a06      	ldr	r2, [pc, #24]	; (8001138 <vPortFreeMicroROS+0xb0>)
 8001120:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001122:	6938      	ldr	r0, [r7, #16]
 8001124:	f000 f8dc 	bl	80012e0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001128:	f006 fb5c 	bl	80077e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800112c:	bf00      	nop
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20003d28 	.word	0x20003d28
 8001138:	20003d20 	.word	0x20003d20

0800113c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 800113c:	b480      	push	{r7}
 800113e:	b087      	sub	sp, #28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001148:	2308      	movs	r3, #8
 800114a:	425b      	negs	r3, r3
 800114c:	697a      	ldr	r2, [r7, #20]
 800114e:	4413      	add	r3, r2
 8001150:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <getBlockSize+0x38>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	43db      	mvns	r3, r3
 8001160:	4013      	ands	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]

	return count;
 8001164:	68fb      	ldr	r3, [r7, #12]
}
 8001166:	4618      	mov	r0, r3
 8001168:	371c      	adds	r7, #28
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20003d28 	.word	0x20003d28

08001178 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001182:	f006 fb21 	bl	80077c8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001186:	6838      	ldr	r0, [r7, #0]
 8001188:	f7ff feba 	bl	8000f00 <pvPortMallocMicroROS>
 800118c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d017      	beq.n	80011c4 <pvPortReallocMicroROS+0x4c>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d014      	beq.n	80011c4 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff ffce 	bl	800113c <getBlockSize>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2208      	movs	r2, #8
 80011a4:	1a9b      	subs	r3, r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d201      	bcs.n	80011b4 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	68b8      	ldr	r0, [r7, #8]
 80011ba:	f013 fee1 	bl	8014f80 <memcpy>

		vPortFreeMicroROS(pv);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ff62 	bl	8001088 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80011c4:	f006 fb0e 	bl	80077e4 <xTaskResumeAll>

	return newmem;
 80011c8:	68bb      	ldr	r3, [r7, #8]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b086      	sub	sp, #24
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80011dc:	f006 faf4 	bl	80077c8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	fb02 f303 	mul.w	r3, r2, r3
 80011e8:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80011ea:	6978      	ldr	r0, [r7, #20]
 80011ec:	f7ff fe88 	bl	8000f00 <pvPortMallocMicroROS>
 80011f0:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	613b      	str	r3, [r7, #16]

  	while(count--)
 80011f6:	e004      	b.n	8001202 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1c5a      	adds	r2, r3, #1
 80011fc:	613a      	str	r2, [r7, #16]
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	1e5a      	subs	r2, r3, #1
 8001206:	617a      	str	r2, [r7, #20]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1f5      	bne.n	80011f8 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 800120c:	f006 faea 	bl	80077e4 <xTaskResumeAll>
  	return mem;
 8001210:	68fb      	ldr	r3, [r7, #12]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001222:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001226:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001228:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <prvHeapInit+0xac>)
 800122a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00c      	beq.n	8001250 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	3307      	adds	r3, #7
 800123a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f023 0307 	bic.w	r3, r3, #7
 8001242:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001244:	68ba      	ldr	r2, [r7, #8]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	4a1f      	ldr	r2, [pc, #124]	; (80012c8 <prvHeapInit+0xac>)
 800124c:	4413      	add	r3, r2
 800124e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001254:	4a1d      	ldr	r2, [pc, #116]	; (80012cc <prvHeapInit+0xb0>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <prvHeapInit+0xb0>)
 800125c:	2200      	movs	r2, #0
 800125e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	4413      	add	r3, r2
 8001266:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001268:	2208      	movs	r2, #8
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f023 0307 	bic.w	r3, r3, #7
 8001276:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4a15      	ldr	r2, [pc, #84]	; (80012d0 <prvHeapInit+0xb4>)
 800127c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <prvHeapInit+0xb4>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2200      	movs	r2, #0
 8001284:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <prvHeapInit+0xb4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	1ad2      	subs	r2, r2, r3
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <prvHeapInit+0xb4>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <prvHeapInit+0xb8>)
 80012aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	4a09      	ldr	r2, [pc, #36]	; (80012d8 <prvHeapInit+0xbc>)
 80012b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <prvHeapInit+0xc0>)
 80012b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80012ba:	601a      	str	r2, [r3, #0]
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	20000114 	.word	0x20000114
 80012cc:	20003d14 	.word	0x20003d14
 80012d0:	20003d1c 	.word	0x20003d1c
 80012d4:	20003d24 	.word	0x20003d24
 80012d8:	20003d20 	.word	0x20003d20
 80012dc:	20003d28 	.word	0x20003d28

080012e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80012e8:	4b28      	ldr	r3, [pc, #160]	; (800138c <prvInsertBlockIntoFreeList+0xac>)
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	e002      	b.n	80012f4 <prvInsertBlockIntoFreeList+0x14>
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d8f7      	bhi.n	80012ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	4413      	add	r3, r2
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	429a      	cmp	r2, r3
 800130e:	d108      	bne.n	8001322 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	441a      	add	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	441a      	add	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	d118      	bne.n	8001368 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <prvInsertBlockIntoFreeList+0xb0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d00d      	beq.n	800135e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	441a      	add	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	e008      	b.n	8001370 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <prvInsertBlockIntoFreeList+0xb0>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	e003      	b.n	8001370 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	429a      	cmp	r2, r3
 8001376:	d002      	beq.n	800137e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800137e:	bf00      	nop
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20003d14 	.word	0x20003d14
 8001390:	20003d1c 	.word	0x20003d1c

08001394 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <MX_DMA_Init+0x4c>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a0f      	ldr	r2, [pc, #60]	; (80013e0 <MX_DMA_Init+0x4c>)
 80013a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <MX_DMA_Init+0x4c>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2105      	movs	r1, #5
 80013ba:	2010      	movs	r0, #16
 80013bc:	f001 fc04 	bl	8002bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013c0:	2010      	movs	r0, #16
 80013c2:	f001 fc1d 	bl	8002c00 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2105      	movs	r1, #5
 80013ca:	2011      	movs	r0, #17
 80013cc:	f001 fbfc 	bl	8002bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80013d0:	2011      	movs	r0, #17
 80013d2:	f001 fc15 	bl	8002c00 <HAL_NVIC_EnableIRQ>

}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800

080013e4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80013f2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80013f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013f8:	4904      	ldr	r1, [pc, #16]	; (800140c <cubemx_transport_open+0x28>)
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f003 fd0a 	bl	8004e14 <HAL_UART_Receive_DMA>
    return true;
 8001400:	2301      	movs	r3, #1
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20003d2c 	.word	0x20003d2c

08001410 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800141e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f003 fd27 	bl	8004e74 <HAL_UART_DMAStop>
    return true;
 8001426:	2301      	movs	r3, #1
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
 800143c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001444:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b20      	cmp	r3, #32
 8001450:	d11c      	bne.n	800148c <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	b29b      	uxth	r3, r3
 8001456:	461a      	mov	r2, r3
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	6978      	ldr	r0, [r7, #20]
 800145c:	f003 fc5c 	bl	8004d18 <HAL_UART_Transmit_DMA>
 8001460:	4603      	mov	r3, r0
 8001462:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001464:	e002      	b.n	800146c <cubemx_transport_write+0x3c>
            osDelay(1);
 8001466:	2001      	movs	r0, #1
 8001468:	f004 ff98 	bl	800639c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800146c:	7cfb      	ldrb	r3, [r7, #19]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d105      	bne.n	800147e <cubemx_transport_write+0x4e>
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b20      	cmp	r3, #32
 800147c:	d1f3      	bne.n	8001466 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 800147e:	7cfb      	ldrb	r3, [r7, #19]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <cubemx_transport_write+0x58>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	e002      	b.n	800148e <cubemx_transport_write+0x5e>
 8001488:	2300      	movs	r3, #0
 800148a:	e000      	b.n	800148e <cubemx_transport_write+0x5e>
    }else{
        return 0;
 800148c:	2300      	movs	r3, #0
    }
}
 800148e:	4618      	mov	r0, r3
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
 80014a4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80014ac:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b2:	b672      	cpsid	i
}
 80014b4:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80014c2:	4a1c      	ldr	r2, [pc, #112]	; (8001534 <cubemx_transport_read+0x9c>)
 80014c4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80014c6:	b662      	cpsie	i
}
 80014c8:	bf00      	nop
        __enable_irq();
        ms_used++;
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3301      	adds	r3, #1
 80014ce:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80014d0:	2001      	movs	r0, #1
 80014d2:	f004 ff63 	bl	800639c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80014d6:	4b18      	ldr	r3, [pc, #96]	; (8001538 <cubemx_transport_read+0xa0>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <cubemx_transport_read+0x9c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d103      	bne.n	80014ea <cubemx_transport_read+0x52>
 80014e2:	69fa      	ldr	r2, [r7, #28]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	dbe3      	blt.n	80014b2 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80014ee:	e011      	b.n	8001514 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <cubemx_transport_read+0xa0>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	440b      	add	r3, r1
 80014fa:	4910      	ldr	r1, [pc, #64]	; (800153c <cubemx_transport_read+0xa4>)
 80014fc:	5c8a      	ldrb	r2, [r1, r2]
 80014fe:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001500:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <cubemx_transport_read+0xa0>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	3301      	adds	r3, #1
 8001506:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800150a:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <cubemx_transport_read+0xa0>)
 800150c:	6013      	str	r3, [r2, #0]
        wrote++;
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	3301      	adds	r3, #1
 8001512:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <cubemx_transport_read+0xa0>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <cubemx_transport_read+0x9c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	429a      	cmp	r2, r3
 800151e:	d003      	beq.n	8001528 <cubemx_transport_read+0x90>
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	429a      	cmp	r2, r3
 8001526:	d3e3      	bcc.n	80014f0 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001528:	69bb      	ldr	r3, [r7, #24]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3720      	adds	r7, #32
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20004530 	.word	0x20004530
 8001538:	2000452c 	.word	0x2000452c
 800153c:	20003d2c 	.word	0x20003d2c

08001540 <twist_callback>:
void * microros_allocate(size_t size, void * state);
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void twist_callback(const void *msgin) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
    const geometry_msgs__msg__Twist *twist_msg = (const geometry_msgs__msg__Twist *)msgin;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	60fb      	str	r3, [r7, #12]

    vector3_subscribe.x = twist_msg->linear.x;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	490a      	ldr	r1, [pc, #40]	; (800157c <twist_callback+0x3c>)
 8001554:	e9c1 2300 	strd	r2, r3, [r1]
    vector3_subscribe.z = twist_msg->angular.z;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800155e:	4907      	ldr	r1, [pc, #28]	; (800157c <twist_callback+0x3c>)
 8001560:	e9c1 2304 	strd	r2, r3, [r1, #16]

    osMessageQueuePut(Twist_queueHandle, &vector3_subscribe, 0, 0);
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <twist_callback+0x40>)
 8001566:	6818      	ldr	r0, [r3, #0]
 8001568:	2300      	movs	r3, #0
 800156a:	2200      	movs	r2, #0
 800156c:	4903      	ldr	r1, [pc, #12]	; (800157c <twist_callback+0x3c>)
 800156e:	f004 ffa3 	bl	80064b8 <osMessageQueuePut>
}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20004558 	.word	0x20004558
 8001580:	200074fc 	.word	0x200074fc

08001584 <twist_publish_callback>:

void twist_publish_callback(rcl_timer_t * timer, int64_t last_call_time){
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	e9c7 2300 	strd	r2, r3, [r7]
	(void) last_call_time;
	if (timer != NULL){
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d032      	beq.n	80015fc <twist_publish_callback+0x78>
		// Update the robot position and orientation based on the wheel movements:
		vector3_publish.x = (wheel_angular_velocity_right + wheel_angular_velocity_left) / 2;
 8001596:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <twist_publish_callback+0x80>)
 8001598:	ed93 7a00 	vldr	s14, [r3]
 800159c:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <twist_publish_callback+0x84>)
 800159e:	edd3 7a00 	vldr	s15, [r3]
 80015a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80015aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015ae:	ee16 0a90 	vmov	r0, s13
 80015b2:	f7fe fff9 	bl	80005a8 <__aeabi_f2d>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4914      	ldr	r1, [pc, #80]	; (800160c <twist_publish_callback+0x88>)
 80015bc:	e9c1 2300 	strd	r2, r3, [r1]
		vector3_publish.z = (wheel_angular_velocity_right - wheel_angular_velocity_left) / wheel_separation;
 80015c0:	4b10      	ldr	r3, [pc, #64]	; (8001604 <twist_publish_callback+0x80>)
 80015c2:	ed93 7a00 	vldr	s14, [r3]
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <twist_publish_callback+0x84>)
 80015c8:	edd3 7a00 	vldr	s15, [r3]
 80015cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015d0:	ee17 0a90 	vmov	r0, s15
 80015d4:	f7fe ffe8 	bl	80005a8 <__aeabi_f2d>
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <twist_publish_callback+0x8c>)
 80015de:	f7ff f965 	bl	80008ac <__aeabi_ddiv>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4909      	ldr	r1, [pc, #36]	; (800160c <twist_publish_callback+0x88>)
 80015e8:	e9c1 2304 	strd	r2, r3, [r1, #16]
		rc = rcl_publish(&publisher, &vector3_publish, NULL);
 80015ec:	2200      	movs	r2, #0
 80015ee:	4907      	ldr	r1, [pc, #28]	; (800160c <twist_publish_callback+0x88>)
 80015f0:	4808      	ldr	r0, [pc, #32]	; (8001614 <twist_publish_callback+0x90>)
 80015f2:	f009 fb61 	bl	800acb8 <rcl_publish>
 80015f6:	4603      	mov	r3, r0
 80015f8:	4a07      	ldr	r2, [pc, #28]	; (8001618 <twist_publish_callback+0x94>)
 80015fa:	6013      	str	r3, [r2, #0]
	}
}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20007500 	.word	0x20007500
 8001608:	20007504 	.word	0x20007504
 800160c:	20004570 	.word	0x20004570
 8001610:	3fe00000 	.word	0x3fe00000
 8001614:	20004550 	.word	0x20004550
 8001618:	2000454c 	.word	0x2000454c

0800161c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Twist_queue */
  Twist_queueHandle = osMessageQueueNew (16, 24, &Twist_queue_attributes);
 8001620:	4a0c      	ldr	r2, [pc, #48]	; (8001654 <MX_FREERTOS_Init+0x38>)
 8001622:	2118      	movs	r1, #24
 8001624:	2010      	movs	r0, #16
 8001626:	f004 fed4 	bl	80063d2 <osMessageQueueNew>
 800162a:	4603      	mov	r3, r0
 800162c:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <MX_FREERTOS_Init+0x3c>)
 800162e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of microros */
  microrosHandle = osThreadNew(StartDefaultTask, NULL, &microros_attributes);
 8001630:	4a0a      	ldr	r2, [pc, #40]	; (800165c <MX_FREERTOS_Init+0x40>)
 8001632:	2100      	movs	r1, #0
 8001634:	480a      	ldr	r0, [pc, #40]	; (8001660 <MX_FREERTOS_Init+0x44>)
 8001636:	f004 fe1f 	bl	8006278 <osThreadNew>
 800163a:	4603      	mov	r3, r0
 800163c:	4a09      	ldr	r2, [pc, #36]	; (8001664 <MX_FREERTOS_Init+0x48>)
 800163e:	6013      	str	r3, [r2, #0]

  /* creation of control_task */
  control_taskHandle = osThreadNew(StartControl_task, NULL, &control_task_attributes);
 8001640:	4a09      	ldr	r2, [pc, #36]	; (8001668 <MX_FREERTOS_Init+0x4c>)
 8001642:	2100      	movs	r1, #0
 8001644:	4809      	ldr	r0, [pc, #36]	; (800166c <MX_FREERTOS_Init+0x50>)
 8001646:	f004 fe17 	bl	8006278 <osThreadNew>
 800164a:	4603      	mov	r3, r0
 800164c:	4a08      	ldr	r2, [pc, #32]	; (8001670 <MX_FREERTOS_Init+0x54>)
 800164e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	080167d4 	.word	0x080167d4
 8001658:	200074fc 	.word	0x200074fc
 800165c:	0801678c 	.word	0x0801678c
 8001660:	08001679 	.word	0x08001679
 8001664:	200045b8 	.word	0x200045b8
 8001668:	080167b0 	.word	0x080167b0
 800166c:	08001871 	.word	0x08001871
 8001670:	200074f8 	.word	0x200074f8
 8001674:	00000000 	.word	0x00000000

08001678 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001678:	b5b0      	push	{r4, r5, r7, lr}
 800167a:	b0fc      	sub	sp, #496	; 0x1f0
 800167c:	af02      	add	r7, sp, #8
 800167e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001682:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001686:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

	  // micro-ROS configuration
	  char test_array[ARRAY_LEN];
	  memset(test_array,'z',ARRAY_LEN);
 8001688:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800168c:	22c8      	movs	r2, #200	; 0xc8
 800168e:	217a      	movs	r1, #122	; 0x7a
 8001690:	4618      	mov	r0, r3
 8001692:	f013 fc9d 	bl	8014fd0 <memset>

	  rmw_uros_set_custom_transport(
 8001696:	4b62      	ldr	r3, [pc, #392]	; (8001820 <StartDefaultTask+0x1a8>)
 8001698:	9301      	str	r3, [sp, #4]
 800169a:	4b62      	ldr	r3, [pc, #392]	; (8001824 <StartDefaultTask+0x1ac>)
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	4b62      	ldr	r3, [pc, #392]	; (8001828 <StartDefaultTask+0x1b0>)
 80016a0:	4a62      	ldr	r2, [pc, #392]	; (800182c <StartDefaultTask+0x1b4>)
 80016a2:	4963      	ldr	r1, [pc, #396]	; (8001830 <StartDefaultTask+0x1b8>)
 80016a4:	2001      	movs	r0, #1
 80016a6:	f00a fe35 	bl	800c314 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80016aa:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80016ae:	4618      	mov	r0, r3
 80016b0:	f00a f980 	bl	800b9b4 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 80016b4:	4b5f      	ldr	r3, [pc, #380]	; (8001834 <StartDefaultTask+0x1bc>)
 80016b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  freeRTOS_allocator.deallocate = microros_deallocate;
 80016ba:	4b5f      	ldr	r3, [pc, #380]	; (8001838 <StartDefaultTask+0x1c0>)
 80016bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	  freeRTOS_allocator.reallocate = microros_reallocate;
 80016c0:	4b5e      	ldr	r3, [pc, #376]	; (800183c <StartDefaultTask+0x1c4>)
 80016c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80016c6:	4b5e      	ldr	r3, [pc, #376]	; (8001840 <StartDefaultTask+0x1c8>)
 80016c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80016cc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80016d0:	4618      	mov	r0, r3
 80016d2:	f00a f97d 	bl	800b9d0 <rcutils_set_default_allocator>
 80016d6:	4603      	mov	r3, r0
 80016d8:	f083 0301 	eor.w	r3, r3, #1
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <StartDefaultTask+0x72>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 80016e2:	21e9      	movs	r1, #233	; 0xe9
 80016e4:	4857      	ldr	r0, [pc, #348]	; (8001844 <StartDefaultTask+0x1cc>)
 80016e6:	f013 fd71 	bl	80151cc <iprintf>
	  }

	  // micro-ROS App //
	  // Initialize micro-ROS allocator
	  rcl_allocator_t allocator;
	  allocator = rcl_get_default_allocator();
 80016ea:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80016ee:	f5a3 7480 	sub.w	r4, r3, #256	; 0x100
 80016f2:	463b      	mov	r3, r7
 80016f4:	4618      	mov	r0, r3
 80016f6:	f00a f98b 	bl	800ba10 <rcutils_get_default_allocator>
 80016fa:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80016fe:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001702:	461d      	mov	r5, r3
 8001704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001708:	682b      	ldr	r3, [r5, #0]
 800170a:	6023      	str	r3, [r4, #0]

	  // Initialize support object
	  rclc_support_t support;
	  rclc_support_init(&support, 0, NULL, &allocator);
 800170c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001710:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8001714:	2200      	movs	r2, #0
 8001716:	2100      	movs	r1, #0
 8001718:	f00a f824 	bl	800b764 <rclc_support_init>

	  // Create node object
	  rcl_node_t node;
	  rclc_node_init_default(&node, "stm32f446re_node", "", &support);
 800171c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001720:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8001724:	4a48      	ldr	r2, [pc, #288]	; (8001848 <StartDefaultTask+0x1d0>)
 8001726:	4949      	ldr	r1, [pc, #292]	; (800184c <StartDefaultTask+0x1d4>)
 8001728:	f00a f86a 	bl	800b800 <rclc_node_init_default>

	  // Create publisher
	  const char * pub_topic_name = "/publish_twist";
 800172c:	4b48      	ldr	r3, [pc, #288]	; (8001850 <StartDefaultTask+0x1d8>)
 800172e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
	  const rosidl_message_type_support_t * pub_type_support = ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Vector3);
 8001732:	f007 fcbd 	bl	80090b0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8001736:	f8c7 01e0 	str.w	r0, [r7, #480]	; 0x1e0
	  rclc_publisher_init_default(&publisher, &node, pub_type_support, pub_topic_name);
 800173a:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800173e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001742:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8001746:	4843      	ldr	r0, [pc, #268]	; (8001854 <StartDefaultTask+0x1dc>)
 8001748:	f00a f896 	bl	800b878 <rclc_publisher_init_default>

	  // Create timer
	  rcl_timer_t timer;
	  rclc_timer_init_default(
 800174c:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8001750:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8001754:	4b40      	ldr	r3, [pc, #256]	; (8001858 <StartDefaultTask+0x1e0>)
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	a32f      	add	r3, pc, #188	; (adr r3, 8001818 <StartDefaultTask+0x1a0>)
 800175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175e:	f00a f8f3 	bl	800b948 <rclc_timer_init_default>
			&support,
			RCL_MS_TO_NS(100),
			twist_publish_callback);

	  // Create subscriber
	  const char * sub_topic_name = "/cmd_vel";
 8001762:	4b3e      	ldr	r3, [pc, #248]	; (800185c <StartDefaultTask+0x1e4>)
 8001764:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	  const rosidl_message_type_support_t * sub_type_support = ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist);
 8001768:	f007 fca0 	bl	80090ac <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800176c:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
	  rclc_subscription_init_default(&subscriber, &node, sub_type_support, sub_topic_name);
 8001770:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001774:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8001778:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800177c:	4838      	ldr	r0, [pc, #224]	; (8001860 <StartDefaultTask+0x1e8>)
 800177e:	f00a f8af 	bl	800b8e0 <rclc_subscription_init_default>

	  // Create executor
	  rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8001782:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001786:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800178a:	4618      	mov	r0, r3
 800178c:	f009 fd52 	bl	800b234 <rclc_executor_get_zero_initialized_executor>
	  rclc_executor_init(&executor, &support.context, 3, &allocator);
 8001790:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8001794:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001798:	1d19      	adds	r1, r3, #4
 800179a:	f107 0020 	add.w	r0, r7, #32
 800179e:	4613      	mov	r3, r2
 80017a0:	2203      	movs	r2, #3
 80017a2:	f009 fd51 	bl	800b248 <rclc_executor_init>
	  rclc_executor_add_timer(&executor, &timer);
 80017a6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80017aa:	f107 0320 	add.w	r3, r7, #32
 80017ae:	4611      	mov	r1, r2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f009 fdf7 	bl	800b3a4 <rclc_executor_add_timer>
	  rclc_executor_add_subscription(&executor, &subscriber, &twist_msg, &twist_callback, ON_NEW_DATA);
 80017b6:	f107 0020 	add.w	r0, r7, #32
 80017ba:	2300      	movs	r3, #0
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	4b29      	ldr	r3, [pc, #164]	; (8001864 <StartDefaultTask+0x1ec>)
 80017c0:	4a29      	ldr	r2, [pc, #164]	; (8001868 <StartDefaultTask+0x1f0>)
 80017c2:	4927      	ldr	r1, [pc, #156]	; (8001860 <StartDefaultTask+0x1e8>)
 80017c4:	f009 fdb4 	bl	800b330 <rclc_executor_add_subscription>

	  // Spin executor to receive messages
	  rclc_executor_prepare(&executor);
 80017c8:	f107 0320 	add.w	r3, r7, #32
 80017cc:	4618      	mov	r0, r3
 80017ce:	f009 fe15 	bl	800b3fc <rclc_executor_prepare>
	  rclc_executor_spin(&executor);
 80017d2:	f107 0320 	add.w	r3, r7, #32
 80017d6:	4618      	mov	r0, r3
 80017d8:	f009 ff8a 	bl	800b6f0 <rclc_executor_spin>

	  // cleaning Up
	  rc += rcl_subscription_fini(&subscriber, &node);
 80017dc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80017e0:	4619      	mov	r1, r3
 80017e2:	481f      	ldr	r0, [pc, #124]	; (8001860 <StartDefaultTask+0x1e8>)
 80017e4:	f009 fb88 	bl	800aef8 <rcl_subscription_fini>
 80017e8:	4602      	mov	r2, r0
 80017ea:	4b20      	ldr	r3, [pc, #128]	; (800186c <StartDefaultTask+0x1f4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	4a1e      	ldr	r2, [pc, #120]	; (800186c <StartDefaultTask+0x1f4>)
 80017f2:	6013      	str	r3, [r2, #0]
	  rc += rcl_node_fini(&node);
 80017f4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80017f8:	4618      	mov	r0, r3
 80017fa:	f009 f8ab 	bl	800a954 <rcl_node_fini>
 80017fe:	4602      	mov	r2, r0
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <StartDefaultTask+0x1f4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4413      	add	r3, r2
 8001806:	4a19      	ldr	r2, [pc, #100]	; (800186c <StartDefaultTask+0x1f4>)
 8001808:	6013      	str	r3, [r2, #0]
//  for(;;)
//  {
//
//  }
  /* USER CODE END StartDefaultTask */
}
 800180a:	bf00      	nop
 800180c:	f507 77f4 	add.w	r7, r7, #488	; 0x1e8
 8001810:	46bd      	mov	sp, r7
 8001812:	bdb0      	pop	{r4, r5, r7, pc}
 8001814:	f3af 8000 	nop.w
 8001818:	05f5e100 	.word	0x05f5e100
 800181c:	00000000 	.word	0x00000000
 8001820:	08001499 	.word	0x08001499
 8001824:	08001431 	.word	0x08001431
 8001828:	08001411 	.word	0x08001411
 800182c:	080013e5 	.word	0x080013e5
 8001830:	20007648 	.word	0x20007648
 8001834:	08001eb5 	.word	0x08001eb5
 8001838:	08001ef9 	.word	0x08001ef9
 800183c:	08001f31 	.word	0x08001f31
 8001840:	08001f9d 	.word	0x08001f9d
 8001844:	080166d8 	.word	0x080166d8
 8001848:	08016700 	.word	0x08016700
 800184c:	08016704 	.word	0x08016704
 8001850:	08016718 	.word	0x08016718
 8001854:	20004550 	.word	0x20004550
 8001858:	08001585 	.word	0x08001585
 800185c:	08016728 	.word	0x08016728
 8001860:	20004554 	.word	0x20004554
 8001864:	08001541 	.word	0x08001541
 8001868:	20004588 	.word	0x20004588
 800186c:	2000454c 	.word	0x2000454c

08001870 <StartControl_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControl_task */
void StartControl_task(void *argument)
{
 8001870:	b5b0      	push	{r4, r5, r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControl_task */
	geometry_msgs__msg__Vector3 twist_msg;
  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet(Twist_queueHandle, &twist_msg, NULL, osWaitForever);
 8001878:	4b69      	ldr	r3, [pc, #420]	; (8001a20 <StartControl_task+0x1b0>)
 800187a:	6818      	ldr	r0, [r3, #0]
 800187c:	f107 0108 	add.w	r1, r7, #8
 8001880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001884:	2200      	movs	r2, #0
 8001886:	f004 fe77 	bl	8006578 <osMessageQueueGet>
	  angular_velocity_left_con = (twist_msg.x -  (twist_msg.z * wheel_separation) / 2.0) / wheel_radius;
 800188a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800188e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	4b63      	ldr	r3, [pc, #396]	; (8001a24 <StartControl_task+0x1b4>)
 8001898:	f7fe fede 	bl	8000658 <__aeabi_dmul>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018ac:	f7fe fffe 	bl	80008ac <__aeabi_ddiv>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4620      	mov	r0, r4
 80018b6:	4629      	mov	r1, r5
 80018b8:	f7fe fd16 	bl	80002e8 <__aeabi_dsub>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	a354      	add	r3, pc, #336	; (adr r3, 8001a18 <StartControl_task+0x1a8>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	f7fe ffef 	bl	80008ac <__aeabi_ddiv>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	f7ff f8f1 	bl	8000abc <__aeabi_d2f>
 80018da:	4603      	mov	r3, r0
 80018dc:	4a52      	ldr	r2, [pc, #328]	; (8001a28 <StartControl_task+0x1b8>)
 80018de:	6013      	str	r3, [r2, #0]
	  angular_velocity_right_con = (twist_msg.x +  (twist_msg.z * wheel_separation) / 2.0) / wheel_radius;
 80018e0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	4b4d      	ldr	r3, [pc, #308]	; (8001a24 <StartControl_task+0x1b4>)
 80018ee:	f7fe feb3 	bl	8000658 <__aeabi_dmul>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001902:	f7fe ffd3 	bl	80008ac <__aeabi_ddiv>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	4620      	mov	r0, r4
 800190c:	4629      	mov	r1, r5
 800190e:	f7fe fced 	bl	80002ec <__adddf3>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	a33f      	add	r3, pc, #252	; (adr r3, 8001a18 <StartControl_task+0x1a8>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	f7fe ffc4 	bl	80008ac <__aeabi_ddiv>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	f7ff f8c6 	bl	8000abc <__aeabi_d2f>
 8001930:	4603      	mov	r3, r0
 8001932:	4a3e      	ldr	r2, [pc, #248]	; (8001a2c <StartControl_task+0x1bc>)
 8001934:	6013      	str	r3, [r2, #0]

	// Direction of stepper motor left
	if (angular_velocity_left_con >= 0){
 8001936:	4b3c      	ldr	r3, [pc, #240]	; (8001a28 <StartControl_task+0x1b8>)
 8001938:	edd3 7a00 	vldr	s15, [r3]
 800193c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001944:	db12      	blt.n	800196c <StartControl_task+0xfc>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);
 8001946:	2201      	movs	r2, #1
 8001948:	2180      	movs	r1, #128	; 0x80
 800194a:	4839      	ldr	r0, [pc, #228]	; (8001a30 <StartControl_task+0x1c0>)
 800194c:	f001 fefc 	bl	8003748 <HAL_GPIO_WritePin>
		direction_left = 1;
 8001950:	4b38      	ldr	r3, [pc, #224]	; (8001a34 <StartControl_task+0x1c4>)
 8001952:	2201      	movs	r2, #1
 8001954:	601a      	str	r2, [r3, #0]
		angular_velocity_left = gear_ratio * angular_velocity_left_con;
 8001956:	4b34      	ldr	r3, [pc, #208]	; (8001a28 <StartControl_task+0x1b8>)
 8001958:	edd3 7a00 	vldr	s15, [r3]
 800195c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001960:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001964:	4b34      	ldr	r3, [pc, #208]	; (8001a38 <StartControl_task+0x1c8>)
 8001966:	edc3 7a00 	vstr	s15, [r3]
 800196a:	e019      	b.n	80019a0 <StartControl_task+0x130>

	}else if (angular_velocity_left_con < 0){
 800196c:	4b2e      	ldr	r3, [pc, #184]	; (8001a28 <StartControl_task+0x1b8>)
 800196e:	edd3 7a00 	vldr	s15, [r3]
 8001972:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197a:	d511      	bpl.n	80019a0 <StartControl_task+0x130>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, RESET);
 800197c:	2200      	movs	r2, #0
 800197e:	2180      	movs	r1, #128	; 0x80
 8001980:	482b      	ldr	r0, [pc, #172]	; (8001a30 <StartControl_task+0x1c0>)
 8001982:	f001 fee1 	bl	8003748 <HAL_GPIO_WritePin>
		direction_left = 0;
 8001986:	4b2b      	ldr	r3, [pc, #172]	; (8001a34 <StartControl_task+0x1c4>)
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
		angular_velocity_left = -1.0 * gear_ratio * angular_velocity_left_con;
 800198c:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <StartControl_task+0x1b8>)
 800198e:	edd3 7a00 	vldr	s15, [r3]
 8001992:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8001996:	ee67 7a87 	vmul.f32	s15, s15, s14
 800199a:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <StartControl_task+0x1c8>)
 800199c:	edc3 7a00 	vstr	s15, [r3]
	}

	// Direction of stepper motor right
	if (angular_velocity_right_con >= 0){
 80019a0:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <StartControl_task+0x1bc>)
 80019a2:	edd3 7a00 	vldr	s15, [r3]
 80019a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ae:	db12      	blt.n	80019d6 <StartControl_task+0x166>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2180      	movs	r1, #128	; 0x80
 80019b4:	4821      	ldr	r0, [pc, #132]	; (8001a3c <StartControl_task+0x1cc>)
 80019b6:	f001 fec7 	bl	8003748 <HAL_GPIO_WritePin>
		direction_right = 1;
 80019ba:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <StartControl_task+0x1d0>)
 80019bc:	2201      	movs	r2, #1
 80019be:	601a      	str	r2, [r3, #0]
		angular_velocity_right = gear_ratio * angular_velocity_right_con;
 80019c0:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <StartControl_task+0x1bc>)
 80019c2:	edd3 7a00 	vldr	s15, [r3]
 80019c6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80019ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ce:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <StartControl_task+0x1d4>)
 80019d0:	edc3 7a00 	vstr	s15, [r3]
 80019d4:	e019      	b.n	8001a0a <StartControl_task+0x19a>

	}else if (angular_velocity_right_con < 0){
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <StartControl_task+0x1bc>)
 80019d8:	edd3 7a00 	vldr	s15, [r3]
 80019dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e4:	d511      	bpl.n	8001a0a <StartControl_task+0x19a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 80019e6:	2201      	movs	r2, #1
 80019e8:	2180      	movs	r1, #128	; 0x80
 80019ea:	4814      	ldr	r0, [pc, #80]	; (8001a3c <StartControl_task+0x1cc>)
 80019ec:	f001 feac 	bl	8003748 <HAL_GPIO_WritePin>
		direction_right = 0;
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <StartControl_task+0x1d0>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
		angular_velocity_right = -1.0 * gear_ratio * angular_velocity_right_con;
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <StartControl_task+0x1bc>)
 80019f8:	edd3 7a00 	vldr	s15, [r3]
 80019fc:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8001a00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <StartControl_task+0x1d4>)
 8001a06:	edc3 7a00 	vstr	s15, [r3]
	}
	osDelay(1);
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	f004 fcc6 	bl	800639c <osDelay>
	  osMessageQueueGet(Twist_queueHandle, &twist_msg, NULL, osWaitForever);
 8001a10:	e732      	b.n	8001878 <StartControl_task+0x8>
 8001a12:	bf00      	nop
 8001a14:	f3af 8000 	nop.w
 8001a18:	9999999a 	.word	0x9999999a
 8001a1c:	3fb99999 	.word	0x3fb99999
 8001a20:	200074fc 	.word	0x200074fc
 8001a24:	3fe00000 	.word	0x3fe00000
 8001a28:	20004534 	.word	0x20004534
 8001a2c:	20004538 	.word	0x20004538
 8001a30:	40020800 	.word	0x40020800
 8001a34:	20004548 	.word	0x20004548
 8001a38:	2000453c 	.word	0x2000453c
 8001a3c:	40020000 	.word	0x40020000
 8001a40:	20004544 	.word	0x20004544
 8001a44:	20004540 	.word	0x20004540

08001a48 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4e:	f107 030c 	add.w	r3, r7, #12
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	609a      	str	r2, [r3, #8]
 8001a5a:	60da      	str	r2, [r3, #12]
 8001a5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	4b32      	ldr	r3, [pc, #200]	; (8001b2c <MX_GPIO_Init+0xe4>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a31      	ldr	r2, [pc, #196]	; (8001b2c <MX_GPIO_Init+0xe4>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b2f      	ldr	r3, [pc, #188]	; (8001b2c <MX_GPIO_Init+0xe4>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	4b2b      	ldr	r3, [pc, #172]	; (8001b2c <MX_GPIO_Init+0xe4>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a2a      	ldr	r2, [pc, #168]	; (8001b2c <MX_GPIO_Init+0xe4>)
 8001a84:	f043 0304 	orr.w	r3, r3, #4
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b28      	ldr	r3, [pc, #160]	; (8001b2c <MX_GPIO_Init+0xe4>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <MX_GPIO_Init+0xe4>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a23      	ldr	r2, [pc, #140]	; (8001b2c <MX_GPIO_Init+0xe4>)
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <MX_GPIO_Init+0xe4>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	603b      	str	r3, [r7, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	21e0      	movs	r1, #224	; 0xe0
 8001ab6:	481e      	ldr	r0, [pc, #120]	; (8001b30 <MX_GPIO_Init+0xe8>)
 8001ab8:	f001 fe46 	bl	8003748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001abc:	2200      	movs	r2, #0
 8001abe:	2180      	movs	r1, #128	; 0x80
 8001ac0:	481c      	ldr	r0, [pc, #112]	; (8001b34 <MX_GPIO_Init+0xec>)
 8001ac2:	f001 fe41 	bl	8003748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2140      	movs	r1, #64	; 0x40
 8001aca:	481b      	ldr	r0, [pc, #108]	; (8001b38 <MX_GPIO_Init+0xf0>)
 8001acc:	f001 fe3c 	bl	8003748 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ad0:	23e0      	movs	r3, #224	; 0xe0
 8001ad2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae0:	f107 030c 	add.w	r3, r7, #12
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4812      	ldr	r0, [pc, #72]	; (8001b30 <MX_GPIO_Init+0xe8>)
 8001ae8:	f001 fc9a 	bl	8003420 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af0:	2301      	movs	r3, #1
 8001af2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001afc:	f107 030c 	add.w	r3, r7, #12
 8001b00:	4619      	mov	r1, r3
 8001b02:	480c      	ldr	r0, [pc, #48]	; (8001b34 <MX_GPIO_Init+0xec>)
 8001b04:	f001 fc8c 	bl	8003420 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b08:	2340      	movs	r3, #64	; 0x40
 8001b0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4806      	ldr	r0, [pc, #24]	; (8001b38 <MX_GPIO_Init+0xf0>)
 8001b20:	f001 fc7e 	bl	8003420 <HAL_GPIO_Init>

}
 8001b24:	bf00      	nop
 8001b26:	3720      	adds	r7, #32
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40020000 	.word	0x40020000
 8001b34:	40020800 	.word	0x40020800
 8001b38:	40020400 	.word	0x40020400

08001b3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b40:	f000 ff48 	bl	80029d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b44:	f000 f822 	bl	8001b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b48:	f7ff ff7e 	bl	8001a48 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b4c:	f7ff fc22 	bl	8001394 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001b50:	f000 fe34 	bl	80027bc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001b54:	f000 fce8 	bl	8002528 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b58:	f000 fd32 	bl	80025c0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b5c:	f000 fd7e 	bl	800265c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001b60:	4807      	ldr	r0, [pc, #28]	; (8001b80 <main+0x44>)
 8001b62:	f002 fc59 	bl	8004418 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001b66:	4807      	ldr	r0, [pc, #28]	; (8001b84 <main+0x48>)
 8001b68:	f002 fc56 	bl	8004418 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001b6c:	4806      	ldr	r0, [pc, #24]	; (8001b88 <main+0x4c>)
 8001b6e:	f002 fc53 	bl	8004418 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001b72:	f004 fb37 	bl	80061e4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001b76:	f7ff fd51 	bl	800161c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001b7a:	f004 fb57 	bl	800622c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <main+0x42>
 8001b80:	20007570 	.word	0x20007570
 8001b84:	200075b8 	.word	0x200075b8
 8001b88:	20007600 	.word	0x20007600

08001b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b094      	sub	sp, #80	; 0x50
 8001b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b92:	f107 031c 	add.w	r3, r7, #28
 8001b96:	2234      	movs	r2, #52	; 0x34
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f013 fa18 	bl	8014fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ba0:	f107 0308 	add.w	r3, r7, #8
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	4b2c      	ldr	r3, [pc, #176]	; (8001c68 <SystemClock_Config+0xdc>)
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	4a2b      	ldr	r2, [pc, #172]	; (8001c68 <SystemClock_Config+0xdc>)
 8001bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc0:	4b29      	ldr	r3, [pc, #164]	; (8001c68 <SystemClock_Config+0xdc>)
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bcc:	2300      	movs	r3, #0
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	4b26      	ldr	r3, [pc, #152]	; (8001c6c <SystemClock_Config+0xe0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a25      	ldr	r2, [pc, #148]	; (8001c6c <SystemClock_Config+0xe0>)
 8001bd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bda:	6013      	str	r3, [r2, #0]
 8001bdc:	4b23      	ldr	r3, [pc, #140]	; (8001c6c <SystemClock_Config+0xe0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001be4:	603b      	str	r3, [r7, #0]
 8001be6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001be8:	2302      	movs	r3, #2
 8001bea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bec:	2301      	movs	r3, #1
 8001bee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bf0:	2310      	movs	r3, #16
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bfc:	2308      	movs	r3, #8
 8001bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001c00:	23b4      	movs	r3, #180	; 0xb4
 8001c02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c04:	2302      	movs	r3, #2
 8001c06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c10:	f107 031c 	add.w	r3, r7, #28
 8001c14:	4618      	mov	r0, r3
 8001c16:	f002 f911 	bl	8003e3c <HAL_RCC_OscConfig>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c20:	f000 f942 	bl	8001ea8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c24:	f001 fdc4 	bl	80037b0 <HAL_PWREx_EnableOverDrive>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c2e:	f000 f93b 	bl	8001ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c32:	230f      	movs	r3, #15
 8001c34:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c36:	2302      	movs	r3, #2
 8001c38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c48:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c4a:	f107 0308 	add.w	r3, r7, #8
 8001c4e:	2105      	movs	r1, #5
 8001c50:	4618      	mov	r0, r3
 8001c52:	f001 fdfd 	bl	8003850 <HAL_RCC_ClockConfig>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001c5c:	f000 f924 	bl	8001ea8 <Error_Handler>
  }
}
 8001c60:	bf00      	nop
 8001c62:	3750      	adds	r7, #80	; 0x50
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40007000 	.word	0x40007000

08001c70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a7a      	ldr	r2, [pc, #488]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d101      	bne.n	8001c86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c82:	f000 fec9 	bl	8002a18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  // Timer for stepper motor right
  if (htim->Instance == TIM2) {
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c8e:	d13c      	bne.n	8001d0a <HAL_TIM_PeriodElapsedCallback+0x9a>

	  if (angular_velocity_right != 0)
 8001c90:	4b76      	ldr	r3, [pc, #472]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9e:	d02f      	beq.n	8001d00 <HAL_TIM_PeriodElapsedCallback+0x90>
	  {
		  uint16_t step_delay_right = ALPHA*TIM_FREQ / angular_velocity_right;
 8001ca0:	4b72      	ldr	r3, [pc, #456]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fc7f 	bl	80005a8 <__aeabi_f2d>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	a168      	add	r1, pc, #416	; (adr r1, 8001e50 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001cb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cb4:	f7fe fdfa 	bl	80008ac <__aeabi_ddiv>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f7fe fedc 	bl	8000a7c <__aeabi_d2uiz>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	81fb      	strh	r3, [r7, #14]
		  TIM2->ARR = step_delay_right;
 8001cc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ccc:	89fb      	ldrh	r3, [r7, #14]
 8001cce:	62d3      	str	r3, [r2, #44]	; 0x2c
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001cd0:	2140      	movs	r1, #64	; 0x40
 8001cd2:	4867      	ldr	r0, [pc, #412]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001cd4:	f001 fd51 	bl	800377a <HAL_GPIO_TogglePin>

		  if (direction_right == 1){
 8001cd8:	4b66      	ldr	r3, [pc, #408]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d105      	bne.n	8001cec <HAL_TIM_PeriodElapsedCallback+0x7c>
			  step_count_right++;
 8001ce0:	4b65      	ldr	r3, [pc, #404]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	4a64      	ldr	r2, [pc, #400]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	e00e      	b.n	8001d0a <HAL_TIM_PeriodElapsedCallback+0x9a>
		  }else if (direction_right == 0){
 8001cec:	4b61      	ldr	r3, [pc, #388]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d10a      	bne.n	8001d0a <HAL_TIM_PeriodElapsedCallback+0x9a>
			  step_count_right--;
 8001cf4:	4b60      	ldr	r3, [pc, #384]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	4a5f      	ldr	r2, [pc, #380]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	e004      	b.n	8001d0a <HAL_TIM_PeriodElapsedCallback+0x9a>
		  }
	  }else {
		  TIM2->ARR = 10000;
 8001d00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d04:	f242 7210 	movw	r2, #10000	; 0x2710
 8001d08:	62da      	str	r2, [r3, #44]	; 0x2c
	  }
  }

  // Timer for stepper motor left
  if (htim->Instance == TIM3) {
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a5b      	ldr	r2, [pc, #364]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d13a      	bne.n	8001d8a <HAL_TIM_PeriodElapsedCallback+0x11a>

	  if(angular_velocity_left != 0)
 8001d14:	4b5a      	ldr	r3, [pc, #360]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001d16:	edd3 7a00 	vldr	s15, [r3]
 8001d1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d22:	d02e      	beq.n	8001d82 <HAL_TIM_PeriodElapsedCallback+0x112>
	  {
		  uint16_t step_delay_left = ALPHA*TIM_FREQ / angular_velocity_left;
 8001d24:	4b56      	ldr	r3, [pc, #344]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fc3d 	bl	80005a8 <__aeabi_f2d>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	a147      	add	r1, pc, #284	; (adr r1, 8001e50 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001d34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d38:	f7fe fdb8 	bl	80008ac <__aeabi_ddiv>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4610      	mov	r0, r2
 8001d42:	4619      	mov	r1, r3
 8001d44:	f7fe fe9a 	bl	8000a7c <__aeabi_d2uiz>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	81bb      	strh	r3, [r7, #12]
		  TIM3->ARR = step_delay_left;
 8001d4c:	4a4b      	ldr	r2, [pc, #300]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001d4e:	89bb      	ldrh	r3, [r7, #12]
 8001d50:	62d3      	str	r3, [r2, #44]	; 0x2c
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8001d52:	2140      	movs	r1, #64	; 0x40
 8001d54:	484b      	ldr	r0, [pc, #300]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001d56:	f001 fd10 	bl	800377a <HAL_GPIO_TogglePin>

		  if (direction_left == 1){
 8001d5a:	4b4b      	ldr	r3, [pc, #300]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d105      	bne.n	8001d6e <HAL_TIM_PeriodElapsedCallback+0xfe>
			  step_count_left++;
 8001d62:	4b4a      	ldr	r3, [pc, #296]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	3301      	adds	r3, #1
 8001d68:	4a48      	ldr	r2, [pc, #288]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	e00d      	b.n	8001d8a <HAL_TIM_PeriodElapsedCallback+0x11a>
		  }else if (direction_left == 0){
 8001d6e:	4b46      	ldr	r3, [pc, #280]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d109      	bne.n	8001d8a <HAL_TIM_PeriodElapsedCallback+0x11a>
			  step_count_left--;
 8001d76:	4b45      	ldr	r3, [pc, #276]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	4a43      	ldr	r2, [pc, #268]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	e003      	b.n	8001d8a <HAL_TIM_PeriodElapsedCallback+0x11a>
		  }
	  }else {
		  TIM3->ARR = 10000;
 8001d82:	4b3e      	ldr	r3, [pc, #248]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001d84:	f242 7210 	movw	r2, #10000	; 0x2710
 8001d88:	62da      	str	r2, [r3, #44]	; 0x2c
	  }
  }

  if (htim->Instance == TIM4) {
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a40      	ldr	r2, [pc, #256]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d157      	bne.n	8001e44 <HAL_TIM_PeriodElapsedCallback+0x1d4>

	  wheel_angular_velocity_right = 2*PI * (step_count_right - last_step_count_right) * wheel_radius / (2*SPR * 0.01);
 8001d94:	4b38      	ldr	r3, [pc, #224]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b3e      	ldr	r3, [pc, #248]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fbf0 	bl	8000584 <__aeabi_i2d>
 8001da4:	a32c      	add	r3, pc, #176	; (adr r3, 8001e58 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001daa:	f7fe fc55 	bl	8000658 <__aeabi_dmul>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	4610      	mov	r0, r2
 8001db4:	4619      	mov	r1, r3
 8001db6:	a32a      	add	r3, pc, #168	; (adr r3, 8001e60 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbc:	f7fe fc4c 	bl	8000658 <__aeabi_dmul>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	4b32      	ldr	r3, [pc, #200]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001dce:	f7fe fd6d 	bl	80008ac <__aeabi_ddiv>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f7fe fe6f 	bl	8000abc <__aeabi_d2f>
 8001dde:	4603      	mov	r3, r0
 8001de0:	4a2e      	ldr	r2, [pc, #184]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001de2:	6013      	str	r3, [r2, #0]
	  last_step_count_right = step_count_right;
 8001de4:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a2a      	ldr	r2, [pc, #168]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001dea:	6013      	str	r3, [r2, #0]

	  wheel_angular_velocity_left = 2*PI * (step_count_left - last_step_count_left) * wheel_radius / (2*SPR * 0.01);
 8001dec:	4b27      	ldr	r3, [pc, #156]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fbc4 	bl	8000584 <__aeabi_i2d>
 8001dfc:	a316      	add	r3, pc, #88	; (adr r3, 8001e58 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e02:	f7fe fc29 	bl	8000658 <__aeabi_dmul>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	a314      	add	r3, pc, #80	; (adr r3, 8001e60 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e14:	f7fe fc20 	bl	8000658 <__aeabi_dmul>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001e26:	f7fe fd41 	bl	80008ac <__aeabi_ddiv>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4610      	mov	r0, r2
 8001e30:	4619      	mov	r1, r3
 8001e32:	f7fe fe43 	bl	8000abc <__aeabi_d2f>
 8001e36:	4603      	mov	r3, r0
 8001e38:	4a1a      	ldr	r2, [pc, #104]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001e3a:	6013      	str	r3, [r2, #0]
	  last_step_count_left = step_count_left;
 8001e3c:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a17      	ldr	r2, [pc, #92]	; (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001e42:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 1 */
}
 8001e44:	bf00      	nop
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	f3af 8000 	nop.w
 8001e50:	99999999 	.word	0x99999999
 8001e54:	40beadf9 	.word	0x40beadf9
 8001e58:	f01b866e 	.word	0xf01b866e
 8001e5c:	401921f9 	.word	0x401921f9
 8001e60:	9999999a 	.word	0x9999999a
 8001e64:	3fb99999 	.word	0x3fb99999
 8001e68:	40010000 	.word	0x40010000
 8001e6c:	20004540 	.word	0x20004540
 8001e70:	40020000 	.word	0x40020000
 8001e74:	20004544 	.word	0x20004544
 8001e78:	20007508 	.word	0x20007508
 8001e7c:	40000400 	.word	0x40000400
 8001e80:	2000453c 	.word	0x2000453c
 8001e84:	40020400 	.word	0x40020400
 8001e88:	20004548 	.word	0x20004548
 8001e8c:	2000750c 	.word	0x2000750c
 8001e90:	40000800 	.word	0x40000800
 8001e94:	20007510 	.word	0x20007510
 8001e98:	40300000 	.word	0x40300000
 8001e9c:	20007500 	.word	0x20007500
 8001ea0:	20007514 	.word	0x20007514
 8001ea4:	20007504 	.word	0x20007504

08001ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001eac:	b672      	cpsid	i
}
 8001eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eb0:	e7fe      	b.n	8001eb0 <Error_Handler+0x8>
	...

08001eb4 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <microros_allocate+0x3c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <microros_allocate+0x3c>)
 8001ecc:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001ece:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <microros_allocate+0x40>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <microros_allocate+0x40>)
 8001edc:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff f80e 	bl	8000f00 <pvPortMallocMicroROS>
 8001ee4:	4603      	mov	r3, r0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20007518 	.word	0x20007518
 8001ef4:	2000751c 	.word	0x2000751c

08001ef8 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00c      	beq.n	8001f22 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff f917 	bl	800113c <getBlockSize>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	4a06      	ldr	r2, [pc, #24]	; (8001f2c <microros_deallocate+0x34>)
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	461a      	mov	r2, r3
 8001f18:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <microros_deallocate+0x34>)
 8001f1a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff f8b3 	bl	8001088 <vPortFreeMicroROS>
  }
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	2000751c 	.word	0x2000751c

08001f30 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001f3c:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <microros_reallocate+0x64>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	4413      	add	r3, r2
 8001f46:	461a      	mov	r2, r3
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <microros_reallocate+0x64>)
 8001f4a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <microros_reallocate+0x68>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	4413      	add	r3, r2
 8001f56:	461a      	mov	r2, r3
 8001f58:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <microros_reallocate+0x68>)
 8001f5a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d104      	bne.n	8001f6c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001f62:	68b8      	ldr	r0, [r7, #8]
 8001f64:	f7fe ffcc 	bl	8000f00 <pvPortMallocMicroROS>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	e00e      	b.n	8001f8a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f7ff f8e5 	bl	800113c <getBlockSize>
 8001f72:	4603      	mov	r3, r0
 8001f74:	4a08      	ldr	r2, [pc, #32]	; (8001f98 <microros_reallocate+0x68>)
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <microros_reallocate+0x68>)
 8001f7e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f7ff f8f8 	bl	8001178 <pvPortReallocMicroROS>
 8001f88:	4603      	mov	r3, r0
  }
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20007518 	.word	0x20007518
 8001f98:	2000751c 	.word	0x2000751c

08001f9c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	fb02 f303 	mul.w	r3, r2, r3
 8001fb0:	4a0c      	ldr	r2, [pc, #48]	; (8001fe4 <microros_zero_allocate+0x48>)
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <microros_zero_allocate+0x48>)
 8001fba:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	fb02 f303 	mul.w	r3, r2, r3
 8001fc4:	4a08      	ldr	r2, [pc, #32]	; (8001fe8 <microros_zero_allocate+0x4c>)
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	4413      	add	r3, r2
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <microros_zero_allocate+0x4c>)
 8001fce:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f7ff f8fd 	bl	80011d2 <pvPortCallocMicroROS>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20007518 	.word	0x20007518
 8001fe8:	2000751c 	.word	0x2000751c
 8001fec:	00000000 	.word	0x00000000

08001ff0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001ff0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ff4:	b086      	sub	sp, #24
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002002:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002006:	a320      	add	r3, pc, #128	; (adr r3, 8002088 <UTILS_NanosecondsToTimespec+0x98>)
 8002008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200c:	f7fe fda6 	bl	8000b5c <__aeabi_ldivmod>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800201a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800201e:	a31a      	add	r3, pc, #104	; (adr r3, 8002088 <UTILS_NanosecondsToTimespec+0x98>)
 8002020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002024:	f7fe fd9a 	bl	8000b5c <__aeabi_ldivmod>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	da20      	bge.n	8002076 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	4a11      	ldr	r2, [pc, #68]	; (8002080 <UTILS_NanosecondsToTimespec+0x90>)
 800203a:	fb82 1203 	smull	r1, r2, r2, r3
 800203e:	1712      	asrs	r2, r2, #28
 8002040:	17db      	asrs	r3, r3, #31
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	3301      	adds	r3, #1
 8002046:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204e:	6979      	ldr	r1, [r7, #20]
 8002050:	17c8      	asrs	r0, r1, #31
 8002052:	460c      	mov	r4, r1
 8002054:	4605      	mov	r5, r0
 8002056:	ebb2 0804 	subs.w	r8, r2, r4
 800205a:	eb63 0905 	sbc.w	r9, r3, r5
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	4906      	ldr	r1, [pc, #24]	; (8002084 <UTILS_NanosecondsToTimespec+0x94>)
 800206c:	fb01 f303 	mul.w	r3, r1, r3
 8002070:	441a      	add	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	609a      	str	r2, [r3, #8]
    }
}
 8002076:	bf00      	nop
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002080:	44b82fa1 	.word	0x44b82fa1
 8002084:	3b9aca00 	.word	0x3b9aca00
 8002088:	3b9aca00 	.word	0x3b9aca00
 800208c:	00000000 	.word	0x00000000

08002090 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002094:	b08e      	sub	sp, #56	; 0x38
 8002096:	af00      	add	r7, sp, #0
 8002098:	6278      	str	r0, [r7, #36]	; 0x24
 800209a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800209c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020a0:	2300      	movs	r3, #0
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80020b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020b6:	4618      	mov	r0, r3
 80020b8:	f005 fe0e 	bl	8007cd8 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80020bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020be:	17da      	asrs	r2, r3, #31
 80020c0:	61bb      	str	r3, [r7, #24]
 80020c2:	61fa      	str	r2, [r7, #28]
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	69b9      	ldr	r1, [r7, #24]
 80020ce:	000b      	movs	r3, r1
 80020d0:	2200      	movs	r2, #0
 80020d2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80020d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d8:	2200      	movs	r2, #0
 80020da:	461c      	mov	r4, r3
 80020dc:	4615      	mov	r5, r2
 80020de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80020e2:	1911      	adds	r1, r2, r4
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	416b      	adcs	r3, r5
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80020ee:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80020f2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	f04f 0400 	mov.w	r4, #0
 80020fe:	f04f 0500 	mov.w	r5, #0
 8002102:	015d      	lsls	r5, r3, #5
 8002104:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002108:	0154      	lsls	r4, r2, #5
 800210a:	4622      	mov	r2, r4
 800210c:	462b      	mov	r3, r5
 800210e:	ebb2 0800 	subs.w	r8, r2, r0
 8002112:	eb63 0901 	sbc.w	r9, r3, r1
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002122:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002126:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800212a:	4690      	mov	r8, r2
 800212c:	4699      	mov	r9, r3
 800212e:	eb18 0a00 	adds.w	sl, r8, r0
 8002132:	eb49 0b01 	adc.w	fp, r9, r1
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	f04f 0300 	mov.w	r3, #0
 800213e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002142:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002146:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800214a:	ebb2 040a 	subs.w	r4, r2, sl
 800214e:	603c      	str	r4, [r7, #0]
 8002150:	eb63 030b 	sbc.w	r3, r3, fp
 8002154:	607b      	str	r3, [r7, #4]
 8002156:	e9d7 4500 	ldrd	r4, r5, [r7]
 800215a:	4623      	mov	r3, r4
 800215c:	181b      	adds	r3, r3, r0
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	462b      	mov	r3, r5
 8002162:	eb41 0303 	adc.w	r3, r1, r3
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	6a3a      	ldr	r2, [r7, #32]
 800216a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800216e:	f7ff ff3f 	bl	8001ff0 <UTILS_NanosecondsToTimespec>

    return 0;
 8002172:	2300      	movs	r3, #0
 8002174:	4618      	mov	r0, r3
 8002176:	3738      	adds	r7, #56	; 0x38
 8002178:	46bd      	mov	sp, r7
 800217a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002180 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <HAL_MspInit+0x54>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	4a11      	ldr	r2, [pc, #68]	; (80021d4 <HAL_MspInit+0x54>)
 8002190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002194:	6453      	str	r3, [r2, #68]	; 0x44
 8002196:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <HAL_MspInit+0x54>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <HAL_MspInit+0x54>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <HAL_MspInit+0x54>)
 80021ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b0:	6413      	str	r3, [r2, #64]	; 0x40
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <HAL_MspInit+0x54>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	210f      	movs	r1, #15
 80021c2:	f06f 0001 	mvn.w	r0, #1
 80021c6:	f000 fcff 	bl	8002bc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800

080021d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08c      	sub	sp, #48	; 0x30
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80021e8:	2300      	movs	r3, #0
 80021ea:	60bb      	str	r3, [r7, #8]
 80021ec:	4b2f      	ldr	r3, [pc, #188]	; (80022ac <HAL_InitTick+0xd4>)
 80021ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f0:	4a2e      	ldr	r2, [pc, #184]	; (80022ac <HAL_InitTick+0xd4>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6453      	str	r3, [r2, #68]	; 0x44
 80021f8:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_InitTick+0xd4>)
 80021fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002204:	f107 020c 	add.w	r2, r7, #12
 8002208:	f107 0310 	add.w	r3, r7, #16
 800220c:	4611      	mov	r1, r2
 800220e:	4618      	mov	r0, r3
 8002210:	f001 fc38 	bl	8003a84 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002214:	f001 fc22 	bl	8003a5c <HAL_RCC_GetPCLK2Freq>
 8002218:	4603      	mov	r3, r0
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800221e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002220:	4a23      	ldr	r2, [pc, #140]	; (80022b0 <HAL_InitTick+0xd8>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	0c9b      	lsrs	r3, r3, #18
 8002228:	3b01      	subs	r3, #1
 800222a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800222c:	4b21      	ldr	r3, [pc, #132]	; (80022b4 <HAL_InitTick+0xdc>)
 800222e:	4a22      	ldr	r2, [pc, #136]	; (80022b8 <HAL_InitTick+0xe0>)
 8002230:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002232:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <HAL_InitTick+0xdc>)
 8002234:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002238:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800223a:	4a1e      	ldr	r2, [pc, #120]	; (80022b4 <HAL_InitTick+0xdc>)
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002240:	4b1c      	ldr	r3, [pc, #112]	; (80022b4 <HAL_InitTick+0xdc>)
 8002242:	2200      	movs	r2, #0
 8002244:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002246:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <HAL_InitTick+0xdc>)
 8002248:	2200      	movs	r2, #0
 800224a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800224c:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <HAL_InitTick+0xdc>)
 800224e:	2200      	movs	r2, #0
 8002250:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002252:	4818      	ldr	r0, [pc, #96]	; (80022b4 <HAL_InitTick+0xdc>)
 8002254:	f002 f890 	bl	8004378 <HAL_TIM_Base_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800225e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002262:	2b00      	cmp	r3, #0
 8002264:	d11b      	bne.n	800229e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002266:	4813      	ldr	r0, [pc, #76]	; (80022b4 <HAL_InitTick+0xdc>)
 8002268:	f002 f8d6 	bl	8004418 <HAL_TIM_Base_Start_IT>
 800226c:	4603      	mov	r3, r0
 800226e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002272:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002276:	2b00      	cmp	r3, #0
 8002278:	d111      	bne.n	800229e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800227a:	2019      	movs	r0, #25
 800227c:	f000 fcc0 	bl	8002c00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b0f      	cmp	r3, #15
 8002284:	d808      	bhi.n	8002298 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002286:	2200      	movs	r2, #0
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	2019      	movs	r0, #25
 800228c:	f000 fc9c 	bl	8002bc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002290:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <HAL_InitTick+0xe4>)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e002      	b.n	800229e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800229e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3730      	adds	r7, #48	; 0x30
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023800 	.word	0x40023800
 80022b0:	431bde83 	.word	0x431bde83
 80022b4:	20007520 	.word	0x20007520
 80022b8:	40010000 	.word	0x40010000
 80022bc:	20000008 	.word	0x20000008

080022c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022c4:	e7fe      	b.n	80022c4 <NMI_Handler+0x4>

080022c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ca:	e7fe      	b.n	80022ca <HardFault_Handler+0x4>

080022cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <MemManage_Handler+0x4>

080022d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022d6:	e7fe      	b.n	80022d6 <BusFault_Handler+0x4>

080022d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022dc:	e7fe      	b.n	80022dc <UsageFault_Handler+0x4>

080022de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80022f0:	4802      	ldr	r0, [pc, #8]	; (80022fc <DMA1_Stream5_IRQHandler+0x10>)
 80022f2:	f000 fe2b 	bl	8002f4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	2000768c 	.word	0x2000768c

08002300 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <DMA1_Stream6_IRQHandler+0x10>)
 8002306:	f000 fe21 	bl	8002f4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	200076ec 	.word	0x200076ec

08002314 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002318:	4802      	ldr	r0, [pc, #8]	; (8002324 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800231a:	f002 f8ed 	bl	80044f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20007520 	.word	0x20007520

08002328 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800232c:	4802      	ldr	r0, [pc, #8]	; (8002338 <TIM2_IRQHandler+0x10>)
 800232e:	f002 f8e3 	bl	80044f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20007570 	.word	0x20007570

0800233c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002340:	4802      	ldr	r0, [pc, #8]	; (800234c <TIM3_IRQHandler+0x10>)
 8002342:	f002 f8d9 	bl	80044f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	200075b8 	.word	0x200075b8

08002350 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002354:	4802      	ldr	r0, [pc, #8]	; (8002360 <TIM4_IRQHandler+0x10>)
 8002356:	f002 f8cf 	bl	80044f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20007600 	.word	0x20007600

08002364 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002368:	4802      	ldr	r0, [pc, #8]	; (8002374 <USART2_IRQHandler+0x10>)
 800236a:	f002 fe03 	bl	8004f74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20007648 	.word	0x20007648

08002378 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
	return 1;
 800237c:	2301      	movs	r3, #1
}
 800237e:	4618      	mov	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <_kill>:

int _kill(int pid, int sig)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002392:	f012 fd73 	bl	8014e7c <__errno>
 8002396:	4603      	mov	r3, r0
 8002398:	2216      	movs	r2, #22
 800239a:	601a      	str	r2, [r3, #0]
	return -1;
 800239c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <_exit>:

void _exit (int status)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff ffe7 	bl	8002388 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023ba:	e7fe      	b.n	80023ba <_exit+0x12>

080023bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	e00a      	b.n	80023e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023ce:	f3af 8000 	nop.w
 80023d2:	4601      	mov	r1, r0
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	60ba      	str	r2, [r7, #8]
 80023da:	b2ca      	uxtb	r2, r1
 80023dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	3301      	adds	r3, #1
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	dbf0      	blt.n	80023ce <_read+0x12>
	}

return len;
 80023ec:	687b      	ldr	r3, [r7, #4]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b086      	sub	sp, #24
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	e009      	b.n	800241c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	60ba      	str	r2, [r7, #8]
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	3301      	adds	r3, #1
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	429a      	cmp	r2, r3
 8002422:	dbf1      	blt.n	8002408 <_write+0x12>
	}
	return len;
 8002424:	687b      	ldr	r3, [r7, #4]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <_close>:


int _close(int file)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
	return -1;
 8002436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800243a:	4618      	mov	r0, r3
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002456:	605a      	str	r2, [r3, #4]
	return 0;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <_isatty>:

int _isatty(int file)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
	return 1;
 800246e:	2301      	movs	r3, #1
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
	return 0;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024a0:	4a14      	ldr	r2, [pc, #80]	; (80024f4 <_sbrk+0x5c>)
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <_sbrk+0x60>)
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024ac:	4b13      	ldr	r3, [pc, #76]	; (80024fc <_sbrk+0x64>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d102      	bne.n	80024ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <_sbrk+0x64>)
 80024b6:	4a12      	ldr	r2, [pc, #72]	; (8002500 <_sbrk+0x68>)
 80024b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <_sbrk+0x64>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d207      	bcs.n	80024d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024c8:	f012 fcd8 	bl	8014e7c <__errno>
 80024cc:	4603      	mov	r3, r0
 80024ce:	220c      	movs	r2, #12
 80024d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024d6:	e009      	b.n	80024ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <_sbrk+0x64>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024de:	4b07      	ldr	r3, [pc, #28]	; (80024fc <_sbrk+0x64>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	4a05      	ldr	r2, [pc, #20]	; (80024fc <_sbrk+0x64>)
 80024e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ea:	68fb      	ldr	r3, [r7, #12]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20020000 	.word	0x20020000
 80024f8:	00000400 	.word	0x00000400
 80024fc:	2000756c 	.word	0x2000756c
 8002500:	20010c68 	.word	0x20010c68

08002504 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <SystemInit+0x20>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250e:	4a05      	ldr	r2, [pc, #20]	; (8002524 <SystemInit+0x20>)
 8002510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002514:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800252e:	f107 0308 	add.w	r3, r7, #8
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]
 8002538:	609a      	str	r2, [r3, #8]
 800253a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800253c:	463b      	mov	r3, r7
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002544:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <MX_TIM2_Init+0x94>)
 8002546:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800254a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 89;
 800254c:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <MX_TIM2_Init+0x94>)
 800254e:	2259      	movs	r2, #89	; 0x59
 8002550:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002552:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <MX_TIM2_Init+0x94>)
 8002554:	2200      	movs	r2, #0
 8002556:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002558:	4b18      	ldr	r3, [pc, #96]	; (80025bc <MX_TIM2_Init+0x94>)
 800255a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800255e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002560:	4b16      	ldr	r3, [pc, #88]	; (80025bc <MX_TIM2_Init+0x94>)
 8002562:	2200      	movs	r2, #0
 8002564:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002566:	4b15      	ldr	r3, [pc, #84]	; (80025bc <MX_TIM2_Init+0x94>)
 8002568:	2280      	movs	r2, #128	; 0x80
 800256a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800256c:	4813      	ldr	r0, [pc, #76]	; (80025bc <MX_TIM2_Init+0x94>)
 800256e:	f001 ff03 	bl	8004378 <HAL_TIM_Base_Init>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002578:	f7ff fc96 	bl	8001ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800257c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002580:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002582:	f107 0308 	add.w	r3, r7, #8
 8002586:	4619      	mov	r1, r3
 8002588:	480c      	ldr	r0, [pc, #48]	; (80025bc <MX_TIM2_Init+0x94>)
 800258a:	f002 f8bd 	bl	8004708 <HAL_TIM_ConfigClockSource>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002594:	f7ff fc88 	bl	8001ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002598:	2300      	movs	r3, #0
 800259a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800259c:	2300      	movs	r3, #0
 800259e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025a0:	463b      	mov	r3, r7
 80025a2:	4619      	mov	r1, r3
 80025a4:	4805      	ldr	r0, [pc, #20]	; (80025bc <MX_TIM2_Init+0x94>)
 80025a6:	f002 fad9 	bl	8004b5c <HAL_TIMEx_MasterConfigSynchronization>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80025b0:	f7ff fc7a 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025b4:	bf00      	nop
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20007570 	.word	0x20007570

080025c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025c6:	f107 0308 	add.w	r3, r7, #8
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	605a      	str	r2, [r3, #4]
 80025d0:	609a      	str	r2, [r3, #8]
 80025d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d4:	463b      	mov	r3, r7
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025dc:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <MX_TIM3_Init+0x94>)
 80025de:	4a1e      	ldr	r2, [pc, #120]	; (8002658 <MX_TIM3_Init+0x98>)
 80025e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 89;
 80025e2:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <MX_TIM3_Init+0x94>)
 80025e4:	2259      	movs	r2, #89	; 0x59
 80025e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e8:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <MX_TIM3_Init+0x94>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80025ee:	4b19      	ldr	r3, [pc, #100]	; (8002654 <MX_TIM3_Init+0x94>)
 80025f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f6:	4b17      	ldr	r3, [pc, #92]	; (8002654 <MX_TIM3_Init+0x94>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025fc:	4b15      	ldr	r3, [pc, #84]	; (8002654 <MX_TIM3_Init+0x94>)
 80025fe:	2280      	movs	r2, #128	; 0x80
 8002600:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002602:	4814      	ldr	r0, [pc, #80]	; (8002654 <MX_TIM3_Init+0x94>)
 8002604:	f001 feb8 	bl	8004378 <HAL_TIM_Base_Init>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800260e:	f7ff fc4b 	bl	8001ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002616:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002618:	f107 0308 	add.w	r3, r7, #8
 800261c:	4619      	mov	r1, r3
 800261e:	480d      	ldr	r0, [pc, #52]	; (8002654 <MX_TIM3_Init+0x94>)
 8002620:	f002 f872 	bl	8004708 <HAL_TIM_ConfigClockSource>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800262a:	f7ff fc3d 	bl	8001ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800262e:	2300      	movs	r3, #0
 8002630:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002632:	2300      	movs	r3, #0
 8002634:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002636:	463b      	mov	r3, r7
 8002638:	4619      	mov	r1, r3
 800263a:	4806      	ldr	r0, [pc, #24]	; (8002654 <MX_TIM3_Init+0x94>)
 800263c:	f002 fa8e 	bl	8004b5c <HAL_TIMEx_MasterConfigSynchronization>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002646:	f7ff fc2f 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800264a:	bf00      	nop
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	200075b8 	.word	0x200075b8
 8002658:	40000400 	.word	0x40000400

0800265c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002662:	f107 0308 	add.w	r3, r7, #8
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	609a      	str	r2, [r3, #8]
 800266e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002670:	463b      	mov	r3, r7
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002678:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <MX_TIM4_Init+0x94>)
 800267a:	4a1e      	ldr	r2, [pc, #120]	; (80026f4 <MX_TIM4_Init+0x98>)
 800267c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 899;
 800267e:	4b1c      	ldr	r3, [pc, #112]	; (80026f0 <MX_TIM4_Init+0x94>)
 8002680:	f240 3283 	movw	r2, #899	; 0x383
 8002684:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002686:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <MX_TIM4_Init+0x94>)
 8002688:	2200      	movs	r2, #0
 800268a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800268c:	4b18      	ldr	r3, [pc, #96]	; (80026f0 <MX_TIM4_Init+0x94>)
 800268e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002692:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002694:	4b16      	ldr	r3, [pc, #88]	; (80026f0 <MX_TIM4_Init+0x94>)
 8002696:	2200      	movs	r2, #0
 8002698:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800269a:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <MX_TIM4_Init+0x94>)
 800269c:	2280      	movs	r2, #128	; 0x80
 800269e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80026a0:	4813      	ldr	r0, [pc, #76]	; (80026f0 <MX_TIM4_Init+0x94>)
 80026a2:	f001 fe69 	bl	8004378 <HAL_TIM_Base_Init>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80026ac:	f7ff fbfc 	bl	8001ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80026b6:	f107 0308 	add.w	r3, r7, #8
 80026ba:	4619      	mov	r1, r3
 80026bc:	480c      	ldr	r0, [pc, #48]	; (80026f0 <MX_TIM4_Init+0x94>)
 80026be:	f002 f823 	bl	8004708 <HAL_TIM_ConfigClockSource>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80026c8:	f7ff fbee 	bl	8001ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026cc:	2300      	movs	r3, #0
 80026ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d0:	2300      	movs	r3, #0
 80026d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026d4:	463b      	mov	r3, r7
 80026d6:	4619      	mov	r1, r3
 80026d8:	4805      	ldr	r0, [pc, #20]	; (80026f0 <MX_TIM4_Init+0x94>)
 80026da:	f002 fa3f 	bl	8004b5c <HAL_TIMEx_MasterConfigSynchronization>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80026e4:	f7ff fbe0 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80026e8:	bf00      	nop
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20007600 	.word	0x20007600
 80026f4:	40000800 	.word	0x40000800

080026f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002708:	d116      	bne.n	8002738 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	4b28      	ldr	r3, [pc, #160]	; (80027b0 <HAL_TIM_Base_MspInit+0xb8>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a27      	ldr	r2, [pc, #156]	; (80027b0 <HAL_TIM_Base_MspInit+0xb8>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
 800271a:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <HAL_TIM_Base_MspInit+0xb8>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002726:	2200      	movs	r2, #0
 8002728:	2105      	movs	r1, #5
 800272a:	201c      	movs	r0, #28
 800272c:	f000 fa4c 	bl	8002bc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002730:	201c      	movs	r0, #28
 8002732:	f000 fa65 	bl	8002c00 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002736:	e036      	b.n	80027a6 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM3)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a1d      	ldr	r2, [pc, #116]	; (80027b4 <HAL_TIM_Base_MspInit+0xbc>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d116      	bne.n	8002770 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <HAL_TIM_Base_MspInit+0xb8>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	4a19      	ldr	r2, [pc, #100]	; (80027b0 <HAL_TIM_Base_MspInit+0xb8>)
 800274c:	f043 0302 	orr.w	r3, r3, #2
 8002750:	6413      	str	r3, [r2, #64]	; 0x40
 8002752:	4b17      	ldr	r3, [pc, #92]	; (80027b0 <HAL_TIM_Base_MspInit+0xb8>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	613b      	str	r3, [r7, #16]
 800275c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800275e:	2200      	movs	r2, #0
 8002760:	2105      	movs	r1, #5
 8002762:	201d      	movs	r0, #29
 8002764:	f000 fa30 	bl	8002bc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002768:	201d      	movs	r0, #29
 800276a:	f000 fa49 	bl	8002c00 <HAL_NVIC_EnableIRQ>
}
 800276e:	e01a      	b.n	80027a6 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM4)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a10      	ldr	r2, [pc, #64]	; (80027b8 <HAL_TIM_Base_MspInit+0xc0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d115      	bne.n	80027a6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <HAL_TIM_Base_MspInit+0xb8>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	4a0b      	ldr	r2, [pc, #44]	; (80027b0 <HAL_TIM_Base_MspInit+0xb8>)
 8002784:	f043 0304 	orr.w	r3, r3, #4
 8002788:	6413      	str	r3, [r2, #64]	; 0x40
 800278a:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <HAL_TIM_Base_MspInit+0xb8>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002796:	2200      	movs	r2, #0
 8002798:	2105      	movs	r1, #5
 800279a:	201e      	movs	r0, #30
 800279c:	f000 fa14 	bl	8002bc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80027a0:	201e      	movs	r0, #30
 80027a2:	f000 fa2d 	bl	8002c00 <HAL_NVIC_EnableIRQ>
}
 80027a6:	bf00      	nop
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40000400 	.word	0x40000400
 80027b8:	40000800 	.word	0x40000800

080027bc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027c0:	4b11      	ldr	r3, [pc, #68]	; (8002808 <MX_USART2_UART_Init+0x4c>)
 80027c2:	4a12      	ldr	r2, [pc, #72]	; (800280c <MX_USART2_UART_Init+0x50>)
 80027c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027c6:	4b10      	ldr	r3, [pc, #64]	; (8002808 <MX_USART2_UART_Init+0x4c>)
 80027c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027ce:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <MX_USART2_UART_Init+0x4c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <MX_USART2_UART_Init+0x4c>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027da:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <MX_USART2_UART_Init+0x4c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027e0:	4b09      	ldr	r3, [pc, #36]	; (8002808 <MX_USART2_UART_Init+0x4c>)
 80027e2:	220c      	movs	r2, #12
 80027e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027e6:	4b08      	ldr	r3, [pc, #32]	; (8002808 <MX_USART2_UART_Init+0x4c>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <MX_USART2_UART_Init+0x4c>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027f2:	4805      	ldr	r0, [pc, #20]	; (8002808 <MX_USART2_UART_Init+0x4c>)
 80027f4:	f002 fa42 	bl	8004c7c <HAL_UART_Init>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027fe:	f7ff fb53 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20007648 	.word	0x20007648
 800280c:	40004400 	.word	0x40004400

08002810 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08a      	sub	sp, #40	; 0x28
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002818:	f107 0314 	add.w	r3, r7, #20
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	605a      	str	r2, [r3, #4]
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	60da      	str	r2, [r3, #12]
 8002826:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a4d      	ldr	r2, [pc, #308]	; (8002964 <HAL_UART_MspInit+0x154>)
 800282e:	4293      	cmp	r3, r2
 8002830:	f040 8093 	bne.w	800295a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002834:	2300      	movs	r3, #0
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	4b4b      	ldr	r3, [pc, #300]	; (8002968 <HAL_UART_MspInit+0x158>)
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	4a4a      	ldr	r2, [pc, #296]	; (8002968 <HAL_UART_MspInit+0x158>)
 800283e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002842:	6413      	str	r3, [r2, #64]	; 0x40
 8002844:	4b48      	ldr	r3, [pc, #288]	; (8002968 <HAL_UART_MspInit+0x158>)
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002850:	2300      	movs	r3, #0
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	4b44      	ldr	r3, [pc, #272]	; (8002968 <HAL_UART_MspInit+0x158>)
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	4a43      	ldr	r2, [pc, #268]	; (8002968 <HAL_UART_MspInit+0x158>)
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	6313      	str	r3, [r2, #48]	; 0x30
 8002860:	4b41      	ldr	r3, [pc, #260]	; (8002968 <HAL_UART_MspInit+0x158>)
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800286c:	230c      	movs	r3, #12
 800286e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002870:	2302      	movs	r3, #2
 8002872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002878:	2303      	movs	r3, #3
 800287a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800287c:	2307      	movs	r3, #7
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002880:	f107 0314 	add.w	r3, r7, #20
 8002884:	4619      	mov	r1, r3
 8002886:	4839      	ldr	r0, [pc, #228]	; (800296c <HAL_UART_MspInit+0x15c>)
 8002888:	f000 fdca 	bl	8003420 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800288c:	4b38      	ldr	r3, [pc, #224]	; (8002970 <HAL_UART_MspInit+0x160>)
 800288e:	4a39      	ldr	r2, [pc, #228]	; (8002974 <HAL_UART_MspInit+0x164>)
 8002890:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002892:	4b37      	ldr	r3, [pc, #220]	; (8002970 <HAL_UART_MspInit+0x160>)
 8002894:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002898:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800289a:	4b35      	ldr	r3, [pc, #212]	; (8002970 <HAL_UART_MspInit+0x160>)
 800289c:	2200      	movs	r2, #0
 800289e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028a0:	4b33      	ldr	r3, [pc, #204]	; (8002970 <HAL_UART_MspInit+0x160>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028a6:	4b32      	ldr	r3, [pc, #200]	; (8002970 <HAL_UART_MspInit+0x160>)
 80028a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028ac:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028ae:	4b30      	ldr	r3, [pc, #192]	; (8002970 <HAL_UART_MspInit+0x160>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028b4:	4b2e      	ldr	r3, [pc, #184]	; (8002970 <HAL_UART_MspInit+0x160>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80028ba:	4b2d      	ldr	r3, [pc, #180]	; (8002970 <HAL_UART_MspInit+0x160>)
 80028bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028c0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80028c2:	4b2b      	ldr	r3, [pc, #172]	; (8002970 <HAL_UART_MspInit+0x160>)
 80028c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80028c8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028ca:	4b29      	ldr	r3, [pc, #164]	; (8002970 <HAL_UART_MspInit+0x160>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80028d0:	4827      	ldr	r0, [pc, #156]	; (8002970 <HAL_UART_MspInit+0x160>)
 80028d2:	f000 f9a3 	bl	8002c1c <HAL_DMA_Init>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80028dc:	f7ff fae4 	bl	8001ea8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a23      	ldr	r2, [pc, #140]	; (8002970 <HAL_UART_MspInit+0x160>)
 80028e4:	639a      	str	r2, [r3, #56]	; 0x38
 80028e6:	4a22      	ldr	r2, [pc, #136]	; (8002970 <HAL_UART_MspInit+0x160>)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80028ec:	4b22      	ldr	r3, [pc, #136]	; (8002978 <HAL_UART_MspInit+0x168>)
 80028ee:	4a23      	ldr	r2, [pc, #140]	; (800297c <HAL_UART_MspInit+0x16c>)
 80028f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80028f2:	4b21      	ldr	r3, [pc, #132]	; (8002978 <HAL_UART_MspInit+0x168>)
 80028f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028f8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028fa:	4b1f      	ldr	r3, [pc, #124]	; (8002978 <HAL_UART_MspInit+0x168>)
 80028fc:	2240      	movs	r2, #64	; 0x40
 80028fe:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002900:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <HAL_UART_MspInit+0x168>)
 8002902:	2200      	movs	r2, #0
 8002904:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002906:	4b1c      	ldr	r3, [pc, #112]	; (8002978 <HAL_UART_MspInit+0x168>)
 8002908:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800290c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800290e:	4b1a      	ldr	r3, [pc, #104]	; (8002978 <HAL_UART_MspInit+0x168>)
 8002910:	2200      	movs	r2, #0
 8002912:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002914:	4b18      	ldr	r3, [pc, #96]	; (8002978 <HAL_UART_MspInit+0x168>)
 8002916:	2200      	movs	r2, #0
 8002918:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800291a:	4b17      	ldr	r3, [pc, #92]	; (8002978 <HAL_UART_MspInit+0x168>)
 800291c:	2200      	movs	r2, #0
 800291e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002920:	4b15      	ldr	r3, [pc, #84]	; (8002978 <HAL_UART_MspInit+0x168>)
 8002922:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002926:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002928:	4b13      	ldr	r3, [pc, #76]	; (8002978 <HAL_UART_MspInit+0x168>)
 800292a:	2200      	movs	r2, #0
 800292c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800292e:	4812      	ldr	r0, [pc, #72]	; (8002978 <HAL_UART_MspInit+0x168>)
 8002930:	f000 f974 	bl	8002c1c <HAL_DMA_Init>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800293a:	f7ff fab5 	bl	8001ea8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a0d      	ldr	r2, [pc, #52]	; (8002978 <HAL_UART_MspInit+0x168>)
 8002942:	635a      	str	r2, [r3, #52]	; 0x34
 8002944:	4a0c      	ldr	r2, [pc, #48]	; (8002978 <HAL_UART_MspInit+0x168>)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800294a:	2200      	movs	r2, #0
 800294c:	2105      	movs	r1, #5
 800294e:	2026      	movs	r0, #38	; 0x26
 8002950:	f000 f93a 	bl	8002bc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002954:	2026      	movs	r0, #38	; 0x26
 8002956:	f000 f953 	bl	8002c00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800295a:	bf00      	nop
 800295c:	3728      	adds	r7, #40	; 0x28
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40004400 	.word	0x40004400
 8002968:	40023800 	.word	0x40023800
 800296c:	40020000 	.word	0x40020000
 8002970:	2000768c 	.word	0x2000768c
 8002974:	40026088 	.word	0x40026088
 8002978:	200076ec 	.word	0x200076ec
 800297c:	400260a0 	.word	0x400260a0

08002980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002984:	480d      	ldr	r0, [pc, #52]	; (80029bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002986:	490e      	ldr	r1, [pc, #56]	; (80029c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002988:	4a0e      	ldr	r2, [pc, #56]	; (80029c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800298a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800298c:	e002      	b.n	8002994 <LoopCopyDataInit>

0800298e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800298e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002992:	3304      	adds	r3, #4

08002994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002998:	d3f9      	bcc.n	800298e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800299a:	4a0b      	ldr	r2, [pc, #44]	; (80029c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800299c:	4c0b      	ldr	r4, [pc, #44]	; (80029cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800299e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029a0:	e001      	b.n	80029a6 <LoopFillZerobss>

080029a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a4:	3204      	adds	r2, #4

080029a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029a8:	d3fb      	bcc.n	80029a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029aa:	f7ff fdab 	bl	8002504 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029ae:	f012 fab3 	bl	8014f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029b2:	f7ff f8c3 	bl	8001b3c <main>
  bx  lr    
 80029b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029c0:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 80029c4:	080173b8 	.word	0x080173b8
  ldr r2, =_sbss
 80029c8:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 80029cc:	20010c68 	.word	0x20010c68

080029d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029d0:	e7fe      	b.n	80029d0 <ADC_IRQHandler>
	...

080029d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029d8:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <HAL_Init+0x40>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a0d      	ldr	r2, [pc, #52]	; (8002a14 <HAL_Init+0x40>)
 80029de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029e4:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <HAL_Init+0x40>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a0a      	ldr	r2, [pc, #40]	; (8002a14 <HAL_Init+0x40>)
 80029ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029f0:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <HAL_Init+0x40>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a07      	ldr	r2, [pc, #28]	; (8002a14 <HAL_Init+0x40>)
 80029f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029fc:	2003      	movs	r0, #3
 80029fe:	f000 f8d8 	bl	8002bb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a02:	200f      	movs	r0, #15
 8002a04:	f7ff fbe8 	bl	80021d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a08:	f7ff fbba 	bl	8002180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40023c00 	.word	0x40023c00

08002a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <HAL_IncTick+0x20>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	461a      	mov	r2, r3
 8002a22:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <HAL_IncTick+0x24>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4413      	add	r3, r2
 8002a28:	4a04      	ldr	r2, [pc, #16]	; (8002a3c <HAL_IncTick+0x24>)
 8002a2a:	6013      	str	r3, [r2, #0]
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	2000000c 	.word	0x2000000c
 8002a3c:	2000774c 	.word	0x2000774c

08002a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return uwTick;
 8002a44:	4b03      	ldr	r3, [pc, #12]	; (8002a54 <HAL_GetTick+0x14>)
 8002a46:	681b      	ldr	r3, [r3, #0]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	2000774c 	.word	0x2000774c

08002a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <__NVIC_SetPriorityGrouping+0x44>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a74:	4013      	ands	r3, r2
 8002a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a8a:	4a04      	ldr	r2, [pc, #16]	; (8002a9c <__NVIC_SetPriorityGrouping+0x44>)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	60d3      	str	r3, [r2, #12]
}
 8002a90:	bf00      	nop
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa4:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	0a1b      	lsrs	r3, r3, #8
 8002aaa:	f003 0307 	and.w	r3, r3, #7
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	db0b      	blt.n	8002ae6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	f003 021f 	and.w	r2, r3, #31
 8002ad4:	4907      	ldr	r1, [pc, #28]	; (8002af4 <__NVIC_EnableIRQ+0x38>)
 8002ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	2001      	movs	r0, #1
 8002ade:	fa00 f202 	lsl.w	r2, r0, r2
 8002ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	e000e100 	.word	0xe000e100

08002af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	6039      	str	r1, [r7, #0]
 8002b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	db0a      	blt.n	8002b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	490c      	ldr	r1, [pc, #48]	; (8002b44 <__NVIC_SetPriority+0x4c>)
 8002b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b16:	0112      	lsls	r2, r2, #4
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b20:	e00a      	b.n	8002b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	4908      	ldr	r1, [pc, #32]	; (8002b48 <__NVIC_SetPriority+0x50>)
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	3b04      	subs	r3, #4
 8002b30:	0112      	lsls	r2, r2, #4
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	440b      	add	r3, r1
 8002b36:	761a      	strb	r2, [r3, #24]
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000e100 	.word	0xe000e100
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b089      	sub	sp, #36	; 0x24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f1c3 0307 	rsb	r3, r3, #7
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	bf28      	it	cs
 8002b6a:	2304      	movcs	r3, #4
 8002b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	3304      	adds	r3, #4
 8002b72:	2b06      	cmp	r3, #6
 8002b74:	d902      	bls.n	8002b7c <NVIC_EncodePriority+0x30>
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	3b03      	subs	r3, #3
 8002b7a:	e000      	b.n	8002b7e <NVIC_EncodePriority+0x32>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43da      	mvns	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	401a      	ands	r2, r3
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9e:	43d9      	mvns	r1, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba4:	4313      	orrs	r3, r2
         );
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3724      	adds	r7, #36	; 0x24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff ff4c 	bl	8002a58 <__NVIC_SetPriorityGrouping>
}
 8002bc0:	bf00      	nop
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
 8002bd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bda:	f7ff ff61 	bl	8002aa0 <__NVIC_GetPriorityGrouping>
 8002bde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	68b9      	ldr	r1, [r7, #8]
 8002be4:	6978      	ldr	r0, [r7, #20]
 8002be6:	f7ff ffb1 	bl	8002b4c <NVIC_EncodePriority>
 8002bea:	4602      	mov	r2, r0
 8002bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff ff80 	bl	8002af8 <__NVIC_SetPriority>
}
 8002bf8:	bf00      	nop
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff ff54 	bl	8002abc <__NVIC_EnableIRQ>
}
 8002c14:	bf00      	nop
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c28:	f7ff ff0a 	bl	8002a40 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e099      	b.n	8002d6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0201 	bic.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c58:	e00f      	b.n	8002c7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c5a:	f7ff fef1 	bl	8002a40 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b05      	cmp	r3, #5
 8002c66:	d908      	bls.n	8002c7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2203      	movs	r2, #3
 8002c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e078      	b.n	8002d6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1e8      	bne.n	8002c5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	4b38      	ldr	r3, [pc, #224]	; (8002d74 <HAL_DMA_Init+0x158>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ca6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d107      	bne.n	8002ce4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f023 0307 	bic.w	r3, r3, #7
 8002cfa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d117      	bne.n	8002d3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00e      	beq.n	8002d3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 fb01 	bl	8003328 <DMA_CheckFifoParam>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2240      	movs	r2, #64	; 0x40
 8002d30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e016      	b.n	8002d6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fab8 	bl	80032bc <DMA_CalcBaseAndBitshift>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d54:	223f      	movs	r2, #63	; 0x3f
 8002d56:	409a      	lsls	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	f010803f 	.word	0xf010803f

08002d78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
 8002d84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_DMA_Start_IT+0x26>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e040      	b.n	8002e20 <HAL_DMA_Start_IT+0xa8>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d12f      	bne.n	8002e12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2202      	movs	r2, #2
 8002db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 fa4a 	bl	8003260 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd0:	223f      	movs	r2, #63	; 0x3f
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0216 	orr.w	r2, r2, #22
 8002de6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d007      	beq.n	8002e00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0208 	orr.w	r2, r2, #8
 8002dfe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0201 	orr.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	e005      	b.n	8002e1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e36:	f7ff fe03 	bl	8002a40 <HAL_GetTick>
 8002e3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d008      	beq.n	8002e5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2280      	movs	r2, #128	; 0x80
 8002e4c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e052      	b.n	8002f00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0216 	bic.w	r2, r2, #22
 8002e68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695a      	ldr	r2, [r3, #20]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d103      	bne.n	8002e8a <HAL_DMA_Abort+0x62>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d007      	beq.n	8002e9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0208 	bic.w	r2, r2, #8
 8002e98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0201 	bic.w	r2, r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eaa:	e013      	b.n	8002ed4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eac:	f7ff fdc8 	bl	8002a40 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b05      	cmp	r3, #5
 8002eb8:	d90c      	bls.n	8002ed4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e015      	b.n	8002f00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1e4      	bne.n	8002eac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee6:	223f      	movs	r2, #63	; 0x3f
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d004      	beq.n	8002f26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2280      	movs	r2, #128	; 0x80
 8002f20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e00c      	b.n	8002f40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2205      	movs	r2, #5
 8002f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0201 	bic.w	r2, r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f58:	4b8e      	ldr	r3, [pc, #568]	; (8003194 <HAL_DMA_IRQHandler+0x248>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a8e      	ldr	r2, [pc, #568]	; (8003198 <HAL_DMA_IRQHandler+0x24c>)
 8002f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f62:	0a9b      	lsrs	r3, r3, #10
 8002f64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f76:	2208      	movs	r2, #8
 8002f78:	409a      	lsls	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d01a      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d013      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0204 	bic.w	r2, r2, #4
 8002f9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa4:	2208      	movs	r2, #8
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb0:	f043 0201 	orr.w	r2, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d012      	beq.n	8002fee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00b      	beq.n	8002fee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fda:	2201      	movs	r2, #1
 8002fdc:	409a      	lsls	r2, r3
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe6:	f043 0202 	orr.w	r2, r3, #2
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff2:	2204      	movs	r2, #4
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d012      	beq.n	8003024 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00b      	beq.n	8003024 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003010:	2204      	movs	r2, #4
 8003012:	409a      	lsls	r2, r3
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301c:	f043 0204 	orr.w	r2, r3, #4
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003028:	2210      	movs	r2, #16
 800302a:	409a      	lsls	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4013      	ands	r3, r2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d043      	beq.n	80030bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d03c      	beq.n	80030bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003046:	2210      	movs	r2, #16
 8003048:	409a      	lsls	r2, r3
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d018      	beq.n	800308e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d108      	bne.n	800307c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	2b00      	cmp	r3, #0
 8003070:	d024      	beq.n	80030bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	4798      	blx	r3
 800307a:	e01f      	b.n	80030bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003080:	2b00      	cmp	r3, #0
 8003082:	d01b      	beq.n	80030bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	4798      	blx	r3
 800308c:	e016      	b.n	80030bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003098:	2b00      	cmp	r3, #0
 800309a:	d107      	bne.n	80030ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0208 	bic.w	r2, r2, #8
 80030aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c0:	2220      	movs	r2, #32
 80030c2:	409a      	lsls	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 808f 	beq.w	80031ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 8087 	beq.w	80031ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e2:	2220      	movs	r2, #32
 80030e4:	409a      	lsls	r2, r3
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b05      	cmp	r3, #5
 80030f4:	d136      	bne.n	8003164 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0216 	bic.w	r2, r2, #22
 8003104:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695a      	ldr	r2, [r3, #20]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003114:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	2b00      	cmp	r3, #0
 800311c:	d103      	bne.n	8003126 <HAL_DMA_IRQHandler+0x1da>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003122:	2b00      	cmp	r3, #0
 8003124:	d007      	beq.n	8003136 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0208 	bic.w	r2, r2, #8
 8003134:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313a:	223f      	movs	r2, #63	; 0x3f
 800313c:	409a      	lsls	r2, r3
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003156:	2b00      	cmp	r3, #0
 8003158:	d07e      	beq.n	8003258 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	4798      	blx	r3
        }
        return;
 8003162:	e079      	b.n	8003258 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d01d      	beq.n	80031ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10d      	bne.n	800319c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003184:	2b00      	cmp	r3, #0
 8003186:	d031      	beq.n	80031ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	4798      	blx	r3
 8003190:	e02c      	b.n	80031ec <HAL_DMA_IRQHandler+0x2a0>
 8003192:	bf00      	nop
 8003194:	20000004 	.word	0x20000004
 8003198:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d023      	beq.n	80031ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	4798      	blx	r3
 80031ac:	e01e      	b.n	80031ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10f      	bne.n	80031dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0210 	bic.w	r2, r2, #16
 80031ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d032      	beq.n	800325a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d022      	beq.n	8003246 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2205      	movs	r2, #5
 8003204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0201 	bic.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	3301      	adds	r3, #1
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	429a      	cmp	r2, r3
 8003222:	d307      	bcc.n	8003234 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f2      	bne.n	8003218 <HAL_DMA_IRQHandler+0x2cc>
 8003232:	e000      	b.n	8003236 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003234:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	4798      	blx	r3
 8003256:	e000      	b.n	800325a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003258:	bf00      	nop
    }
  }
}
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
 800326c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800327c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2b40      	cmp	r3, #64	; 0x40
 800328c:	d108      	bne.n	80032a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800329e:	e007      	b.n	80032b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	60da      	str	r2, [r3, #12]
}
 80032b0:	bf00      	nop
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	3b10      	subs	r3, #16
 80032cc:	4a14      	ldr	r2, [pc, #80]	; (8003320 <DMA_CalcBaseAndBitshift+0x64>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	091b      	lsrs	r3, r3, #4
 80032d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032d6:	4a13      	ldr	r2, [pc, #76]	; (8003324 <DMA_CalcBaseAndBitshift+0x68>)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4413      	add	r3, r2
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	461a      	mov	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	d909      	bls.n	80032fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032f2:	f023 0303 	bic.w	r3, r3, #3
 80032f6:	1d1a      	adds	r2, r3, #4
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	659a      	str	r2, [r3, #88]	; 0x58
 80032fc:	e007      	b.n	800330e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003306:	f023 0303 	bic.w	r3, r3, #3
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003312:	4618      	mov	r0, r3
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	aaaaaaab 	.word	0xaaaaaaab
 8003324:	08016804 	.word	0x08016804

08003328 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003330:	2300      	movs	r3, #0
 8003332:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d11f      	bne.n	8003382 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b03      	cmp	r3, #3
 8003346:	d856      	bhi.n	80033f6 <DMA_CheckFifoParam+0xce>
 8003348:	a201      	add	r2, pc, #4	; (adr r2, 8003350 <DMA_CheckFifoParam+0x28>)
 800334a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334e:	bf00      	nop
 8003350:	08003361 	.word	0x08003361
 8003354:	08003373 	.word	0x08003373
 8003358:	08003361 	.word	0x08003361
 800335c:	080033f7 	.word	0x080033f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d046      	beq.n	80033fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003370:	e043      	b.n	80033fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003376:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800337a:	d140      	bne.n	80033fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003380:	e03d      	b.n	80033fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800338a:	d121      	bne.n	80033d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2b03      	cmp	r3, #3
 8003390:	d837      	bhi.n	8003402 <DMA_CheckFifoParam+0xda>
 8003392:	a201      	add	r2, pc, #4	; (adr r2, 8003398 <DMA_CheckFifoParam+0x70>)
 8003394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003398:	080033a9 	.word	0x080033a9
 800339c:	080033af 	.word	0x080033af
 80033a0:	080033a9 	.word	0x080033a9
 80033a4:	080033c1 	.word	0x080033c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
      break;
 80033ac:	e030      	b.n	8003410 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d025      	beq.n	8003406 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033be:	e022      	b.n	8003406 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033c8:	d11f      	bne.n	800340a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033ce:	e01c      	b.n	800340a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d903      	bls.n	80033de <DMA_CheckFifoParam+0xb6>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d003      	beq.n	80033e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033dc:	e018      	b.n	8003410 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	73fb      	strb	r3, [r7, #15]
      break;
 80033e2:	e015      	b.n	8003410 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00e      	beq.n	800340e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	73fb      	strb	r3, [r7, #15]
      break;
 80033f4:	e00b      	b.n	800340e <DMA_CheckFifoParam+0xe6>
      break;
 80033f6:	bf00      	nop
 80033f8:	e00a      	b.n	8003410 <DMA_CheckFifoParam+0xe8>
      break;
 80033fa:	bf00      	nop
 80033fc:	e008      	b.n	8003410 <DMA_CheckFifoParam+0xe8>
      break;
 80033fe:	bf00      	nop
 8003400:	e006      	b.n	8003410 <DMA_CheckFifoParam+0xe8>
      break;
 8003402:	bf00      	nop
 8003404:	e004      	b.n	8003410 <DMA_CheckFifoParam+0xe8>
      break;
 8003406:	bf00      	nop
 8003408:	e002      	b.n	8003410 <DMA_CheckFifoParam+0xe8>
      break;   
 800340a:	bf00      	nop
 800340c:	e000      	b.n	8003410 <DMA_CheckFifoParam+0xe8>
      break;
 800340e:	bf00      	nop
    }
  } 
  
  return status; 
 8003410:	7bfb      	ldrb	r3, [r7, #15]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop

08003420 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003420:	b480      	push	{r7}
 8003422:	b089      	sub	sp, #36	; 0x24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003432:	2300      	movs	r3, #0
 8003434:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
 800343a:	e165      	b.n	8003708 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800343c:	2201      	movs	r2, #1
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4013      	ands	r3, r2
 800344e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	429a      	cmp	r2, r3
 8003456:	f040 8154 	bne.w	8003702 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b01      	cmp	r3, #1
 8003464:	d005      	beq.n	8003472 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800346e:	2b02      	cmp	r3, #2
 8003470:	d130      	bne.n	80034d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	2203      	movs	r2, #3
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4013      	ands	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4313      	orrs	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034a8:	2201      	movs	r2, #1
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	091b      	lsrs	r3, r3, #4
 80034be:	f003 0201 	and.w	r2, r3, #1
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d017      	beq.n	8003510 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	2203      	movs	r2, #3
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 0303 	and.w	r3, r3, #3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d123      	bne.n	8003564 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	08da      	lsrs	r2, r3, #3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3208      	adds	r2, #8
 8003524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003528:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	220f      	movs	r2, #15
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	43db      	mvns	r3, r3
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4013      	ands	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4313      	orrs	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	08da      	lsrs	r2, r3, #3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3208      	adds	r2, #8
 800355e:	69b9      	ldr	r1, [r7, #24]
 8003560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	2203      	movs	r2, #3
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	43db      	mvns	r3, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4013      	ands	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f003 0203 	and.w	r2, r3, #3
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 80ae 	beq.w	8003702 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	4b5d      	ldr	r3, [pc, #372]	; (8003720 <HAL_GPIO_Init+0x300>)
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	4a5c      	ldr	r2, [pc, #368]	; (8003720 <HAL_GPIO_Init+0x300>)
 80035b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035b4:	6453      	str	r3, [r2, #68]	; 0x44
 80035b6:	4b5a      	ldr	r3, [pc, #360]	; (8003720 <HAL_GPIO_Init+0x300>)
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035c2:	4a58      	ldr	r2, [pc, #352]	; (8003724 <HAL_GPIO_Init+0x304>)
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	089b      	lsrs	r3, r3, #2
 80035c8:	3302      	adds	r3, #2
 80035ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	220f      	movs	r2, #15
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43db      	mvns	r3, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4013      	ands	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a4f      	ldr	r2, [pc, #316]	; (8003728 <HAL_GPIO_Init+0x308>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d025      	beq.n	800363a <HAL_GPIO_Init+0x21a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a4e      	ldr	r2, [pc, #312]	; (800372c <HAL_GPIO_Init+0x30c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d01f      	beq.n	8003636 <HAL_GPIO_Init+0x216>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a4d      	ldr	r2, [pc, #308]	; (8003730 <HAL_GPIO_Init+0x310>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d019      	beq.n	8003632 <HAL_GPIO_Init+0x212>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a4c      	ldr	r2, [pc, #304]	; (8003734 <HAL_GPIO_Init+0x314>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d013      	beq.n	800362e <HAL_GPIO_Init+0x20e>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a4b      	ldr	r2, [pc, #300]	; (8003738 <HAL_GPIO_Init+0x318>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00d      	beq.n	800362a <HAL_GPIO_Init+0x20a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a4a      	ldr	r2, [pc, #296]	; (800373c <HAL_GPIO_Init+0x31c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d007      	beq.n	8003626 <HAL_GPIO_Init+0x206>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a49      	ldr	r2, [pc, #292]	; (8003740 <HAL_GPIO_Init+0x320>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d101      	bne.n	8003622 <HAL_GPIO_Init+0x202>
 800361e:	2306      	movs	r3, #6
 8003620:	e00c      	b.n	800363c <HAL_GPIO_Init+0x21c>
 8003622:	2307      	movs	r3, #7
 8003624:	e00a      	b.n	800363c <HAL_GPIO_Init+0x21c>
 8003626:	2305      	movs	r3, #5
 8003628:	e008      	b.n	800363c <HAL_GPIO_Init+0x21c>
 800362a:	2304      	movs	r3, #4
 800362c:	e006      	b.n	800363c <HAL_GPIO_Init+0x21c>
 800362e:	2303      	movs	r3, #3
 8003630:	e004      	b.n	800363c <HAL_GPIO_Init+0x21c>
 8003632:	2302      	movs	r3, #2
 8003634:	e002      	b.n	800363c <HAL_GPIO_Init+0x21c>
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <HAL_GPIO_Init+0x21c>
 800363a:	2300      	movs	r3, #0
 800363c:	69fa      	ldr	r2, [r7, #28]
 800363e:	f002 0203 	and.w	r2, r2, #3
 8003642:	0092      	lsls	r2, r2, #2
 8003644:	4093      	lsls	r3, r2
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4313      	orrs	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800364c:	4935      	ldr	r1, [pc, #212]	; (8003724 <HAL_GPIO_Init+0x304>)
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	089b      	lsrs	r3, r3, #2
 8003652:	3302      	adds	r3, #2
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800365a:	4b3a      	ldr	r3, [pc, #232]	; (8003744 <HAL_GPIO_Init+0x324>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	43db      	mvns	r3, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4013      	ands	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800367e:	4a31      	ldr	r2, [pc, #196]	; (8003744 <HAL_GPIO_Init+0x324>)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003684:	4b2f      	ldr	r3, [pc, #188]	; (8003744 <HAL_GPIO_Init+0x324>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	43db      	mvns	r3, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036a8:	4a26      	ldr	r2, [pc, #152]	; (8003744 <HAL_GPIO_Init+0x324>)
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036ae:	4b25      	ldr	r3, [pc, #148]	; (8003744 <HAL_GPIO_Init+0x324>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	43db      	mvns	r3, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4013      	ands	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036d2:	4a1c      	ldr	r2, [pc, #112]	; (8003744 <HAL_GPIO_Init+0x324>)
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036d8:	4b1a      	ldr	r3, [pc, #104]	; (8003744 <HAL_GPIO_Init+0x324>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	43db      	mvns	r3, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4013      	ands	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036fc:	4a11      	ldr	r2, [pc, #68]	; (8003744 <HAL_GPIO_Init+0x324>)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	3301      	adds	r3, #1
 8003706:	61fb      	str	r3, [r7, #28]
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	2b0f      	cmp	r3, #15
 800370c:	f67f ae96 	bls.w	800343c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003710:	bf00      	nop
 8003712:	bf00      	nop
 8003714:	3724      	adds	r7, #36	; 0x24
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40023800 	.word	0x40023800
 8003724:	40013800 	.word	0x40013800
 8003728:	40020000 	.word	0x40020000
 800372c:	40020400 	.word	0x40020400
 8003730:	40020800 	.word	0x40020800
 8003734:	40020c00 	.word	0x40020c00
 8003738:	40021000 	.word	0x40021000
 800373c:	40021400 	.word	0x40021400
 8003740:	40021800 	.word	0x40021800
 8003744:	40013c00 	.word	0x40013c00

08003748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	807b      	strh	r3, [r7, #2]
 8003754:	4613      	mov	r3, r2
 8003756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003758:	787b      	ldrb	r3, [r7, #1]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800375e:	887a      	ldrh	r2, [r7, #2]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003764:	e003      	b.n	800376e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003766:	887b      	ldrh	r3, [r7, #2]
 8003768:	041a      	lsls	r2, r3, #16
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	619a      	str	r2, [r3, #24]
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800377a:	b480      	push	{r7}
 800377c:	b085      	sub	sp, #20
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
 8003782:	460b      	mov	r3, r1
 8003784:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800378c:	887a      	ldrh	r2, [r7, #2]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4013      	ands	r3, r2
 8003792:	041a      	lsls	r2, r3, #16
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	43d9      	mvns	r1, r3
 8003798:	887b      	ldrh	r3, [r7, #2]
 800379a:	400b      	ands	r3, r1
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	619a      	str	r2, [r3, #24]
}
 80037a2:	bf00      	nop
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
	...

080037b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	603b      	str	r3, [r7, #0]
 80037be:	4b20      	ldr	r3, [pc, #128]	; (8003840 <HAL_PWREx_EnableOverDrive+0x90>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	4a1f      	ldr	r2, [pc, #124]	; (8003840 <HAL_PWREx_EnableOverDrive+0x90>)
 80037c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ca:	4b1d      	ldr	r3, [pc, #116]	; (8003840 <HAL_PWREx_EnableOverDrive+0x90>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80037d6:	4b1b      	ldr	r3, [pc, #108]	; (8003844 <HAL_PWREx_EnableOverDrive+0x94>)
 80037d8:	2201      	movs	r2, #1
 80037da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037dc:	f7ff f930 	bl	8002a40 <HAL_GetTick>
 80037e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037e2:	e009      	b.n	80037f8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037e4:	f7ff f92c 	bl	8002a40 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037f2:	d901      	bls.n	80037f8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e01f      	b.n	8003838 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037f8:	4b13      	ldr	r3, [pc, #76]	; (8003848 <HAL_PWREx_EnableOverDrive+0x98>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003804:	d1ee      	bne.n	80037e4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003806:	4b11      	ldr	r3, [pc, #68]	; (800384c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003808:	2201      	movs	r2, #1
 800380a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800380c:	f7ff f918 	bl	8002a40 <HAL_GetTick>
 8003810:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003812:	e009      	b.n	8003828 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003814:	f7ff f914 	bl	8002a40 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003822:	d901      	bls.n	8003828 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e007      	b.n	8003838 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003828:	4b07      	ldr	r3, [pc, #28]	; (8003848 <HAL_PWREx_EnableOverDrive+0x98>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003830:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003834:	d1ee      	bne.n	8003814 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40023800 	.word	0x40023800
 8003844:	420e0040 	.word	0x420e0040
 8003848:	40007000 	.word	0x40007000
 800384c:	420e0044 	.word	0x420e0044

08003850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0cc      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003864:	4b68      	ldr	r3, [pc, #416]	; (8003a08 <HAL_RCC_ClockConfig+0x1b8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 030f 	and.w	r3, r3, #15
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d90c      	bls.n	800388c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003872:	4b65      	ldr	r3, [pc, #404]	; (8003a08 <HAL_RCC_ClockConfig+0x1b8>)
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800387a:	4b63      	ldr	r3, [pc, #396]	; (8003a08 <HAL_RCC_ClockConfig+0x1b8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d001      	beq.n	800388c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0b8      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d020      	beq.n	80038da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038a4:	4b59      	ldr	r3, [pc, #356]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	4a58      	ldr	r2, [pc, #352]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038bc:	4b53      	ldr	r3, [pc, #332]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	4a52      	ldr	r2, [pc, #328]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038c8:	4b50      	ldr	r3, [pc, #320]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	494d      	ldr	r1, [pc, #308]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d044      	beq.n	8003970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d107      	bne.n	80038fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ee:	4b47      	ldr	r3, [pc, #284]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d119      	bne.n	800392e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e07f      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d003      	beq.n	800390e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800390a:	2b03      	cmp	r3, #3
 800390c:	d107      	bne.n	800391e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390e:	4b3f      	ldr	r3, [pc, #252]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d109      	bne.n	800392e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e06f      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391e:	4b3b      	ldr	r3, [pc, #236]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e067      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800392e:	4b37      	ldr	r3, [pc, #220]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f023 0203 	bic.w	r2, r3, #3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4934      	ldr	r1, [pc, #208]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 800393c:	4313      	orrs	r3, r2
 800393e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003940:	f7ff f87e 	bl	8002a40 <HAL_GetTick>
 8003944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	e00a      	b.n	800395e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003948:	f7ff f87a 	bl	8002a40 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	f241 3288 	movw	r2, #5000	; 0x1388
 8003956:	4293      	cmp	r3, r2
 8003958:	d901      	bls.n	800395e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e04f      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395e:	4b2b      	ldr	r3, [pc, #172]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 020c 	and.w	r2, r3, #12
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	429a      	cmp	r2, r3
 800396e:	d1eb      	bne.n	8003948 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003970:	4b25      	ldr	r3, [pc, #148]	; (8003a08 <HAL_RCC_ClockConfig+0x1b8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 030f 	and.w	r3, r3, #15
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d20c      	bcs.n	8003998 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397e:	4b22      	ldr	r3, [pc, #136]	; (8003a08 <HAL_RCC_ClockConfig+0x1b8>)
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003986:	4b20      	ldr	r3, [pc, #128]	; (8003a08 <HAL_RCC_ClockConfig+0x1b8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d001      	beq.n	8003998 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e032      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d008      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a4:	4b19      	ldr	r3, [pc, #100]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4916      	ldr	r1, [pc, #88]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d009      	beq.n	80039d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039c2:	4b12      	ldr	r3, [pc, #72]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	490e      	ldr	r1, [pc, #56]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039d6:	f000 f887 	bl	8003ae8 <HAL_RCC_GetSysClockFreq>
 80039da:	4602      	mov	r2, r0
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	091b      	lsrs	r3, r3, #4
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	490a      	ldr	r1, [pc, #40]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 80039e8:	5ccb      	ldrb	r3, [r1, r3]
 80039ea:	fa22 f303 	lsr.w	r3, r2, r3
 80039ee:	4a09      	ldr	r2, [pc, #36]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80039f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039f2:	4b09      	ldr	r3, [pc, #36]	; (8003a18 <HAL_RCC_ClockConfig+0x1c8>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fe fbee 	bl	80021d8 <HAL_InitTick>

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40023c00 	.word	0x40023c00
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	080167ec 	.word	0x080167ec
 8003a14:	20000004 	.word	0x20000004
 8003a18:	20000008 	.word	0x20000008

08003a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a20:	4b03      	ldr	r3, [pc, #12]	; (8003a30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a22:	681b      	ldr	r3, [r3, #0]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	20000004 	.word	0x20000004

08003a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a38:	f7ff fff0 	bl	8003a1c <HAL_RCC_GetHCLKFreq>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	0a9b      	lsrs	r3, r3, #10
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	4903      	ldr	r1, [pc, #12]	; (8003a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a4a:	5ccb      	ldrb	r3, [r1, r3]
 8003a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40023800 	.word	0x40023800
 8003a58:	080167fc 	.word	0x080167fc

08003a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a60:	f7ff ffdc 	bl	8003a1c <HAL_RCC_GetHCLKFreq>
 8003a64:	4602      	mov	r2, r0
 8003a66:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	0b5b      	lsrs	r3, r3, #13
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	4903      	ldr	r1, [pc, #12]	; (8003a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a72:	5ccb      	ldrb	r3, [r1, r3]
 8003a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	080167fc 	.word	0x080167fc

08003a84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	220f      	movs	r2, #15
 8003a92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a94:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f003 0203 	and.w	r2, r3, #3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003aa0:	4b0f      	ldr	r3, [pc, #60]	; (8003ae0 <HAL_RCC_GetClockConfig+0x5c>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003aac:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <HAL_RCC_GetClockConfig+0x5c>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ab8:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <HAL_RCC_GetClockConfig+0x5c>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	08db      	lsrs	r3, r3, #3
 8003abe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ac6:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <HAL_RCC_GetClockConfig+0x60>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 020f 	and.w	r2, r3, #15
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	601a      	str	r2, [r3, #0]
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	40023c00 	.word	0x40023c00

08003ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aec:	b0a6      	sub	sp, #152	; 0x98
 8003aee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b0e:	4bc8      	ldr	r3, [pc, #800]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
 8003b16:	2b0c      	cmp	r3, #12
 8003b18:	f200 817e 	bhi.w	8003e18 <HAL_RCC_GetSysClockFreq+0x330>
 8003b1c:	a201      	add	r2, pc, #4	; (adr r2, 8003b24 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b22:	bf00      	nop
 8003b24:	08003b59 	.word	0x08003b59
 8003b28:	08003e19 	.word	0x08003e19
 8003b2c:	08003e19 	.word	0x08003e19
 8003b30:	08003e19 	.word	0x08003e19
 8003b34:	08003b61 	.word	0x08003b61
 8003b38:	08003e19 	.word	0x08003e19
 8003b3c:	08003e19 	.word	0x08003e19
 8003b40:	08003e19 	.word	0x08003e19
 8003b44:	08003b69 	.word	0x08003b69
 8003b48:	08003e19 	.word	0x08003e19
 8003b4c:	08003e19 	.word	0x08003e19
 8003b50:	08003e19 	.word	0x08003e19
 8003b54:	08003cd3 	.word	0x08003cd3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b58:	4bb6      	ldr	r3, [pc, #728]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003b5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003b5e:	e15f      	b.n	8003e20 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b60:	4bb5      	ldr	r3, [pc, #724]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x350>)
 8003b62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003b66:	e15b      	b.n	8003e20 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b68:	4bb1      	ldr	r3, [pc, #708]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b74:	4bae      	ldr	r3, [pc, #696]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d031      	beq.n	8003be4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b80:	4bab      	ldr	r3, [pc, #684]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	099b      	lsrs	r3, r3, #6
 8003b86:	2200      	movs	r2, #0
 8003b88:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b92:	663b      	str	r3, [r7, #96]	; 0x60
 8003b94:	2300      	movs	r3, #0
 8003b96:	667b      	str	r3, [r7, #100]	; 0x64
 8003b98:	4ba7      	ldr	r3, [pc, #668]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x350>)
 8003b9a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003b9e:	462a      	mov	r2, r5
 8003ba0:	fb03 f202 	mul.w	r2, r3, r2
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	4621      	mov	r1, r4
 8003ba8:	fb01 f303 	mul.w	r3, r1, r3
 8003bac:	4413      	add	r3, r2
 8003bae:	4aa2      	ldr	r2, [pc, #648]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x350>)
 8003bb0:	4621      	mov	r1, r4
 8003bb2:	fba1 1202 	umull	r1, r2, r1, r2
 8003bb6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003bb8:	460a      	mov	r2, r1
 8003bba:	67ba      	str	r2, [r7, #120]	; 0x78
 8003bbc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003bbe:	4413      	add	r3, r2
 8003bc0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bca:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003bcc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bd0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003bd4:	f7fd f812 	bl	8000bfc <__aeabi_uldivmod>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4613      	mov	r3, r2
 8003bde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003be2:	e064      	b.n	8003cae <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003be4:	4b92      	ldr	r3, [pc, #584]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x348>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	099b      	lsrs	r3, r3, #6
 8003bea:	2200      	movs	r2, #0
 8003bec:	653b      	str	r3, [r7, #80]	; 0x50
 8003bee:	657a      	str	r2, [r7, #84]	; 0x54
 8003bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bfc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003c00:	4622      	mov	r2, r4
 8003c02:	462b      	mov	r3, r5
 8003c04:	f04f 0000 	mov.w	r0, #0
 8003c08:	f04f 0100 	mov.w	r1, #0
 8003c0c:	0159      	lsls	r1, r3, #5
 8003c0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c12:	0150      	lsls	r0, r2, #5
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	4621      	mov	r1, r4
 8003c1a:	1a51      	subs	r1, r2, r1
 8003c1c:	6139      	str	r1, [r7, #16]
 8003c1e:	4629      	mov	r1, r5
 8003c20:	eb63 0301 	sbc.w	r3, r3, r1
 8003c24:	617b      	str	r3, [r7, #20]
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c32:	4659      	mov	r1, fp
 8003c34:	018b      	lsls	r3, r1, #6
 8003c36:	4651      	mov	r1, sl
 8003c38:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c3c:	4651      	mov	r1, sl
 8003c3e:	018a      	lsls	r2, r1, #6
 8003c40:	4651      	mov	r1, sl
 8003c42:	ebb2 0801 	subs.w	r8, r2, r1
 8003c46:	4659      	mov	r1, fp
 8003c48:	eb63 0901 	sbc.w	r9, r3, r1
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c5c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c60:	4690      	mov	r8, r2
 8003c62:	4699      	mov	r9, r3
 8003c64:	4623      	mov	r3, r4
 8003c66:	eb18 0303 	adds.w	r3, r8, r3
 8003c6a:	60bb      	str	r3, [r7, #8]
 8003c6c:	462b      	mov	r3, r5
 8003c6e:	eb49 0303 	adc.w	r3, r9, r3
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	f04f 0300 	mov.w	r3, #0
 8003c7c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c80:	4629      	mov	r1, r5
 8003c82:	028b      	lsls	r3, r1, #10
 8003c84:	4621      	mov	r1, r4
 8003c86:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c8a:	4621      	mov	r1, r4
 8003c8c:	028a      	lsls	r2, r1, #10
 8003c8e:	4610      	mov	r0, r2
 8003c90:	4619      	mov	r1, r3
 8003c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c96:	2200      	movs	r2, #0
 8003c98:	643b      	str	r3, [r7, #64]	; 0x40
 8003c9a:	647a      	str	r2, [r7, #68]	; 0x44
 8003c9c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ca0:	f7fc ffac 	bl	8000bfc <__aeabi_uldivmod>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4613      	mov	r3, r2
 8003caa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cae:	4b60      	ldr	r3, [pc, #384]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	0c1b      	lsrs	r3, r3, #16
 8003cb4:	f003 0303 	and.w	r3, r3, #3
 8003cb8:	3301      	adds	r3, #1
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003cc0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003cc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ccc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003cd0:	e0a6      	b.n	8003e20 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cd2:	4b57      	ldr	r3, [pc, #348]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cde:	4b54      	ldr	r3, [pc, #336]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x348>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d02a      	beq.n	8003d40 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cea:	4b51      	ldr	r3, [pc, #324]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	099b      	lsrs	r3, r3, #6
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cf4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	4b4e      	ldr	r3, [pc, #312]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x350>)
 8003d00:	fb03 f201 	mul.w	r2, r3, r1
 8003d04:	2300      	movs	r3, #0
 8003d06:	fb00 f303 	mul.w	r3, r0, r3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	4a4a      	ldr	r2, [pc, #296]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x350>)
 8003d0e:	fba0 1202 	umull	r1, r2, r0, r2
 8003d12:	677a      	str	r2, [r7, #116]	; 0x74
 8003d14:	460a      	mov	r2, r1
 8003d16:	673a      	str	r2, [r7, #112]	; 0x70
 8003d18:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003d1a:	4413      	add	r3, r2
 8003d1c:	677b      	str	r3, [r7, #116]	; 0x74
 8003d1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d22:	2200      	movs	r2, #0
 8003d24:	633b      	str	r3, [r7, #48]	; 0x30
 8003d26:	637a      	str	r2, [r7, #52]	; 0x34
 8003d28:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d2c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003d30:	f7fc ff64 	bl	8000bfc <__aeabi_uldivmod>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4613      	mov	r3, r2
 8003d3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d3e:	e05b      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d40:	4b3b      	ldr	r3, [pc, #236]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	099b      	lsrs	r3, r3, #6
 8003d46:	2200      	movs	r2, #0
 8003d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d52:	623b      	str	r3, [r7, #32]
 8003d54:	2300      	movs	r3, #0
 8003d56:	627b      	str	r3, [r7, #36]	; 0x24
 8003d58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d5c:	4642      	mov	r2, r8
 8003d5e:	464b      	mov	r3, r9
 8003d60:	f04f 0000 	mov.w	r0, #0
 8003d64:	f04f 0100 	mov.w	r1, #0
 8003d68:	0159      	lsls	r1, r3, #5
 8003d6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d6e:	0150      	lsls	r0, r2, #5
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4641      	mov	r1, r8
 8003d76:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d7a:	4649      	mov	r1, r9
 8003d7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	f04f 0300 	mov.w	r3, #0
 8003d88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d94:	ebb2 040a 	subs.w	r4, r2, sl
 8003d98:	eb63 050b 	sbc.w	r5, r3, fp
 8003d9c:	f04f 0200 	mov.w	r2, #0
 8003da0:	f04f 0300 	mov.w	r3, #0
 8003da4:	00eb      	lsls	r3, r5, #3
 8003da6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003daa:	00e2      	lsls	r2, r4, #3
 8003dac:	4614      	mov	r4, r2
 8003dae:	461d      	mov	r5, r3
 8003db0:	4643      	mov	r3, r8
 8003db2:	18e3      	adds	r3, r4, r3
 8003db4:	603b      	str	r3, [r7, #0]
 8003db6:	464b      	mov	r3, r9
 8003db8:	eb45 0303 	adc.w	r3, r5, r3
 8003dbc:	607b      	str	r3, [r7, #4]
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dca:	4629      	mov	r1, r5
 8003dcc:	028b      	lsls	r3, r1, #10
 8003dce:	4621      	mov	r1, r4
 8003dd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dd4:	4621      	mov	r1, r4
 8003dd6:	028a      	lsls	r2, r1, #10
 8003dd8:	4610      	mov	r0, r2
 8003dda:	4619      	mov	r1, r3
 8003ddc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003de0:	2200      	movs	r2, #0
 8003de2:	61bb      	str	r3, [r7, #24]
 8003de4:	61fa      	str	r2, [r7, #28]
 8003de6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dea:	f7fc ff07 	bl	8000bfc <__aeabi_uldivmod>
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	4613      	mov	r3, r2
 8003df4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003df8:	4b0d      	ldr	r3, [pc, #52]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x348>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	0f1b      	lsrs	r3, r3, #28
 8003dfe:	f003 0307 	and.w	r3, r3, #7
 8003e02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8003e06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003e16:	e003      	b.n	8003e20 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e18:	4b06      	ldr	r3, [pc, #24]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003e1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003e1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3798      	adds	r7, #152	; 0x98
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e2e:	bf00      	nop
 8003e30:	40023800 	.word	0x40023800
 8003e34:	00f42400 	.word	0x00f42400
 8003e38:	017d7840 	.word	0x017d7840

08003e3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e28d      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 8083 	beq.w	8003f62 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e5c:	4b94      	ldr	r3, [pc, #592]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 030c 	and.w	r3, r3, #12
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d019      	beq.n	8003e9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e68:	4b91      	ldr	r3, [pc, #580]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d106      	bne.n	8003e82 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e74:	4b8e      	ldr	r3, [pc, #568]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e80:	d00c      	beq.n	8003e9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e82:	4b8b      	ldr	r3, [pc, #556]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e8a:	2b0c      	cmp	r3, #12
 8003e8c:	d112      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e8e:	4b88      	ldr	r3, [pc, #544]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e9a:	d10b      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e9c:	4b84      	ldr	r3, [pc, #528]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d05b      	beq.n	8003f60 <HAL_RCC_OscConfig+0x124>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d157      	bne.n	8003f60 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e25a      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ebc:	d106      	bne.n	8003ecc <HAL_RCC_OscConfig+0x90>
 8003ebe:	4b7c      	ldr	r3, [pc, #496]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a7b      	ldr	r2, [pc, #492]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	e01d      	b.n	8003f08 <HAL_RCC_OscConfig+0xcc>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ed4:	d10c      	bne.n	8003ef0 <HAL_RCC_OscConfig+0xb4>
 8003ed6:	4b76      	ldr	r3, [pc, #472]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a75      	ldr	r2, [pc, #468]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	4b73      	ldr	r3, [pc, #460]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a72      	ldr	r2, [pc, #456]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	e00b      	b.n	8003f08 <HAL_RCC_OscConfig+0xcc>
 8003ef0:	4b6f      	ldr	r3, [pc, #444]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a6e      	ldr	r2, [pc, #440]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003efa:	6013      	str	r3, [r2, #0]
 8003efc:	4b6c      	ldr	r3, [pc, #432]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a6b      	ldr	r2, [pc, #428]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d013      	beq.n	8003f38 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f10:	f7fe fd96 	bl	8002a40 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f18:	f7fe fd92 	bl	8002a40 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b64      	cmp	r3, #100	; 0x64
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e21f      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2a:	4b61      	ldr	r3, [pc, #388]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_RCC_OscConfig+0xdc>
 8003f36:	e014      	b.n	8003f62 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f38:	f7fe fd82 	bl	8002a40 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f40:	f7fe fd7e 	bl	8002a40 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b64      	cmp	r3, #100	; 0x64
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e20b      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f52:	4b57      	ldr	r3, [pc, #348]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f0      	bne.n	8003f40 <HAL_RCC_OscConfig+0x104>
 8003f5e:	e000      	b.n	8003f62 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d06f      	beq.n	800404e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f6e:	4b50      	ldr	r3, [pc, #320]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 030c 	and.w	r3, r3, #12
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d017      	beq.n	8003faa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f7a:	4b4d      	ldr	r3, [pc, #308]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d105      	bne.n	8003f92 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f86:	4b4a      	ldr	r3, [pc, #296]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00b      	beq.n	8003faa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f92:	4b47      	ldr	r3, [pc, #284]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f9a:	2b0c      	cmp	r3, #12
 8003f9c:	d11c      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f9e:	4b44      	ldr	r3, [pc, #272]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d116      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003faa:	4b41      	ldr	r3, [pc, #260]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d005      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x186>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d001      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e1d3      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc2:	4b3b      	ldr	r3, [pc, #236]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	4937      	ldr	r1, [pc, #220]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fd6:	e03a      	b.n	800404e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d020      	beq.n	8004022 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fe0:	4b34      	ldr	r3, [pc, #208]	; (80040b4 <HAL_RCC_OscConfig+0x278>)
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe6:	f7fe fd2b 	bl	8002a40 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fee:	f7fe fd27 	bl	8002a40 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e1b4      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004000:	4b2b      	ldr	r3, [pc, #172]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0f0      	beq.n	8003fee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800400c:	4b28      	ldr	r3, [pc, #160]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	4925      	ldr	r1, [pc, #148]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 800401c:	4313      	orrs	r3, r2
 800401e:	600b      	str	r3, [r1, #0]
 8004020:	e015      	b.n	800404e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004022:	4b24      	ldr	r3, [pc, #144]	; (80040b4 <HAL_RCC_OscConfig+0x278>)
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fe fd0a 	bl	8002a40 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004030:	f7fe fd06 	bl	8002a40 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e193      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004042:	4b1b      	ldr	r3, [pc, #108]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	d036      	beq.n	80040c8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d016      	beq.n	8004090 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004062:	4b15      	ldr	r3, [pc, #84]	; (80040b8 <HAL_RCC_OscConfig+0x27c>)
 8004064:	2201      	movs	r2, #1
 8004066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004068:	f7fe fcea 	bl	8002a40 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004070:	f7fe fce6 	bl	8002a40 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e173      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004082:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8004084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0x234>
 800408e:	e01b      	b.n	80040c8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004090:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <HAL_RCC_OscConfig+0x27c>)
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004096:	f7fe fcd3 	bl	8002a40 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800409c:	e00e      	b.n	80040bc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800409e:	f7fe fccf 	bl	8002a40 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d907      	bls.n	80040bc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e15c      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
 80040b0:	40023800 	.word	0x40023800
 80040b4:	42470000 	.word	0x42470000
 80040b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040bc:	4b8a      	ldr	r3, [pc, #552]	; (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 80040be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1ea      	bne.n	800409e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 8097 	beq.w	8004204 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040d6:	2300      	movs	r3, #0
 80040d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040da:	4b83      	ldr	r3, [pc, #524]	; (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10f      	bne.n	8004106 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	4b7f      	ldr	r3, [pc, #508]	; (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	4a7e      	ldr	r2, [pc, #504]	; (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 80040f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f4:	6413      	str	r3, [r2, #64]	; 0x40
 80040f6:	4b7c      	ldr	r3, [pc, #496]	; (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fe:	60bb      	str	r3, [r7, #8]
 8004100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004102:	2301      	movs	r3, #1
 8004104:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004106:	4b79      	ldr	r3, [pc, #484]	; (80042ec <HAL_RCC_OscConfig+0x4b0>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410e:	2b00      	cmp	r3, #0
 8004110:	d118      	bne.n	8004144 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004112:	4b76      	ldr	r3, [pc, #472]	; (80042ec <HAL_RCC_OscConfig+0x4b0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a75      	ldr	r2, [pc, #468]	; (80042ec <HAL_RCC_OscConfig+0x4b0>)
 8004118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800411c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800411e:	f7fe fc8f 	bl	8002a40 <HAL_GetTick>
 8004122:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004124:	e008      	b.n	8004138 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004126:	f7fe fc8b 	bl	8002a40 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b02      	cmp	r3, #2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e118      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004138:	4b6c      	ldr	r3, [pc, #432]	; (80042ec <HAL_RCC_OscConfig+0x4b0>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0f0      	beq.n	8004126 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d106      	bne.n	800415a <HAL_RCC_OscConfig+0x31e>
 800414c:	4b66      	ldr	r3, [pc, #408]	; (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 800414e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004150:	4a65      	ldr	r2, [pc, #404]	; (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 8004152:	f043 0301 	orr.w	r3, r3, #1
 8004156:	6713      	str	r3, [r2, #112]	; 0x70
 8004158:	e01c      	b.n	8004194 <HAL_RCC_OscConfig+0x358>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	2b05      	cmp	r3, #5
 8004160:	d10c      	bne.n	800417c <HAL_RCC_OscConfig+0x340>
 8004162:	4b61      	ldr	r3, [pc, #388]	; (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 8004164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004166:	4a60      	ldr	r2, [pc, #384]	; (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 8004168:	f043 0304 	orr.w	r3, r3, #4
 800416c:	6713      	str	r3, [r2, #112]	; 0x70
 800416e:	4b5e      	ldr	r3, [pc, #376]	; (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 8004170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004172:	4a5d      	ldr	r2, [pc, #372]	; (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	6713      	str	r3, [r2, #112]	; 0x70
 800417a:	e00b      	b.n	8004194 <HAL_RCC_OscConfig+0x358>
 800417c:	4b5a      	ldr	r3, [pc, #360]	; (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 800417e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004180:	4a59      	ldr	r2, [pc, #356]	; (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 8004182:	f023 0301 	bic.w	r3, r3, #1
 8004186:	6713      	str	r3, [r2, #112]	; 0x70
 8004188:	4b57      	ldr	r3, [pc, #348]	; (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 800418a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418c:	4a56      	ldr	r2, [pc, #344]	; (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 800418e:	f023 0304 	bic.w	r3, r3, #4
 8004192:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d015      	beq.n	80041c8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419c:	f7fe fc50 	bl	8002a40 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a2:	e00a      	b.n	80041ba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041a4:	f7fe fc4c 	bl	8002a40 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e0d7      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ba:	4b4b      	ldr	r3, [pc, #300]	; (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 80041bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0ee      	beq.n	80041a4 <HAL_RCC_OscConfig+0x368>
 80041c6:	e014      	b.n	80041f2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c8:	f7fe fc3a 	bl	8002a40 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ce:	e00a      	b.n	80041e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041d0:	f7fe fc36 	bl	8002a40 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	f241 3288 	movw	r2, #5000	; 0x1388
 80041de:	4293      	cmp	r3, r2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e0c1      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e6:	4b40      	ldr	r3, [pc, #256]	; (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 80041e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1ee      	bne.n	80041d0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041f2:	7dfb      	ldrb	r3, [r7, #23]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d105      	bne.n	8004204 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f8:	4b3b      	ldr	r3, [pc, #236]	; (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	4a3a      	ldr	r2, [pc, #232]	; (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 80041fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004202:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 80ad 	beq.w	8004368 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800420e:	4b36      	ldr	r3, [pc, #216]	; (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 030c 	and.w	r3, r3, #12
 8004216:	2b08      	cmp	r3, #8
 8004218:	d060      	beq.n	80042dc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d145      	bne.n	80042ae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004222:	4b33      	ldr	r3, [pc, #204]	; (80042f0 <HAL_RCC_OscConfig+0x4b4>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004228:	f7fe fc0a 	bl	8002a40 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004230:	f7fe fc06 	bl	8002a40 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e093      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004242:	4b29      	ldr	r3, [pc, #164]	; (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f0      	bne.n	8004230 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69da      	ldr	r2, [r3, #28]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	019b      	lsls	r3, r3, #6
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004264:	085b      	lsrs	r3, r3, #1
 8004266:	3b01      	subs	r3, #1
 8004268:	041b      	lsls	r3, r3, #16
 800426a:	431a      	orrs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004270:	061b      	lsls	r3, r3, #24
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004278:	071b      	lsls	r3, r3, #28
 800427a:	491b      	ldr	r1, [pc, #108]	; (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 800427c:	4313      	orrs	r3, r2
 800427e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004280:	4b1b      	ldr	r3, [pc, #108]	; (80042f0 <HAL_RCC_OscConfig+0x4b4>)
 8004282:	2201      	movs	r2, #1
 8004284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004286:	f7fe fbdb 	bl	8002a40 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800428e:	f7fe fbd7 	bl	8002a40 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e064      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042a0:	4b11      	ldr	r3, [pc, #68]	; (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0f0      	beq.n	800428e <HAL_RCC_OscConfig+0x452>
 80042ac:	e05c      	b.n	8004368 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ae:	4b10      	ldr	r3, [pc, #64]	; (80042f0 <HAL_RCC_OscConfig+0x4b4>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b4:	f7fe fbc4 	bl	8002a40 <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042bc:	f7fe fbc0 	bl	8002a40 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e04d      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ce:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1f0      	bne.n	80042bc <HAL_RCC_OscConfig+0x480>
 80042da:	e045      	b.n	8004368 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d107      	bne.n	80042f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e040      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
 80042e8:	40023800 	.word	0x40023800
 80042ec:	40007000 	.word	0x40007000
 80042f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042f4:	4b1f      	ldr	r3, [pc, #124]	; (8004374 <HAL_RCC_OscConfig+0x538>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d030      	beq.n	8004364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800430c:	429a      	cmp	r2, r3
 800430e:	d129      	bne.n	8004364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800431a:	429a      	cmp	r2, r3
 800431c:	d122      	bne.n	8004364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004324:	4013      	ands	r3, r2
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800432a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800432c:	4293      	cmp	r3, r2
 800432e:	d119      	bne.n	8004364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433a:	085b      	lsrs	r3, r3, #1
 800433c:	3b01      	subs	r3, #1
 800433e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004340:	429a      	cmp	r2, r3
 8004342:	d10f      	bne.n	8004364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004350:	429a      	cmp	r2, r3
 8004352:	d107      	bne.n	8004364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004360:	429a      	cmp	r2, r3
 8004362:	d001      	beq.n	8004368 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e000      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	40023800 	.word	0x40023800

08004378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e041      	b.n	800440e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d106      	bne.n	80043a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fe f9aa 	bl	80026f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3304      	adds	r3, #4
 80043b4:	4619      	mov	r1, r3
 80043b6:	4610      	mov	r0, r2
 80043b8:	f000 fa96 	bl	80048e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b01      	cmp	r3, #1
 800442a:	d001      	beq.n	8004430 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e04e      	b.n	80044ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68da      	ldr	r2, [r3, #12]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 0201 	orr.w	r2, r2, #1
 8004446:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a23      	ldr	r2, [pc, #140]	; (80044dc <HAL_TIM_Base_Start_IT+0xc4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d022      	beq.n	8004498 <HAL_TIM_Base_Start_IT+0x80>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445a:	d01d      	beq.n	8004498 <HAL_TIM_Base_Start_IT+0x80>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a1f      	ldr	r2, [pc, #124]	; (80044e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d018      	beq.n	8004498 <HAL_TIM_Base_Start_IT+0x80>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a1e      	ldr	r2, [pc, #120]	; (80044e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d013      	beq.n	8004498 <HAL_TIM_Base_Start_IT+0x80>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a1c      	ldr	r2, [pc, #112]	; (80044e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d00e      	beq.n	8004498 <HAL_TIM_Base_Start_IT+0x80>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a1b      	ldr	r2, [pc, #108]	; (80044ec <HAL_TIM_Base_Start_IT+0xd4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d009      	beq.n	8004498 <HAL_TIM_Base_Start_IT+0x80>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a19      	ldr	r2, [pc, #100]	; (80044f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d004      	beq.n	8004498 <HAL_TIM_Base_Start_IT+0x80>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a18      	ldr	r2, [pc, #96]	; (80044f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d111      	bne.n	80044bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b06      	cmp	r3, #6
 80044a8:	d010      	beq.n	80044cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f042 0201 	orr.w	r2, r2, #1
 80044b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ba:	e007      	b.n	80044cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0201 	orr.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40010000 	.word	0x40010000
 80044e0:	40000400 	.word	0x40000400
 80044e4:	40000800 	.word	0x40000800
 80044e8:	40000c00 	.word	0x40000c00
 80044ec:	40010400 	.word	0x40010400
 80044f0:	40014000 	.word	0x40014000
 80044f4:	40001800 	.word	0x40001800

080044f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b02      	cmp	r3, #2
 800450c:	d122      	bne.n	8004554 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b02      	cmp	r3, #2
 800451a:	d11b      	bne.n	8004554 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f06f 0202 	mvn.w	r2, #2
 8004524:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	f003 0303 	and.w	r3, r3, #3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f9b5 	bl	80048aa <HAL_TIM_IC_CaptureCallback>
 8004540:	e005      	b.n	800454e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f9a7 	bl	8004896 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f9b8 	bl	80048be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b04      	cmp	r3, #4
 8004560:	d122      	bne.n	80045a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b04      	cmp	r3, #4
 800456e:	d11b      	bne.n	80045a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f06f 0204 	mvn.w	r2, #4
 8004578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2202      	movs	r2, #2
 800457e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f98b 	bl	80048aa <HAL_TIM_IC_CaptureCallback>
 8004594:	e005      	b.n	80045a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f97d 	bl	8004896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f98e 	bl	80048be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d122      	bne.n	80045fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d11b      	bne.n	80045fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f06f 0208 	mvn.w	r2, #8
 80045cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2204      	movs	r2, #4
 80045d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f961 	bl	80048aa <HAL_TIM_IC_CaptureCallback>
 80045e8:	e005      	b.n	80045f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f953 	bl	8004896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f964 	bl	80048be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	f003 0310 	and.w	r3, r3, #16
 8004606:	2b10      	cmp	r3, #16
 8004608:	d122      	bne.n	8004650 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f003 0310 	and.w	r3, r3, #16
 8004614:	2b10      	cmp	r3, #16
 8004616:	d11b      	bne.n	8004650 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f06f 0210 	mvn.w	r2, #16
 8004620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2208      	movs	r2, #8
 8004626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f937 	bl	80048aa <HAL_TIM_IC_CaptureCallback>
 800463c:	e005      	b.n	800464a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f929 	bl	8004896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f93a 	bl	80048be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b01      	cmp	r3, #1
 800465c:	d10e      	bne.n	800467c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b01      	cmp	r3, #1
 800466a:	d107      	bne.n	800467c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f06f 0201 	mvn.w	r2, #1
 8004674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7fd fafa 	bl	8001c70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004686:	2b80      	cmp	r3, #128	; 0x80
 8004688:	d10e      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004694:	2b80      	cmp	r3, #128	; 0x80
 8004696:	d107      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fae0 	bl	8004c68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b2:	2b40      	cmp	r3, #64	; 0x40
 80046b4:	d10e      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c0:	2b40      	cmp	r3, #64	; 0x40
 80046c2:	d107      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f8ff 	bl	80048d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f003 0320 	and.w	r3, r3, #32
 80046de:	2b20      	cmp	r3, #32
 80046e0:	d10e      	bne.n	8004700 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b20      	cmp	r3, #32
 80046ee:	d107      	bne.n	8004700 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f06f 0220 	mvn.w	r2, #32
 80046f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 faaa 	bl	8004c54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004700:	bf00      	nop
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_TIM_ConfigClockSource+0x1c>
 8004720:	2302      	movs	r3, #2
 8004722:	e0b4      	b.n	800488e <HAL_TIM_ConfigClockSource+0x186>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800474a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800475c:	d03e      	beq.n	80047dc <HAL_TIM_ConfigClockSource+0xd4>
 800475e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004762:	f200 8087 	bhi.w	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 8004766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476a:	f000 8086 	beq.w	800487a <HAL_TIM_ConfigClockSource+0x172>
 800476e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004772:	d87f      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 8004774:	2b70      	cmp	r3, #112	; 0x70
 8004776:	d01a      	beq.n	80047ae <HAL_TIM_ConfigClockSource+0xa6>
 8004778:	2b70      	cmp	r3, #112	; 0x70
 800477a:	d87b      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 800477c:	2b60      	cmp	r3, #96	; 0x60
 800477e:	d050      	beq.n	8004822 <HAL_TIM_ConfigClockSource+0x11a>
 8004780:	2b60      	cmp	r3, #96	; 0x60
 8004782:	d877      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 8004784:	2b50      	cmp	r3, #80	; 0x50
 8004786:	d03c      	beq.n	8004802 <HAL_TIM_ConfigClockSource+0xfa>
 8004788:	2b50      	cmp	r3, #80	; 0x50
 800478a:	d873      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 800478c:	2b40      	cmp	r3, #64	; 0x40
 800478e:	d058      	beq.n	8004842 <HAL_TIM_ConfigClockSource+0x13a>
 8004790:	2b40      	cmp	r3, #64	; 0x40
 8004792:	d86f      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 8004794:	2b30      	cmp	r3, #48	; 0x30
 8004796:	d064      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0x15a>
 8004798:	2b30      	cmp	r3, #48	; 0x30
 800479a:	d86b      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 800479c:	2b20      	cmp	r3, #32
 800479e:	d060      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0x15a>
 80047a0:	2b20      	cmp	r3, #32
 80047a2:	d867      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d05c      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0x15a>
 80047a8:	2b10      	cmp	r3, #16
 80047aa:	d05a      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0x15a>
 80047ac:	e062      	b.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	6899      	ldr	r1, [r3, #8]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f000 f9ad 	bl	8004b1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	609a      	str	r2, [r3, #8]
      break;
 80047da:	e04f      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6818      	ldr	r0, [r3, #0]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	6899      	ldr	r1, [r3, #8]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f000 f996 	bl	8004b1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047fe:	609a      	str	r2, [r3, #8]
      break;
 8004800:	e03c      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6818      	ldr	r0, [r3, #0]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	6859      	ldr	r1, [r3, #4]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	461a      	mov	r2, r3
 8004810:	f000 f90a 	bl	8004a28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2150      	movs	r1, #80	; 0x50
 800481a:	4618      	mov	r0, r3
 800481c:	f000 f963 	bl	8004ae6 <TIM_ITRx_SetConfig>
      break;
 8004820:	e02c      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6859      	ldr	r1, [r3, #4]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	461a      	mov	r2, r3
 8004830:	f000 f929 	bl	8004a86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2160      	movs	r1, #96	; 0x60
 800483a:	4618      	mov	r0, r3
 800483c:	f000 f953 	bl	8004ae6 <TIM_ITRx_SetConfig>
      break;
 8004840:	e01c      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6818      	ldr	r0, [r3, #0]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	6859      	ldr	r1, [r3, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	461a      	mov	r2, r3
 8004850:	f000 f8ea 	bl	8004a28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2140      	movs	r1, #64	; 0x40
 800485a:	4618      	mov	r0, r3
 800485c:	f000 f943 	bl	8004ae6 <TIM_ITRx_SetConfig>
      break;
 8004860:	e00c      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4619      	mov	r1, r3
 800486c:	4610      	mov	r0, r2
 800486e:	f000 f93a 	bl	8004ae6 <TIM_ITRx_SetConfig>
      break;
 8004872:	e003      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	73fb      	strb	r3, [r7, #15]
      break;
 8004878:	e000      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800487a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800488c:	7bfb      	ldrb	r3, [r7, #15]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
	...

080048e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a40      	ldr	r2, [pc, #256]	; (80049fc <TIM_Base_SetConfig+0x114>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d013      	beq.n	8004928 <TIM_Base_SetConfig+0x40>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004906:	d00f      	beq.n	8004928 <TIM_Base_SetConfig+0x40>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a3d      	ldr	r2, [pc, #244]	; (8004a00 <TIM_Base_SetConfig+0x118>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00b      	beq.n	8004928 <TIM_Base_SetConfig+0x40>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a3c      	ldr	r2, [pc, #240]	; (8004a04 <TIM_Base_SetConfig+0x11c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d007      	beq.n	8004928 <TIM_Base_SetConfig+0x40>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a3b      	ldr	r2, [pc, #236]	; (8004a08 <TIM_Base_SetConfig+0x120>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d003      	beq.n	8004928 <TIM_Base_SetConfig+0x40>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a3a      	ldr	r2, [pc, #232]	; (8004a0c <TIM_Base_SetConfig+0x124>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d108      	bne.n	800493a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a2f      	ldr	r2, [pc, #188]	; (80049fc <TIM_Base_SetConfig+0x114>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d02b      	beq.n	800499a <TIM_Base_SetConfig+0xb2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004948:	d027      	beq.n	800499a <TIM_Base_SetConfig+0xb2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a2c      	ldr	r2, [pc, #176]	; (8004a00 <TIM_Base_SetConfig+0x118>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d023      	beq.n	800499a <TIM_Base_SetConfig+0xb2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a2b      	ldr	r2, [pc, #172]	; (8004a04 <TIM_Base_SetConfig+0x11c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d01f      	beq.n	800499a <TIM_Base_SetConfig+0xb2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a2a      	ldr	r2, [pc, #168]	; (8004a08 <TIM_Base_SetConfig+0x120>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d01b      	beq.n	800499a <TIM_Base_SetConfig+0xb2>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a29      	ldr	r2, [pc, #164]	; (8004a0c <TIM_Base_SetConfig+0x124>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d017      	beq.n	800499a <TIM_Base_SetConfig+0xb2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a28      	ldr	r2, [pc, #160]	; (8004a10 <TIM_Base_SetConfig+0x128>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d013      	beq.n	800499a <TIM_Base_SetConfig+0xb2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a27      	ldr	r2, [pc, #156]	; (8004a14 <TIM_Base_SetConfig+0x12c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00f      	beq.n	800499a <TIM_Base_SetConfig+0xb2>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a26      	ldr	r2, [pc, #152]	; (8004a18 <TIM_Base_SetConfig+0x130>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00b      	beq.n	800499a <TIM_Base_SetConfig+0xb2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a25      	ldr	r2, [pc, #148]	; (8004a1c <TIM_Base_SetConfig+0x134>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d007      	beq.n	800499a <TIM_Base_SetConfig+0xb2>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a24      	ldr	r2, [pc, #144]	; (8004a20 <TIM_Base_SetConfig+0x138>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d003      	beq.n	800499a <TIM_Base_SetConfig+0xb2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a23      	ldr	r2, [pc, #140]	; (8004a24 <TIM_Base_SetConfig+0x13c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d108      	bne.n	80049ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a0a      	ldr	r2, [pc, #40]	; (80049fc <TIM_Base_SetConfig+0x114>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d003      	beq.n	80049e0 <TIM_Base_SetConfig+0xf8>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a0c      	ldr	r2, [pc, #48]	; (8004a0c <TIM_Base_SetConfig+0x124>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d103      	bne.n	80049e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	691a      	ldr	r2, [r3, #16]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	615a      	str	r2, [r3, #20]
}
 80049ee:	bf00      	nop
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	40010000 	.word	0x40010000
 8004a00:	40000400 	.word	0x40000400
 8004a04:	40000800 	.word	0x40000800
 8004a08:	40000c00 	.word	0x40000c00
 8004a0c:	40010400 	.word	0x40010400
 8004a10:	40014000 	.word	0x40014000
 8004a14:	40014400 	.word	0x40014400
 8004a18:	40014800 	.word	0x40014800
 8004a1c:	40001800 	.word	0x40001800
 8004a20:	40001c00 	.word	0x40001c00
 8004a24:	40002000 	.word	0x40002000

08004a28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	f023 0201 	bic.w	r2, r3, #1
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f023 030a 	bic.w	r3, r3, #10
 8004a64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	621a      	str	r2, [r3, #32]
}
 8004a7a:	bf00      	nop
 8004a7c:	371c      	adds	r7, #28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b087      	sub	sp, #28
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	f023 0210 	bic.w	r2, r3, #16
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ab0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	031b      	lsls	r3, r3, #12
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ac2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	011b      	lsls	r3, r3, #4
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	621a      	str	r2, [r3, #32]
}
 8004ada:	bf00      	nop
 8004adc:	371c      	adds	r7, #28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b085      	sub	sp, #20
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f043 0307 	orr.w	r3, r3, #7
 8004b08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	609a      	str	r2, [r3, #8]
}
 8004b10:	bf00      	nop
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
 8004b28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	021a      	lsls	r2, r3, #8
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	609a      	str	r2, [r3, #8]
}
 8004b50:	bf00      	nop
 8004b52:	371c      	adds	r7, #28
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b70:	2302      	movs	r3, #2
 8004b72:	e05a      	b.n	8004c2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a21      	ldr	r2, [pc, #132]	; (8004c38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d022      	beq.n	8004bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc0:	d01d      	beq.n	8004bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a1d      	ldr	r2, [pc, #116]	; (8004c3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d018      	beq.n	8004bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a1b      	ldr	r2, [pc, #108]	; (8004c40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d013      	beq.n	8004bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a1a      	ldr	r2, [pc, #104]	; (8004c44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d00e      	beq.n	8004bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a18      	ldr	r2, [pc, #96]	; (8004c48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d009      	beq.n	8004bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a17      	ldr	r2, [pc, #92]	; (8004c4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d004      	beq.n	8004bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a15      	ldr	r2, [pc, #84]	; (8004c50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d10c      	bne.n	8004c18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	40010000 	.word	0x40010000
 8004c3c:	40000400 	.word	0x40000400
 8004c40:	40000800 	.word	0x40000800
 8004c44:	40000c00 	.word	0x40000c00
 8004c48:	40010400 	.word	0x40010400
 8004c4c:	40014000 	.word	0x40014000
 8004c50:	40001800 	.word	0x40001800

08004c54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e03f      	b.n	8004d0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fd fdb4 	bl	8002810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2224      	movs	r2, #36	; 0x24
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 ffd7 	bl	8005c74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695a      	ldr	r2, [r3, #20]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ce4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
	...

08004d18 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08c      	sub	sp, #48	; 0x30
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	4613      	mov	r3, r2
 8004d24:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b20      	cmp	r3, #32
 8004d30:	d165      	bne.n	8004dfe <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <HAL_UART_Transmit_DMA+0x26>
 8004d38:	88fb      	ldrh	r3, [r7, #6]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e05e      	b.n	8004e00 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d101      	bne.n	8004d50 <HAL_UART_Transmit_DMA+0x38>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e057      	b.n	8004e00 <HAL_UART_Transmit_DMA+0xe8>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	88fa      	ldrh	r2, [r7, #6]
 8004d62:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	88fa      	ldrh	r2, [r7, #6]
 8004d68:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2221      	movs	r2, #33	; 0x21
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7c:	4a22      	ldr	r2, [pc, #136]	; (8004e08 <HAL_UART_Transmit_DMA+0xf0>)
 8004d7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d84:	4a21      	ldr	r2, [pc, #132]	; (8004e0c <HAL_UART_Transmit_DMA+0xf4>)
 8004d86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8c:	4a20      	ldr	r2, [pc, #128]	; (8004e10 <HAL_UART_Transmit_DMA+0xf8>)
 8004d8e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d94:	2200      	movs	r2, #0
 8004d96:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004d98:	f107 0308 	add.w	r3, r7, #8
 8004d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da4:	6819      	ldr	r1, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	3304      	adds	r3, #4
 8004dac:	461a      	mov	r2, r3
 8004dae:	88fb      	ldrh	r3, [r7, #6]
 8004db0:	f7fd ffe2 	bl	8002d78 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dbc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3314      	adds	r3, #20
 8004dcc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	e853 3f00 	ldrex	r3, [r3]
 8004dd4:	617b      	str	r3, [r7, #20]
   return(result);
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ddc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3314      	adds	r3, #20
 8004de4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004de6:	627a      	str	r2, [r7, #36]	; 0x24
 8004de8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dea:	6a39      	ldr	r1, [r7, #32]
 8004dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dee:	e841 2300 	strex	r3, r2, [r1]
 8004df2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1e5      	bne.n	8004dc6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	e000      	b.n	8004e00 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8004dfe:	2302      	movs	r3, #2
  }
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3730      	adds	r7, #48	; 0x30
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	0800550d 	.word	0x0800550d
 8004e0c:	080055a7 	.word	0x080055a7
 8004e10:	0800571f 	.word	0x0800571f

08004e14 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b20      	cmp	r3, #32
 8004e2c:	d11d      	bne.n	8004e6a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <HAL_UART_Receive_DMA+0x26>
 8004e34:	88fb      	ldrh	r3, [r7, #6]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e016      	b.n	8004e6c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d101      	bne.n	8004e4c <HAL_UART_Receive_DMA+0x38>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e00f      	b.n	8004e6c <HAL_UART_Receive_DMA+0x58>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004e5a:	88fb      	ldrh	r3, [r7, #6]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	68b9      	ldr	r1, [r7, #8]
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 fca7 	bl	80057b4 <UART_Start_Receive_DMA>
 8004e66:	4603      	mov	r3, r0
 8004e68:	e000      	b.n	8004e6c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004e6a:	2302      	movs	r3, #2
  }
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b090      	sub	sp, #64	; 0x40
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8a:	2b80      	cmp	r3, #128	; 0x80
 8004e8c:	bf0c      	ite	eq
 8004e8e:	2301      	moveq	r3, #1
 8004e90:	2300      	movne	r3, #0
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b21      	cmp	r3, #33	; 0x21
 8004ea0:	d128      	bne.n	8004ef4 <HAL_UART_DMAStop+0x80>
 8004ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d025      	beq.n	8004ef4 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	3314      	adds	r3, #20
 8004eae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	e853 3f00 	ldrex	r3, [r3]
 8004eb6:	623b      	str	r3, [r7, #32]
   return(result);
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ebe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	3314      	adds	r3, #20
 8004ec6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ec8:	633a      	str	r2, [r7, #48]	; 0x30
 8004eca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ecc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ed0:	e841 2300 	strex	r3, r2, [r1]
 8004ed4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1e5      	bne.n	8004ea8 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d004      	beq.n	8004eee <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fd ff9d 	bl	8002e28 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 fcfe 	bl	80058f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efe:	2b40      	cmp	r3, #64	; 0x40
 8004f00:	bf0c      	ite	eq
 8004f02:	2301      	moveq	r3, #1
 8004f04:	2300      	movne	r3, #0
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b22      	cmp	r3, #34	; 0x22
 8004f14:	d128      	bne.n	8004f68 <HAL_UART_DMAStop+0xf4>
 8004f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d025      	beq.n	8004f68 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3314      	adds	r3, #20
 8004f22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	e853 3f00 	ldrex	r3, [r3]
 8004f2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f32:	637b      	str	r3, [r7, #52]	; 0x34
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3314      	adds	r3, #20
 8004f3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f3c:	61fa      	str	r2, [r7, #28]
 8004f3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f40:	69b9      	ldr	r1, [r7, #24]
 8004f42:	69fa      	ldr	r2, [r7, #28]
 8004f44:	e841 2300 	strex	r3, r2, [r1]
 8004f48:	617b      	str	r3, [r7, #20]
   return(result);
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1e5      	bne.n	8004f1c <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d004      	beq.n	8004f62 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7fd ff63 	bl	8002e28 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 fcec 	bl	8005940 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3740      	adds	r7, #64	; 0x40
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
	...

08004f74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b0ba      	sub	sp, #232	; 0xe8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004fb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10f      	bne.n	8004fda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fbe:	f003 0320 	and.w	r3, r3, #32
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d009      	beq.n	8004fda <HAL_UART_IRQHandler+0x66>
 8004fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fca:	f003 0320 	and.w	r3, r3, #32
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 fd93 	bl	8005afe <UART_Receive_IT>
      return;
 8004fd8:	e256      	b.n	8005488 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004fda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 80de 	beq.w	80051a0 <HAL_UART_IRQHandler+0x22c>
 8004fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d106      	bne.n	8004ffe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ff4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 80d1 	beq.w	80051a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00b      	beq.n	8005022 <HAL_UART_IRQHandler+0xae>
 800500a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800500e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005012:	2b00      	cmp	r3, #0
 8005014:	d005      	beq.n	8005022 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	f043 0201 	orr.w	r2, r3, #1
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005026:	f003 0304 	and.w	r3, r3, #4
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00b      	beq.n	8005046 <HAL_UART_IRQHandler+0xd2>
 800502e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d005      	beq.n	8005046 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	f043 0202 	orr.w	r2, r3, #2
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00b      	beq.n	800506a <HAL_UART_IRQHandler+0xf6>
 8005052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d005      	beq.n	800506a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	f043 0204 	orr.w	r2, r3, #4
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800506a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d011      	beq.n	800509a <HAL_UART_IRQHandler+0x126>
 8005076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b00      	cmp	r3, #0
 8005080:	d105      	bne.n	800508e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d005      	beq.n	800509a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	f043 0208 	orr.w	r2, r3, #8
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 81ed 	beq.w	800547e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050a8:	f003 0320 	and.w	r3, r3, #32
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d008      	beq.n	80050c2 <HAL_UART_IRQHandler+0x14e>
 80050b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050b4:	f003 0320 	and.w	r3, r3, #32
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fd1e 	bl	8005afe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050cc:	2b40      	cmp	r3, #64	; 0x40
 80050ce:	bf0c      	ite	eq
 80050d0:	2301      	moveq	r3, #1
 80050d2:	2300      	movne	r3, #0
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	f003 0308 	and.w	r3, r3, #8
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d103      	bne.n	80050ee <HAL_UART_IRQHandler+0x17a>
 80050e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d04f      	beq.n	800518e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fc26 	bl	8005940 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050fe:	2b40      	cmp	r3, #64	; 0x40
 8005100:	d141      	bne.n	8005186 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3314      	adds	r3, #20
 8005108:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005110:	e853 3f00 	ldrex	r3, [r3]
 8005114:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005118:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800511c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005120:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3314      	adds	r3, #20
 800512a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800512e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005136:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800513a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800513e:	e841 2300 	strex	r3, r2, [r1]
 8005142:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1d9      	bne.n	8005102 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	2b00      	cmp	r3, #0
 8005154:	d013      	beq.n	800517e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	4a7d      	ldr	r2, [pc, #500]	; (8005350 <HAL_UART_IRQHandler+0x3dc>)
 800515c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005162:	4618      	mov	r0, r3
 8005164:	f7fd fed0 	bl	8002f08 <HAL_DMA_Abort_IT>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d016      	beq.n	800519c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005178:	4610      	mov	r0, r2
 800517a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800517c:	e00e      	b.n	800519c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f9ae 	bl	80054e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005184:	e00a      	b.n	800519c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f9aa 	bl	80054e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800518c:	e006      	b.n	800519c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f9a6 	bl	80054e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800519a:	e170      	b.n	800547e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800519c:	bf00      	nop
    return;
 800519e:	e16e      	b.n	800547e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	f040 814a 	bne.w	800543e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ae:	f003 0310 	and.w	r3, r3, #16
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f000 8143 	beq.w	800543e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80051b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051bc:	f003 0310 	and.w	r3, r3, #16
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 813c 	beq.w	800543e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051c6:	2300      	movs	r3, #0
 80051c8:	60bb      	str	r3, [r7, #8]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	60bb      	str	r3, [r7, #8]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	60bb      	str	r3, [r7, #8]
 80051da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e6:	2b40      	cmp	r3, #64	; 0x40
 80051e8:	f040 80b4 	bne.w	8005354 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 8140 	beq.w	8005482 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005206:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800520a:	429a      	cmp	r2, r3
 800520c:	f080 8139 	bcs.w	8005482 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005216:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005222:	f000 8088 	beq.w	8005336 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	330c      	adds	r3, #12
 800522c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005230:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005234:	e853 3f00 	ldrex	r3, [r3]
 8005238:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800523c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005244:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	330c      	adds	r3, #12
 800524e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005252:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005256:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800525e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005262:	e841 2300 	strex	r3, r2, [r1]
 8005266:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800526a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1d9      	bne.n	8005226 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	3314      	adds	r3, #20
 8005278:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800527c:	e853 3f00 	ldrex	r3, [r3]
 8005280:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005282:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005284:	f023 0301 	bic.w	r3, r3, #1
 8005288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3314      	adds	r3, #20
 8005292:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005296:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800529a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800529e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80052a2:	e841 2300 	strex	r3, r2, [r1]
 80052a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80052a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1e1      	bne.n	8005272 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3314      	adds	r3, #20
 80052b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052b8:	e853 3f00 	ldrex	r3, [r3]
 80052bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80052be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3314      	adds	r3, #20
 80052ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052da:	e841 2300 	strex	r3, r2, [r1]
 80052de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1e3      	bne.n	80052ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	330c      	adds	r3, #12
 80052fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052fe:	e853 3f00 	ldrex	r3, [r3]
 8005302:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005306:	f023 0310 	bic.w	r3, r3, #16
 800530a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	330c      	adds	r3, #12
 8005314:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005318:	65ba      	str	r2, [r7, #88]	; 0x58
 800531a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800531e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005320:	e841 2300 	strex	r3, r2, [r1]
 8005324:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1e3      	bne.n	80052f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005330:	4618      	mov	r0, r3
 8005332:	f7fd fd79 	bl	8002e28 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800533e:	b29b      	uxth	r3, r3
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	b29b      	uxth	r3, r3
 8005344:	4619      	mov	r1, r3
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f8d4 	bl	80054f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800534c:	e099      	b.n	8005482 <HAL_UART_IRQHandler+0x50e>
 800534e:	bf00      	nop
 8005350:	08005a07 	.word	0x08005a07
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800535c:	b29b      	uxth	r3, r3
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005368:	b29b      	uxth	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 808b 	beq.w	8005486 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005370:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 8086 	beq.w	8005486 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	330c      	adds	r3, #12
 8005380:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005384:	e853 3f00 	ldrex	r3, [r3]
 8005388:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800538a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800538c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005390:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	330c      	adds	r3, #12
 800539a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800539e:	647a      	str	r2, [r7, #68]	; 0x44
 80053a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053a6:	e841 2300 	strex	r3, r2, [r1]
 80053aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1e3      	bne.n	800537a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3314      	adds	r3, #20
 80053b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	e853 3f00 	ldrex	r3, [r3]
 80053c0:	623b      	str	r3, [r7, #32]
   return(result);
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	f023 0301 	bic.w	r3, r3, #1
 80053c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	3314      	adds	r3, #20
 80053d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053d6:	633a      	str	r2, [r7, #48]	; 0x30
 80053d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053de:	e841 2300 	strex	r3, r2, [r1]
 80053e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1e3      	bne.n	80053b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2220      	movs	r2, #32
 80053ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	330c      	adds	r3, #12
 80053fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	e853 3f00 	ldrex	r3, [r3]
 8005406:	60fb      	str	r3, [r7, #12]
   return(result);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0310 	bic.w	r3, r3, #16
 800540e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	330c      	adds	r3, #12
 8005418:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800541c:	61fa      	str	r2, [r7, #28]
 800541e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005420:	69b9      	ldr	r1, [r7, #24]
 8005422:	69fa      	ldr	r2, [r7, #28]
 8005424:	e841 2300 	strex	r3, r2, [r1]
 8005428:	617b      	str	r3, [r7, #20]
   return(result);
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1e3      	bne.n	80053f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005430:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005434:	4619      	mov	r1, r3
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f85c 	bl	80054f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800543c:	e023      	b.n	8005486 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800543e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005446:	2b00      	cmp	r3, #0
 8005448:	d009      	beq.n	800545e <HAL_UART_IRQHandler+0x4ea>
 800544a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800544e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 fae9 	bl	8005a2e <UART_Transmit_IT>
    return;
 800545c:	e014      	b.n	8005488 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800545e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00e      	beq.n	8005488 <HAL_UART_IRQHandler+0x514>
 800546a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800546e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005472:	2b00      	cmp	r3, #0
 8005474:	d008      	beq.n	8005488 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 fb29 	bl	8005ace <UART_EndTransmit_IT>
    return;
 800547c:	e004      	b.n	8005488 <HAL_UART_IRQHandler+0x514>
    return;
 800547e:	bf00      	nop
 8005480:	e002      	b.n	8005488 <HAL_UART_IRQHandler+0x514>
      return;
 8005482:	bf00      	nop
 8005484:	e000      	b.n	8005488 <HAL_UART_IRQHandler+0x514>
      return;
 8005486:	bf00      	nop
  }
}
 8005488:	37e8      	adds	r7, #232	; 0xe8
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop

08005490 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	460b      	mov	r3, r1
 80054fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b090      	sub	sp, #64	; 0x40
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005518:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005524:	2b00      	cmp	r3, #0
 8005526:	d137      	bne.n	8005598 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800552a:	2200      	movs	r2, #0
 800552c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800552e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3314      	adds	r3, #20
 8005534:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	e853 3f00 	ldrex	r3, [r3]
 800553c:	623b      	str	r3, [r7, #32]
   return(result);
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005544:	63bb      	str	r3, [r7, #56]	; 0x38
 8005546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3314      	adds	r3, #20
 800554c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800554e:	633a      	str	r2, [r7, #48]	; 0x30
 8005550:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005552:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005556:	e841 2300 	strex	r3, r2, [r1]
 800555a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800555c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1e5      	bne.n	800552e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	330c      	adds	r3, #12
 8005568:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	e853 3f00 	ldrex	r3, [r3]
 8005570:	60fb      	str	r3, [r7, #12]
   return(result);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005578:	637b      	str	r3, [r7, #52]	; 0x34
 800557a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	330c      	adds	r3, #12
 8005580:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005582:	61fa      	str	r2, [r7, #28]
 8005584:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	69b9      	ldr	r1, [r7, #24]
 8005588:	69fa      	ldr	r2, [r7, #28]
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	617b      	str	r3, [r7, #20]
   return(result);
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e5      	bne.n	8005562 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005596:	e002      	b.n	800559e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005598:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800559a:	f7ff ff79 	bl	8005490 <HAL_UART_TxCpltCallback>
}
 800559e:	bf00      	nop
 80055a0:	3740      	adds	r7, #64	; 0x40
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b084      	sub	sp, #16
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f7ff ff75 	bl	80054a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055ba:	bf00      	nop
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b09c      	sub	sp, #112	; 0x70
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d172      	bne.n	80056c4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80055de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e0:	2200      	movs	r2, #0
 80055e2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	330c      	adds	r3, #12
 80055ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ee:	e853 3f00 	ldrex	r3, [r3]
 80055f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80055fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	330c      	adds	r3, #12
 8005602:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005604:	65ba      	str	r2, [r7, #88]	; 0x58
 8005606:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005608:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800560a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800560c:	e841 2300 	strex	r3, r2, [r1]
 8005610:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1e5      	bne.n	80055e4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	3314      	adds	r3, #20
 800561e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005622:	e853 3f00 	ldrex	r3, [r3]
 8005626:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800562a:	f023 0301 	bic.w	r3, r3, #1
 800562e:	667b      	str	r3, [r7, #100]	; 0x64
 8005630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3314      	adds	r3, #20
 8005636:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005638:	647a      	str	r2, [r7, #68]	; 0x44
 800563a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800563e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005640:	e841 2300 	strex	r3, r2, [r1]
 8005644:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1e5      	bne.n	8005618 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800564c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3314      	adds	r3, #20
 8005652:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	e853 3f00 	ldrex	r3, [r3]
 800565a:	623b      	str	r3, [r7, #32]
   return(result);
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005662:	663b      	str	r3, [r7, #96]	; 0x60
 8005664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3314      	adds	r3, #20
 800566a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800566c:	633a      	str	r2, [r7, #48]	; 0x30
 800566e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005670:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005674:	e841 2300 	strex	r3, r2, [r1]
 8005678:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800567a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1e5      	bne.n	800564c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005682:	2220      	movs	r2, #32
 8005684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800568a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568c:	2b01      	cmp	r3, #1
 800568e:	d119      	bne.n	80056c4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	330c      	adds	r3, #12
 8005696:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	e853 3f00 	ldrex	r3, [r3]
 800569e:	60fb      	str	r3, [r7, #12]
   return(result);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 0310 	bic.w	r3, r3, #16
 80056a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	330c      	adds	r3, #12
 80056ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80056b0:	61fa      	str	r2, [r7, #28]
 80056b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	69b9      	ldr	r1, [r7, #24]
 80056b6:	69fa      	ldr	r2, [r7, #28]
 80056b8:	e841 2300 	strex	r3, r2, [r1]
 80056bc:	617b      	str	r3, [r7, #20]
   return(result);
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e5      	bne.n	8005690 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d106      	bne.n	80056da <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056d0:	4619      	mov	r1, r3
 80056d2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80056d4:	f7ff ff0e 	bl	80054f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80056d8:	e002      	b.n	80056e0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80056da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80056dc:	f7ff feec 	bl	80054b8 <HAL_UART_RxCpltCallback>
}
 80056e0:	bf00      	nop
 80056e2:	3770      	adds	r7, #112	; 0x70
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d108      	bne.n	8005710 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005702:	085b      	lsrs	r3, r3, #1
 8005704:	b29b      	uxth	r3, r3
 8005706:	4619      	mov	r1, r3
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f7ff fef3 	bl	80054f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800570e:	e002      	b.n	8005716 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f7ff fedb 	bl	80054cc <HAL_UART_RxHalfCpltCallback>
}
 8005716:	bf00      	nop
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b084      	sub	sp, #16
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005726:	2300      	movs	r3, #0
 8005728:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573a:	2b80      	cmp	r3, #128	; 0x80
 800573c:	bf0c      	ite	eq
 800573e:	2301      	moveq	r3, #1
 8005740:	2300      	movne	r3, #0
 8005742:	b2db      	uxtb	r3, r3
 8005744:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b21      	cmp	r3, #33	; 0x21
 8005750:	d108      	bne.n	8005764 <UART_DMAError+0x46>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d005      	beq.n	8005764 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2200      	movs	r2, #0
 800575c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800575e:	68b8      	ldr	r0, [r7, #8]
 8005760:	f000 f8c6 	bl	80058f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576e:	2b40      	cmp	r3, #64	; 0x40
 8005770:	bf0c      	ite	eq
 8005772:	2301      	moveq	r3, #1
 8005774:	2300      	movne	r3, #0
 8005776:	b2db      	uxtb	r3, r3
 8005778:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b22      	cmp	r3, #34	; 0x22
 8005784:	d108      	bne.n	8005798 <UART_DMAError+0x7a>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d005      	beq.n	8005798 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2200      	movs	r2, #0
 8005790:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005792:	68b8      	ldr	r0, [r7, #8]
 8005794:	f000 f8d4 	bl	8005940 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579c:	f043 0210 	orr.w	r2, r3, #16
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057a4:	68b8      	ldr	r0, [r7, #8]
 80057a6:	f7ff fe9b 	bl	80054e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057aa:	bf00      	nop
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
	...

080057b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b098      	sub	sp, #96	; 0x60
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	4613      	mov	r3, r2
 80057c0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	88fa      	ldrh	r2, [r7, #6]
 80057cc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2222      	movs	r2, #34	; 0x22
 80057d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e0:	4a40      	ldr	r2, [pc, #256]	; (80058e4 <UART_Start_Receive_DMA+0x130>)
 80057e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e8:	4a3f      	ldr	r2, [pc, #252]	; (80058e8 <UART_Start_Receive_DMA+0x134>)
 80057ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f0:	4a3e      	ldr	r2, [pc, #248]	; (80058ec <UART_Start_Receive_DMA+0x138>)
 80057f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f8:	2200      	movs	r2, #0
 80057fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80057fc:	f107 0308 	add.w	r3, r7, #8
 8005800:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3304      	adds	r3, #4
 800580c:	4619      	mov	r1, r3
 800580e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	88fb      	ldrh	r3, [r7, #6]
 8005814:	f7fd fab0 	bl	8002d78 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005818:	2300      	movs	r3, #0
 800581a:	613b      	str	r3, [r7, #16]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	613b      	str	r3, [r7, #16]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	613b      	str	r3, [r7, #16]
 800582c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d019      	beq.n	8005872 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	330c      	adds	r3, #12
 8005844:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005848:	e853 3f00 	ldrex	r3, [r3]
 800584c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800584e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005854:	65bb      	str	r3, [r7, #88]	; 0x58
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	330c      	adds	r3, #12
 800585c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800585e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005860:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005864:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005866:	e841 2300 	strex	r3, r2, [r1]
 800586a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800586c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1e5      	bne.n	800583e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	3314      	adds	r3, #20
 8005878:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005884:	f043 0301 	orr.w	r3, r3, #1
 8005888:	657b      	str	r3, [r7, #84]	; 0x54
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3314      	adds	r3, #20
 8005890:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005892:	63ba      	str	r2, [r7, #56]	; 0x38
 8005894:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005896:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005898:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800589a:	e841 2300 	strex	r3, r2, [r1]
 800589e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1e5      	bne.n	8005872 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	3314      	adds	r3, #20
 80058ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	e853 3f00 	ldrex	r3, [r3]
 80058b4:	617b      	str	r3, [r7, #20]
   return(result);
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058bc:	653b      	str	r3, [r7, #80]	; 0x50
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3314      	adds	r3, #20
 80058c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80058c6:	627a      	str	r2, [r7, #36]	; 0x24
 80058c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ca:	6a39      	ldr	r1, [r7, #32]
 80058cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ce:	e841 2300 	strex	r3, r2, [r1]
 80058d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1e5      	bne.n	80058a6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3760      	adds	r7, #96	; 0x60
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	080055c3 	.word	0x080055c3
 80058e8:	080056e9 	.word	0x080056e9
 80058ec:	0800571f 	.word	0x0800571f

080058f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b089      	sub	sp, #36	; 0x24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	330c      	adds	r3, #12
 80058fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	e853 3f00 	ldrex	r3, [r3]
 8005906:	60bb      	str	r3, [r7, #8]
   return(result);
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800590e:	61fb      	str	r3, [r7, #28]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	330c      	adds	r3, #12
 8005916:	69fa      	ldr	r2, [r7, #28]
 8005918:	61ba      	str	r2, [r7, #24]
 800591a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591c:	6979      	ldr	r1, [r7, #20]
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	e841 2300 	strex	r3, r2, [r1]
 8005924:	613b      	str	r3, [r7, #16]
   return(result);
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e5      	bne.n	80058f8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2220      	movs	r2, #32
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005934:	bf00      	nop
 8005936:	3724      	adds	r7, #36	; 0x24
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005940:	b480      	push	{r7}
 8005942:	b095      	sub	sp, #84	; 0x54
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	330c      	adds	r3, #12
 800594e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005952:	e853 3f00 	ldrex	r3, [r3]
 8005956:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800595e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	330c      	adds	r3, #12
 8005966:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005968:	643a      	str	r2, [r7, #64]	; 0x40
 800596a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800596e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005970:	e841 2300 	strex	r3, r2, [r1]
 8005974:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1e5      	bne.n	8005948 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3314      	adds	r3, #20
 8005982:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	e853 3f00 	ldrex	r3, [r3]
 800598a:	61fb      	str	r3, [r7, #28]
   return(result);
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	f023 0301 	bic.w	r3, r3, #1
 8005992:	64bb      	str	r3, [r7, #72]	; 0x48
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3314      	adds	r3, #20
 800599a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800599c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800599e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059a4:	e841 2300 	strex	r3, r2, [r1]
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1e5      	bne.n	800597c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d119      	bne.n	80059ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	330c      	adds	r3, #12
 80059be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	e853 3f00 	ldrex	r3, [r3]
 80059c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f023 0310 	bic.w	r3, r3, #16
 80059ce:	647b      	str	r3, [r7, #68]	; 0x44
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	330c      	adds	r3, #12
 80059d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059d8:	61ba      	str	r2, [r7, #24]
 80059da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059dc:	6979      	ldr	r1, [r7, #20]
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	e841 2300 	strex	r3, r2, [r1]
 80059e4:	613b      	str	r3, [r7, #16]
   return(result);
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1e5      	bne.n	80059b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80059fa:	bf00      	nop
 80059fc:	3754      	adds	r7, #84	; 0x54
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b084      	sub	sp, #16
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f7ff fd5d 	bl	80054e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a26:	bf00      	nop
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b085      	sub	sp, #20
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b21      	cmp	r3, #33	; 0x21
 8005a40:	d13e      	bne.n	8005ac0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a4a:	d114      	bne.n	8005a76 <UART_Transmit_IT+0x48>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d110      	bne.n	8005a76 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	461a      	mov	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a68:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	1c9a      	adds	r2, r3, #2
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	621a      	str	r2, [r3, #32]
 8005a74:	e008      	b.n	8005a88 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	1c59      	adds	r1, r3, #1
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6211      	str	r1, [r2, #32]
 8005a80:	781a      	ldrb	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	4619      	mov	r1, r3
 8005a96:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10f      	bne.n	8005abc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005aaa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68da      	ldr	r2, [r3, #12]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005abc:	2300      	movs	r3, #0
 8005abe:	e000      	b.n	8005ac2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ac0:	2302      	movs	r3, #2
  }
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b082      	sub	sp, #8
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68da      	ldr	r2, [r3, #12]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ae4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2220      	movs	r2, #32
 8005aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7ff fcce 	bl	8005490 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b08c      	sub	sp, #48	; 0x30
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b22      	cmp	r3, #34	; 0x22
 8005b10:	f040 80ab 	bne.w	8005c6a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b1c:	d117      	bne.n	8005b4e <UART_Receive_IT+0x50>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d113      	bne.n	8005b4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b26:	2300      	movs	r3, #0
 8005b28:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b46:	1c9a      	adds	r2, r3, #2
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	629a      	str	r2, [r3, #40]	; 0x28
 8005b4c:	e026      	b.n	8005b9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b52:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005b54:	2300      	movs	r3, #0
 8005b56:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b60:	d007      	beq.n	8005b72 <UART_Receive_IT+0x74>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10a      	bne.n	8005b80 <UART_Receive_IT+0x82>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d106      	bne.n	8005b80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7c:	701a      	strb	r2, [r3, #0]
 8005b7e:	e008      	b.n	8005b92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	4619      	mov	r1, r3
 8005baa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d15a      	bne.n	8005c66 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 0220 	bic.w	r2, r2, #32
 8005bbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	695a      	ldr	r2, [r3, #20]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f022 0201 	bic.w	r2, r2, #1
 8005bde:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2220      	movs	r2, #32
 8005be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d135      	bne.n	8005c5c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	330c      	adds	r3, #12
 8005bfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	613b      	str	r3, [r7, #16]
   return(result);
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f023 0310 	bic.w	r3, r3, #16
 8005c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	330c      	adds	r3, #12
 8005c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c16:	623a      	str	r2, [r7, #32]
 8005c18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	69f9      	ldr	r1, [r7, #28]
 8005c1c:	6a3a      	ldr	r2, [r7, #32]
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e5      	bne.n	8005bf6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0310 	and.w	r3, r3, #16
 8005c34:	2b10      	cmp	r3, #16
 8005c36:	d10a      	bne.n	8005c4e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	60fb      	str	r3, [r7, #12]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	60fb      	str	r3, [r7, #12]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c52:	4619      	mov	r1, r3
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7ff fc4d 	bl	80054f4 <HAL_UARTEx_RxEventCallback>
 8005c5a:	e002      	b.n	8005c62 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7ff fc2b 	bl	80054b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c62:	2300      	movs	r3, #0
 8005c64:	e002      	b.n	8005c6c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	e000      	b.n	8005c6c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005c6a:	2302      	movs	r3, #2
  }
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3730      	adds	r7, #48	; 0x30
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c78:	b0c0      	sub	sp, #256	; 0x100
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c90:	68d9      	ldr	r1, [r3, #12]
 8005c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	ea40 0301 	orr.w	r3, r0, r1
 8005c9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	431a      	orrs	r2, r3
 8005cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ccc:	f021 010c 	bic.w	r1, r1, #12
 8005cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cda:	430b      	orrs	r3, r1
 8005cdc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cee:	6999      	ldr	r1, [r3, #24]
 8005cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	ea40 0301 	orr.w	r3, r0, r1
 8005cfa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	4b8f      	ldr	r3, [pc, #572]	; (8005f40 <UART_SetConfig+0x2cc>)
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d005      	beq.n	8005d14 <UART_SetConfig+0xa0>
 8005d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	4b8d      	ldr	r3, [pc, #564]	; (8005f44 <UART_SetConfig+0x2d0>)
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d104      	bne.n	8005d1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d14:	f7fd fea2 	bl	8003a5c <HAL_RCC_GetPCLK2Freq>
 8005d18:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005d1c:	e003      	b.n	8005d26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d1e:	f7fd fe89 	bl	8003a34 <HAL_RCC_GetPCLK1Freq>
 8005d22:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d2a:	69db      	ldr	r3, [r3, #28]
 8005d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d30:	f040 810c 	bne.w	8005f4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d3e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005d42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005d46:	4622      	mov	r2, r4
 8005d48:	462b      	mov	r3, r5
 8005d4a:	1891      	adds	r1, r2, r2
 8005d4c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d4e:	415b      	adcs	r3, r3
 8005d50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005d56:	4621      	mov	r1, r4
 8005d58:	eb12 0801 	adds.w	r8, r2, r1
 8005d5c:	4629      	mov	r1, r5
 8005d5e:	eb43 0901 	adc.w	r9, r3, r1
 8005d62:	f04f 0200 	mov.w	r2, #0
 8005d66:	f04f 0300 	mov.w	r3, #0
 8005d6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d76:	4690      	mov	r8, r2
 8005d78:	4699      	mov	r9, r3
 8005d7a:	4623      	mov	r3, r4
 8005d7c:	eb18 0303 	adds.w	r3, r8, r3
 8005d80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d84:	462b      	mov	r3, r5
 8005d86:	eb49 0303 	adc.w	r3, r9, r3
 8005d8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d9a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005d9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005da2:	460b      	mov	r3, r1
 8005da4:	18db      	adds	r3, r3, r3
 8005da6:	653b      	str	r3, [r7, #80]	; 0x50
 8005da8:	4613      	mov	r3, r2
 8005daa:	eb42 0303 	adc.w	r3, r2, r3
 8005dae:	657b      	str	r3, [r7, #84]	; 0x54
 8005db0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005db4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005db8:	f7fa ff20 	bl	8000bfc <__aeabi_uldivmod>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4b61      	ldr	r3, [pc, #388]	; (8005f48 <UART_SetConfig+0x2d4>)
 8005dc2:	fba3 2302 	umull	r2, r3, r3, r2
 8005dc6:	095b      	lsrs	r3, r3, #5
 8005dc8:	011c      	lsls	r4, r3, #4
 8005dca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005dd4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005dd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005ddc:	4642      	mov	r2, r8
 8005dde:	464b      	mov	r3, r9
 8005de0:	1891      	adds	r1, r2, r2
 8005de2:	64b9      	str	r1, [r7, #72]	; 0x48
 8005de4:	415b      	adcs	r3, r3
 8005de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005de8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005dec:	4641      	mov	r1, r8
 8005dee:	eb12 0a01 	adds.w	sl, r2, r1
 8005df2:	4649      	mov	r1, r9
 8005df4:	eb43 0b01 	adc.w	fp, r3, r1
 8005df8:	f04f 0200 	mov.w	r2, #0
 8005dfc:	f04f 0300 	mov.w	r3, #0
 8005e00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e0c:	4692      	mov	sl, r2
 8005e0e:	469b      	mov	fp, r3
 8005e10:	4643      	mov	r3, r8
 8005e12:	eb1a 0303 	adds.w	r3, sl, r3
 8005e16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e1a:	464b      	mov	r3, r9
 8005e1c:	eb4b 0303 	adc.w	r3, fp, r3
 8005e20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e30:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005e34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	18db      	adds	r3, r3, r3
 8005e3c:	643b      	str	r3, [r7, #64]	; 0x40
 8005e3e:	4613      	mov	r3, r2
 8005e40:	eb42 0303 	adc.w	r3, r2, r3
 8005e44:	647b      	str	r3, [r7, #68]	; 0x44
 8005e46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005e4e:	f7fa fed5 	bl	8000bfc <__aeabi_uldivmod>
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	4611      	mov	r1, r2
 8005e58:	4b3b      	ldr	r3, [pc, #236]	; (8005f48 <UART_SetConfig+0x2d4>)
 8005e5a:	fba3 2301 	umull	r2, r3, r3, r1
 8005e5e:	095b      	lsrs	r3, r3, #5
 8005e60:	2264      	movs	r2, #100	; 0x64
 8005e62:	fb02 f303 	mul.w	r3, r2, r3
 8005e66:	1acb      	subs	r3, r1, r3
 8005e68:	00db      	lsls	r3, r3, #3
 8005e6a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005e6e:	4b36      	ldr	r3, [pc, #216]	; (8005f48 <UART_SetConfig+0x2d4>)
 8005e70:	fba3 2302 	umull	r2, r3, r3, r2
 8005e74:	095b      	lsrs	r3, r3, #5
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e7c:	441c      	add	r4, r3
 8005e7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e82:	2200      	movs	r2, #0
 8005e84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e88:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005e8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005e90:	4642      	mov	r2, r8
 8005e92:	464b      	mov	r3, r9
 8005e94:	1891      	adds	r1, r2, r2
 8005e96:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e98:	415b      	adcs	r3, r3
 8005e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ea0:	4641      	mov	r1, r8
 8005ea2:	1851      	adds	r1, r2, r1
 8005ea4:	6339      	str	r1, [r7, #48]	; 0x30
 8005ea6:	4649      	mov	r1, r9
 8005ea8:	414b      	adcs	r3, r1
 8005eaa:	637b      	str	r3, [r7, #52]	; 0x34
 8005eac:	f04f 0200 	mov.w	r2, #0
 8005eb0:	f04f 0300 	mov.w	r3, #0
 8005eb4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005eb8:	4659      	mov	r1, fp
 8005eba:	00cb      	lsls	r3, r1, #3
 8005ebc:	4651      	mov	r1, sl
 8005ebe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ec2:	4651      	mov	r1, sl
 8005ec4:	00ca      	lsls	r2, r1, #3
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	4619      	mov	r1, r3
 8005eca:	4603      	mov	r3, r0
 8005ecc:	4642      	mov	r2, r8
 8005ece:	189b      	adds	r3, r3, r2
 8005ed0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ed4:	464b      	mov	r3, r9
 8005ed6:	460a      	mov	r2, r1
 8005ed8:	eb42 0303 	adc.w	r3, r2, r3
 8005edc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005eec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ef0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	18db      	adds	r3, r3, r3
 8005ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005efa:	4613      	mov	r3, r2
 8005efc:	eb42 0303 	adc.w	r3, r2, r3
 8005f00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005f0a:	f7fa fe77 	bl	8000bfc <__aeabi_uldivmod>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	4b0d      	ldr	r3, [pc, #52]	; (8005f48 <UART_SetConfig+0x2d4>)
 8005f14:	fba3 1302 	umull	r1, r3, r3, r2
 8005f18:	095b      	lsrs	r3, r3, #5
 8005f1a:	2164      	movs	r1, #100	; 0x64
 8005f1c:	fb01 f303 	mul.w	r3, r1, r3
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	3332      	adds	r3, #50	; 0x32
 8005f26:	4a08      	ldr	r2, [pc, #32]	; (8005f48 <UART_SetConfig+0x2d4>)
 8005f28:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2c:	095b      	lsrs	r3, r3, #5
 8005f2e:	f003 0207 	and.w	r2, r3, #7
 8005f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4422      	add	r2, r4
 8005f3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f3c:	e105      	b.n	800614a <UART_SetConfig+0x4d6>
 8005f3e:	bf00      	nop
 8005f40:	40011000 	.word	0x40011000
 8005f44:	40011400 	.word	0x40011400
 8005f48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f50:	2200      	movs	r2, #0
 8005f52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f56:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005f5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005f5e:	4642      	mov	r2, r8
 8005f60:	464b      	mov	r3, r9
 8005f62:	1891      	adds	r1, r2, r2
 8005f64:	6239      	str	r1, [r7, #32]
 8005f66:	415b      	adcs	r3, r3
 8005f68:	627b      	str	r3, [r7, #36]	; 0x24
 8005f6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f6e:	4641      	mov	r1, r8
 8005f70:	1854      	adds	r4, r2, r1
 8005f72:	4649      	mov	r1, r9
 8005f74:	eb43 0501 	adc.w	r5, r3, r1
 8005f78:	f04f 0200 	mov.w	r2, #0
 8005f7c:	f04f 0300 	mov.w	r3, #0
 8005f80:	00eb      	lsls	r3, r5, #3
 8005f82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f86:	00e2      	lsls	r2, r4, #3
 8005f88:	4614      	mov	r4, r2
 8005f8a:	461d      	mov	r5, r3
 8005f8c:	4643      	mov	r3, r8
 8005f8e:	18e3      	adds	r3, r4, r3
 8005f90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f94:	464b      	mov	r3, r9
 8005f96:	eb45 0303 	adc.w	r3, r5, r3
 8005f9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005faa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005fae:	f04f 0200 	mov.w	r2, #0
 8005fb2:	f04f 0300 	mov.w	r3, #0
 8005fb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005fba:	4629      	mov	r1, r5
 8005fbc:	008b      	lsls	r3, r1, #2
 8005fbe:	4621      	mov	r1, r4
 8005fc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fc4:	4621      	mov	r1, r4
 8005fc6:	008a      	lsls	r2, r1, #2
 8005fc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005fcc:	f7fa fe16 	bl	8000bfc <__aeabi_uldivmod>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4b60      	ldr	r3, [pc, #384]	; (8006158 <UART_SetConfig+0x4e4>)
 8005fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8005fda:	095b      	lsrs	r3, r3, #5
 8005fdc:	011c      	lsls	r4, r3, #4
 8005fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005fe8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005fec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005ff0:	4642      	mov	r2, r8
 8005ff2:	464b      	mov	r3, r9
 8005ff4:	1891      	adds	r1, r2, r2
 8005ff6:	61b9      	str	r1, [r7, #24]
 8005ff8:	415b      	adcs	r3, r3
 8005ffa:	61fb      	str	r3, [r7, #28]
 8005ffc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006000:	4641      	mov	r1, r8
 8006002:	1851      	adds	r1, r2, r1
 8006004:	6139      	str	r1, [r7, #16]
 8006006:	4649      	mov	r1, r9
 8006008:	414b      	adcs	r3, r1
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	f04f 0200 	mov.w	r2, #0
 8006010:	f04f 0300 	mov.w	r3, #0
 8006014:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006018:	4659      	mov	r1, fp
 800601a:	00cb      	lsls	r3, r1, #3
 800601c:	4651      	mov	r1, sl
 800601e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006022:	4651      	mov	r1, sl
 8006024:	00ca      	lsls	r2, r1, #3
 8006026:	4610      	mov	r0, r2
 8006028:	4619      	mov	r1, r3
 800602a:	4603      	mov	r3, r0
 800602c:	4642      	mov	r2, r8
 800602e:	189b      	adds	r3, r3, r2
 8006030:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006034:	464b      	mov	r3, r9
 8006036:	460a      	mov	r2, r1
 8006038:	eb42 0303 	adc.w	r3, r2, r3
 800603c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	67bb      	str	r3, [r7, #120]	; 0x78
 800604a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800604c:	f04f 0200 	mov.w	r2, #0
 8006050:	f04f 0300 	mov.w	r3, #0
 8006054:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006058:	4649      	mov	r1, r9
 800605a:	008b      	lsls	r3, r1, #2
 800605c:	4641      	mov	r1, r8
 800605e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006062:	4641      	mov	r1, r8
 8006064:	008a      	lsls	r2, r1, #2
 8006066:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800606a:	f7fa fdc7 	bl	8000bfc <__aeabi_uldivmod>
 800606e:	4602      	mov	r2, r0
 8006070:	460b      	mov	r3, r1
 8006072:	4b39      	ldr	r3, [pc, #228]	; (8006158 <UART_SetConfig+0x4e4>)
 8006074:	fba3 1302 	umull	r1, r3, r3, r2
 8006078:	095b      	lsrs	r3, r3, #5
 800607a:	2164      	movs	r1, #100	; 0x64
 800607c:	fb01 f303 	mul.w	r3, r1, r3
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	011b      	lsls	r3, r3, #4
 8006084:	3332      	adds	r3, #50	; 0x32
 8006086:	4a34      	ldr	r2, [pc, #208]	; (8006158 <UART_SetConfig+0x4e4>)
 8006088:	fba2 2303 	umull	r2, r3, r2, r3
 800608c:	095b      	lsrs	r3, r3, #5
 800608e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006092:	441c      	add	r4, r3
 8006094:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006098:	2200      	movs	r2, #0
 800609a:	673b      	str	r3, [r7, #112]	; 0x70
 800609c:	677a      	str	r2, [r7, #116]	; 0x74
 800609e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80060a2:	4642      	mov	r2, r8
 80060a4:	464b      	mov	r3, r9
 80060a6:	1891      	adds	r1, r2, r2
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	415b      	adcs	r3, r3
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060b2:	4641      	mov	r1, r8
 80060b4:	1851      	adds	r1, r2, r1
 80060b6:	6039      	str	r1, [r7, #0]
 80060b8:	4649      	mov	r1, r9
 80060ba:	414b      	adcs	r3, r1
 80060bc:	607b      	str	r3, [r7, #4]
 80060be:	f04f 0200 	mov.w	r2, #0
 80060c2:	f04f 0300 	mov.w	r3, #0
 80060c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80060ca:	4659      	mov	r1, fp
 80060cc:	00cb      	lsls	r3, r1, #3
 80060ce:	4651      	mov	r1, sl
 80060d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060d4:	4651      	mov	r1, sl
 80060d6:	00ca      	lsls	r2, r1, #3
 80060d8:	4610      	mov	r0, r2
 80060da:	4619      	mov	r1, r3
 80060dc:	4603      	mov	r3, r0
 80060de:	4642      	mov	r2, r8
 80060e0:	189b      	adds	r3, r3, r2
 80060e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80060e4:	464b      	mov	r3, r9
 80060e6:	460a      	mov	r2, r1
 80060e8:	eb42 0303 	adc.w	r3, r2, r3
 80060ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	663b      	str	r3, [r7, #96]	; 0x60
 80060f8:	667a      	str	r2, [r7, #100]	; 0x64
 80060fa:	f04f 0200 	mov.w	r2, #0
 80060fe:	f04f 0300 	mov.w	r3, #0
 8006102:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006106:	4649      	mov	r1, r9
 8006108:	008b      	lsls	r3, r1, #2
 800610a:	4641      	mov	r1, r8
 800610c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006110:	4641      	mov	r1, r8
 8006112:	008a      	lsls	r2, r1, #2
 8006114:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006118:	f7fa fd70 	bl	8000bfc <__aeabi_uldivmod>
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	4b0d      	ldr	r3, [pc, #52]	; (8006158 <UART_SetConfig+0x4e4>)
 8006122:	fba3 1302 	umull	r1, r3, r3, r2
 8006126:	095b      	lsrs	r3, r3, #5
 8006128:	2164      	movs	r1, #100	; 0x64
 800612a:	fb01 f303 	mul.w	r3, r1, r3
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	011b      	lsls	r3, r3, #4
 8006132:	3332      	adds	r3, #50	; 0x32
 8006134:	4a08      	ldr	r2, [pc, #32]	; (8006158 <UART_SetConfig+0x4e4>)
 8006136:	fba2 2303 	umull	r2, r3, r2, r3
 800613a:	095b      	lsrs	r3, r3, #5
 800613c:	f003 020f 	and.w	r2, r3, #15
 8006140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4422      	add	r2, r4
 8006148:	609a      	str	r2, [r3, #8]
}
 800614a:	bf00      	nop
 800614c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006150:	46bd      	mov	sp, r7
 8006152:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006156:	bf00      	nop
 8006158:	51eb851f 	.word	0x51eb851f

0800615c <__NVIC_SetPriority>:
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	4603      	mov	r3, r0
 8006164:	6039      	str	r1, [r7, #0]
 8006166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800616c:	2b00      	cmp	r3, #0
 800616e:	db0a      	blt.n	8006186 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	b2da      	uxtb	r2, r3
 8006174:	490c      	ldr	r1, [pc, #48]	; (80061a8 <__NVIC_SetPriority+0x4c>)
 8006176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800617a:	0112      	lsls	r2, r2, #4
 800617c:	b2d2      	uxtb	r2, r2
 800617e:	440b      	add	r3, r1
 8006180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006184:	e00a      	b.n	800619c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	b2da      	uxtb	r2, r3
 800618a:	4908      	ldr	r1, [pc, #32]	; (80061ac <__NVIC_SetPriority+0x50>)
 800618c:	79fb      	ldrb	r3, [r7, #7]
 800618e:	f003 030f 	and.w	r3, r3, #15
 8006192:	3b04      	subs	r3, #4
 8006194:	0112      	lsls	r2, r2, #4
 8006196:	b2d2      	uxtb	r2, r2
 8006198:	440b      	add	r3, r1
 800619a:	761a      	strb	r2, [r3, #24]
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	e000e100 	.word	0xe000e100
 80061ac:	e000ed00 	.word	0xe000ed00

080061b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80061b0:	b580      	push	{r7, lr}
 80061b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80061b4:	4b05      	ldr	r3, [pc, #20]	; (80061cc <SysTick_Handler+0x1c>)
 80061b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80061b8:	f001 ff0e 	bl	8007fd8 <xTaskGetSchedulerState>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d001      	beq.n	80061c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80061c2:	f002 fcf9 	bl	8008bb8 <xPortSysTickHandler>
  }
}
 80061c6:	bf00      	nop
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	e000e010 	.word	0xe000e010

080061d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80061d0:	b580      	push	{r7, lr}
 80061d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80061d4:	2100      	movs	r1, #0
 80061d6:	f06f 0004 	mvn.w	r0, #4
 80061da:	f7ff ffbf 	bl	800615c <__NVIC_SetPriority>
#endif
}
 80061de:	bf00      	nop
 80061e0:	bd80      	pop	{r7, pc}
	...

080061e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061ea:	f3ef 8305 	mrs	r3, IPSR
 80061ee:	603b      	str	r3, [r7, #0]
  return(result);
 80061f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80061f6:	f06f 0305 	mvn.w	r3, #5
 80061fa:	607b      	str	r3, [r7, #4]
 80061fc:	e00c      	b.n	8006218 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80061fe:	4b0a      	ldr	r3, [pc, #40]	; (8006228 <osKernelInitialize+0x44>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d105      	bne.n	8006212 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006206:	4b08      	ldr	r3, [pc, #32]	; (8006228 <osKernelInitialize+0x44>)
 8006208:	2201      	movs	r2, #1
 800620a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800620c:	2300      	movs	r3, #0
 800620e:	607b      	str	r3, [r7, #4]
 8006210:	e002      	b.n	8006218 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006216:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006218:	687b      	ldr	r3, [r7, #4]
}
 800621a:	4618      	mov	r0, r3
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	20007750 	.word	0x20007750

0800622c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006232:	f3ef 8305 	mrs	r3, IPSR
 8006236:	603b      	str	r3, [r7, #0]
  return(result);
 8006238:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <osKernelStart+0x1a>
    stat = osErrorISR;
 800623e:	f06f 0305 	mvn.w	r3, #5
 8006242:	607b      	str	r3, [r7, #4]
 8006244:	e010      	b.n	8006268 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006246:	4b0b      	ldr	r3, [pc, #44]	; (8006274 <osKernelStart+0x48>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d109      	bne.n	8006262 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800624e:	f7ff ffbf 	bl	80061d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006252:	4b08      	ldr	r3, [pc, #32]	; (8006274 <osKernelStart+0x48>)
 8006254:	2202      	movs	r2, #2
 8006256:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006258:	f001 fa50 	bl	80076fc <vTaskStartScheduler>
      stat = osOK;
 800625c:	2300      	movs	r3, #0
 800625e:	607b      	str	r3, [r7, #4]
 8006260:	e002      	b.n	8006268 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006266:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006268:	687b      	ldr	r3, [r7, #4]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	20007750 	.word	0x20007750

08006278 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006278:	b580      	push	{r7, lr}
 800627a:	b08e      	sub	sp, #56	; 0x38
 800627c:	af04      	add	r7, sp, #16
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006284:	2300      	movs	r3, #0
 8006286:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006288:	f3ef 8305 	mrs	r3, IPSR
 800628c:	617b      	str	r3, [r7, #20]
  return(result);
 800628e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006290:	2b00      	cmp	r3, #0
 8006292:	d17e      	bne.n	8006392 <osThreadNew+0x11a>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d07b      	beq.n	8006392 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800629a:	2380      	movs	r3, #128	; 0x80
 800629c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800629e:	2318      	movs	r3, #24
 80062a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80062a2:	2300      	movs	r3, #0
 80062a4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80062a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d045      	beq.n	800633e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d002      	beq.n	80062c0 <osThreadNew+0x48>
        name = attr->name;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d002      	beq.n	80062ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d008      	beq.n	80062e6 <osThreadNew+0x6e>
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	2b38      	cmp	r3, #56	; 0x38
 80062d8:	d805      	bhi.n	80062e6 <osThreadNew+0x6e>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <osThreadNew+0x72>
        return (NULL);
 80062e6:	2300      	movs	r3, #0
 80062e8:	e054      	b.n	8006394 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	089b      	lsrs	r3, r3, #2
 80062f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00e      	beq.n	8006320 <osThreadNew+0xa8>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	2b5b      	cmp	r3, #91	; 0x5b
 8006308:	d90a      	bls.n	8006320 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800630e:	2b00      	cmp	r3, #0
 8006310:	d006      	beq.n	8006320 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d002      	beq.n	8006320 <osThreadNew+0xa8>
        mem = 1;
 800631a:	2301      	movs	r3, #1
 800631c:	61bb      	str	r3, [r7, #24]
 800631e:	e010      	b.n	8006342 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10c      	bne.n	8006342 <osThreadNew+0xca>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d108      	bne.n	8006342 <osThreadNew+0xca>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d104      	bne.n	8006342 <osThreadNew+0xca>
          mem = 0;
 8006338:	2300      	movs	r3, #0
 800633a:	61bb      	str	r3, [r7, #24]
 800633c:	e001      	b.n	8006342 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800633e:	2300      	movs	r3, #0
 8006340:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d110      	bne.n	800636a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006350:	9202      	str	r2, [sp, #8]
 8006352:	9301      	str	r3, [sp, #4]
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	6a3a      	ldr	r2, [r7, #32]
 800635c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 fff6 	bl	8007350 <xTaskCreateStatic>
 8006364:	4603      	mov	r3, r0
 8006366:	613b      	str	r3, [r7, #16]
 8006368:	e013      	b.n	8006392 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d110      	bne.n	8006392 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	b29a      	uxth	r2, r3
 8006374:	f107 0310 	add.w	r3, r7, #16
 8006378:	9301      	str	r3, [sp, #4]
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f001 f841 	bl	800740a <xTaskCreate>
 8006388:	4603      	mov	r3, r0
 800638a:	2b01      	cmp	r3, #1
 800638c:	d001      	beq.n	8006392 <osThreadNew+0x11a>
            hTask = NULL;
 800638e:	2300      	movs	r3, #0
 8006390:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006392:	693b      	ldr	r3, [r7, #16]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3728      	adds	r7, #40	; 0x28
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063a4:	f3ef 8305 	mrs	r3, IPSR
 80063a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80063aa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d003      	beq.n	80063b8 <osDelay+0x1c>
    stat = osErrorISR;
 80063b0:	f06f 0305 	mvn.w	r3, #5
 80063b4:	60fb      	str	r3, [r7, #12]
 80063b6:	e007      	b.n	80063c8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d002      	beq.n	80063c8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f001 f966 	bl	8007694 <vTaskDelay>
    }
  }

  return (stat);
 80063c8:	68fb      	ldr	r3, [r7, #12]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b08a      	sub	sp, #40	; 0x28
 80063d6:	af02      	add	r7, sp, #8
 80063d8:	60f8      	str	r0, [r7, #12]
 80063da:	60b9      	str	r1, [r7, #8]
 80063dc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80063de:	2300      	movs	r3, #0
 80063e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063e2:	f3ef 8305 	mrs	r3, IPSR
 80063e6:	613b      	str	r3, [r7, #16]
  return(result);
 80063e8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d15f      	bne.n	80064ae <osMessageQueueNew+0xdc>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d05c      	beq.n	80064ae <osMessageQueueNew+0xdc>
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d059      	beq.n	80064ae <osMessageQueueNew+0xdc>
    mem = -1;
 80063fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d029      	beq.n	800645a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d012      	beq.n	8006434 <osMessageQueueNew+0x62>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	2b4f      	cmp	r3, #79	; 0x4f
 8006414:	d90e      	bls.n	8006434 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	695a      	ldr	r2, [r3, #20]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	68b9      	ldr	r1, [r7, #8]
 8006426:	fb01 f303 	mul.w	r3, r1, r3
 800642a:	429a      	cmp	r2, r3
 800642c:	d302      	bcc.n	8006434 <osMessageQueueNew+0x62>
        mem = 1;
 800642e:	2301      	movs	r3, #1
 8006430:	61bb      	str	r3, [r7, #24]
 8006432:	e014      	b.n	800645e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d110      	bne.n	800645e <osMessageQueueNew+0x8c>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10c      	bne.n	800645e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006448:	2b00      	cmp	r3, #0
 800644a:	d108      	bne.n	800645e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d104      	bne.n	800645e <osMessageQueueNew+0x8c>
          mem = 0;
 8006454:	2300      	movs	r3, #0
 8006456:	61bb      	str	r3, [r7, #24]
 8006458:	e001      	b.n	800645e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800645a:	2300      	movs	r3, #0
 800645c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d10b      	bne.n	800647c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	691a      	ldr	r2, [r3, #16]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	2100      	movs	r1, #0
 800646e:	9100      	str	r1, [sp, #0]
 8006470:	68b9      	ldr	r1, [r7, #8]
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f000 fa2e 	bl	80068d4 <xQueueGenericCreateStatic>
 8006478:	61f8      	str	r0, [r7, #28]
 800647a:	e008      	b.n	800648e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d105      	bne.n	800648e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006482:	2200      	movs	r2, #0
 8006484:	68b9      	ldr	r1, [r7, #8]
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 fa9c 	bl	80069c4 <xQueueGenericCreate>
 800648c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00c      	beq.n	80064ae <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <osMessageQueueNew+0xd0>
        name = attr->name;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	617b      	str	r3, [r7, #20]
 80064a0:	e001      	b.n	80064a6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80064a2:	2300      	movs	r3, #0
 80064a4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80064a6:	6979      	ldr	r1, [r7, #20]
 80064a8:	69f8      	ldr	r0, [r7, #28]
 80064aa:	f000 fef3 	bl	8007294 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80064ae:	69fb      	ldr	r3, [r7, #28]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3720      	adds	r7, #32
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b088      	sub	sp, #32
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	603b      	str	r3, [r7, #0]
 80064c4:	4613      	mov	r3, r2
 80064c6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80064cc:	2300      	movs	r3, #0
 80064ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064d0:	f3ef 8305 	mrs	r3, IPSR
 80064d4:	617b      	str	r3, [r7, #20]
  return(result);
 80064d6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d028      	beq.n	800652e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d005      	beq.n	80064ee <osMessageQueuePut+0x36>
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d002      	beq.n	80064ee <osMessageQueuePut+0x36>
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80064ee:	f06f 0303 	mvn.w	r3, #3
 80064f2:	61fb      	str	r3, [r7, #28]
 80064f4:	e038      	b.n	8006568 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80064f6:	2300      	movs	r3, #0
 80064f8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80064fa:	f107 0210 	add.w	r2, r7, #16
 80064fe:	2300      	movs	r3, #0
 8006500:	68b9      	ldr	r1, [r7, #8]
 8006502:	69b8      	ldr	r0, [r7, #24]
 8006504:	f000 fbba 	bl	8006c7c <xQueueGenericSendFromISR>
 8006508:	4603      	mov	r3, r0
 800650a:	2b01      	cmp	r3, #1
 800650c:	d003      	beq.n	8006516 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800650e:	f06f 0302 	mvn.w	r3, #2
 8006512:	61fb      	str	r3, [r7, #28]
 8006514:	e028      	b.n	8006568 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d025      	beq.n	8006568 <osMessageQueuePut+0xb0>
 800651c:	4b15      	ldr	r3, [pc, #84]	; (8006574 <osMessageQueuePut+0xbc>)
 800651e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	e01c      	b.n	8006568 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d002      	beq.n	800653a <osMessageQueuePut+0x82>
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d103      	bne.n	8006542 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800653a:	f06f 0303 	mvn.w	r3, #3
 800653e:	61fb      	str	r3, [r7, #28]
 8006540:	e012      	b.n	8006568 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006542:	2300      	movs	r3, #0
 8006544:	683a      	ldr	r2, [r7, #0]
 8006546:	68b9      	ldr	r1, [r7, #8]
 8006548:	69b8      	ldr	r0, [r7, #24]
 800654a:	f000 fa99 	bl	8006a80 <xQueueGenericSend>
 800654e:	4603      	mov	r3, r0
 8006550:	2b01      	cmp	r3, #1
 8006552:	d009      	beq.n	8006568 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800655a:	f06f 0301 	mvn.w	r3, #1
 800655e:	61fb      	str	r3, [r7, #28]
 8006560:	e002      	b.n	8006568 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006562:	f06f 0302 	mvn.w	r3, #2
 8006566:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006568:	69fb      	ldr	r3, [r7, #28]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3720      	adds	r7, #32
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	e000ed04 	.word	0xe000ed04

08006578 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006578:	b580      	push	{r7, lr}
 800657a:	b088      	sub	sp, #32
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
 8006584:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800658a:	2300      	movs	r3, #0
 800658c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800658e:	f3ef 8305 	mrs	r3, IPSR
 8006592:	617b      	str	r3, [r7, #20]
  return(result);
 8006594:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006596:	2b00      	cmp	r3, #0
 8006598:	d028      	beq.n	80065ec <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d005      	beq.n	80065ac <osMessageQueueGet+0x34>
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d002      	beq.n	80065ac <osMessageQueueGet+0x34>
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d003      	beq.n	80065b4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80065ac:	f06f 0303 	mvn.w	r3, #3
 80065b0:	61fb      	str	r3, [r7, #28]
 80065b2:	e037      	b.n	8006624 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80065b4:	2300      	movs	r3, #0
 80065b6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80065b8:	f107 0310 	add.w	r3, r7, #16
 80065bc:	461a      	mov	r2, r3
 80065be:	68b9      	ldr	r1, [r7, #8]
 80065c0:	69b8      	ldr	r0, [r7, #24]
 80065c2:	f000 fcd7 	bl	8006f74 <xQueueReceiveFromISR>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d003      	beq.n	80065d4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80065cc:	f06f 0302 	mvn.w	r3, #2
 80065d0:	61fb      	str	r3, [r7, #28]
 80065d2:	e027      	b.n	8006624 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d024      	beq.n	8006624 <osMessageQueueGet+0xac>
 80065da:	4b15      	ldr	r3, [pc, #84]	; (8006630 <osMessageQueueGet+0xb8>)
 80065dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	e01b      	b.n	8006624 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d002      	beq.n	80065f8 <osMessageQueueGet+0x80>
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d103      	bne.n	8006600 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80065f8:	f06f 0303 	mvn.w	r3, #3
 80065fc:	61fb      	str	r3, [r7, #28]
 80065fe:	e011      	b.n	8006624 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	68b9      	ldr	r1, [r7, #8]
 8006604:	69b8      	ldr	r0, [r7, #24]
 8006606:	f000 fbd5 	bl	8006db4 <xQueueReceive>
 800660a:	4603      	mov	r3, r0
 800660c:	2b01      	cmp	r3, #1
 800660e:	d009      	beq.n	8006624 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006616:	f06f 0301 	mvn.w	r3, #1
 800661a:	61fb      	str	r3, [r7, #28]
 800661c:	e002      	b.n	8006624 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800661e:	f06f 0302 	mvn.w	r3, #2
 8006622:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006624:	69fb      	ldr	r3, [r7, #28]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3720      	adds	r7, #32
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	e000ed04 	.word	0xe000ed04

08006634 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	4a07      	ldr	r2, [pc, #28]	; (8006660 <vApplicationGetIdleTaskMemory+0x2c>)
 8006644:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	4a06      	ldr	r2, [pc, #24]	; (8006664 <vApplicationGetIdleTaskMemory+0x30>)
 800664a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2280      	movs	r2, #128	; 0x80
 8006650:	601a      	str	r2, [r3, #0]
}
 8006652:	bf00      	nop
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	20007754 	.word	0x20007754
 8006664:	200077b0 	.word	0x200077b0

08006668 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4a07      	ldr	r2, [pc, #28]	; (8006694 <vApplicationGetTimerTaskMemory+0x2c>)
 8006678:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	4a06      	ldr	r2, [pc, #24]	; (8006698 <vApplicationGetTimerTaskMemory+0x30>)
 800667e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006686:	601a      	str	r2, [r3, #0]
}
 8006688:	bf00      	nop
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	200079b0 	.word	0x200079b0
 8006698:	20007a0c 	.word	0x20007a0c

0800669c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f103 0208 	add.w	r2, r3, #8
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f103 0208 	add.w	r2, r3, #8
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f103 0208 	add.w	r2, r3, #8
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066ea:	bf00      	nop
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066f6:	b480      	push	{r7}
 80066f8:	b085      	sub	sp, #20
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
 80066fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	689a      	ldr	r2, [r3, #8]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	1c5a      	adds	r2, r3, #1
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	601a      	str	r2, [r3, #0]
}
 8006732:	bf00      	nop
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800673e:	b480      	push	{r7}
 8006740:	b085      	sub	sp, #20
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
 8006746:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006754:	d103      	bne.n	800675e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	60fb      	str	r3, [r7, #12]
 800675c:	e00c      	b.n	8006778 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	3308      	adds	r3, #8
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	e002      	b.n	800676c <vListInsert+0x2e>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	429a      	cmp	r2, r3
 8006776:	d2f6      	bcs.n	8006766 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	683a      	ldr	r2, [r7, #0]
 8006786:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	601a      	str	r2, [r3, #0]
}
 80067a4:	bf00      	nop
 80067a6:	3714      	adds	r7, #20
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	6892      	ldr	r2, [r2, #8]
 80067c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	6852      	ldr	r2, [r2, #4]
 80067d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d103      	bne.n	80067e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	689a      	ldr	r2, [r3, #8]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	1e5a      	subs	r2, r3, #1
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10a      	bne.n	800682e <xQueueGenericReset+0x2a>
	__asm volatile
 8006818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681c:	f383 8811 	msr	BASEPRI, r3
 8006820:	f3bf 8f6f 	isb	sy
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	60bb      	str	r3, [r7, #8]
}
 800682a:	bf00      	nop
 800682c:	e7fe      	b.n	800682c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800682e:	f002 f931 	bl	8008a94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683a:	68f9      	ldr	r1, [r7, #12]
 800683c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800683e:	fb01 f303 	mul.w	r3, r1, r3
 8006842:	441a      	add	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685e:	3b01      	subs	r3, #1
 8006860:	68f9      	ldr	r1, [r7, #12]
 8006862:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006864:	fb01 f303 	mul.w	r3, r1, r3
 8006868:	441a      	add	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	22ff      	movs	r2, #255	; 0xff
 8006872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	22ff      	movs	r2, #255	; 0xff
 800687a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d114      	bne.n	80068ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d01a      	beq.n	80068c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	3310      	adds	r3, #16
 8006890:	4618      	mov	r0, r3
 8006892:	f001 f9bd 	bl	8007c10 <xTaskRemoveFromEventList>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d012      	beq.n	80068c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800689c:	4b0c      	ldr	r3, [pc, #48]	; (80068d0 <xQueueGenericReset+0xcc>)
 800689e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	e009      	b.n	80068c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	3310      	adds	r3, #16
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7ff fef2 	bl	800669c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	3324      	adds	r3, #36	; 0x24
 80068bc:	4618      	mov	r0, r3
 80068be:	f7ff feed 	bl	800669c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80068c2:	f002 f917 	bl	8008af4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80068c6:	2301      	movs	r3, #1
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	e000ed04 	.word	0xe000ed04

080068d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08e      	sub	sp, #56	; 0x38
 80068d8:	af02      	add	r7, sp, #8
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
 80068e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10a      	bne.n	80068fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80068e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ec:	f383 8811 	msr	BASEPRI, r3
 80068f0:	f3bf 8f6f 	isb	sy
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068fa:	bf00      	nop
 80068fc:	e7fe      	b.n	80068fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10a      	bne.n	800691a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006916:	bf00      	nop
 8006918:	e7fe      	b.n	8006918 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <xQueueGenericCreateStatic+0x52>
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d001      	beq.n	800692a <xQueueGenericCreateStatic+0x56>
 8006926:	2301      	movs	r3, #1
 8006928:	e000      	b.n	800692c <xQueueGenericCreateStatic+0x58>
 800692a:	2300      	movs	r3, #0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10a      	bne.n	8006946 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	623b      	str	r3, [r7, #32]
}
 8006942:	bf00      	nop
 8006944:	e7fe      	b.n	8006944 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d102      	bne.n	8006952 <xQueueGenericCreateStatic+0x7e>
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <xQueueGenericCreateStatic+0x82>
 8006952:	2301      	movs	r3, #1
 8006954:	e000      	b.n	8006958 <xQueueGenericCreateStatic+0x84>
 8006956:	2300      	movs	r3, #0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10a      	bne.n	8006972 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800695c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006960:	f383 8811 	msr	BASEPRI, r3
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	61fb      	str	r3, [r7, #28]
}
 800696e:	bf00      	nop
 8006970:	e7fe      	b.n	8006970 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006972:	2350      	movs	r3, #80	; 0x50
 8006974:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2b50      	cmp	r3, #80	; 0x50
 800697a:	d00a      	beq.n	8006992 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	61bb      	str	r3, [r7, #24]
}
 800698e:	bf00      	nop
 8006990:	e7fe      	b.n	8006990 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006992:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00d      	beq.n	80069ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800699e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80069aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	4613      	mov	r3, r2
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	68b9      	ldr	r1, [r7, #8]
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 f83f 	bl	8006a38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80069ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80069bc:	4618      	mov	r0, r3
 80069be:	3730      	adds	r7, #48	; 0x30
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b08a      	sub	sp, #40	; 0x28
 80069c8:	af02      	add	r7, sp, #8
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	4613      	mov	r3, r2
 80069d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10a      	bne.n	80069ee <xQueueGenericCreate+0x2a>
	__asm volatile
 80069d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	613b      	str	r3, [r7, #16]
}
 80069ea:	bf00      	nop
 80069ec:	e7fe      	b.n	80069ec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	fb02 f303 	mul.w	r3, r2, r3
 80069f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	3350      	adds	r3, #80	; 0x50
 80069fc:	4618      	mov	r0, r3
 80069fe:	f002 f96b 	bl	8008cd8 <pvPortMalloc>
 8006a02:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d011      	beq.n	8006a2e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	3350      	adds	r3, #80	; 0x50
 8006a12:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a1c:	79fa      	ldrb	r2, [r7, #7]
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	4613      	mov	r3, r2
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	68b9      	ldr	r1, [r7, #8]
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f000 f805 	bl	8006a38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a2e:	69bb      	ldr	r3, [r7, #24]
	}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3720      	adds	r7, #32
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
 8006a44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d103      	bne.n	8006a54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	69ba      	ldr	r2, [r7, #24]
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	e002      	b.n	8006a5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a66:	2101      	movs	r1, #1
 8006a68:	69b8      	ldr	r0, [r7, #24]
 8006a6a:	f7ff fecb 	bl	8006804 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	78fa      	ldrb	r2, [r7, #3]
 8006a72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a76:	bf00      	nop
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
	...

08006a80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b08e      	sub	sp, #56	; 0x38
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
 8006a8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10a      	bne.n	8006ab2 <xQueueGenericSend+0x32>
	__asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006aae:	bf00      	nop
 8006ab0:	e7fe      	b.n	8006ab0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d103      	bne.n	8006ac0 <xQueueGenericSend+0x40>
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <xQueueGenericSend+0x44>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e000      	b.n	8006ac6 <xQueueGenericSend+0x46>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10a      	bne.n	8006ae0 <xQueueGenericSend+0x60>
	__asm volatile
 8006aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ace:	f383 8811 	msr	BASEPRI, r3
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006adc:	bf00      	nop
 8006ade:	e7fe      	b.n	8006ade <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d103      	bne.n	8006aee <xQueueGenericSend+0x6e>
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d101      	bne.n	8006af2 <xQueueGenericSend+0x72>
 8006aee:	2301      	movs	r3, #1
 8006af0:	e000      	b.n	8006af4 <xQueueGenericSend+0x74>
 8006af2:	2300      	movs	r3, #0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10a      	bne.n	8006b0e <xQueueGenericSend+0x8e>
	__asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	623b      	str	r3, [r7, #32]
}
 8006b0a:	bf00      	nop
 8006b0c:	e7fe      	b.n	8006b0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b0e:	f001 fa63 	bl	8007fd8 <xTaskGetSchedulerState>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d102      	bne.n	8006b1e <xQueueGenericSend+0x9e>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d101      	bne.n	8006b22 <xQueueGenericSend+0xa2>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e000      	b.n	8006b24 <xQueueGenericSend+0xa4>
 8006b22:	2300      	movs	r3, #0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10a      	bne.n	8006b3e <xQueueGenericSend+0xbe>
	__asm volatile
 8006b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	61fb      	str	r3, [r7, #28]
}
 8006b3a:	bf00      	nop
 8006b3c:	e7fe      	b.n	8006b3c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b3e:	f001 ffa9 	bl	8008a94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d302      	bcc.n	8006b54 <xQueueGenericSend+0xd4>
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d129      	bne.n	8006ba8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b54:	683a      	ldr	r2, [r7, #0]
 8006b56:	68b9      	ldr	r1, [r7, #8]
 8006b58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b5a:	f000 fa8b 	bl	8007074 <prvCopyDataToQueue>
 8006b5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d010      	beq.n	8006b8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6a:	3324      	adds	r3, #36	; 0x24
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f001 f84f 	bl	8007c10 <xTaskRemoveFromEventList>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d013      	beq.n	8006ba0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006b78:	4b3f      	ldr	r3, [pc, #252]	; (8006c78 <xQueueGenericSend+0x1f8>)
 8006b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b7e:	601a      	str	r2, [r3, #0]
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	e00a      	b.n	8006ba0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d007      	beq.n	8006ba0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006b90:	4b39      	ldr	r3, [pc, #228]	; (8006c78 <xQueueGenericSend+0x1f8>)
 8006b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b96:	601a      	str	r2, [r3, #0]
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ba0:	f001 ffa8 	bl	8008af4 <vPortExitCritical>
				return pdPASS;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e063      	b.n	8006c70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d103      	bne.n	8006bb6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006bae:	f001 ffa1 	bl	8008af4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	e05c      	b.n	8006c70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d106      	bne.n	8006bca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bbc:	f107 0314 	add.w	r3, r7, #20
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f001 f8af 	bl	8007d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bca:	f001 ff93 	bl	8008af4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bce:	f000 fdfb 	bl	80077c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bd2:	f001 ff5f 	bl	8008a94 <vPortEnterCritical>
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bdc:	b25b      	sxtb	r3, r3
 8006bde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006be2:	d103      	bne.n	8006bec <xQueueGenericSend+0x16c>
 8006be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bf2:	b25b      	sxtb	r3, r3
 8006bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bf8:	d103      	bne.n	8006c02 <xQueueGenericSend+0x182>
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c02:	f001 ff77 	bl	8008af4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c06:	1d3a      	adds	r2, r7, #4
 8006c08:	f107 0314 	add.w	r3, r7, #20
 8006c0c:	4611      	mov	r1, r2
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f001 f89e 	bl	8007d50 <xTaskCheckForTimeOut>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d124      	bne.n	8006c64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c1c:	f000 fb22 	bl	8007264 <prvIsQueueFull>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d018      	beq.n	8006c58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c28:	3310      	adds	r3, #16
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	4611      	mov	r1, r2
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 ff9e 	bl	8007b70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c36:	f000 faad 	bl	8007194 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c3a:	f000 fdd3 	bl	80077e4 <xTaskResumeAll>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f47f af7c 	bne.w	8006b3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006c46:	4b0c      	ldr	r3, [pc, #48]	; (8006c78 <xQueueGenericSend+0x1f8>)
 8006c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	e772      	b.n	8006b3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c5a:	f000 fa9b 	bl	8007194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c5e:	f000 fdc1 	bl	80077e4 <xTaskResumeAll>
 8006c62:	e76c      	b.n	8006b3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c66:	f000 fa95 	bl	8007194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c6a:	f000 fdbb 	bl	80077e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3738      	adds	r7, #56	; 0x38
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	e000ed04 	.word	0xe000ed04

08006c7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b090      	sub	sp, #64	; 0x40
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
 8006c88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10a      	bne.n	8006caa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ca6:	bf00      	nop
 8006ca8:	e7fe      	b.n	8006ca8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d103      	bne.n	8006cb8 <xQueueGenericSendFromISR+0x3c>
 8006cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <xQueueGenericSendFromISR+0x40>
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e000      	b.n	8006cbe <xQueueGenericSendFromISR+0x42>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10a      	bne.n	8006cd8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc6:	f383 8811 	msr	BASEPRI, r3
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006cd4:	bf00      	nop
 8006cd6:	e7fe      	b.n	8006cd6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d103      	bne.n	8006ce6 <xQueueGenericSendFromISR+0x6a>
 8006cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d101      	bne.n	8006cea <xQueueGenericSendFromISR+0x6e>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e000      	b.n	8006cec <xQueueGenericSendFromISR+0x70>
 8006cea:	2300      	movs	r3, #0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10a      	bne.n	8006d06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	623b      	str	r3, [r7, #32]
}
 8006d02:	bf00      	nop
 8006d04:	e7fe      	b.n	8006d04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d06:	f001 ffa7 	bl	8008c58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006d0a:	f3ef 8211 	mrs	r2, BASEPRI
 8006d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	61fa      	str	r2, [r7, #28]
 8006d20:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d22:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d24:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d302      	bcc.n	8006d38 <xQueueGenericSendFromISR+0xbc>
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d12f      	bne.n	8006d98 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d46:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	68b9      	ldr	r1, [r7, #8]
 8006d4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d4e:	f000 f991 	bl	8007074 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d52:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006d56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d5a:	d112      	bne.n	8006d82 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d016      	beq.n	8006d92 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d66:	3324      	adds	r3, #36	; 0x24
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 ff51 	bl	8007c10 <xTaskRemoveFromEventList>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00e      	beq.n	8006d92 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00b      	beq.n	8006d92 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	e007      	b.n	8006d92 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006d86:	3301      	adds	r3, #1
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	b25a      	sxtb	r2, r3
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006d92:	2301      	movs	r3, #1
 8006d94:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006d96:	e001      	b.n	8006d9c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d9e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006da6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3740      	adds	r7, #64	; 0x40
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
	...

08006db4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b08c      	sub	sp, #48	; 0x30
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10a      	bne.n	8006de4 <xQueueReceive+0x30>
	__asm volatile
 8006dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	623b      	str	r3, [r7, #32]
}
 8006de0:	bf00      	nop
 8006de2:	e7fe      	b.n	8006de2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d103      	bne.n	8006df2 <xQueueReceive+0x3e>
 8006dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <xQueueReceive+0x42>
 8006df2:	2301      	movs	r3, #1
 8006df4:	e000      	b.n	8006df8 <xQueueReceive+0x44>
 8006df6:	2300      	movs	r3, #0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10a      	bne.n	8006e12 <xQueueReceive+0x5e>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	61fb      	str	r3, [r7, #28]
}
 8006e0e:	bf00      	nop
 8006e10:	e7fe      	b.n	8006e10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e12:	f001 f8e1 	bl	8007fd8 <xTaskGetSchedulerState>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d102      	bne.n	8006e22 <xQueueReceive+0x6e>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <xQueueReceive+0x72>
 8006e22:	2301      	movs	r3, #1
 8006e24:	e000      	b.n	8006e28 <xQueueReceive+0x74>
 8006e26:	2300      	movs	r3, #0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10a      	bne.n	8006e42 <xQueueReceive+0x8e>
	__asm volatile
 8006e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	61bb      	str	r3, [r7, #24]
}
 8006e3e:	bf00      	nop
 8006e40:	e7fe      	b.n	8006e40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e42:	f001 fe27 	bl	8008a94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d01f      	beq.n	8006e92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e52:	68b9      	ldr	r1, [r7, #8]
 8006e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e56:	f000 f977 	bl	8007148 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	1e5a      	subs	r2, r3, #1
 8006e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00f      	beq.n	8006e8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6c:	3310      	adds	r3, #16
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f000 fece 	bl	8007c10 <xTaskRemoveFromEventList>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d007      	beq.n	8006e8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e7a:	4b3d      	ldr	r3, [pc, #244]	; (8006f70 <xQueueReceive+0x1bc>)
 8006e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	f3bf 8f4f 	dsb	sy
 8006e86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e8a:	f001 fe33 	bl	8008af4 <vPortExitCritical>
				return pdPASS;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e069      	b.n	8006f66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d103      	bne.n	8006ea0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e98:	f001 fe2c 	bl	8008af4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	e062      	b.n	8006f66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d106      	bne.n	8006eb4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ea6:	f107 0310 	add.w	r3, r7, #16
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 ff3a 	bl	8007d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006eb4:	f001 fe1e 	bl	8008af4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006eb8:	f000 fc86 	bl	80077c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ebc:	f001 fdea 	bl	8008a94 <vPortEnterCritical>
 8006ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ec6:	b25b      	sxtb	r3, r3
 8006ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ecc:	d103      	bne.n	8006ed6 <xQueueReceive+0x122>
 8006ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006edc:	b25b      	sxtb	r3, r3
 8006ede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ee2:	d103      	bne.n	8006eec <xQueueReceive+0x138>
 8006ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006eec:	f001 fe02 	bl	8008af4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ef0:	1d3a      	adds	r2, r7, #4
 8006ef2:	f107 0310 	add.w	r3, r7, #16
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f000 ff29 	bl	8007d50 <xTaskCheckForTimeOut>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d123      	bne.n	8006f4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f06:	f000 f997 	bl	8007238 <prvIsQueueEmpty>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d017      	beq.n	8006f40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f12:	3324      	adds	r3, #36	; 0x24
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	4611      	mov	r1, r2
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f000 fe29 	bl	8007b70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f20:	f000 f938 	bl	8007194 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f24:	f000 fc5e 	bl	80077e4 <xTaskResumeAll>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d189      	bne.n	8006e42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006f2e:	4b10      	ldr	r3, [pc, #64]	; (8006f70 <xQueueReceive+0x1bc>)
 8006f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f34:	601a      	str	r2, [r3, #0]
 8006f36:	f3bf 8f4f 	dsb	sy
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	e780      	b.n	8006e42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f42:	f000 f927 	bl	8007194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f46:	f000 fc4d 	bl	80077e4 <xTaskResumeAll>
 8006f4a:	e77a      	b.n	8006e42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006f4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f4e:	f000 f921 	bl	8007194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f52:	f000 fc47 	bl	80077e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f58:	f000 f96e 	bl	8007238 <prvIsQueueEmpty>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f43f af6f 	beq.w	8006e42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3730      	adds	r7, #48	; 0x30
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	e000ed04 	.word	0xe000ed04

08006f74 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b08e      	sub	sp, #56	; 0x38
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10a      	bne.n	8006fa0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	623b      	str	r3, [r7, #32]
}
 8006f9c:	bf00      	nop
 8006f9e:	e7fe      	b.n	8006f9e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d103      	bne.n	8006fae <xQueueReceiveFromISR+0x3a>
 8006fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <xQueueReceiveFromISR+0x3e>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e000      	b.n	8006fb4 <xQueueReceiveFromISR+0x40>
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10a      	bne.n	8006fce <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	61fb      	str	r3, [r7, #28]
}
 8006fca:	bf00      	nop
 8006fcc:	e7fe      	b.n	8006fcc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fce:	f001 fe43 	bl	8008c58 <vPortValidateInterruptPriority>
	__asm volatile
 8006fd2:	f3ef 8211 	mrs	r2, BASEPRI
 8006fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	61ba      	str	r2, [r7, #24]
 8006fe8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006fea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d02f      	beq.n	800705a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007004:	68b9      	ldr	r1, [r7, #8]
 8007006:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007008:	f000 f89e 	bl	8007148 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800700c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700e:	1e5a      	subs	r2, r3, #1
 8007010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007012:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007014:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800701c:	d112      	bne.n	8007044 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800701e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d016      	beq.n	8007054 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007028:	3310      	adds	r3, #16
 800702a:	4618      	mov	r0, r3
 800702c:	f000 fdf0 	bl	8007c10 <xTaskRemoveFromEventList>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00e      	beq.n	8007054 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00b      	beq.n	8007054 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	601a      	str	r2, [r3, #0]
 8007042:	e007      	b.n	8007054 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007048:	3301      	adds	r3, #1
 800704a:	b2db      	uxtb	r3, r3
 800704c:	b25a      	sxtb	r2, r3
 800704e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007054:	2301      	movs	r3, #1
 8007056:	637b      	str	r3, [r7, #52]	; 0x34
 8007058:	e001      	b.n	800705e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800705a:	2300      	movs	r3, #0
 800705c:	637b      	str	r3, [r7, #52]	; 0x34
 800705e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007060:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	f383 8811 	msr	BASEPRI, r3
}
 8007068:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800706a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800706c:	4618      	mov	r0, r3
 800706e:	3738      	adds	r7, #56	; 0x38
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007080:	2300      	movs	r3, #0
 8007082:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007088:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10d      	bne.n	80070ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d14d      	bne.n	8007136 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 ffb8 	bl	8008014 <xTaskPriorityDisinherit>
 80070a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	609a      	str	r2, [r3, #8]
 80070ac:	e043      	b.n	8007136 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d119      	bne.n	80070e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6858      	ldr	r0, [r3, #4]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070bc:	461a      	mov	r2, r3
 80070be:	68b9      	ldr	r1, [r7, #8]
 80070c0:	f00d ff5e 	bl	8014f80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070cc:	441a      	add	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	685a      	ldr	r2, [r3, #4]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d32b      	bcc.n	8007136 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	605a      	str	r2, [r3, #4]
 80070e6:	e026      	b.n	8007136 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	68d8      	ldr	r0, [r3, #12]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f0:	461a      	mov	r2, r3
 80070f2:	68b9      	ldr	r1, [r7, #8]
 80070f4:	f00d ff44 	bl	8014f80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	68da      	ldr	r2, [r3, #12]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007100:	425b      	negs	r3, r3
 8007102:	441a      	add	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	68da      	ldr	r2, [r3, #12]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	429a      	cmp	r2, r3
 8007112:	d207      	bcs.n	8007124 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	689a      	ldr	r2, [r3, #8]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711c:	425b      	negs	r3, r3
 800711e:	441a      	add	r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b02      	cmp	r3, #2
 8007128:	d105      	bne.n	8007136 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d002      	beq.n	8007136 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	3b01      	subs	r3, #1
 8007134:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	1c5a      	adds	r2, r3, #1
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800713e:	697b      	ldr	r3, [r7, #20]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3718      	adds	r7, #24
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007156:	2b00      	cmp	r3, #0
 8007158:	d018      	beq.n	800718c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68da      	ldr	r2, [r3, #12]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007162:	441a      	add	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68da      	ldr	r2, [r3, #12]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	429a      	cmp	r2, r3
 8007172:	d303      	bcc.n	800717c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	68d9      	ldr	r1, [r3, #12]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007184:	461a      	mov	r2, r3
 8007186:	6838      	ldr	r0, [r7, #0]
 8007188:	f00d fefa 	bl	8014f80 <memcpy>
	}
}
 800718c:	bf00      	nop
 800718e:	3708      	adds	r7, #8
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800719c:	f001 fc7a 	bl	8008a94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071a8:	e011      	b.n	80071ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d012      	beq.n	80071d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	3324      	adds	r3, #36	; 0x24
 80071b6:	4618      	mov	r0, r3
 80071b8:	f000 fd2a 	bl	8007c10 <xTaskRemoveFromEventList>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80071c2:	f000 fe27 	bl	8007e14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80071c6:	7bfb      	ldrb	r3, [r7, #15]
 80071c8:	3b01      	subs	r3, #1
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	dce9      	bgt.n	80071aa <prvUnlockQueue+0x16>
 80071d6:	e000      	b.n	80071da <prvUnlockQueue+0x46>
					break;
 80071d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	22ff      	movs	r2, #255	; 0xff
 80071de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80071e2:	f001 fc87 	bl	8008af4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80071e6:	f001 fc55 	bl	8008a94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071f2:	e011      	b.n	8007218 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d012      	beq.n	8007222 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	3310      	adds	r3, #16
 8007200:	4618      	mov	r0, r3
 8007202:	f000 fd05 	bl	8007c10 <xTaskRemoveFromEventList>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d001      	beq.n	8007210 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800720c:	f000 fe02 	bl	8007e14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	3b01      	subs	r3, #1
 8007214:	b2db      	uxtb	r3, r3
 8007216:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800721c:	2b00      	cmp	r3, #0
 800721e:	dce9      	bgt.n	80071f4 <prvUnlockQueue+0x60>
 8007220:	e000      	b.n	8007224 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007222:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	22ff      	movs	r2, #255	; 0xff
 8007228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800722c:	f001 fc62 	bl	8008af4 <vPortExitCritical>
}
 8007230:	bf00      	nop
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007240:	f001 fc28 	bl	8008a94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007248:	2b00      	cmp	r3, #0
 800724a:	d102      	bne.n	8007252 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800724c:	2301      	movs	r3, #1
 800724e:	60fb      	str	r3, [r7, #12]
 8007250:	e001      	b.n	8007256 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007252:	2300      	movs	r3, #0
 8007254:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007256:	f001 fc4d 	bl	8008af4 <vPortExitCritical>

	return xReturn;
 800725a:	68fb      	ldr	r3, [r7, #12]
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800726c:	f001 fc12 	bl	8008a94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007278:	429a      	cmp	r2, r3
 800727a:	d102      	bne.n	8007282 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800727c:	2301      	movs	r3, #1
 800727e:	60fb      	str	r3, [r7, #12]
 8007280:	e001      	b.n	8007286 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007282:	2300      	movs	r3, #0
 8007284:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007286:	f001 fc35 	bl	8008af4 <vPortExitCritical>

	return xReturn;
 800728a:	68fb      	ldr	r3, [r7, #12]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800729e:	2300      	movs	r3, #0
 80072a0:	60fb      	str	r3, [r7, #12]
 80072a2:	e014      	b.n	80072ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80072a4:	4a0f      	ldr	r2, [pc, #60]	; (80072e4 <vQueueAddToRegistry+0x50>)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10b      	bne.n	80072c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80072b0:	490c      	ldr	r1, [pc, #48]	; (80072e4 <vQueueAddToRegistry+0x50>)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	683a      	ldr	r2, [r7, #0]
 80072b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80072ba:	4a0a      	ldr	r2, [pc, #40]	; (80072e4 <vQueueAddToRegistry+0x50>)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	00db      	lsls	r3, r3, #3
 80072c0:	4413      	add	r3, r2
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80072c6:	e006      	b.n	80072d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	3301      	adds	r3, #1
 80072cc:	60fb      	str	r3, [r7, #12]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2b07      	cmp	r3, #7
 80072d2:	d9e7      	bls.n	80072a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80072d4:	bf00      	nop
 80072d6:	bf00      	nop
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	20007e0c 	.word	0x20007e0c

080072e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80072f8:	f001 fbcc 	bl	8008a94 <vPortEnterCritical>
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007302:	b25b      	sxtb	r3, r3
 8007304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007308:	d103      	bne.n	8007312 <vQueueWaitForMessageRestricted+0x2a>
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007318:	b25b      	sxtb	r3, r3
 800731a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800731e:	d103      	bne.n	8007328 <vQueueWaitForMessageRestricted+0x40>
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007328:	f001 fbe4 	bl	8008af4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007330:	2b00      	cmp	r3, #0
 8007332:	d106      	bne.n	8007342 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	3324      	adds	r3, #36	; 0x24
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	68b9      	ldr	r1, [r7, #8]
 800733c:	4618      	mov	r0, r3
 800733e:	f000 fc3b 	bl	8007bb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007342:	6978      	ldr	r0, [r7, #20]
 8007344:	f7ff ff26 	bl	8007194 <prvUnlockQueue>
	}
 8007348:	bf00      	nop
 800734a:	3718      	adds	r7, #24
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007350:	b580      	push	{r7, lr}
 8007352:	b08e      	sub	sp, #56	; 0x38
 8007354:	af04      	add	r7, sp, #16
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
 800735c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800735e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10a      	bne.n	800737a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	623b      	str	r3, [r7, #32]
}
 8007376:	bf00      	nop
 8007378:	e7fe      	b.n	8007378 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800737a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737c:	2b00      	cmp	r3, #0
 800737e:	d10a      	bne.n	8007396 <xTaskCreateStatic+0x46>
	__asm volatile
 8007380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007384:	f383 8811 	msr	BASEPRI, r3
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	f3bf 8f4f 	dsb	sy
 8007390:	61fb      	str	r3, [r7, #28]
}
 8007392:	bf00      	nop
 8007394:	e7fe      	b.n	8007394 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007396:	235c      	movs	r3, #92	; 0x5c
 8007398:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	2b5c      	cmp	r3, #92	; 0x5c
 800739e:	d00a      	beq.n	80073b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	61bb      	str	r3, [r7, #24]
}
 80073b2:	bf00      	nop
 80073b4:	e7fe      	b.n	80073b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80073b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80073b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d01e      	beq.n	80073fc <xTaskCreateStatic+0xac>
 80073be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d01b      	beq.n	80073fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80073c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80073ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d0:	2202      	movs	r2, #2
 80073d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80073d6:	2300      	movs	r3, #0
 80073d8:	9303      	str	r3, [sp, #12]
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	9302      	str	r3, [sp, #8]
 80073de:	f107 0314 	add.w	r3, r7, #20
 80073e2:	9301      	str	r3, [sp, #4]
 80073e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	68b9      	ldr	r1, [r7, #8]
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 f850 	bl	8007494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073f6:	f000 f8dd 	bl	80075b4 <prvAddNewTaskToReadyList>
 80073fa:	e001      	b.n	8007400 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80073fc:	2300      	movs	r3, #0
 80073fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007400:	697b      	ldr	r3, [r7, #20]
	}
 8007402:	4618      	mov	r0, r3
 8007404:	3728      	adds	r7, #40	; 0x28
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800740a:	b580      	push	{r7, lr}
 800740c:	b08c      	sub	sp, #48	; 0x30
 800740e:	af04      	add	r7, sp, #16
 8007410:	60f8      	str	r0, [r7, #12]
 8007412:	60b9      	str	r1, [r7, #8]
 8007414:	603b      	str	r3, [r7, #0]
 8007416:	4613      	mov	r3, r2
 8007418:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800741a:	88fb      	ldrh	r3, [r7, #6]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4618      	mov	r0, r3
 8007420:	f001 fc5a 	bl	8008cd8 <pvPortMalloc>
 8007424:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00e      	beq.n	800744a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800742c:	205c      	movs	r0, #92	; 0x5c
 800742e:	f001 fc53 	bl	8008cd8 <pvPortMalloc>
 8007432:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d003      	beq.n	8007442 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	631a      	str	r2, [r3, #48]	; 0x30
 8007440:	e005      	b.n	800744e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007442:	6978      	ldr	r0, [r7, #20]
 8007444:	f001 fd14 	bl	8008e70 <vPortFree>
 8007448:	e001      	b.n	800744e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800744a:	2300      	movs	r3, #0
 800744c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d017      	beq.n	8007484 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800745c:	88fa      	ldrh	r2, [r7, #6]
 800745e:	2300      	movs	r3, #0
 8007460:	9303      	str	r3, [sp, #12]
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	9302      	str	r3, [sp, #8]
 8007466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007468:	9301      	str	r3, [sp, #4]
 800746a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	68b9      	ldr	r1, [r7, #8]
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f000 f80e 	bl	8007494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007478:	69f8      	ldr	r0, [r7, #28]
 800747a:	f000 f89b 	bl	80075b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800747e:	2301      	movs	r3, #1
 8007480:	61bb      	str	r3, [r7, #24]
 8007482:	e002      	b.n	800748a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007488:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800748a:	69bb      	ldr	r3, [r7, #24]
	}
 800748c:	4618      	mov	r0, r3
 800748e:	3720      	adds	r7, #32
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b088      	sub	sp, #32
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
 80074a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80074a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	461a      	mov	r2, r3
 80074ac:	21a5      	movs	r1, #165	; 0xa5
 80074ae:	f00d fd8f 	bl	8014fd0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80074b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80074bc:	3b01      	subs	r3, #1
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	f023 0307 	bic.w	r3, r3, #7
 80074ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	f003 0307 	and.w	r3, r3, #7
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00a      	beq.n	80074ec <prvInitialiseNewTask+0x58>
	__asm volatile
 80074d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	617b      	str	r3, [r7, #20]
}
 80074e8:	bf00      	nop
 80074ea:	e7fe      	b.n	80074ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d01f      	beq.n	8007532 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074f2:	2300      	movs	r3, #0
 80074f4:	61fb      	str	r3, [r7, #28]
 80074f6:	e012      	b.n	800751e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	4413      	add	r3, r2
 80074fe:	7819      	ldrb	r1, [r3, #0]
 8007500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	4413      	add	r3, r2
 8007506:	3334      	adds	r3, #52	; 0x34
 8007508:	460a      	mov	r2, r1
 800750a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	4413      	add	r3, r2
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d006      	beq.n	8007526 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	3301      	adds	r3, #1
 800751c:	61fb      	str	r3, [r7, #28]
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	2b0f      	cmp	r3, #15
 8007522:	d9e9      	bls.n	80074f8 <prvInitialiseNewTask+0x64>
 8007524:	e000      	b.n	8007528 <prvInitialiseNewTask+0x94>
			{
				break;
 8007526:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752a:	2200      	movs	r2, #0
 800752c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007530:	e003      	b.n	800753a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800753a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753c:	2b37      	cmp	r3, #55	; 0x37
 800753e:	d901      	bls.n	8007544 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007540:	2337      	movs	r3, #55	; 0x37
 8007542:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007548:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800754e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007552:	2200      	movs	r2, #0
 8007554:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007558:	3304      	adds	r3, #4
 800755a:	4618      	mov	r0, r3
 800755c:	f7ff f8be 	bl	80066dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007562:	3318      	adds	r3, #24
 8007564:	4618      	mov	r0, r3
 8007566:	f7ff f8b9 	bl	80066dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800756a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800756e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007572:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007578:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800757e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007582:	2200      	movs	r2, #0
 8007584:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007588:	2200      	movs	r2, #0
 800758a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	68f9      	ldr	r1, [r7, #12]
 8007592:	69b8      	ldr	r0, [r7, #24]
 8007594:	f001 f94e 	bl	8008834 <pxPortInitialiseStack>
 8007598:	4602      	mov	r2, r0
 800759a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800759e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d002      	beq.n	80075aa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80075a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075aa:	bf00      	nop
 80075ac:	3720      	adds	r7, #32
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
	...

080075b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80075bc:	f001 fa6a 	bl	8008a94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80075c0:	4b2d      	ldr	r3, [pc, #180]	; (8007678 <prvAddNewTaskToReadyList+0xc4>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	3301      	adds	r3, #1
 80075c6:	4a2c      	ldr	r2, [pc, #176]	; (8007678 <prvAddNewTaskToReadyList+0xc4>)
 80075c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80075ca:	4b2c      	ldr	r3, [pc, #176]	; (800767c <prvAddNewTaskToReadyList+0xc8>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d109      	bne.n	80075e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80075d2:	4a2a      	ldr	r2, [pc, #168]	; (800767c <prvAddNewTaskToReadyList+0xc8>)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80075d8:	4b27      	ldr	r3, [pc, #156]	; (8007678 <prvAddNewTaskToReadyList+0xc4>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d110      	bne.n	8007602 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80075e0:	f000 fc3c 	bl	8007e5c <prvInitialiseTaskLists>
 80075e4:	e00d      	b.n	8007602 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80075e6:	4b26      	ldr	r3, [pc, #152]	; (8007680 <prvAddNewTaskToReadyList+0xcc>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d109      	bne.n	8007602 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80075ee:	4b23      	ldr	r3, [pc, #140]	; (800767c <prvAddNewTaskToReadyList+0xc8>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d802      	bhi.n	8007602 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80075fc:	4a1f      	ldr	r2, [pc, #124]	; (800767c <prvAddNewTaskToReadyList+0xc8>)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007602:	4b20      	ldr	r3, [pc, #128]	; (8007684 <prvAddNewTaskToReadyList+0xd0>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	3301      	adds	r3, #1
 8007608:	4a1e      	ldr	r2, [pc, #120]	; (8007684 <prvAddNewTaskToReadyList+0xd0>)
 800760a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800760c:	4b1d      	ldr	r3, [pc, #116]	; (8007684 <prvAddNewTaskToReadyList+0xd0>)
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007618:	4b1b      	ldr	r3, [pc, #108]	; (8007688 <prvAddNewTaskToReadyList+0xd4>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	429a      	cmp	r2, r3
 800761e:	d903      	bls.n	8007628 <prvAddNewTaskToReadyList+0x74>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007624:	4a18      	ldr	r2, [pc, #96]	; (8007688 <prvAddNewTaskToReadyList+0xd4>)
 8007626:	6013      	str	r3, [r2, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800762c:	4613      	mov	r3, r2
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	4a15      	ldr	r2, [pc, #84]	; (800768c <prvAddNewTaskToReadyList+0xd8>)
 8007636:	441a      	add	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	3304      	adds	r3, #4
 800763c:	4619      	mov	r1, r3
 800763e:	4610      	mov	r0, r2
 8007640:	f7ff f859 	bl	80066f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007644:	f001 fa56 	bl	8008af4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007648:	4b0d      	ldr	r3, [pc, #52]	; (8007680 <prvAddNewTaskToReadyList+0xcc>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00e      	beq.n	800766e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007650:	4b0a      	ldr	r3, [pc, #40]	; (800767c <prvAddNewTaskToReadyList+0xc8>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765a:	429a      	cmp	r2, r3
 800765c:	d207      	bcs.n	800766e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800765e:	4b0c      	ldr	r3, [pc, #48]	; (8007690 <prvAddNewTaskToReadyList+0xdc>)
 8007660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007664:	601a      	str	r2, [r3, #0]
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800766e:	bf00      	nop
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	20008320 	.word	0x20008320
 800767c:	20007e4c 	.word	0x20007e4c
 8007680:	2000832c 	.word	0x2000832c
 8007684:	2000833c 	.word	0x2000833c
 8007688:	20008328 	.word	0x20008328
 800768c:	20007e50 	.word	0x20007e50
 8007690:	e000ed04 	.word	0xe000ed04

08007694 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800769c:	2300      	movs	r3, #0
 800769e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d017      	beq.n	80076d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80076a6:	4b13      	ldr	r3, [pc, #76]	; (80076f4 <vTaskDelay+0x60>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00a      	beq.n	80076c4 <vTaskDelay+0x30>
	__asm volatile
 80076ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b2:	f383 8811 	msr	BASEPRI, r3
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	60bb      	str	r3, [r7, #8]
}
 80076c0:	bf00      	nop
 80076c2:	e7fe      	b.n	80076c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80076c4:	f000 f880 	bl	80077c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80076c8:	2100      	movs	r1, #0
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fd10 	bl	80080f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80076d0:	f000 f888 	bl	80077e4 <xTaskResumeAll>
 80076d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d107      	bne.n	80076ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80076dc:	4b06      	ldr	r3, [pc, #24]	; (80076f8 <vTaskDelay+0x64>)
 80076de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076ec:	bf00      	nop
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	20008348 	.word	0x20008348
 80076f8:	e000ed04 	.word	0xe000ed04

080076fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b08a      	sub	sp, #40	; 0x28
 8007700:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007702:	2300      	movs	r3, #0
 8007704:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007706:	2300      	movs	r3, #0
 8007708:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800770a:	463a      	mov	r2, r7
 800770c:	1d39      	adds	r1, r7, #4
 800770e:	f107 0308 	add.w	r3, r7, #8
 8007712:	4618      	mov	r0, r3
 8007714:	f7fe ff8e 	bl	8006634 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	9202      	str	r2, [sp, #8]
 8007720:	9301      	str	r3, [sp, #4]
 8007722:	2300      	movs	r3, #0
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	2300      	movs	r3, #0
 8007728:	460a      	mov	r2, r1
 800772a:	4921      	ldr	r1, [pc, #132]	; (80077b0 <vTaskStartScheduler+0xb4>)
 800772c:	4821      	ldr	r0, [pc, #132]	; (80077b4 <vTaskStartScheduler+0xb8>)
 800772e:	f7ff fe0f 	bl	8007350 <xTaskCreateStatic>
 8007732:	4603      	mov	r3, r0
 8007734:	4a20      	ldr	r2, [pc, #128]	; (80077b8 <vTaskStartScheduler+0xbc>)
 8007736:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007738:	4b1f      	ldr	r3, [pc, #124]	; (80077b8 <vTaskStartScheduler+0xbc>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d002      	beq.n	8007746 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007740:	2301      	movs	r3, #1
 8007742:	617b      	str	r3, [r7, #20]
 8007744:	e001      	b.n	800774a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007746:	2300      	movs	r3, #0
 8007748:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d102      	bne.n	8007756 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007750:	f000 fd22 	bl	8008198 <xTimerCreateTimerTask>
 8007754:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d116      	bne.n	800778a <vTaskStartScheduler+0x8e>
	__asm volatile
 800775c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007760:	f383 8811 	msr	BASEPRI, r3
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	613b      	str	r3, [r7, #16]
}
 800776e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007770:	4b12      	ldr	r3, [pc, #72]	; (80077bc <vTaskStartScheduler+0xc0>)
 8007772:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007776:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007778:	4b11      	ldr	r3, [pc, #68]	; (80077c0 <vTaskStartScheduler+0xc4>)
 800777a:	2201      	movs	r2, #1
 800777c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800777e:	4b11      	ldr	r3, [pc, #68]	; (80077c4 <vTaskStartScheduler+0xc8>)
 8007780:	2200      	movs	r2, #0
 8007782:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007784:	f001 f8e4 	bl	8008950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007788:	e00e      	b.n	80077a8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007790:	d10a      	bne.n	80077a8 <vTaskStartScheduler+0xac>
	__asm volatile
 8007792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007796:	f383 8811 	msr	BASEPRI, r3
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	60fb      	str	r3, [r7, #12]
}
 80077a4:	bf00      	nop
 80077a6:	e7fe      	b.n	80077a6 <vTaskStartScheduler+0xaa>
}
 80077a8:	bf00      	nop
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	08016734 	.word	0x08016734
 80077b4:	08007e2d 	.word	0x08007e2d
 80077b8:	20008344 	.word	0x20008344
 80077bc:	20008340 	.word	0x20008340
 80077c0:	2000832c 	.word	0x2000832c
 80077c4:	20008324 	.word	0x20008324

080077c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80077c8:	b480      	push	{r7}
 80077ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80077cc:	4b04      	ldr	r3, [pc, #16]	; (80077e0 <vTaskSuspendAll+0x18>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	3301      	adds	r3, #1
 80077d2:	4a03      	ldr	r2, [pc, #12]	; (80077e0 <vTaskSuspendAll+0x18>)
 80077d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80077d6:	bf00      	nop
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr
 80077e0:	20008348 	.word	0x20008348

080077e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80077ea:	2300      	movs	r3, #0
 80077ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80077ee:	2300      	movs	r3, #0
 80077f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80077f2:	4b42      	ldr	r3, [pc, #264]	; (80078fc <xTaskResumeAll+0x118>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10a      	bne.n	8007810 <xTaskResumeAll+0x2c>
	__asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	603b      	str	r3, [r7, #0]
}
 800780c:	bf00      	nop
 800780e:	e7fe      	b.n	800780e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007810:	f001 f940 	bl	8008a94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007814:	4b39      	ldr	r3, [pc, #228]	; (80078fc <xTaskResumeAll+0x118>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	3b01      	subs	r3, #1
 800781a:	4a38      	ldr	r2, [pc, #224]	; (80078fc <xTaskResumeAll+0x118>)
 800781c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800781e:	4b37      	ldr	r3, [pc, #220]	; (80078fc <xTaskResumeAll+0x118>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d162      	bne.n	80078ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007826:	4b36      	ldr	r3, [pc, #216]	; (8007900 <xTaskResumeAll+0x11c>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d05e      	beq.n	80078ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800782e:	e02f      	b.n	8007890 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007830:	4b34      	ldr	r3, [pc, #208]	; (8007904 <xTaskResumeAll+0x120>)
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	3318      	adds	r3, #24
 800783c:	4618      	mov	r0, r3
 800783e:	f7fe ffb7 	bl	80067b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	3304      	adds	r3, #4
 8007846:	4618      	mov	r0, r3
 8007848:	f7fe ffb2 	bl	80067b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007850:	4b2d      	ldr	r3, [pc, #180]	; (8007908 <xTaskResumeAll+0x124>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	429a      	cmp	r2, r3
 8007856:	d903      	bls.n	8007860 <xTaskResumeAll+0x7c>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785c:	4a2a      	ldr	r2, [pc, #168]	; (8007908 <xTaskResumeAll+0x124>)
 800785e:	6013      	str	r3, [r2, #0]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007864:	4613      	mov	r3, r2
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	4413      	add	r3, r2
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4a27      	ldr	r2, [pc, #156]	; (800790c <xTaskResumeAll+0x128>)
 800786e:	441a      	add	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	3304      	adds	r3, #4
 8007874:	4619      	mov	r1, r3
 8007876:	4610      	mov	r0, r2
 8007878:	f7fe ff3d 	bl	80066f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007880:	4b23      	ldr	r3, [pc, #140]	; (8007910 <xTaskResumeAll+0x12c>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007886:	429a      	cmp	r2, r3
 8007888:	d302      	bcc.n	8007890 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800788a:	4b22      	ldr	r3, [pc, #136]	; (8007914 <xTaskResumeAll+0x130>)
 800788c:	2201      	movs	r2, #1
 800788e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007890:	4b1c      	ldr	r3, [pc, #112]	; (8007904 <xTaskResumeAll+0x120>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1cb      	bne.n	8007830 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800789e:	f000 fb7b 	bl	8007f98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80078a2:	4b1d      	ldr	r3, [pc, #116]	; (8007918 <xTaskResumeAll+0x134>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d010      	beq.n	80078d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80078ae:	f000 f847 	bl	8007940 <xTaskIncrementTick>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d002      	beq.n	80078be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80078b8:	4b16      	ldr	r3, [pc, #88]	; (8007914 <xTaskResumeAll+0x130>)
 80078ba:	2201      	movs	r2, #1
 80078bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	3b01      	subs	r3, #1
 80078c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1f1      	bne.n	80078ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80078ca:	4b13      	ldr	r3, [pc, #76]	; (8007918 <xTaskResumeAll+0x134>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80078d0:	4b10      	ldr	r3, [pc, #64]	; (8007914 <xTaskResumeAll+0x130>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d009      	beq.n	80078ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80078d8:	2301      	movs	r3, #1
 80078da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80078dc:	4b0f      	ldr	r3, [pc, #60]	; (800791c <xTaskResumeAll+0x138>)
 80078de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078e2:	601a      	str	r2, [r3, #0]
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078ec:	f001 f902 	bl	8008af4 <vPortExitCritical>

	return xAlreadyYielded;
 80078f0:	68bb      	ldr	r3, [r7, #8]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	20008348 	.word	0x20008348
 8007900:	20008320 	.word	0x20008320
 8007904:	200082e0 	.word	0x200082e0
 8007908:	20008328 	.word	0x20008328
 800790c:	20007e50 	.word	0x20007e50
 8007910:	20007e4c 	.word	0x20007e4c
 8007914:	20008334 	.word	0x20008334
 8007918:	20008330 	.word	0x20008330
 800791c:	e000ed04 	.word	0xe000ed04

08007920 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007926:	4b05      	ldr	r3, [pc, #20]	; (800793c <xTaskGetTickCount+0x1c>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800792c:	687b      	ldr	r3, [r7, #4]
}
 800792e:	4618      	mov	r0, r3
 8007930:	370c      	adds	r7, #12
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	20008324 	.word	0x20008324

08007940 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007946:	2300      	movs	r3, #0
 8007948:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800794a:	4b4f      	ldr	r3, [pc, #316]	; (8007a88 <xTaskIncrementTick+0x148>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	f040 808f 	bne.w	8007a72 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007954:	4b4d      	ldr	r3, [pc, #308]	; (8007a8c <xTaskIncrementTick+0x14c>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	3301      	adds	r3, #1
 800795a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800795c:	4a4b      	ldr	r2, [pc, #300]	; (8007a8c <xTaskIncrementTick+0x14c>)
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d120      	bne.n	80079aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007968:	4b49      	ldr	r3, [pc, #292]	; (8007a90 <xTaskIncrementTick+0x150>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00a      	beq.n	8007988 <xTaskIncrementTick+0x48>
	__asm volatile
 8007972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007976:	f383 8811 	msr	BASEPRI, r3
 800797a:	f3bf 8f6f 	isb	sy
 800797e:	f3bf 8f4f 	dsb	sy
 8007982:	603b      	str	r3, [r7, #0]
}
 8007984:	bf00      	nop
 8007986:	e7fe      	b.n	8007986 <xTaskIncrementTick+0x46>
 8007988:	4b41      	ldr	r3, [pc, #260]	; (8007a90 <xTaskIncrementTick+0x150>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	60fb      	str	r3, [r7, #12]
 800798e:	4b41      	ldr	r3, [pc, #260]	; (8007a94 <xTaskIncrementTick+0x154>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a3f      	ldr	r2, [pc, #252]	; (8007a90 <xTaskIncrementTick+0x150>)
 8007994:	6013      	str	r3, [r2, #0]
 8007996:	4a3f      	ldr	r2, [pc, #252]	; (8007a94 <xTaskIncrementTick+0x154>)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6013      	str	r3, [r2, #0]
 800799c:	4b3e      	ldr	r3, [pc, #248]	; (8007a98 <xTaskIncrementTick+0x158>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	3301      	adds	r3, #1
 80079a2:	4a3d      	ldr	r2, [pc, #244]	; (8007a98 <xTaskIncrementTick+0x158>)
 80079a4:	6013      	str	r3, [r2, #0]
 80079a6:	f000 faf7 	bl	8007f98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80079aa:	4b3c      	ldr	r3, [pc, #240]	; (8007a9c <xTaskIncrementTick+0x15c>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d349      	bcc.n	8007a48 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079b4:	4b36      	ldr	r3, [pc, #216]	; (8007a90 <xTaskIncrementTick+0x150>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d104      	bne.n	80079c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079be:	4b37      	ldr	r3, [pc, #220]	; (8007a9c <xTaskIncrementTick+0x15c>)
 80079c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079c4:	601a      	str	r2, [r3, #0]
					break;
 80079c6:	e03f      	b.n	8007a48 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079c8:	4b31      	ldr	r3, [pc, #196]	; (8007a90 <xTaskIncrementTick+0x150>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d203      	bcs.n	80079e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80079e0:	4a2e      	ldr	r2, [pc, #184]	; (8007a9c <xTaskIncrementTick+0x15c>)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80079e6:	e02f      	b.n	8007a48 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	3304      	adds	r3, #4
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7fe fedf 	bl	80067b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d004      	beq.n	8007a04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	3318      	adds	r3, #24
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fe fed6 	bl	80067b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a08:	4b25      	ldr	r3, [pc, #148]	; (8007aa0 <xTaskIncrementTick+0x160>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d903      	bls.n	8007a18 <xTaskIncrementTick+0xd8>
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a14:	4a22      	ldr	r2, [pc, #136]	; (8007aa0 <xTaskIncrementTick+0x160>)
 8007a16:	6013      	str	r3, [r2, #0]
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4413      	add	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4a1f      	ldr	r2, [pc, #124]	; (8007aa4 <xTaskIncrementTick+0x164>)
 8007a26:	441a      	add	r2, r3
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	4610      	mov	r0, r2
 8007a30:	f7fe fe61 	bl	80066f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a38:	4b1b      	ldr	r3, [pc, #108]	; (8007aa8 <xTaskIncrementTick+0x168>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d3b8      	bcc.n	80079b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007a42:	2301      	movs	r3, #1
 8007a44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a46:	e7b5      	b.n	80079b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a48:	4b17      	ldr	r3, [pc, #92]	; (8007aa8 <xTaskIncrementTick+0x168>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a4e:	4915      	ldr	r1, [pc, #84]	; (8007aa4 <xTaskIncrementTick+0x164>)
 8007a50:	4613      	mov	r3, r2
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	4413      	add	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	440b      	add	r3, r1
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d901      	bls.n	8007a64 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007a60:	2301      	movs	r3, #1
 8007a62:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007a64:	4b11      	ldr	r3, [pc, #68]	; (8007aac <xTaskIncrementTick+0x16c>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d007      	beq.n	8007a7c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	617b      	str	r3, [r7, #20]
 8007a70:	e004      	b.n	8007a7c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007a72:	4b0f      	ldr	r3, [pc, #60]	; (8007ab0 <xTaskIncrementTick+0x170>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3301      	adds	r3, #1
 8007a78:	4a0d      	ldr	r2, [pc, #52]	; (8007ab0 <xTaskIncrementTick+0x170>)
 8007a7a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007a7c:	697b      	ldr	r3, [r7, #20]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3718      	adds	r7, #24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	20008348 	.word	0x20008348
 8007a8c:	20008324 	.word	0x20008324
 8007a90:	200082d8 	.word	0x200082d8
 8007a94:	200082dc 	.word	0x200082dc
 8007a98:	20008338 	.word	0x20008338
 8007a9c:	20008340 	.word	0x20008340
 8007aa0:	20008328 	.word	0x20008328
 8007aa4:	20007e50 	.word	0x20007e50
 8007aa8:	20007e4c 	.word	0x20007e4c
 8007aac:	20008334 	.word	0x20008334
 8007ab0:	20008330 	.word	0x20008330

08007ab4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007aba:	4b28      	ldr	r3, [pc, #160]	; (8007b5c <vTaskSwitchContext+0xa8>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d003      	beq.n	8007aca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007ac2:	4b27      	ldr	r3, [pc, #156]	; (8007b60 <vTaskSwitchContext+0xac>)
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ac8:	e041      	b.n	8007b4e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007aca:	4b25      	ldr	r3, [pc, #148]	; (8007b60 <vTaskSwitchContext+0xac>)
 8007acc:	2200      	movs	r2, #0
 8007ace:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ad0:	4b24      	ldr	r3, [pc, #144]	; (8007b64 <vTaskSwitchContext+0xb0>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	60fb      	str	r3, [r7, #12]
 8007ad6:	e010      	b.n	8007afa <vTaskSwitchContext+0x46>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d10a      	bne.n	8007af4 <vTaskSwitchContext+0x40>
	__asm volatile
 8007ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae2:	f383 8811 	msr	BASEPRI, r3
 8007ae6:	f3bf 8f6f 	isb	sy
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	607b      	str	r3, [r7, #4]
}
 8007af0:	bf00      	nop
 8007af2:	e7fe      	b.n	8007af2 <vTaskSwitchContext+0x3e>
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	3b01      	subs	r3, #1
 8007af8:	60fb      	str	r3, [r7, #12]
 8007afa:	491b      	ldr	r1, [pc, #108]	; (8007b68 <vTaskSwitchContext+0xb4>)
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	4613      	mov	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	440b      	add	r3, r1
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d0e4      	beq.n	8007ad8 <vTaskSwitchContext+0x24>
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	4613      	mov	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4413      	add	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4a13      	ldr	r2, [pc, #76]	; (8007b68 <vTaskSwitchContext+0xb4>)
 8007b1a:	4413      	add	r3, r2
 8007b1c:	60bb      	str	r3, [r7, #8]
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	605a      	str	r2, [r3, #4]
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	3308      	adds	r3, #8
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d104      	bne.n	8007b3e <vTaskSwitchContext+0x8a>
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	685a      	ldr	r2, [r3, #4]
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	605a      	str	r2, [r3, #4]
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	4a09      	ldr	r2, [pc, #36]	; (8007b6c <vTaskSwitchContext+0xb8>)
 8007b46:	6013      	str	r3, [r2, #0]
 8007b48:	4a06      	ldr	r2, [pc, #24]	; (8007b64 <vTaskSwitchContext+0xb0>)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6013      	str	r3, [r2, #0]
}
 8007b4e:	bf00      	nop
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	20008348 	.word	0x20008348
 8007b60:	20008334 	.word	0x20008334
 8007b64:	20008328 	.word	0x20008328
 8007b68:	20007e50 	.word	0x20007e50
 8007b6c:	20007e4c 	.word	0x20007e4c

08007b70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10a      	bne.n	8007b96 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	60fb      	str	r3, [r7, #12]
}
 8007b92:	bf00      	nop
 8007b94:	e7fe      	b.n	8007b94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b96:	4b07      	ldr	r3, [pc, #28]	; (8007bb4 <vTaskPlaceOnEventList+0x44>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3318      	adds	r3, #24
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7fe fdcd 	bl	800673e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ba4:	2101      	movs	r1, #1
 8007ba6:	6838      	ldr	r0, [r7, #0]
 8007ba8:	f000 faa2 	bl	80080f0 <prvAddCurrentTaskToDelayedList>
}
 8007bac:	bf00      	nop
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	20007e4c 	.word	0x20007e4c

08007bb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b086      	sub	sp, #24
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10a      	bne.n	8007be0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	617b      	str	r3, [r7, #20]
}
 8007bdc:	bf00      	nop
 8007bde:	e7fe      	b.n	8007bde <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007be0:	4b0a      	ldr	r3, [pc, #40]	; (8007c0c <vTaskPlaceOnEventListRestricted+0x54>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	3318      	adds	r3, #24
 8007be6:	4619      	mov	r1, r3
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f7fe fd84 	bl	80066f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d002      	beq.n	8007bfa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007bf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bf8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007bfa:	6879      	ldr	r1, [r7, #4]
 8007bfc:	68b8      	ldr	r0, [r7, #8]
 8007bfe:	f000 fa77 	bl	80080f0 <prvAddCurrentTaskToDelayedList>
	}
 8007c02:	bf00      	nop
 8007c04:	3718      	adds	r7, #24
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	20007e4c 	.word	0x20007e4c

08007c10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d10a      	bne.n	8007c3c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2a:	f383 8811 	msr	BASEPRI, r3
 8007c2e:	f3bf 8f6f 	isb	sy
 8007c32:	f3bf 8f4f 	dsb	sy
 8007c36:	60fb      	str	r3, [r7, #12]
}
 8007c38:	bf00      	nop
 8007c3a:	e7fe      	b.n	8007c3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	3318      	adds	r3, #24
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fe fdb5 	bl	80067b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c46:	4b1e      	ldr	r3, [pc, #120]	; (8007cc0 <xTaskRemoveFromEventList+0xb0>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d11d      	bne.n	8007c8a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	3304      	adds	r3, #4
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7fe fdac 	bl	80067b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c5c:	4b19      	ldr	r3, [pc, #100]	; (8007cc4 <xTaskRemoveFromEventList+0xb4>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d903      	bls.n	8007c6c <xTaskRemoveFromEventList+0x5c>
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c68:	4a16      	ldr	r2, [pc, #88]	; (8007cc4 <xTaskRemoveFromEventList+0xb4>)
 8007c6a:	6013      	str	r3, [r2, #0]
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c70:	4613      	mov	r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	4413      	add	r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	4a13      	ldr	r2, [pc, #76]	; (8007cc8 <xTaskRemoveFromEventList+0xb8>)
 8007c7a:	441a      	add	r2, r3
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	3304      	adds	r3, #4
 8007c80:	4619      	mov	r1, r3
 8007c82:	4610      	mov	r0, r2
 8007c84:	f7fe fd37 	bl	80066f6 <vListInsertEnd>
 8007c88:	e005      	b.n	8007c96 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	3318      	adds	r3, #24
 8007c8e:	4619      	mov	r1, r3
 8007c90:	480e      	ldr	r0, [pc, #56]	; (8007ccc <xTaskRemoveFromEventList+0xbc>)
 8007c92:	f7fe fd30 	bl	80066f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c9a:	4b0d      	ldr	r3, [pc, #52]	; (8007cd0 <xTaskRemoveFromEventList+0xc0>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d905      	bls.n	8007cb0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ca8:	4b0a      	ldr	r3, [pc, #40]	; (8007cd4 <xTaskRemoveFromEventList+0xc4>)
 8007caa:	2201      	movs	r2, #1
 8007cac:	601a      	str	r2, [r3, #0]
 8007cae:	e001      	b.n	8007cb4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007cb4:	697b      	ldr	r3, [r7, #20]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	20008348 	.word	0x20008348
 8007cc4:	20008328 	.word	0x20008328
 8007cc8:	20007e50 	.word	0x20007e50
 8007ccc:	200082e0 	.word	0x200082e0
 8007cd0:	20007e4c 	.word	0x20007e4c
 8007cd4:	20008334 	.word	0x20008334

08007cd8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10a      	bne.n	8007cfc <vTaskSetTimeOutState+0x24>
	__asm volatile
 8007ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	60fb      	str	r3, [r7, #12]
}
 8007cf8:	bf00      	nop
 8007cfa:	e7fe      	b.n	8007cfa <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8007cfc:	f000 feca 	bl	8008a94 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d00:	4b06      	ldr	r3, [pc, #24]	; (8007d1c <vTaskSetTimeOutState+0x44>)
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8007d08:	4b05      	ldr	r3, [pc, #20]	; (8007d20 <vTaskSetTimeOutState+0x48>)
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007d10:	f000 fef0 	bl	8008af4 <vPortExitCritical>
}
 8007d14:	bf00      	nop
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	20008338 	.word	0x20008338
 8007d20:	20008324 	.word	0x20008324

08007d24 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d2c:	4b06      	ldr	r3, [pc, #24]	; (8007d48 <vTaskInternalSetTimeOutState+0x24>)
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d34:	4b05      	ldr	r3, [pc, #20]	; (8007d4c <vTaskInternalSetTimeOutState+0x28>)
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	605a      	str	r2, [r3, #4]
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr
 8007d48:	20008338 	.word	0x20008338
 8007d4c:	20008324 	.word	0x20008324

08007d50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b088      	sub	sp, #32
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d10a      	bne.n	8007d76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d64:	f383 8811 	msr	BASEPRI, r3
 8007d68:	f3bf 8f6f 	isb	sy
 8007d6c:	f3bf 8f4f 	dsb	sy
 8007d70:	613b      	str	r3, [r7, #16]
}
 8007d72:	bf00      	nop
 8007d74:	e7fe      	b.n	8007d74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10a      	bne.n	8007d92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d80:	f383 8811 	msr	BASEPRI, r3
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	60fb      	str	r3, [r7, #12]
}
 8007d8e:	bf00      	nop
 8007d90:	e7fe      	b.n	8007d90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007d92:	f000 fe7f 	bl	8008a94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d96:	4b1d      	ldr	r3, [pc, #116]	; (8007e0c <xTaskCheckForTimeOut+0xbc>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dae:	d102      	bne.n	8007db6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007db0:	2300      	movs	r3, #0
 8007db2:	61fb      	str	r3, [r7, #28]
 8007db4:	e023      	b.n	8007dfe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	4b15      	ldr	r3, [pc, #84]	; (8007e10 <xTaskCheckForTimeOut+0xc0>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d007      	beq.n	8007dd2 <xTaskCheckForTimeOut+0x82>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	69ba      	ldr	r2, [r7, #24]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d302      	bcc.n	8007dd2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	61fb      	str	r3, [r7, #28]
 8007dd0:	e015      	b.n	8007dfe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d20b      	bcs.n	8007df4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	1ad2      	subs	r2, r2, r3
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7ff ff9b 	bl	8007d24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007dee:	2300      	movs	r3, #0
 8007df0:	61fb      	str	r3, [r7, #28]
 8007df2:	e004      	b.n	8007dfe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	2200      	movs	r2, #0
 8007df8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007dfe:	f000 fe79 	bl	8008af4 <vPortExitCritical>

	return xReturn;
 8007e02:	69fb      	ldr	r3, [r7, #28]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3720      	adds	r7, #32
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	20008324 	.word	0x20008324
 8007e10:	20008338 	.word	0x20008338

08007e14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e14:	b480      	push	{r7}
 8007e16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e18:	4b03      	ldr	r3, [pc, #12]	; (8007e28 <vTaskMissedYield+0x14>)
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	601a      	str	r2, [r3, #0]
}
 8007e1e:	bf00      	nop
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr
 8007e28:	20008334 	.word	0x20008334

08007e2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e34:	f000 f852 	bl	8007edc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e38:	4b06      	ldr	r3, [pc, #24]	; (8007e54 <prvIdleTask+0x28>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d9f9      	bls.n	8007e34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e40:	4b05      	ldr	r3, [pc, #20]	; (8007e58 <prvIdleTask+0x2c>)
 8007e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e46:	601a      	str	r2, [r3, #0]
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e50:	e7f0      	b.n	8007e34 <prvIdleTask+0x8>
 8007e52:	bf00      	nop
 8007e54:	20007e50 	.word	0x20007e50
 8007e58:	e000ed04 	.word	0xe000ed04

08007e5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e62:	2300      	movs	r3, #0
 8007e64:	607b      	str	r3, [r7, #4]
 8007e66:	e00c      	b.n	8007e82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	4413      	add	r3, r2
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4a12      	ldr	r2, [pc, #72]	; (8007ebc <prvInitialiseTaskLists+0x60>)
 8007e74:	4413      	add	r3, r2
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fe fc10 	bl	800669c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	607b      	str	r3, [r7, #4]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b37      	cmp	r3, #55	; 0x37
 8007e86:	d9ef      	bls.n	8007e68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e88:	480d      	ldr	r0, [pc, #52]	; (8007ec0 <prvInitialiseTaskLists+0x64>)
 8007e8a:	f7fe fc07 	bl	800669c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e8e:	480d      	ldr	r0, [pc, #52]	; (8007ec4 <prvInitialiseTaskLists+0x68>)
 8007e90:	f7fe fc04 	bl	800669c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e94:	480c      	ldr	r0, [pc, #48]	; (8007ec8 <prvInitialiseTaskLists+0x6c>)
 8007e96:	f7fe fc01 	bl	800669c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e9a:	480c      	ldr	r0, [pc, #48]	; (8007ecc <prvInitialiseTaskLists+0x70>)
 8007e9c:	f7fe fbfe 	bl	800669c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ea0:	480b      	ldr	r0, [pc, #44]	; (8007ed0 <prvInitialiseTaskLists+0x74>)
 8007ea2:	f7fe fbfb 	bl	800669c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ea6:	4b0b      	ldr	r3, [pc, #44]	; (8007ed4 <prvInitialiseTaskLists+0x78>)
 8007ea8:	4a05      	ldr	r2, [pc, #20]	; (8007ec0 <prvInitialiseTaskLists+0x64>)
 8007eaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007eac:	4b0a      	ldr	r3, [pc, #40]	; (8007ed8 <prvInitialiseTaskLists+0x7c>)
 8007eae:	4a05      	ldr	r2, [pc, #20]	; (8007ec4 <prvInitialiseTaskLists+0x68>)
 8007eb0:	601a      	str	r2, [r3, #0]
}
 8007eb2:	bf00      	nop
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	20007e50 	.word	0x20007e50
 8007ec0:	200082b0 	.word	0x200082b0
 8007ec4:	200082c4 	.word	0x200082c4
 8007ec8:	200082e0 	.word	0x200082e0
 8007ecc:	200082f4 	.word	0x200082f4
 8007ed0:	2000830c 	.word	0x2000830c
 8007ed4:	200082d8 	.word	0x200082d8
 8007ed8:	200082dc 	.word	0x200082dc

08007edc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ee2:	e019      	b.n	8007f18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ee4:	f000 fdd6 	bl	8008a94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ee8:	4b10      	ldr	r3, [pc, #64]	; (8007f2c <prvCheckTasksWaitingTermination+0x50>)
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	3304      	adds	r3, #4
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7fe fc5b 	bl	80067b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007efa:	4b0d      	ldr	r3, [pc, #52]	; (8007f30 <prvCheckTasksWaitingTermination+0x54>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	3b01      	subs	r3, #1
 8007f00:	4a0b      	ldr	r2, [pc, #44]	; (8007f30 <prvCheckTasksWaitingTermination+0x54>)
 8007f02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f04:	4b0b      	ldr	r3, [pc, #44]	; (8007f34 <prvCheckTasksWaitingTermination+0x58>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	4a0a      	ldr	r2, [pc, #40]	; (8007f34 <prvCheckTasksWaitingTermination+0x58>)
 8007f0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f0e:	f000 fdf1 	bl	8008af4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f810 	bl	8007f38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f18:	4b06      	ldr	r3, [pc, #24]	; (8007f34 <prvCheckTasksWaitingTermination+0x58>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1e1      	bne.n	8007ee4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f20:	bf00      	nop
 8007f22:	bf00      	nop
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	200082f4 	.word	0x200082f4
 8007f30:	20008320 	.word	0x20008320
 8007f34:	20008308 	.word	0x20008308

08007f38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d108      	bne.n	8007f5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f000 ff8e 	bl	8008e70 <vPortFree>
				vPortFree( pxTCB );
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 ff8b 	bl	8008e70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f5a:	e018      	b.n	8007f8e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d103      	bne.n	8007f6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 ff82 	bl	8008e70 <vPortFree>
	}
 8007f6c:	e00f      	b.n	8007f8e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d00a      	beq.n	8007f8e <prvDeleteTCB+0x56>
	__asm volatile
 8007f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7c:	f383 8811 	msr	BASEPRI, r3
 8007f80:	f3bf 8f6f 	isb	sy
 8007f84:	f3bf 8f4f 	dsb	sy
 8007f88:	60fb      	str	r3, [r7, #12]
}
 8007f8a:	bf00      	nop
 8007f8c:	e7fe      	b.n	8007f8c <prvDeleteTCB+0x54>
	}
 8007f8e:	bf00      	nop
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
	...

08007f98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f9e:	4b0c      	ldr	r3, [pc, #48]	; (8007fd0 <prvResetNextTaskUnblockTime+0x38>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d104      	bne.n	8007fb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007fa8:	4b0a      	ldr	r3, [pc, #40]	; (8007fd4 <prvResetNextTaskUnblockTime+0x3c>)
 8007faa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007fb0:	e008      	b.n	8007fc4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fb2:	4b07      	ldr	r3, [pc, #28]	; (8007fd0 <prvResetNextTaskUnblockTime+0x38>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	4a04      	ldr	r2, [pc, #16]	; (8007fd4 <prvResetNextTaskUnblockTime+0x3c>)
 8007fc2:	6013      	str	r3, [r2, #0]
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr
 8007fd0:	200082d8 	.word	0x200082d8
 8007fd4:	20008340 	.word	0x20008340

08007fd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007fde:	4b0b      	ldr	r3, [pc, #44]	; (800800c <xTaskGetSchedulerState+0x34>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d102      	bne.n	8007fec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	607b      	str	r3, [r7, #4]
 8007fea:	e008      	b.n	8007ffe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fec:	4b08      	ldr	r3, [pc, #32]	; (8008010 <xTaskGetSchedulerState+0x38>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d102      	bne.n	8007ffa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	607b      	str	r3, [r7, #4]
 8007ff8:	e001      	b.n	8007ffe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007ffe:	687b      	ldr	r3, [r7, #4]
	}
 8008000:	4618      	mov	r0, r3
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr
 800800c:	2000832c 	.word	0x2000832c
 8008010:	20008348 	.word	0x20008348

08008014 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008020:	2300      	movs	r3, #0
 8008022:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d056      	beq.n	80080d8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800802a:	4b2e      	ldr	r3, [pc, #184]	; (80080e4 <xTaskPriorityDisinherit+0xd0>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	429a      	cmp	r2, r3
 8008032:	d00a      	beq.n	800804a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	60fb      	str	r3, [r7, #12]
}
 8008046:	bf00      	nop
 8008048:	e7fe      	b.n	8008048 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10a      	bne.n	8008068 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008056:	f383 8811 	msr	BASEPRI, r3
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	60bb      	str	r3, [r7, #8]
}
 8008064:	bf00      	nop
 8008066:	e7fe      	b.n	8008066 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800806c:	1e5a      	subs	r2, r3, #1
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800807a:	429a      	cmp	r2, r3
 800807c:	d02c      	beq.n	80080d8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008082:	2b00      	cmp	r3, #0
 8008084:	d128      	bne.n	80080d8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	3304      	adds	r3, #4
 800808a:	4618      	mov	r0, r3
 800808c:	f7fe fb90 	bl	80067b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a8:	4b0f      	ldr	r3, [pc, #60]	; (80080e8 <xTaskPriorityDisinherit+0xd4>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d903      	bls.n	80080b8 <xTaskPriorityDisinherit+0xa4>
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b4:	4a0c      	ldr	r2, [pc, #48]	; (80080e8 <xTaskPriorityDisinherit+0xd4>)
 80080b6:	6013      	str	r3, [r2, #0]
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080bc:	4613      	mov	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4a09      	ldr	r2, [pc, #36]	; (80080ec <xTaskPriorityDisinherit+0xd8>)
 80080c6:	441a      	add	r2, r3
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	3304      	adds	r3, #4
 80080cc:	4619      	mov	r1, r3
 80080ce:	4610      	mov	r0, r2
 80080d0:	f7fe fb11 	bl	80066f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80080d4:	2301      	movs	r3, #1
 80080d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080d8:	697b      	ldr	r3, [r7, #20]
	}
 80080da:	4618      	mov	r0, r3
 80080dc:	3718      	adds	r7, #24
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	20007e4c 	.word	0x20007e4c
 80080e8:	20008328 	.word	0x20008328
 80080ec:	20007e50 	.word	0x20007e50

080080f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80080fa:	4b21      	ldr	r3, [pc, #132]	; (8008180 <prvAddCurrentTaskToDelayedList+0x90>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008100:	4b20      	ldr	r3, [pc, #128]	; (8008184 <prvAddCurrentTaskToDelayedList+0x94>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	3304      	adds	r3, #4
 8008106:	4618      	mov	r0, r3
 8008108:	f7fe fb52 	bl	80067b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008112:	d10a      	bne.n	800812a <prvAddCurrentTaskToDelayedList+0x3a>
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d007      	beq.n	800812a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800811a:	4b1a      	ldr	r3, [pc, #104]	; (8008184 <prvAddCurrentTaskToDelayedList+0x94>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	3304      	adds	r3, #4
 8008120:	4619      	mov	r1, r3
 8008122:	4819      	ldr	r0, [pc, #100]	; (8008188 <prvAddCurrentTaskToDelayedList+0x98>)
 8008124:	f7fe fae7 	bl	80066f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008128:	e026      	b.n	8008178 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4413      	add	r3, r2
 8008130:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008132:	4b14      	ldr	r3, [pc, #80]	; (8008184 <prvAddCurrentTaskToDelayedList+0x94>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	429a      	cmp	r2, r3
 8008140:	d209      	bcs.n	8008156 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008142:	4b12      	ldr	r3, [pc, #72]	; (800818c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	4b0f      	ldr	r3, [pc, #60]	; (8008184 <prvAddCurrentTaskToDelayedList+0x94>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	3304      	adds	r3, #4
 800814c:	4619      	mov	r1, r3
 800814e:	4610      	mov	r0, r2
 8008150:	f7fe faf5 	bl	800673e <vListInsert>
}
 8008154:	e010      	b.n	8008178 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008156:	4b0e      	ldr	r3, [pc, #56]	; (8008190 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	4b0a      	ldr	r3, [pc, #40]	; (8008184 <prvAddCurrentTaskToDelayedList+0x94>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	3304      	adds	r3, #4
 8008160:	4619      	mov	r1, r3
 8008162:	4610      	mov	r0, r2
 8008164:	f7fe faeb 	bl	800673e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008168:	4b0a      	ldr	r3, [pc, #40]	; (8008194 <prvAddCurrentTaskToDelayedList+0xa4>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	429a      	cmp	r2, r3
 8008170:	d202      	bcs.n	8008178 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008172:	4a08      	ldr	r2, [pc, #32]	; (8008194 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	6013      	str	r3, [r2, #0]
}
 8008178:	bf00      	nop
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	20008324 	.word	0x20008324
 8008184:	20007e4c 	.word	0x20007e4c
 8008188:	2000830c 	.word	0x2000830c
 800818c:	200082dc 	.word	0x200082dc
 8008190:	200082d8 	.word	0x200082d8
 8008194:	20008340 	.word	0x20008340

08008198 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b08a      	sub	sp, #40	; 0x28
 800819c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800819e:	2300      	movs	r3, #0
 80081a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80081a2:	f000 fb07 	bl	80087b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80081a6:	4b1c      	ldr	r3, [pc, #112]	; (8008218 <xTimerCreateTimerTask+0x80>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d021      	beq.n	80081f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80081ae:	2300      	movs	r3, #0
 80081b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80081b2:	2300      	movs	r3, #0
 80081b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80081b6:	1d3a      	adds	r2, r7, #4
 80081b8:	f107 0108 	add.w	r1, r7, #8
 80081bc:	f107 030c 	add.w	r3, r7, #12
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fe fa51 	bl	8006668 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80081c6:	6879      	ldr	r1, [r7, #4]
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	9202      	str	r2, [sp, #8]
 80081ce:	9301      	str	r3, [sp, #4]
 80081d0:	2302      	movs	r3, #2
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	2300      	movs	r3, #0
 80081d6:	460a      	mov	r2, r1
 80081d8:	4910      	ldr	r1, [pc, #64]	; (800821c <xTimerCreateTimerTask+0x84>)
 80081da:	4811      	ldr	r0, [pc, #68]	; (8008220 <xTimerCreateTimerTask+0x88>)
 80081dc:	f7ff f8b8 	bl	8007350 <xTaskCreateStatic>
 80081e0:	4603      	mov	r3, r0
 80081e2:	4a10      	ldr	r2, [pc, #64]	; (8008224 <xTimerCreateTimerTask+0x8c>)
 80081e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80081e6:	4b0f      	ldr	r3, [pc, #60]	; (8008224 <xTimerCreateTimerTask+0x8c>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80081ee:	2301      	movs	r3, #1
 80081f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d10a      	bne.n	800820e <xTimerCreateTimerTask+0x76>
	__asm volatile
 80081f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fc:	f383 8811 	msr	BASEPRI, r3
 8008200:	f3bf 8f6f 	isb	sy
 8008204:	f3bf 8f4f 	dsb	sy
 8008208:	613b      	str	r3, [r7, #16]
}
 800820a:	bf00      	nop
 800820c:	e7fe      	b.n	800820c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800820e:	697b      	ldr	r3, [r7, #20]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3718      	adds	r7, #24
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	2000837c 	.word	0x2000837c
 800821c:	0801673c 	.word	0x0801673c
 8008220:	0800835d 	.word	0x0800835d
 8008224:	20008380 	.word	0x20008380

08008228 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b08a      	sub	sp, #40	; 0x28
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
 8008234:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008236:	2300      	movs	r3, #0
 8008238:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10a      	bne.n	8008256 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	623b      	str	r3, [r7, #32]
}
 8008252:	bf00      	nop
 8008254:	e7fe      	b.n	8008254 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008256:	4b1a      	ldr	r3, [pc, #104]	; (80082c0 <xTimerGenericCommand+0x98>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d02a      	beq.n	80082b4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	2b05      	cmp	r3, #5
 800826e:	dc18      	bgt.n	80082a2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008270:	f7ff feb2 	bl	8007fd8 <xTaskGetSchedulerState>
 8008274:	4603      	mov	r3, r0
 8008276:	2b02      	cmp	r3, #2
 8008278:	d109      	bne.n	800828e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800827a:	4b11      	ldr	r3, [pc, #68]	; (80082c0 <xTimerGenericCommand+0x98>)
 800827c:	6818      	ldr	r0, [r3, #0]
 800827e:	f107 0110 	add.w	r1, r7, #16
 8008282:	2300      	movs	r3, #0
 8008284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008286:	f7fe fbfb 	bl	8006a80 <xQueueGenericSend>
 800828a:	6278      	str	r0, [r7, #36]	; 0x24
 800828c:	e012      	b.n	80082b4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800828e:	4b0c      	ldr	r3, [pc, #48]	; (80082c0 <xTimerGenericCommand+0x98>)
 8008290:	6818      	ldr	r0, [r3, #0]
 8008292:	f107 0110 	add.w	r1, r7, #16
 8008296:	2300      	movs	r3, #0
 8008298:	2200      	movs	r2, #0
 800829a:	f7fe fbf1 	bl	8006a80 <xQueueGenericSend>
 800829e:	6278      	str	r0, [r7, #36]	; 0x24
 80082a0:	e008      	b.n	80082b4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80082a2:	4b07      	ldr	r3, [pc, #28]	; (80082c0 <xTimerGenericCommand+0x98>)
 80082a4:	6818      	ldr	r0, [r3, #0]
 80082a6:	f107 0110 	add.w	r1, r7, #16
 80082aa:	2300      	movs	r3, #0
 80082ac:	683a      	ldr	r2, [r7, #0]
 80082ae:	f7fe fce5 	bl	8006c7c <xQueueGenericSendFromISR>
 80082b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80082b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3728      	adds	r7, #40	; 0x28
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	2000837c 	.word	0x2000837c

080082c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b088      	sub	sp, #32
 80082c8:	af02      	add	r7, sp, #8
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082ce:	4b22      	ldr	r3, [pc, #136]	; (8008358 <prvProcessExpiredTimer+0x94>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	3304      	adds	r3, #4
 80082dc:	4618      	mov	r0, r3
 80082de:	f7fe fa67 	bl	80067b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082e8:	f003 0304 	and.w	r3, r3, #4
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d022      	beq.n	8008336 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	699a      	ldr	r2, [r3, #24]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	18d1      	adds	r1, r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	6978      	ldr	r0, [r7, #20]
 80082fe:	f000 f8d1 	bl	80084a4 <prvInsertTimerInActiveList>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d01f      	beq.n	8008348 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008308:	2300      	movs	r3, #0
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	2300      	movs	r3, #0
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	2100      	movs	r1, #0
 8008312:	6978      	ldr	r0, [r7, #20]
 8008314:	f7ff ff88 	bl	8008228 <xTimerGenericCommand>
 8008318:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d113      	bne.n	8008348 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	60fb      	str	r3, [r7, #12]
}
 8008332:	bf00      	nop
 8008334:	e7fe      	b.n	8008334 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800833c:	f023 0301 	bic.w	r3, r3, #1
 8008340:	b2da      	uxtb	r2, r3
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	6a1b      	ldr	r3, [r3, #32]
 800834c:	6978      	ldr	r0, [r7, #20]
 800834e:	4798      	blx	r3
}
 8008350:	bf00      	nop
 8008352:	3718      	adds	r7, #24
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	20008374 	.word	0x20008374

0800835c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008364:	f107 0308 	add.w	r3, r7, #8
 8008368:	4618      	mov	r0, r3
 800836a:	f000 f857 	bl	800841c <prvGetNextExpireTime>
 800836e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	4619      	mov	r1, r3
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f000 f803 	bl	8008380 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800837a:	f000 f8d5 	bl	8008528 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800837e:	e7f1      	b.n	8008364 <prvTimerTask+0x8>

08008380 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800838a:	f7ff fa1d 	bl	80077c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800838e:	f107 0308 	add.w	r3, r7, #8
 8008392:	4618      	mov	r0, r3
 8008394:	f000 f866 	bl	8008464 <prvSampleTimeNow>
 8008398:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d130      	bne.n	8008402 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10a      	bne.n	80083bc <prvProcessTimerOrBlockTask+0x3c>
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d806      	bhi.n	80083bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80083ae:	f7ff fa19 	bl	80077e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80083b2:	68f9      	ldr	r1, [r7, #12]
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f7ff ff85 	bl	80082c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80083ba:	e024      	b.n	8008406 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d008      	beq.n	80083d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80083c2:	4b13      	ldr	r3, [pc, #76]	; (8008410 <prvProcessTimerOrBlockTask+0x90>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d101      	bne.n	80083d0 <prvProcessTimerOrBlockTask+0x50>
 80083cc:	2301      	movs	r3, #1
 80083ce:	e000      	b.n	80083d2 <prvProcessTimerOrBlockTask+0x52>
 80083d0:	2300      	movs	r3, #0
 80083d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80083d4:	4b0f      	ldr	r3, [pc, #60]	; (8008414 <prvProcessTimerOrBlockTask+0x94>)
 80083d6:	6818      	ldr	r0, [r3, #0]
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	1ad3      	subs	r3, r2, r3
 80083de:	683a      	ldr	r2, [r7, #0]
 80083e0:	4619      	mov	r1, r3
 80083e2:	f7fe ff81 	bl	80072e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80083e6:	f7ff f9fd 	bl	80077e4 <xTaskResumeAll>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10a      	bne.n	8008406 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80083f0:	4b09      	ldr	r3, [pc, #36]	; (8008418 <prvProcessTimerOrBlockTask+0x98>)
 80083f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083f6:	601a      	str	r2, [r3, #0]
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	f3bf 8f6f 	isb	sy
}
 8008400:	e001      	b.n	8008406 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008402:	f7ff f9ef 	bl	80077e4 <xTaskResumeAll>
}
 8008406:	bf00      	nop
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	20008378 	.word	0x20008378
 8008414:	2000837c 	.word	0x2000837c
 8008418:	e000ed04 	.word	0xe000ed04

0800841c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008424:	4b0e      	ldr	r3, [pc, #56]	; (8008460 <prvGetNextExpireTime+0x44>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d101      	bne.n	8008432 <prvGetNextExpireTime+0x16>
 800842e:	2201      	movs	r2, #1
 8008430:	e000      	b.n	8008434 <prvGetNextExpireTime+0x18>
 8008432:	2200      	movs	r2, #0
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d105      	bne.n	800844c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008440:	4b07      	ldr	r3, [pc, #28]	; (8008460 <prvGetNextExpireTime+0x44>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	60fb      	str	r3, [r7, #12]
 800844a:	e001      	b.n	8008450 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800844c:	2300      	movs	r3, #0
 800844e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008450:	68fb      	ldr	r3, [r7, #12]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3714      	adds	r7, #20
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	20008374 	.word	0x20008374

08008464 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800846c:	f7ff fa58 	bl	8007920 <xTaskGetTickCount>
 8008470:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008472:	4b0b      	ldr	r3, [pc, #44]	; (80084a0 <prvSampleTimeNow+0x3c>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	429a      	cmp	r2, r3
 800847a:	d205      	bcs.n	8008488 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800847c:	f000 f936 	bl	80086ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	e002      	b.n	800848e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800848e:	4a04      	ldr	r2, [pc, #16]	; (80084a0 <prvSampleTimeNow+0x3c>)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008494:	68fb      	ldr	r3, [r7, #12]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	20008384 	.word	0x20008384

080084a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
 80084b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80084b2:	2300      	movs	r3, #0
 80084b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d812      	bhi.n	80084f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	1ad2      	subs	r2, r2, r3
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d302      	bcc.n	80084de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80084d8:	2301      	movs	r3, #1
 80084da:	617b      	str	r3, [r7, #20]
 80084dc:	e01b      	b.n	8008516 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80084de:	4b10      	ldr	r3, [pc, #64]	; (8008520 <prvInsertTimerInActiveList+0x7c>)
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	3304      	adds	r3, #4
 80084e6:	4619      	mov	r1, r3
 80084e8:	4610      	mov	r0, r2
 80084ea:	f7fe f928 	bl	800673e <vListInsert>
 80084ee:	e012      	b.n	8008516 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d206      	bcs.n	8008506 <prvInsertTimerInActiveList+0x62>
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d302      	bcc.n	8008506 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008500:	2301      	movs	r3, #1
 8008502:	617b      	str	r3, [r7, #20]
 8008504:	e007      	b.n	8008516 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008506:	4b07      	ldr	r3, [pc, #28]	; (8008524 <prvInsertTimerInActiveList+0x80>)
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	3304      	adds	r3, #4
 800850e:	4619      	mov	r1, r3
 8008510:	4610      	mov	r0, r2
 8008512:	f7fe f914 	bl	800673e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008516:	697b      	ldr	r3, [r7, #20]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3718      	adds	r7, #24
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	20008378 	.word	0x20008378
 8008524:	20008374 	.word	0x20008374

08008528 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b08e      	sub	sp, #56	; 0x38
 800852c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800852e:	e0ca      	b.n	80086c6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	da18      	bge.n	8008568 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008536:	1d3b      	adds	r3, r7, #4
 8008538:	3304      	adds	r3, #4
 800853a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800853c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853e:	2b00      	cmp	r3, #0
 8008540:	d10a      	bne.n	8008558 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008546:	f383 8811 	msr	BASEPRI, r3
 800854a:	f3bf 8f6f 	isb	sy
 800854e:	f3bf 8f4f 	dsb	sy
 8008552:	61fb      	str	r3, [r7, #28]
}
 8008554:	bf00      	nop
 8008556:	e7fe      	b.n	8008556 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800855e:	6850      	ldr	r0, [r2, #4]
 8008560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008562:	6892      	ldr	r2, [r2, #8]
 8008564:	4611      	mov	r1, r2
 8008566:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	f2c0 80aa 	blt.w	80086c4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008576:	695b      	ldr	r3, [r3, #20]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d004      	beq.n	8008586 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800857c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857e:	3304      	adds	r3, #4
 8008580:	4618      	mov	r0, r3
 8008582:	f7fe f915 	bl	80067b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008586:	463b      	mov	r3, r7
 8008588:	4618      	mov	r0, r3
 800858a:	f7ff ff6b 	bl	8008464 <prvSampleTimeNow>
 800858e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2b09      	cmp	r3, #9
 8008594:	f200 8097 	bhi.w	80086c6 <prvProcessReceivedCommands+0x19e>
 8008598:	a201      	add	r2, pc, #4	; (adr r2, 80085a0 <prvProcessReceivedCommands+0x78>)
 800859a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859e:	bf00      	nop
 80085a0:	080085c9 	.word	0x080085c9
 80085a4:	080085c9 	.word	0x080085c9
 80085a8:	080085c9 	.word	0x080085c9
 80085ac:	0800863d 	.word	0x0800863d
 80085b0:	08008651 	.word	0x08008651
 80085b4:	0800869b 	.word	0x0800869b
 80085b8:	080085c9 	.word	0x080085c9
 80085bc:	080085c9 	.word	0x080085c9
 80085c0:	0800863d 	.word	0x0800863d
 80085c4:	08008651 	.word	0x08008651
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085ce:	f043 0301 	orr.w	r3, r3, #1
 80085d2:	b2da      	uxtb	r2, r3
 80085d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	18d1      	adds	r1, r2, r3
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085e8:	f7ff ff5c 	bl	80084a4 <prvInsertTimerInActiveList>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d069      	beq.n	80086c6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f4:	6a1b      	ldr	r3, [r3, #32]
 80085f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008600:	f003 0304 	and.w	r3, r3, #4
 8008604:	2b00      	cmp	r3, #0
 8008606:	d05e      	beq.n	80086c6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008608:	68ba      	ldr	r2, [r7, #8]
 800860a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860c:	699b      	ldr	r3, [r3, #24]
 800860e:	441a      	add	r2, r3
 8008610:	2300      	movs	r3, #0
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	2300      	movs	r3, #0
 8008616:	2100      	movs	r1, #0
 8008618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800861a:	f7ff fe05 	bl	8008228 <xTimerGenericCommand>
 800861e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008620:	6a3b      	ldr	r3, [r7, #32]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d14f      	bne.n	80086c6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862a:	f383 8811 	msr	BASEPRI, r3
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	61bb      	str	r3, [r7, #24]
}
 8008638:	bf00      	nop
 800863a:	e7fe      	b.n	800863a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800863c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008642:	f023 0301 	bic.w	r3, r3, #1
 8008646:	b2da      	uxtb	r2, r3
 8008648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800864e:	e03a      	b.n	80086c6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008652:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008656:	f043 0301 	orr.w	r3, r3, #1
 800865a:	b2da      	uxtb	r2, r3
 800865c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008666:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d10a      	bne.n	8008686 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008674:	f383 8811 	msr	BASEPRI, r3
 8008678:	f3bf 8f6f 	isb	sy
 800867c:	f3bf 8f4f 	dsb	sy
 8008680:	617b      	str	r3, [r7, #20]
}
 8008682:	bf00      	nop
 8008684:	e7fe      	b.n	8008684 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008688:	699a      	ldr	r2, [r3, #24]
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	18d1      	adds	r1, r2, r3
 800868e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008692:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008694:	f7ff ff06 	bl	80084a4 <prvInsertTimerInActiveList>
					break;
 8008698:	e015      	b.n	80086c6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800869a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086a0:	f003 0302 	and.w	r3, r3, #2
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d103      	bne.n	80086b0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80086a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086aa:	f000 fbe1 	bl	8008e70 <vPortFree>
 80086ae:	e00a      	b.n	80086c6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086b6:	f023 0301 	bic.w	r3, r3, #1
 80086ba:	b2da      	uxtb	r2, r3
 80086bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80086c2:	e000      	b.n	80086c6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80086c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086c6:	4b08      	ldr	r3, [pc, #32]	; (80086e8 <prvProcessReceivedCommands+0x1c0>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	1d39      	adds	r1, r7, #4
 80086cc:	2200      	movs	r2, #0
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fe fb70 	bl	8006db4 <xQueueReceive>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f47f af2a 	bne.w	8008530 <prvProcessReceivedCommands+0x8>
	}
}
 80086dc:	bf00      	nop
 80086de:	bf00      	nop
 80086e0:	3730      	adds	r7, #48	; 0x30
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	2000837c 	.word	0x2000837c

080086ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b088      	sub	sp, #32
 80086f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086f2:	e048      	b.n	8008786 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086f4:	4b2d      	ldr	r3, [pc, #180]	; (80087ac <prvSwitchTimerLists+0xc0>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086fe:	4b2b      	ldr	r3, [pc, #172]	; (80087ac <prvSwitchTimerLists+0xc0>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	3304      	adds	r3, #4
 800870c:	4618      	mov	r0, r3
 800870e:	f7fe f84f 	bl	80067b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6a1b      	ldr	r3, [r3, #32]
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008720:	f003 0304 	and.w	r3, r3, #4
 8008724:	2b00      	cmp	r3, #0
 8008726:	d02e      	beq.n	8008786 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	4413      	add	r3, r2
 8008730:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	429a      	cmp	r2, r3
 8008738:	d90e      	bls.n	8008758 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008746:	4b19      	ldr	r3, [pc, #100]	; (80087ac <prvSwitchTimerLists+0xc0>)
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	3304      	adds	r3, #4
 800874e:	4619      	mov	r1, r3
 8008750:	4610      	mov	r0, r2
 8008752:	f7fd fff4 	bl	800673e <vListInsert>
 8008756:	e016      	b.n	8008786 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008758:	2300      	movs	r3, #0
 800875a:	9300      	str	r3, [sp, #0]
 800875c:	2300      	movs	r3, #0
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	2100      	movs	r1, #0
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f7ff fd60 	bl	8008228 <xTimerGenericCommand>
 8008768:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10a      	bne.n	8008786 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008774:	f383 8811 	msr	BASEPRI, r3
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	603b      	str	r3, [r7, #0]
}
 8008782:	bf00      	nop
 8008784:	e7fe      	b.n	8008784 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008786:	4b09      	ldr	r3, [pc, #36]	; (80087ac <prvSwitchTimerLists+0xc0>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1b1      	bne.n	80086f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008790:	4b06      	ldr	r3, [pc, #24]	; (80087ac <prvSwitchTimerLists+0xc0>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008796:	4b06      	ldr	r3, [pc, #24]	; (80087b0 <prvSwitchTimerLists+0xc4>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a04      	ldr	r2, [pc, #16]	; (80087ac <prvSwitchTimerLists+0xc0>)
 800879c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800879e:	4a04      	ldr	r2, [pc, #16]	; (80087b0 <prvSwitchTimerLists+0xc4>)
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	6013      	str	r3, [r2, #0]
}
 80087a4:	bf00      	nop
 80087a6:	3718      	adds	r7, #24
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	20008374 	.word	0x20008374
 80087b0:	20008378 	.word	0x20008378

080087b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80087ba:	f000 f96b 	bl	8008a94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80087be:	4b15      	ldr	r3, [pc, #84]	; (8008814 <prvCheckForValidListAndQueue+0x60>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d120      	bne.n	8008808 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80087c6:	4814      	ldr	r0, [pc, #80]	; (8008818 <prvCheckForValidListAndQueue+0x64>)
 80087c8:	f7fd ff68 	bl	800669c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80087cc:	4813      	ldr	r0, [pc, #76]	; (800881c <prvCheckForValidListAndQueue+0x68>)
 80087ce:	f7fd ff65 	bl	800669c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80087d2:	4b13      	ldr	r3, [pc, #76]	; (8008820 <prvCheckForValidListAndQueue+0x6c>)
 80087d4:	4a10      	ldr	r2, [pc, #64]	; (8008818 <prvCheckForValidListAndQueue+0x64>)
 80087d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80087d8:	4b12      	ldr	r3, [pc, #72]	; (8008824 <prvCheckForValidListAndQueue+0x70>)
 80087da:	4a10      	ldr	r2, [pc, #64]	; (800881c <prvCheckForValidListAndQueue+0x68>)
 80087dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80087de:	2300      	movs	r3, #0
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	4b11      	ldr	r3, [pc, #68]	; (8008828 <prvCheckForValidListAndQueue+0x74>)
 80087e4:	4a11      	ldr	r2, [pc, #68]	; (800882c <prvCheckForValidListAndQueue+0x78>)
 80087e6:	2110      	movs	r1, #16
 80087e8:	200a      	movs	r0, #10
 80087ea:	f7fe f873 	bl	80068d4 <xQueueGenericCreateStatic>
 80087ee:	4603      	mov	r3, r0
 80087f0:	4a08      	ldr	r2, [pc, #32]	; (8008814 <prvCheckForValidListAndQueue+0x60>)
 80087f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80087f4:	4b07      	ldr	r3, [pc, #28]	; (8008814 <prvCheckForValidListAndQueue+0x60>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d005      	beq.n	8008808 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80087fc:	4b05      	ldr	r3, [pc, #20]	; (8008814 <prvCheckForValidListAndQueue+0x60>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	490b      	ldr	r1, [pc, #44]	; (8008830 <prvCheckForValidListAndQueue+0x7c>)
 8008802:	4618      	mov	r0, r3
 8008804:	f7fe fd46 	bl	8007294 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008808:	f000 f974 	bl	8008af4 <vPortExitCritical>
}
 800880c:	bf00      	nop
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	2000837c 	.word	0x2000837c
 8008818:	2000834c 	.word	0x2000834c
 800881c:	20008360 	.word	0x20008360
 8008820:	20008374 	.word	0x20008374
 8008824:	20008378 	.word	0x20008378
 8008828:	20008428 	.word	0x20008428
 800882c:	20008388 	.word	0x20008388
 8008830:	08016744 	.word	0x08016744

08008834 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008834:	b480      	push	{r7}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	3b04      	subs	r3, #4
 8008844:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800884c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	3b04      	subs	r3, #4
 8008852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	f023 0201 	bic.w	r2, r3, #1
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3b04      	subs	r3, #4
 8008862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008864:	4a0c      	ldr	r2, [pc, #48]	; (8008898 <pxPortInitialiseStack+0x64>)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	3b14      	subs	r3, #20
 800886e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	3b04      	subs	r3, #4
 800887a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f06f 0202 	mvn.w	r2, #2
 8008882:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	3b20      	subs	r3, #32
 8008888:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800888a:	68fb      	ldr	r3, [r7, #12]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3714      	adds	r7, #20
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr
 8008898:	0800889d 	.word	0x0800889d

0800889c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80088a2:	2300      	movs	r3, #0
 80088a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80088a6:	4b12      	ldr	r3, [pc, #72]	; (80088f0 <prvTaskExitError+0x54>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088ae:	d00a      	beq.n	80088c6 <prvTaskExitError+0x2a>
	__asm volatile
 80088b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b4:	f383 8811 	msr	BASEPRI, r3
 80088b8:	f3bf 8f6f 	isb	sy
 80088bc:	f3bf 8f4f 	dsb	sy
 80088c0:	60fb      	str	r3, [r7, #12]
}
 80088c2:	bf00      	nop
 80088c4:	e7fe      	b.n	80088c4 <prvTaskExitError+0x28>
	__asm volatile
 80088c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ca:	f383 8811 	msr	BASEPRI, r3
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f3bf 8f4f 	dsb	sy
 80088d6:	60bb      	str	r3, [r7, #8]
}
 80088d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80088da:	bf00      	nop
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d0fc      	beq.n	80088dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80088e2:	bf00      	nop
 80088e4:	bf00      	nop
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr
 80088f0:	20000010 	.word	0x20000010
	...

08008900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008900:	4b07      	ldr	r3, [pc, #28]	; (8008920 <pxCurrentTCBConst2>)
 8008902:	6819      	ldr	r1, [r3, #0]
 8008904:	6808      	ldr	r0, [r1, #0]
 8008906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800890a:	f380 8809 	msr	PSP, r0
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f04f 0000 	mov.w	r0, #0
 8008916:	f380 8811 	msr	BASEPRI, r0
 800891a:	4770      	bx	lr
 800891c:	f3af 8000 	nop.w

08008920 <pxCurrentTCBConst2>:
 8008920:	20007e4c 	.word	0x20007e4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008924:	bf00      	nop
 8008926:	bf00      	nop

08008928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008928:	4808      	ldr	r0, [pc, #32]	; (800894c <prvPortStartFirstTask+0x24>)
 800892a:	6800      	ldr	r0, [r0, #0]
 800892c:	6800      	ldr	r0, [r0, #0]
 800892e:	f380 8808 	msr	MSP, r0
 8008932:	f04f 0000 	mov.w	r0, #0
 8008936:	f380 8814 	msr	CONTROL, r0
 800893a:	b662      	cpsie	i
 800893c:	b661      	cpsie	f
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	f3bf 8f6f 	isb	sy
 8008946:	df00      	svc	0
 8008948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800894a:	bf00      	nop
 800894c:	e000ed08 	.word	0xe000ed08

08008950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008956:	4b46      	ldr	r3, [pc, #280]	; (8008a70 <xPortStartScheduler+0x120>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a46      	ldr	r2, [pc, #280]	; (8008a74 <xPortStartScheduler+0x124>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d10a      	bne.n	8008976 <xPortStartScheduler+0x26>
	__asm volatile
 8008960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008964:	f383 8811 	msr	BASEPRI, r3
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	613b      	str	r3, [r7, #16]
}
 8008972:	bf00      	nop
 8008974:	e7fe      	b.n	8008974 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008976:	4b3e      	ldr	r3, [pc, #248]	; (8008a70 <xPortStartScheduler+0x120>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a3f      	ldr	r2, [pc, #252]	; (8008a78 <xPortStartScheduler+0x128>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d10a      	bne.n	8008996 <xPortStartScheduler+0x46>
	__asm volatile
 8008980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008984:	f383 8811 	msr	BASEPRI, r3
 8008988:	f3bf 8f6f 	isb	sy
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	60fb      	str	r3, [r7, #12]
}
 8008992:	bf00      	nop
 8008994:	e7fe      	b.n	8008994 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008996:	4b39      	ldr	r3, [pc, #228]	; (8008a7c <xPortStartScheduler+0x12c>)
 8008998:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	22ff      	movs	r2, #255	; 0xff
 80089a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80089b0:	78fb      	ldrb	r3, [r7, #3]
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80089b8:	b2da      	uxtb	r2, r3
 80089ba:	4b31      	ldr	r3, [pc, #196]	; (8008a80 <xPortStartScheduler+0x130>)
 80089bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80089be:	4b31      	ldr	r3, [pc, #196]	; (8008a84 <xPortStartScheduler+0x134>)
 80089c0:	2207      	movs	r2, #7
 80089c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089c4:	e009      	b.n	80089da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80089c6:	4b2f      	ldr	r3, [pc, #188]	; (8008a84 <xPortStartScheduler+0x134>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	3b01      	subs	r3, #1
 80089cc:	4a2d      	ldr	r2, [pc, #180]	; (8008a84 <xPortStartScheduler+0x134>)
 80089ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80089d0:	78fb      	ldrb	r3, [r7, #3]
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	005b      	lsls	r3, r3, #1
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089da:	78fb      	ldrb	r3, [r7, #3]
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089e2:	2b80      	cmp	r3, #128	; 0x80
 80089e4:	d0ef      	beq.n	80089c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80089e6:	4b27      	ldr	r3, [pc, #156]	; (8008a84 <xPortStartScheduler+0x134>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f1c3 0307 	rsb	r3, r3, #7
 80089ee:	2b04      	cmp	r3, #4
 80089f0:	d00a      	beq.n	8008a08 <xPortStartScheduler+0xb8>
	__asm volatile
 80089f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f6:	f383 8811 	msr	BASEPRI, r3
 80089fa:	f3bf 8f6f 	isb	sy
 80089fe:	f3bf 8f4f 	dsb	sy
 8008a02:	60bb      	str	r3, [r7, #8]
}
 8008a04:	bf00      	nop
 8008a06:	e7fe      	b.n	8008a06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a08:	4b1e      	ldr	r3, [pc, #120]	; (8008a84 <xPortStartScheduler+0x134>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	021b      	lsls	r3, r3, #8
 8008a0e:	4a1d      	ldr	r2, [pc, #116]	; (8008a84 <xPortStartScheduler+0x134>)
 8008a10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a12:	4b1c      	ldr	r3, [pc, #112]	; (8008a84 <xPortStartScheduler+0x134>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a1a:	4a1a      	ldr	r2, [pc, #104]	; (8008a84 <xPortStartScheduler+0x134>)
 8008a1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	b2da      	uxtb	r2, r3
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a26:	4b18      	ldr	r3, [pc, #96]	; (8008a88 <xPortStartScheduler+0x138>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a17      	ldr	r2, [pc, #92]	; (8008a88 <xPortStartScheduler+0x138>)
 8008a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008a30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a32:	4b15      	ldr	r3, [pc, #84]	; (8008a88 <xPortStartScheduler+0x138>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a14      	ldr	r2, [pc, #80]	; (8008a88 <xPortStartScheduler+0x138>)
 8008a38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008a3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a3e:	f000 f8dd 	bl	8008bfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a42:	4b12      	ldr	r3, [pc, #72]	; (8008a8c <xPortStartScheduler+0x13c>)
 8008a44:	2200      	movs	r2, #0
 8008a46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008a48:	f000 f8fc 	bl	8008c44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a4c:	4b10      	ldr	r3, [pc, #64]	; (8008a90 <xPortStartScheduler+0x140>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a0f      	ldr	r2, [pc, #60]	; (8008a90 <xPortStartScheduler+0x140>)
 8008a52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008a56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a58:	f7ff ff66 	bl	8008928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a5c:	f7ff f82a 	bl	8007ab4 <vTaskSwitchContext>
	prvTaskExitError();
 8008a60:	f7ff ff1c 	bl	800889c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3718      	adds	r7, #24
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	e000ed00 	.word	0xe000ed00
 8008a74:	410fc271 	.word	0x410fc271
 8008a78:	410fc270 	.word	0x410fc270
 8008a7c:	e000e400 	.word	0xe000e400
 8008a80:	20008478 	.word	0x20008478
 8008a84:	2000847c 	.word	0x2000847c
 8008a88:	e000ed20 	.word	0xe000ed20
 8008a8c:	20000010 	.word	0x20000010
 8008a90:	e000ef34 	.word	0xe000ef34

08008a94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
	__asm volatile
 8008a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9e:	f383 8811 	msr	BASEPRI, r3
 8008aa2:	f3bf 8f6f 	isb	sy
 8008aa6:	f3bf 8f4f 	dsb	sy
 8008aaa:	607b      	str	r3, [r7, #4]
}
 8008aac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008aae:	4b0f      	ldr	r3, [pc, #60]	; (8008aec <vPortEnterCritical+0x58>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	4a0d      	ldr	r2, [pc, #52]	; (8008aec <vPortEnterCritical+0x58>)
 8008ab6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008ab8:	4b0c      	ldr	r3, [pc, #48]	; (8008aec <vPortEnterCritical+0x58>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d10f      	bne.n	8008ae0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ac0:	4b0b      	ldr	r3, [pc, #44]	; (8008af0 <vPortEnterCritical+0x5c>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00a      	beq.n	8008ae0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ace:	f383 8811 	msr	BASEPRI, r3
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	603b      	str	r3, [r7, #0]
}
 8008adc:	bf00      	nop
 8008ade:	e7fe      	b.n	8008ade <vPortEnterCritical+0x4a>
	}
}
 8008ae0:	bf00      	nop
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr
 8008aec:	20000010 	.word	0x20000010
 8008af0:	e000ed04 	.word	0xe000ed04

08008af4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008afa:	4b12      	ldr	r3, [pc, #72]	; (8008b44 <vPortExitCritical+0x50>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10a      	bne.n	8008b18 <vPortExitCritical+0x24>
	__asm volatile
 8008b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	607b      	str	r3, [r7, #4]
}
 8008b14:	bf00      	nop
 8008b16:	e7fe      	b.n	8008b16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008b18:	4b0a      	ldr	r3, [pc, #40]	; (8008b44 <vPortExitCritical+0x50>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	4a09      	ldr	r2, [pc, #36]	; (8008b44 <vPortExitCritical+0x50>)
 8008b20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b22:	4b08      	ldr	r3, [pc, #32]	; (8008b44 <vPortExitCritical+0x50>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d105      	bne.n	8008b36 <vPortExitCritical+0x42>
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	f383 8811 	msr	BASEPRI, r3
}
 8008b34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b36:	bf00      	nop
 8008b38:	370c      	adds	r7, #12
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	20000010 	.word	0x20000010
	...

08008b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b50:	f3ef 8009 	mrs	r0, PSP
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	4b15      	ldr	r3, [pc, #84]	; (8008bb0 <pxCurrentTCBConst>)
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	f01e 0f10 	tst.w	lr, #16
 8008b60:	bf08      	it	eq
 8008b62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008b66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6a:	6010      	str	r0, [r2, #0]
 8008b6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008b74:	f380 8811 	msr	BASEPRI, r0
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	f3bf 8f6f 	isb	sy
 8008b80:	f7fe ff98 	bl	8007ab4 <vTaskSwitchContext>
 8008b84:	f04f 0000 	mov.w	r0, #0
 8008b88:	f380 8811 	msr	BASEPRI, r0
 8008b8c:	bc09      	pop	{r0, r3}
 8008b8e:	6819      	ldr	r1, [r3, #0]
 8008b90:	6808      	ldr	r0, [r1, #0]
 8008b92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b96:	f01e 0f10 	tst.w	lr, #16
 8008b9a:	bf08      	it	eq
 8008b9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ba0:	f380 8809 	msr	PSP, r0
 8008ba4:	f3bf 8f6f 	isb	sy
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	f3af 8000 	nop.w

08008bb0 <pxCurrentTCBConst>:
 8008bb0:	20007e4c 	.word	0x20007e4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008bb4:	bf00      	nop
 8008bb6:	bf00      	nop

08008bb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8008bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc2:	f383 8811 	msr	BASEPRI, r3
 8008bc6:	f3bf 8f6f 	isb	sy
 8008bca:	f3bf 8f4f 	dsb	sy
 8008bce:	607b      	str	r3, [r7, #4]
}
 8008bd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008bd2:	f7fe feb5 	bl	8007940 <xTaskIncrementTick>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d003      	beq.n	8008be4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008bdc:	4b06      	ldr	r3, [pc, #24]	; (8008bf8 <xPortSysTickHandler+0x40>)
 8008bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008be2:	601a      	str	r2, [r3, #0]
 8008be4:	2300      	movs	r3, #0
 8008be6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	f383 8811 	msr	BASEPRI, r3
}
 8008bee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008bf0:	bf00      	nop
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	e000ed04 	.word	0xe000ed04

08008bfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c00:	4b0b      	ldr	r3, [pc, #44]	; (8008c30 <vPortSetupTimerInterrupt+0x34>)
 8008c02:	2200      	movs	r2, #0
 8008c04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c06:	4b0b      	ldr	r3, [pc, #44]	; (8008c34 <vPortSetupTimerInterrupt+0x38>)
 8008c08:	2200      	movs	r2, #0
 8008c0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c0c:	4b0a      	ldr	r3, [pc, #40]	; (8008c38 <vPortSetupTimerInterrupt+0x3c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a0a      	ldr	r2, [pc, #40]	; (8008c3c <vPortSetupTimerInterrupt+0x40>)
 8008c12:	fba2 2303 	umull	r2, r3, r2, r3
 8008c16:	099b      	lsrs	r3, r3, #6
 8008c18:	4a09      	ldr	r2, [pc, #36]	; (8008c40 <vPortSetupTimerInterrupt+0x44>)
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c1e:	4b04      	ldr	r3, [pc, #16]	; (8008c30 <vPortSetupTimerInterrupt+0x34>)
 8008c20:	2207      	movs	r2, #7
 8008c22:	601a      	str	r2, [r3, #0]
}
 8008c24:	bf00      	nop
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	e000e010 	.word	0xe000e010
 8008c34:	e000e018 	.word	0xe000e018
 8008c38:	20000004 	.word	0x20000004
 8008c3c:	10624dd3 	.word	0x10624dd3
 8008c40:	e000e014 	.word	0xe000e014

08008c44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008c54 <vPortEnableVFP+0x10>
 8008c48:	6801      	ldr	r1, [r0, #0]
 8008c4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008c4e:	6001      	str	r1, [r0, #0]
 8008c50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008c52:	bf00      	nop
 8008c54:	e000ed88 	.word	0xe000ed88

08008c58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008c5e:	f3ef 8305 	mrs	r3, IPSR
 8008c62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2b0f      	cmp	r3, #15
 8008c68:	d914      	bls.n	8008c94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008c6a:	4a17      	ldr	r2, [pc, #92]	; (8008cc8 <vPortValidateInterruptPriority+0x70>)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	4413      	add	r3, r2
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c74:	4b15      	ldr	r3, [pc, #84]	; (8008ccc <vPortValidateInterruptPriority+0x74>)
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	7afa      	ldrb	r2, [r7, #11]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d20a      	bcs.n	8008c94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	607b      	str	r3, [r7, #4]
}
 8008c90:	bf00      	nop
 8008c92:	e7fe      	b.n	8008c92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c94:	4b0e      	ldr	r3, [pc, #56]	; (8008cd0 <vPortValidateInterruptPriority+0x78>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008c9c:	4b0d      	ldr	r3, [pc, #52]	; (8008cd4 <vPortValidateInterruptPriority+0x7c>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d90a      	bls.n	8008cba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca8:	f383 8811 	msr	BASEPRI, r3
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	603b      	str	r3, [r7, #0]
}
 8008cb6:	bf00      	nop
 8008cb8:	e7fe      	b.n	8008cb8 <vPortValidateInterruptPriority+0x60>
	}
 8008cba:	bf00      	nop
 8008cbc:	3714      	adds	r7, #20
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop
 8008cc8:	e000e3f0 	.word	0xe000e3f0
 8008ccc:	20008478 	.word	0x20008478
 8008cd0:	e000ed0c 	.word	0xe000ed0c
 8008cd4:	2000847c 	.word	0x2000847c

08008cd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b08a      	sub	sp, #40	; 0x28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ce4:	f7fe fd70 	bl	80077c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ce8:	4b5b      	ldr	r3, [pc, #364]	; (8008e58 <pvPortMalloc+0x180>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d101      	bne.n	8008cf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008cf0:	f000 f920 	bl	8008f34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008cf4:	4b59      	ldr	r3, [pc, #356]	; (8008e5c <pvPortMalloc+0x184>)
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f040 8093 	bne.w	8008e28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d01d      	beq.n	8008d44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008d08:	2208      	movs	r2, #8
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f003 0307 	and.w	r3, r3, #7
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d014      	beq.n	8008d44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f023 0307 	bic.w	r3, r3, #7
 8008d20:	3308      	adds	r3, #8
 8008d22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f003 0307 	and.w	r3, r3, #7
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00a      	beq.n	8008d44 <pvPortMalloc+0x6c>
	__asm volatile
 8008d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d32:	f383 8811 	msr	BASEPRI, r3
 8008d36:	f3bf 8f6f 	isb	sy
 8008d3a:	f3bf 8f4f 	dsb	sy
 8008d3e:	617b      	str	r3, [r7, #20]
}
 8008d40:	bf00      	nop
 8008d42:	e7fe      	b.n	8008d42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d06e      	beq.n	8008e28 <pvPortMalloc+0x150>
 8008d4a:	4b45      	ldr	r3, [pc, #276]	; (8008e60 <pvPortMalloc+0x188>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d869      	bhi.n	8008e28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d54:	4b43      	ldr	r3, [pc, #268]	; (8008e64 <pvPortMalloc+0x18c>)
 8008d56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d58:	4b42      	ldr	r3, [pc, #264]	; (8008e64 <pvPortMalloc+0x18c>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d5e:	e004      	b.n	8008d6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d903      	bls.n	8008d7c <pvPortMalloc+0xa4>
 8008d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1f1      	bne.n	8008d60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d7c:	4b36      	ldr	r3, [pc, #216]	; (8008e58 <pvPortMalloc+0x180>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d050      	beq.n	8008e28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d86:	6a3b      	ldr	r3, [r7, #32]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2208      	movs	r2, #8
 8008d8c:	4413      	add	r3, r2
 8008d8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	6a3b      	ldr	r3, [r7, #32]
 8008d96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9a:	685a      	ldr	r2, [r3, #4]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	1ad2      	subs	r2, r2, r3
 8008da0:	2308      	movs	r3, #8
 8008da2:	005b      	lsls	r3, r3, #1
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d91f      	bls.n	8008de8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4413      	add	r3, r2
 8008dae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	f003 0307 	and.w	r3, r3, #7
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00a      	beq.n	8008dd0 <pvPortMalloc+0xf8>
	__asm volatile
 8008dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	613b      	str	r3, [r7, #16]
}
 8008dcc:	bf00      	nop
 8008dce:	e7fe      	b.n	8008dce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd2:	685a      	ldr	r2, [r3, #4]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	1ad2      	subs	r2, r2, r3
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008de2:	69b8      	ldr	r0, [r7, #24]
 8008de4:	f000 f908 	bl	8008ff8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008de8:	4b1d      	ldr	r3, [pc, #116]	; (8008e60 <pvPortMalloc+0x188>)
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	1ad3      	subs	r3, r2, r3
 8008df2:	4a1b      	ldr	r2, [pc, #108]	; (8008e60 <pvPortMalloc+0x188>)
 8008df4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008df6:	4b1a      	ldr	r3, [pc, #104]	; (8008e60 <pvPortMalloc+0x188>)
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	4b1b      	ldr	r3, [pc, #108]	; (8008e68 <pvPortMalloc+0x190>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d203      	bcs.n	8008e0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e02:	4b17      	ldr	r3, [pc, #92]	; (8008e60 <pvPortMalloc+0x188>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a18      	ldr	r2, [pc, #96]	; (8008e68 <pvPortMalloc+0x190>)
 8008e08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0c:	685a      	ldr	r2, [r3, #4]
 8008e0e:	4b13      	ldr	r3, [pc, #76]	; (8008e5c <pvPortMalloc+0x184>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	431a      	orrs	r2, r3
 8008e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008e1e:	4b13      	ldr	r3, [pc, #76]	; (8008e6c <pvPortMalloc+0x194>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	3301      	adds	r3, #1
 8008e24:	4a11      	ldr	r2, [pc, #68]	; (8008e6c <pvPortMalloc+0x194>)
 8008e26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e28:	f7fe fcdc 	bl	80077e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	f003 0307 	and.w	r3, r3, #7
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d00a      	beq.n	8008e4c <pvPortMalloc+0x174>
	__asm volatile
 8008e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3a:	f383 8811 	msr	BASEPRI, r3
 8008e3e:	f3bf 8f6f 	isb	sy
 8008e42:	f3bf 8f4f 	dsb	sy
 8008e46:	60fb      	str	r3, [r7, #12]
}
 8008e48:	bf00      	nop
 8008e4a:	e7fe      	b.n	8008e4a <pvPortMalloc+0x172>
	return pvReturn;
 8008e4c:	69fb      	ldr	r3, [r7, #28]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3728      	adds	r7, #40	; 0x28
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	2000c088 	.word	0x2000c088
 8008e5c:	2000c09c 	.word	0x2000c09c
 8008e60:	2000c08c 	.word	0x2000c08c
 8008e64:	2000c080 	.word	0x2000c080
 8008e68:	2000c090 	.word	0x2000c090
 8008e6c:	2000c094 	.word	0x2000c094

08008e70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d04d      	beq.n	8008f1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e82:	2308      	movs	r3, #8
 8008e84:	425b      	negs	r3, r3
 8008e86:	697a      	ldr	r2, [r7, #20]
 8008e88:	4413      	add	r3, r2
 8008e8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	685a      	ldr	r2, [r3, #4]
 8008e94:	4b24      	ldr	r3, [pc, #144]	; (8008f28 <vPortFree+0xb8>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4013      	ands	r3, r2
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10a      	bne.n	8008eb4 <vPortFree+0x44>
	__asm volatile
 8008e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea2:	f383 8811 	msr	BASEPRI, r3
 8008ea6:	f3bf 8f6f 	isb	sy
 8008eaa:	f3bf 8f4f 	dsb	sy
 8008eae:	60fb      	str	r3, [r7, #12]
}
 8008eb0:	bf00      	nop
 8008eb2:	e7fe      	b.n	8008eb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00a      	beq.n	8008ed2 <vPortFree+0x62>
	__asm volatile
 8008ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec0:	f383 8811 	msr	BASEPRI, r3
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	60bb      	str	r3, [r7, #8]
}
 8008ece:	bf00      	nop
 8008ed0:	e7fe      	b.n	8008ed0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	685a      	ldr	r2, [r3, #4]
 8008ed6:	4b14      	ldr	r3, [pc, #80]	; (8008f28 <vPortFree+0xb8>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4013      	ands	r3, r2
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d01e      	beq.n	8008f1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d11a      	bne.n	8008f1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	4b0e      	ldr	r3, [pc, #56]	; (8008f28 <vPortFree+0xb8>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	43db      	mvns	r3, r3
 8008ef2:	401a      	ands	r2, r3
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ef8:	f7fe fc66 	bl	80077c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	685a      	ldr	r2, [r3, #4]
 8008f00:	4b0a      	ldr	r3, [pc, #40]	; (8008f2c <vPortFree+0xbc>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4413      	add	r3, r2
 8008f06:	4a09      	ldr	r2, [pc, #36]	; (8008f2c <vPortFree+0xbc>)
 8008f08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f0a:	6938      	ldr	r0, [r7, #16]
 8008f0c:	f000 f874 	bl	8008ff8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008f10:	4b07      	ldr	r3, [pc, #28]	; (8008f30 <vPortFree+0xc0>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	3301      	adds	r3, #1
 8008f16:	4a06      	ldr	r2, [pc, #24]	; (8008f30 <vPortFree+0xc0>)
 8008f18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008f1a:	f7fe fc63 	bl	80077e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f1e:	bf00      	nop
 8008f20:	3718      	adds	r7, #24
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	2000c09c 	.word	0x2000c09c
 8008f2c:	2000c08c 	.word	0x2000c08c
 8008f30:	2000c098 	.word	0x2000c098

08008f34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008f3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f40:	4b27      	ldr	r3, [pc, #156]	; (8008fe0 <prvHeapInit+0xac>)
 8008f42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f003 0307 	and.w	r3, r3, #7
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00c      	beq.n	8008f68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	3307      	adds	r3, #7
 8008f52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f023 0307 	bic.w	r3, r3, #7
 8008f5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	4a1f      	ldr	r2, [pc, #124]	; (8008fe0 <prvHeapInit+0xac>)
 8008f64:	4413      	add	r3, r2
 8008f66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f6c:	4a1d      	ldr	r2, [pc, #116]	; (8008fe4 <prvHeapInit+0xb0>)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f72:	4b1c      	ldr	r3, [pc, #112]	; (8008fe4 <prvHeapInit+0xb0>)
 8008f74:	2200      	movs	r2, #0
 8008f76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f80:	2208      	movs	r2, #8
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	1a9b      	subs	r3, r3, r2
 8008f86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f023 0307 	bic.w	r3, r3, #7
 8008f8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	4a15      	ldr	r2, [pc, #84]	; (8008fe8 <prvHeapInit+0xb4>)
 8008f94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f96:	4b14      	ldr	r3, [pc, #80]	; (8008fe8 <prvHeapInit+0xb4>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f9e:	4b12      	ldr	r3, [pc, #72]	; (8008fe8 <prvHeapInit+0xb4>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	1ad2      	subs	r2, r2, r3
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008fb4:	4b0c      	ldr	r3, [pc, #48]	; (8008fe8 <prvHeapInit+0xb4>)
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	4a0a      	ldr	r2, [pc, #40]	; (8008fec <prvHeapInit+0xb8>)
 8008fc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	4a09      	ldr	r2, [pc, #36]	; (8008ff0 <prvHeapInit+0xbc>)
 8008fca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008fcc:	4b09      	ldr	r3, [pc, #36]	; (8008ff4 <prvHeapInit+0xc0>)
 8008fce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008fd2:	601a      	str	r2, [r3, #0]
}
 8008fd4:	bf00      	nop
 8008fd6:	3714      	adds	r7, #20
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr
 8008fe0:	20008480 	.word	0x20008480
 8008fe4:	2000c080 	.word	0x2000c080
 8008fe8:	2000c088 	.word	0x2000c088
 8008fec:	2000c090 	.word	0x2000c090
 8008ff0:	2000c08c 	.word	0x2000c08c
 8008ff4:	2000c09c 	.word	0x2000c09c

08008ff8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b085      	sub	sp, #20
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009000:	4b28      	ldr	r3, [pc, #160]	; (80090a4 <prvInsertBlockIntoFreeList+0xac>)
 8009002:	60fb      	str	r3, [r7, #12]
 8009004:	e002      	b.n	800900c <prvInsertBlockIntoFreeList+0x14>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	60fb      	str	r3, [r7, #12]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	429a      	cmp	r2, r3
 8009014:	d8f7      	bhi.n	8009006 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	4413      	add	r3, r2
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	429a      	cmp	r2, r3
 8009026:	d108      	bne.n	800903a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	685a      	ldr	r2, [r3, #4]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	441a      	add	r2, r3
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	441a      	add	r2, r3
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	429a      	cmp	r2, r3
 800904c:	d118      	bne.n	8009080 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	4b15      	ldr	r3, [pc, #84]	; (80090a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	429a      	cmp	r2, r3
 8009058:	d00d      	beq.n	8009076 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	685a      	ldr	r2, [r3, #4]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	441a      	add	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	601a      	str	r2, [r3, #0]
 8009074:	e008      	b.n	8009088 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009076:	4b0c      	ldr	r3, [pc, #48]	; (80090a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	601a      	str	r2, [r3, #0]
 800907e:	e003      	b.n	8009088 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	429a      	cmp	r2, r3
 800908e:	d002      	beq.n	8009096 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009096:	bf00      	nop
 8009098:	3714      	adds	r7, #20
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	2000c080 	.word	0x2000c080
 80090a8:	2000c088 	.word	0x2000c088

080090ac <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 80090ac:	f000 b864 	b.w	8009178 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>

080090b0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 80090b0:	f000 b8f2 	b.w	8009298 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>

080090b4 <get_serialized_size_geometry_msgs__msg__Twist>:
 80090b4:	b570      	push	{r4, r5, r6, lr}
 80090b6:	4604      	mov	r4, r0
 80090b8:	b148      	cbz	r0, 80090ce <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 80090ba:	460d      	mov	r5, r1
 80090bc:	f000 f860 	bl	8009180 <get_serialized_size_geometry_msgs__msg__Vector3>
 80090c0:	4606      	mov	r6, r0
 80090c2:	1829      	adds	r1, r5, r0
 80090c4:	f104 0018 	add.w	r0, r4, #24
 80090c8:	f000 f85a 	bl	8009180 <get_serialized_size_geometry_msgs__msg__Vector3>
 80090cc:	4430      	add	r0, r6
 80090ce:	bd70      	pop	{r4, r5, r6, pc}

080090d0 <_Twist__cdr_deserialize>:
 80090d0:	b570      	push	{r4, r5, r6, lr}
 80090d2:	460c      	mov	r4, r1
 80090d4:	b189      	cbz	r1, 80090fa <_Twist__cdr_deserialize+0x2a>
 80090d6:	4605      	mov	r5, r0
 80090d8:	f000 f8de 	bl	8009298 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80090dc:	6843      	ldr	r3, [r0, #4]
 80090de:	4621      	mov	r1, r4
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	4628      	mov	r0, r5
 80090e4:	4798      	blx	r3
 80090e6:	f000 f8d7 	bl	8009298 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80090ea:	6843      	ldr	r3, [r0, #4]
 80090ec:	f104 0118 	add.w	r1, r4, #24
 80090f0:	4628      	mov	r0, r5
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80090f8:	4718      	bx	r3
 80090fa:	4608      	mov	r0, r1
 80090fc:	bd70      	pop	{r4, r5, r6, pc}
 80090fe:	bf00      	nop

08009100 <_Twist__cdr_serialize>:
 8009100:	b510      	push	{r4, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	9101      	str	r1, [sp, #4]
 8009106:	b190      	cbz	r0, 800912e <_Twist__cdr_serialize+0x2e>
 8009108:	4604      	mov	r4, r0
 800910a:	f000 f8c5 	bl	8009298 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800910e:	6843      	ldr	r3, [r0, #4]
 8009110:	9901      	ldr	r1, [sp, #4]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	4620      	mov	r0, r4
 8009116:	4798      	blx	r3
 8009118:	f000 f8be 	bl	8009298 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800911c:	6843      	ldr	r3, [r0, #4]
 800911e:	9901      	ldr	r1, [sp, #4]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	f104 0018 	add.w	r0, r4, #24
 8009126:	b002      	add	sp, #8
 8009128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800912c:	4718      	bx	r3
 800912e:	b002      	add	sp, #8
 8009130:	bd10      	pop	{r4, pc}
 8009132:	bf00      	nop

08009134 <_Twist__get_serialized_size>:
 8009134:	b538      	push	{r3, r4, r5, lr}
 8009136:	4604      	mov	r4, r0
 8009138:	b148      	cbz	r0, 800914e <_Twist__get_serialized_size+0x1a>
 800913a:	2100      	movs	r1, #0
 800913c:	f000 f820 	bl	8009180 <get_serialized_size_geometry_msgs__msg__Vector3>
 8009140:	4605      	mov	r5, r0
 8009142:	4629      	mov	r1, r5
 8009144:	f104 0018 	add.w	r0, r4, #24
 8009148:	f000 f81a 	bl	8009180 <get_serialized_size_geometry_msgs__msg__Vector3>
 800914c:	4428      	add	r0, r5
 800914e:	bd38      	pop	{r3, r4, r5, pc}

08009150 <_Twist__max_serialized_size>:
 8009150:	b510      	push	{r4, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	2301      	movs	r3, #1
 8009156:	f10d 0007 	add.w	r0, sp, #7
 800915a:	2100      	movs	r1, #0
 800915c:	f88d 3007 	strb.w	r3, [sp, #7]
 8009160:	f000 f87e 	bl	8009260 <max_serialized_size_geometry_msgs__msg__Vector3>
 8009164:	4604      	mov	r4, r0
 8009166:	4621      	mov	r1, r4
 8009168:	f10d 0007 	add.w	r0, sp, #7
 800916c:	f000 f878 	bl	8009260 <max_serialized_size_geometry_msgs__msg__Vector3>
 8009170:	4420      	add	r0, r4
 8009172:	b002      	add	sp, #8
 8009174:	bd10      	pop	{r4, pc}
 8009176:	bf00      	nop

08009178 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8009178:	4800      	ldr	r0, [pc, #0]	; (800917c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800917a:	4770      	bx	lr
 800917c:	20000014 	.word	0x20000014

08009180 <get_serialized_size_geometry_msgs__msg__Vector3>:
 8009180:	b1b8      	cbz	r0, 80091b2 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 8009182:	b538      	push	{r3, r4, r5, lr}
 8009184:	460d      	mov	r5, r1
 8009186:	4628      	mov	r0, r5
 8009188:	2108      	movs	r1, #8
 800918a:	f001 f9fd 	bl	800a588 <ucdr_alignment>
 800918e:	f105 0308 	add.w	r3, r5, #8
 8009192:	181c      	adds	r4, r3, r0
 8009194:	4620      	mov	r0, r4
 8009196:	2108      	movs	r1, #8
 8009198:	f001 f9f6 	bl	800a588 <ucdr_alignment>
 800919c:	3008      	adds	r0, #8
 800919e:	4404      	add	r4, r0
 80091a0:	4620      	mov	r0, r4
 80091a2:	2108      	movs	r1, #8
 80091a4:	f001 f9f0 	bl	800a588 <ucdr_alignment>
 80091a8:	f1c5 0508 	rsb	r5, r5, #8
 80091ac:	4428      	add	r0, r5
 80091ae:	4420      	add	r0, r4
 80091b0:	bd38      	pop	{r3, r4, r5, pc}
 80091b2:	4770      	bx	lr

080091b4 <_Vector3__cdr_deserialize>:
 80091b4:	b538      	push	{r3, r4, r5, lr}
 80091b6:	460c      	mov	r4, r1
 80091b8:	b171      	cbz	r1, 80091d8 <_Vector3__cdr_deserialize+0x24>
 80091ba:	4605      	mov	r5, r0
 80091bc:	f001 f8c8 	bl	800a350 <ucdr_deserialize_double>
 80091c0:	f104 0108 	add.w	r1, r4, #8
 80091c4:	4628      	mov	r0, r5
 80091c6:	f001 f8c3 	bl	800a350 <ucdr_deserialize_double>
 80091ca:	f104 0110 	add.w	r1, r4, #16
 80091ce:	4628      	mov	r0, r5
 80091d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091d4:	f001 b8bc 	b.w	800a350 <ucdr_deserialize_double>
 80091d8:	4608      	mov	r0, r1
 80091da:	bd38      	pop	{r3, r4, r5, pc}

080091dc <_Vector3__cdr_serialize>:
 80091dc:	b198      	cbz	r0, 8009206 <_Vector3__cdr_serialize+0x2a>
 80091de:	b538      	push	{r3, r4, r5, lr}
 80091e0:	ed90 0b00 	vldr	d0, [r0]
 80091e4:	460d      	mov	r5, r1
 80091e6:	4604      	mov	r4, r0
 80091e8:	4608      	mov	r0, r1
 80091ea:	f000 ffe1 	bl	800a1b0 <ucdr_serialize_double>
 80091ee:	ed94 0b02 	vldr	d0, [r4, #8]
 80091f2:	4628      	mov	r0, r5
 80091f4:	f000 ffdc 	bl	800a1b0 <ucdr_serialize_double>
 80091f8:	ed94 0b04 	vldr	d0, [r4, #16]
 80091fc:	4628      	mov	r0, r5
 80091fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009202:	f000 bfd5 	b.w	800a1b0 <ucdr_serialize_double>
 8009206:	4770      	bx	lr

08009208 <_Vector3__get_serialized_size>:
 8009208:	b198      	cbz	r0, 8009232 <_Vector3__get_serialized_size+0x2a>
 800920a:	b510      	push	{r4, lr}
 800920c:	2108      	movs	r1, #8
 800920e:	2000      	movs	r0, #0
 8009210:	f001 f9ba 	bl	800a588 <ucdr_alignment>
 8009214:	f100 0408 	add.w	r4, r0, #8
 8009218:	4620      	mov	r0, r4
 800921a:	2108      	movs	r1, #8
 800921c:	f001 f9b4 	bl	800a588 <ucdr_alignment>
 8009220:	3008      	adds	r0, #8
 8009222:	4404      	add	r4, r0
 8009224:	4620      	mov	r0, r4
 8009226:	2108      	movs	r1, #8
 8009228:	f001 f9ae 	bl	800a588 <ucdr_alignment>
 800922c:	3008      	adds	r0, #8
 800922e:	4420      	add	r0, r4
 8009230:	bd10      	pop	{r4, pc}
 8009232:	4770      	bx	lr

08009234 <_Vector3__max_serialized_size>:
 8009234:	b538      	push	{r3, r4, r5, lr}
 8009236:	2108      	movs	r1, #8
 8009238:	2000      	movs	r0, #0
 800923a:	f001 f9a5 	bl	800a588 <ucdr_alignment>
 800923e:	f100 0508 	add.w	r5, r0, #8
 8009242:	4628      	mov	r0, r5
 8009244:	2108      	movs	r1, #8
 8009246:	f001 f99f 	bl	800a588 <ucdr_alignment>
 800924a:	f100 0408 	add.w	r4, r0, #8
 800924e:	442c      	add	r4, r5
 8009250:	4620      	mov	r0, r4
 8009252:	2108      	movs	r1, #8
 8009254:	f001 f998 	bl	800a588 <ucdr_alignment>
 8009258:	3008      	adds	r0, #8
 800925a:	4420      	add	r0, r4
 800925c:	bd38      	pop	{r3, r4, r5, pc}
 800925e:	bf00      	nop

08009260 <max_serialized_size_geometry_msgs__msg__Vector3>:
 8009260:	2301      	movs	r3, #1
 8009262:	b570      	push	{r4, r5, r6, lr}
 8009264:	7003      	strb	r3, [r0, #0]
 8009266:	460c      	mov	r4, r1
 8009268:	4608      	mov	r0, r1
 800926a:	2108      	movs	r1, #8
 800926c:	f001 f98c 	bl	800a588 <ucdr_alignment>
 8009270:	f104 0508 	add.w	r5, r4, #8
 8009274:	1946      	adds	r6, r0, r5
 8009276:	4630      	mov	r0, r6
 8009278:	2108      	movs	r1, #8
 800927a:	f001 f985 	bl	800a588 <ucdr_alignment>
 800927e:	f100 0508 	add.w	r5, r0, #8
 8009282:	4435      	add	r5, r6
 8009284:	4628      	mov	r0, r5
 8009286:	2108      	movs	r1, #8
 8009288:	f001 f97e 	bl	800a588 <ucdr_alignment>
 800928c:	f1c4 0408 	rsb	r4, r4, #8
 8009290:	4420      	add	r0, r4
 8009292:	4428      	add	r0, r5
 8009294:	bd70      	pop	{r4, r5, r6, pc}
 8009296:	bf00      	nop

08009298 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8009298:	4800      	ldr	r0, [pc, #0]	; (800929c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800929a:	4770      	bx	lr
 800929c:	2000003c 	.word	0x2000003c

080092a0 <ucdr_serialize_bool>:
 80092a0:	b538      	push	{r3, r4, r5, lr}
 80092a2:	460d      	mov	r5, r1
 80092a4:	2101      	movs	r1, #1
 80092a6:	4604      	mov	r4, r0
 80092a8:	f001 f924 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 80092ac:	b148      	cbz	r0, 80092c2 <ucdr_serialize_bool+0x22>
 80092ae:	68a3      	ldr	r3, [r4, #8]
 80092b0:	701d      	strb	r5, [r3, #0]
 80092b2:	68a2      	ldr	r2, [r4, #8]
 80092b4:	6923      	ldr	r3, [r4, #16]
 80092b6:	3201      	adds	r2, #1
 80092b8:	3301      	adds	r3, #1
 80092ba:	2101      	movs	r1, #1
 80092bc:	60a2      	str	r2, [r4, #8]
 80092be:	6123      	str	r3, [r4, #16]
 80092c0:	7561      	strb	r1, [r4, #21]
 80092c2:	7da0      	ldrb	r0, [r4, #22]
 80092c4:	f080 0001 	eor.w	r0, r0, #1
 80092c8:	bd38      	pop	{r3, r4, r5, pc}
 80092ca:	bf00      	nop

080092cc <ucdr_deserialize_bool>:
 80092cc:	b538      	push	{r3, r4, r5, lr}
 80092ce:	460d      	mov	r5, r1
 80092d0:	2101      	movs	r1, #1
 80092d2:	4604      	mov	r4, r0
 80092d4:	f001 f90e 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 80092d8:	b168      	cbz	r0, 80092f6 <ucdr_deserialize_bool+0x2a>
 80092da:	68a2      	ldr	r2, [r4, #8]
 80092dc:	6923      	ldr	r3, [r4, #16]
 80092de:	f812 1b01 	ldrb.w	r1, [r2], #1
 80092e2:	3900      	subs	r1, #0
 80092e4:	f103 0301 	add.w	r3, r3, #1
 80092e8:	bf18      	it	ne
 80092ea:	2101      	movne	r1, #1
 80092ec:	2001      	movs	r0, #1
 80092ee:	7029      	strb	r1, [r5, #0]
 80092f0:	60a2      	str	r2, [r4, #8]
 80092f2:	6123      	str	r3, [r4, #16]
 80092f4:	7560      	strb	r0, [r4, #21]
 80092f6:	7da0      	ldrb	r0, [r4, #22]
 80092f8:	f080 0001 	eor.w	r0, r0, #1
 80092fc:	bd38      	pop	{r3, r4, r5, pc}
 80092fe:	bf00      	nop

08009300 <ucdr_serialize_uint8_t>:
 8009300:	b538      	push	{r3, r4, r5, lr}
 8009302:	460d      	mov	r5, r1
 8009304:	2101      	movs	r1, #1
 8009306:	4604      	mov	r4, r0
 8009308:	f001 f8f4 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 800930c:	b148      	cbz	r0, 8009322 <ucdr_serialize_uint8_t+0x22>
 800930e:	68a3      	ldr	r3, [r4, #8]
 8009310:	701d      	strb	r5, [r3, #0]
 8009312:	68a2      	ldr	r2, [r4, #8]
 8009314:	6923      	ldr	r3, [r4, #16]
 8009316:	3201      	adds	r2, #1
 8009318:	3301      	adds	r3, #1
 800931a:	2101      	movs	r1, #1
 800931c:	60a2      	str	r2, [r4, #8]
 800931e:	6123      	str	r3, [r4, #16]
 8009320:	7561      	strb	r1, [r4, #21]
 8009322:	7da0      	ldrb	r0, [r4, #22]
 8009324:	f080 0001 	eor.w	r0, r0, #1
 8009328:	bd38      	pop	{r3, r4, r5, pc}
 800932a:	bf00      	nop

0800932c <ucdr_deserialize_uint8_t>:
 800932c:	b538      	push	{r3, r4, r5, lr}
 800932e:	460d      	mov	r5, r1
 8009330:	2101      	movs	r1, #1
 8009332:	4604      	mov	r4, r0
 8009334:	f001 f8de 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 8009338:	b150      	cbz	r0, 8009350 <ucdr_deserialize_uint8_t+0x24>
 800933a:	68a3      	ldr	r3, [r4, #8]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	702b      	strb	r3, [r5, #0]
 8009340:	68a2      	ldr	r2, [r4, #8]
 8009342:	6923      	ldr	r3, [r4, #16]
 8009344:	3201      	adds	r2, #1
 8009346:	3301      	adds	r3, #1
 8009348:	2101      	movs	r1, #1
 800934a:	60a2      	str	r2, [r4, #8]
 800934c:	6123      	str	r3, [r4, #16]
 800934e:	7561      	strb	r1, [r4, #21]
 8009350:	7da0      	ldrb	r0, [r4, #22]
 8009352:	f080 0001 	eor.w	r0, r0, #1
 8009356:	bd38      	pop	{r3, r4, r5, pc}

08009358 <ucdr_serialize_uint16_t>:
 8009358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800935c:	b082      	sub	sp, #8
 800935e:	460b      	mov	r3, r1
 8009360:	2102      	movs	r1, #2
 8009362:	4604      	mov	r4, r0
 8009364:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009368:	f001 f916 	bl	800a598 <ucdr_buffer_alignment>
 800936c:	4601      	mov	r1, r0
 800936e:	4620      	mov	r0, r4
 8009370:	7d67      	ldrb	r7, [r4, #21]
 8009372:	f001 f955 	bl	800a620 <ucdr_advance_buffer>
 8009376:	4620      	mov	r0, r4
 8009378:	2102      	movs	r1, #2
 800937a:	f001 f8af 	bl	800a4dc <ucdr_check_buffer_available_for>
 800937e:	bb78      	cbnz	r0, 80093e0 <ucdr_serialize_uint16_t+0x88>
 8009380:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8009384:	42b5      	cmp	r5, r6
 8009386:	d926      	bls.n	80093d6 <ucdr_serialize_uint16_t+0x7e>
 8009388:	6922      	ldr	r2, [r4, #16]
 800938a:	60a5      	str	r5, [r4, #8]
 800938c:	1bad      	subs	r5, r5, r6
 800938e:	442a      	add	r2, r5
 8009390:	f1c5 0802 	rsb	r8, r5, #2
 8009394:	6122      	str	r2, [r4, #16]
 8009396:	4641      	mov	r1, r8
 8009398:	4620      	mov	r0, r4
 800939a:	f001 f8ab 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 800939e:	2800      	cmp	r0, #0
 80093a0:	d03b      	beq.n	800941a <ucdr_serialize_uint16_t+0xc2>
 80093a2:	7d23      	ldrb	r3, [r4, #20]
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d04a      	beq.n	800943e <ucdr_serialize_uint16_t+0xe6>
 80093a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80093ac:	7033      	strb	r3, [r6, #0]
 80093ae:	2d00      	cmp	r5, #0
 80093b0:	d040      	beq.n	8009434 <ucdr_serialize_uint16_t+0xdc>
 80093b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80093b6:	7073      	strb	r3, [r6, #1]
 80093b8:	6923      	ldr	r3, [r4, #16]
 80093ba:	68a2      	ldr	r2, [r4, #8]
 80093bc:	7da0      	ldrb	r0, [r4, #22]
 80093be:	3302      	adds	r3, #2
 80093c0:	1b5b      	subs	r3, r3, r5
 80093c2:	4442      	add	r2, r8
 80093c4:	2102      	movs	r1, #2
 80093c6:	f080 0001 	eor.w	r0, r0, #1
 80093ca:	6123      	str	r3, [r4, #16]
 80093cc:	60a2      	str	r2, [r4, #8]
 80093ce:	7561      	strb	r1, [r4, #21]
 80093d0:	b002      	add	sp, #8
 80093d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093d6:	2102      	movs	r1, #2
 80093d8:	4620      	mov	r0, r4
 80093da:	f001 f88b 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 80093de:	b190      	cbz	r0, 8009406 <ucdr_serialize_uint16_t+0xae>
 80093e0:	7d23      	ldrb	r3, [r4, #20]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	68a3      	ldr	r3, [r4, #8]
 80093e6:	d014      	beq.n	8009412 <ucdr_serialize_uint16_t+0xba>
 80093e8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80093ec:	701a      	strb	r2, [r3, #0]
 80093ee:	68a3      	ldr	r3, [r4, #8]
 80093f0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80093f4:	705a      	strb	r2, [r3, #1]
 80093f6:	68a2      	ldr	r2, [r4, #8]
 80093f8:	6923      	ldr	r3, [r4, #16]
 80093fa:	3202      	adds	r2, #2
 80093fc:	3302      	adds	r3, #2
 80093fe:	2102      	movs	r1, #2
 8009400:	60a2      	str	r2, [r4, #8]
 8009402:	6123      	str	r3, [r4, #16]
 8009404:	7561      	strb	r1, [r4, #21]
 8009406:	7da0      	ldrb	r0, [r4, #22]
 8009408:	f080 0001 	eor.w	r0, r0, #1
 800940c:	b002      	add	sp, #8
 800940e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009412:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009416:	801a      	strh	r2, [r3, #0]
 8009418:	e7ed      	b.n	80093f6 <ucdr_serialize_uint16_t+0x9e>
 800941a:	68a2      	ldr	r2, [r4, #8]
 800941c:	6923      	ldr	r3, [r4, #16]
 800941e:	7da0      	ldrb	r0, [r4, #22]
 8009420:	7567      	strb	r7, [r4, #21]
 8009422:	1b52      	subs	r2, r2, r5
 8009424:	1b5b      	subs	r3, r3, r5
 8009426:	f080 0001 	eor.w	r0, r0, #1
 800942a:	60a2      	str	r2, [r4, #8]
 800942c:	6123      	str	r3, [r4, #16]
 800942e:	b002      	add	sp, #8
 8009430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009434:	68a3      	ldr	r3, [r4, #8]
 8009436:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800943a:	701a      	strb	r2, [r3, #0]
 800943c:	e7bc      	b.n	80093b8 <ucdr_serialize_uint16_t+0x60>
 800943e:	4630      	mov	r0, r6
 8009440:	f10d 0606 	add.w	r6, sp, #6
 8009444:	4631      	mov	r1, r6
 8009446:	462a      	mov	r2, r5
 8009448:	f00b fd9a 	bl	8014f80 <memcpy>
 800944c:	68a0      	ldr	r0, [r4, #8]
 800944e:	4642      	mov	r2, r8
 8009450:	1971      	adds	r1, r6, r5
 8009452:	f00b fd95 	bl	8014f80 <memcpy>
 8009456:	e7af      	b.n	80093b8 <ucdr_serialize_uint16_t+0x60>

08009458 <ucdr_serialize_endian_uint16_t>:
 8009458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800945c:	b083      	sub	sp, #12
 800945e:	460d      	mov	r5, r1
 8009460:	2102      	movs	r1, #2
 8009462:	4604      	mov	r4, r0
 8009464:	f8ad 2006 	strh.w	r2, [sp, #6]
 8009468:	f001 f896 	bl	800a598 <ucdr_buffer_alignment>
 800946c:	4601      	mov	r1, r0
 800946e:	4620      	mov	r0, r4
 8009470:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009474:	f001 f8d4 	bl	800a620 <ucdr_advance_buffer>
 8009478:	4620      	mov	r0, r4
 800947a:	2102      	movs	r1, #2
 800947c:	f001 f82e 	bl	800a4dc <ucdr_check_buffer_available_for>
 8009480:	bb70      	cbnz	r0, 80094e0 <ucdr_serialize_endian_uint16_t+0x88>
 8009482:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009486:	42be      	cmp	r6, r7
 8009488:	d925      	bls.n	80094d6 <ucdr_serialize_endian_uint16_t+0x7e>
 800948a:	6922      	ldr	r2, [r4, #16]
 800948c:	60a6      	str	r6, [r4, #8]
 800948e:	1bf6      	subs	r6, r6, r7
 8009490:	4432      	add	r2, r6
 8009492:	f1c6 0902 	rsb	r9, r6, #2
 8009496:	6122      	str	r2, [r4, #16]
 8009498:	4649      	mov	r1, r9
 800949a:	4620      	mov	r0, r4
 800949c:	f001 f82a 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	d039      	beq.n	8009518 <ucdr_serialize_endian_uint16_t+0xc0>
 80094a4:	2d01      	cmp	r5, #1
 80094a6:	d04a      	beq.n	800953e <ucdr_serialize_endian_uint16_t+0xe6>
 80094a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80094ac:	703b      	strb	r3, [r7, #0]
 80094ae:	2e00      	cmp	r6, #0
 80094b0:	d040      	beq.n	8009534 <ucdr_serialize_endian_uint16_t+0xdc>
 80094b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80094b6:	707b      	strb	r3, [r7, #1]
 80094b8:	6923      	ldr	r3, [r4, #16]
 80094ba:	68a2      	ldr	r2, [r4, #8]
 80094bc:	7da0      	ldrb	r0, [r4, #22]
 80094be:	3302      	adds	r3, #2
 80094c0:	1b9b      	subs	r3, r3, r6
 80094c2:	444a      	add	r2, r9
 80094c4:	2102      	movs	r1, #2
 80094c6:	f080 0001 	eor.w	r0, r0, #1
 80094ca:	6123      	str	r3, [r4, #16]
 80094cc:	60a2      	str	r2, [r4, #8]
 80094ce:	7561      	strb	r1, [r4, #21]
 80094d0:	b003      	add	sp, #12
 80094d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094d6:	2102      	movs	r1, #2
 80094d8:	4620      	mov	r0, r4
 80094da:	f001 f80b 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 80094de:	b188      	cbz	r0, 8009504 <ucdr_serialize_endian_uint16_t+0xac>
 80094e0:	2d01      	cmp	r5, #1
 80094e2:	68a3      	ldr	r3, [r4, #8]
 80094e4:	d014      	beq.n	8009510 <ucdr_serialize_endian_uint16_t+0xb8>
 80094e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80094ea:	701a      	strb	r2, [r3, #0]
 80094ec:	68a3      	ldr	r3, [r4, #8]
 80094ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80094f2:	705a      	strb	r2, [r3, #1]
 80094f4:	68a2      	ldr	r2, [r4, #8]
 80094f6:	6923      	ldr	r3, [r4, #16]
 80094f8:	3202      	adds	r2, #2
 80094fa:	3302      	adds	r3, #2
 80094fc:	2102      	movs	r1, #2
 80094fe:	60a2      	str	r2, [r4, #8]
 8009500:	6123      	str	r3, [r4, #16]
 8009502:	7561      	strb	r1, [r4, #21]
 8009504:	7da0      	ldrb	r0, [r4, #22]
 8009506:	f080 0001 	eor.w	r0, r0, #1
 800950a:	b003      	add	sp, #12
 800950c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009510:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009514:	801a      	strh	r2, [r3, #0]
 8009516:	e7ed      	b.n	80094f4 <ucdr_serialize_endian_uint16_t+0x9c>
 8009518:	68a2      	ldr	r2, [r4, #8]
 800951a:	6923      	ldr	r3, [r4, #16]
 800951c:	7da0      	ldrb	r0, [r4, #22]
 800951e:	f884 8015 	strb.w	r8, [r4, #21]
 8009522:	1b92      	subs	r2, r2, r6
 8009524:	1b9b      	subs	r3, r3, r6
 8009526:	f080 0001 	eor.w	r0, r0, #1
 800952a:	60a2      	str	r2, [r4, #8]
 800952c:	6123      	str	r3, [r4, #16]
 800952e:	b003      	add	sp, #12
 8009530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009534:	68a3      	ldr	r3, [r4, #8]
 8009536:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800953a:	701a      	strb	r2, [r3, #0]
 800953c:	e7bc      	b.n	80094b8 <ucdr_serialize_endian_uint16_t+0x60>
 800953e:	f10d 0506 	add.w	r5, sp, #6
 8009542:	4629      	mov	r1, r5
 8009544:	4632      	mov	r2, r6
 8009546:	4638      	mov	r0, r7
 8009548:	f00b fd1a 	bl	8014f80 <memcpy>
 800954c:	68a0      	ldr	r0, [r4, #8]
 800954e:	464a      	mov	r2, r9
 8009550:	19a9      	adds	r1, r5, r6
 8009552:	f00b fd15 	bl	8014f80 <memcpy>
 8009556:	e7af      	b.n	80094b8 <ucdr_serialize_endian_uint16_t+0x60>

08009558 <ucdr_deserialize_uint16_t>:
 8009558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800955c:	460d      	mov	r5, r1
 800955e:	2102      	movs	r1, #2
 8009560:	4604      	mov	r4, r0
 8009562:	f001 f819 	bl	800a598 <ucdr_buffer_alignment>
 8009566:	4601      	mov	r1, r0
 8009568:	4620      	mov	r0, r4
 800956a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800956e:	f001 f857 	bl	800a620 <ucdr_advance_buffer>
 8009572:	4620      	mov	r0, r4
 8009574:	2102      	movs	r1, #2
 8009576:	f000 ffb1 	bl	800a4dc <ucdr_check_buffer_available_for>
 800957a:	bb60      	cbnz	r0, 80095d6 <ucdr_deserialize_uint16_t+0x7e>
 800957c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009580:	42be      	cmp	r6, r7
 8009582:	d923      	bls.n	80095cc <ucdr_deserialize_uint16_t+0x74>
 8009584:	6922      	ldr	r2, [r4, #16]
 8009586:	60a6      	str	r6, [r4, #8]
 8009588:	1bf6      	subs	r6, r6, r7
 800958a:	4432      	add	r2, r6
 800958c:	f1c6 0902 	rsb	r9, r6, #2
 8009590:	6122      	str	r2, [r4, #16]
 8009592:	4649      	mov	r1, r9
 8009594:	4620      	mov	r0, r4
 8009596:	f000 ffad 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 800959a:	2800      	cmp	r0, #0
 800959c:	d034      	beq.n	8009608 <ucdr_deserialize_uint16_t+0xb0>
 800959e:	7d23      	ldrb	r3, [r4, #20]
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d042      	beq.n	800962a <ucdr_deserialize_uint16_t+0xd2>
 80095a4:	787b      	ldrb	r3, [r7, #1]
 80095a6:	702b      	strb	r3, [r5, #0]
 80095a8:	2e00      	cmp	r6, #0
 80095aa:	d03a      	beq.n	8009622 <ucdr_deserialize_uint16_t+0xca>
 80095ac:	783b      	ldrb	r3, [r7, #0]
 80095ae:	706b      	strb	r3, [r5, #1]
 80095b0:	6923      	ldr	r3, [r4, #16]
 80095b2:	68a2      	ldr	r2, [r4, #8]
 80095b4:	7da0      	ldrb	r0, [r4, #22]
 80095b6:	2102      	movs	r1, #2
 80095b8:	3302      	adds	r3, #2
 80095ba:	1b9b      	subs	r3, r3, r6
 80095bc:	444a      	add	r2, r9
 80095be:	7561      	strb	r1, [r4, #21]
 80095c0:	6123      	str	r3, [r4, #16]
 80095c2:	60a2      	str	r2, [r4, #8]
 80095c4:	f080 0001 	eor.w	r0, r0, #1
 80095c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095cc:	2102      	movs	r1, #2
 80095ce:	4620      	mov	r0, r4
 80095d0:	f000 ff90 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 80095d4:	b180      	cbz	r0, 80095f8 <ucdr_deserialize_uint16_t+0xa0>
 80095d6:	7d23      	ldrb	r3, [r4, #20]
 80095d8:	2b01      	cmp	r3, #1
 80095da:	68a3      	ldr	r3, [r4, #8]
 80095dc:	d011      	beq.n	8009602 <ucdr_deserialize_uint16_t+0xaa>
 80095de:	785b      	ldrb	r3, [r3, #1]
 80095e0:	702b      	strb	r3, [r5, #0]
 80095e2:	68a3      	ldr	r3, [r4, #8]
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	706b      	strb	r3, [r5, #1]
 80095e8:	68a2      	ldr	r2, [r4, #8]
 80095ea:	6923      	ldr	r3, [r4, #16]
 80095ec:	3202      	adds	r2, #2
 80095ee:	3302      	adds	r3, #2
 80095f0:	2102      	movs	r1, #2
 80095f2:	60a2      	str	r2, [r4, #8]
 80095f4:	6123      	str	r3, [r4, #16]
 80095f6:	7561      	strb	r1, [r4, #21]
 80095f8:	7da0      	ldrb	r0, [r4, #22]
 80095fa:	f080 0001 	eor.w	r0, r0, #1
 80095fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009602:	881b      	ldrh	r3, [r3, #0]
 8009604:	802b      	strh	r3, [r5, #0]
 8009606:	e7ef      	b.n	80095e8 <ucdr_deserialize_uint16_t+0x90>
 8009608:	68a2      	ldr	r2, [r4, #8]
 800960a:	6923      	ldr	r3, [r4, #16]
 800960c:	7da0      	ldrb	r0, [r4, #22]
 800960e:	f884 8015 	strb.w	r8, [r4, #21]
 8009612:	1b92      	subs	r2, r2, r6
 8009614:	1b9b      	subs	r3, r3, r6
 8009616:	60a2      	str	r2, [r4, #8]
 8009618:	6123      	str	r3, [r4, #16]
 800961a:	f080 0001 	eor.w	r0, r0, #1
 800961e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009622:	68a3      	ldr	r3, [r4, #8]
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	706b      	strb	r3, [r5, #1]
 8009628:	e7c2      	b.n	80095b0 <ucdr_deserialize_uint16_t+0x58>
 800962a:	4639      	mov	r1, r7
 800962c:	4632      	mov	r2, r6
 800962e:	4628      	mov	r0, r5
 8009630:	f00b fca6 	bl	8014f80 <memcpy>
 8009634:	68a1      	ldr	r1, [r4, #8]
 8009636:	464a      	mov	r2, r9
 8009638:	19a8      	adds	r0, r5, r6
 800963a:	f00b fca1 	bl	8014f80 <memcpy>
 800963e:	e7b7      	b.n	80095b0 <ucdr_deserialize_uint16_t+0x58>

08009640 <ucdr_deserialize_endian_uint16_t>:
 8009640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009644:	460e      	mov	r6, r1
 8009646:	2102      	movs	r1, #2
 8009648:	4604      	mov	r4, r0
 800964a:	4615      	mov	r5, r2
 800964c:	f000 ffa4 	bl	800a598 <ucdr_buffer_alignment>
 8009650:	4601      	mov	r1, r0
 8009652:	4620      	mov	r0, r4
 8009654:	f894 9015 	ldrb.w	r9, [r4, #21]
 8009658:	f000 ffe2 	bl	800a620 <ucdr_advance_buffer>
 800965c:	4620      	mov	r0, r4
 800965e:	2102      	movs	r1, #2
 8009660:	f000 ff3c 	bl	800a4dc <ucdr_check_buffer_available_for>
 8009664:	bb70      	cbnz	r0, 80096c4 <ucdr_deserialize_endian_uint16_t+0x84>
 8009666:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800966a:	4547      	cmp	r7, r8
 800966c:	d925      	bls.n	80096ba <ucdr_deserialize_endian_uint16_t+0x7a>
 800966e:	6922      	ldr	r2, [r4, #16]
 8009670:	60a7      	str	r7, [r4, #8]
 8009672:	eba7 0708 	sub.w	r7, r7, r8
 8009676:	443a      	add	r2, r7
 8009678:	f1c7 0a02 	rsb	sl, r7, #2
 800967c:	6122      	str	r2, [r4, #16]
 800967e:	4651      	mov	r1, sl
 8009680:	4620      	mov	r0, r4
 8009682:	f000 ff37 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 8009686:	2800      	cmp	r0, #0
 8009688:	d034      	beq.n	80096f4 <ucdr_deserialize_endian_uint16_t+0xb4>
 800968a:	2e01      	cmp	r6, #1
 800968c:	d043      	beq.n	8009716 <ucdr_deserialize_endian_uint16_t+0xd6>
 800968e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009692:	702b      	strb	r3, [r5, #0]
 8009694:	2f00      	cmp	r7, #0
 8009696:	d03a      	beq.n	800970e <ucdr_deserialize_endian_uint16_t+0xce>
 8009698:	f898 3000 	ldrb.w	r3, [r8]
 800969c:	706b      	strb	r3, [r5, #1]
 800969e:	6923      	ldr	r3, [r4, #16]
 80096a0:	68a2      	ldr	r2, [r4, #8]
 80096a2:	7da0      	ldrb	r0, [r4, #22]
 80096a4:	2102      	movs	r1, #2
 80096a6:	3302      	adds	r3, #2
 80096a8:	1bdb      	subs	r3, r3, r7
 80096aa:	4452      	add	r2, sl
 80096ac:	7561      	strb	r1, [r4, #21]
 80096ae:	6123      	str	r3, [r4, #16]
 80096b0:	60a2      	str	r2, [r4, #8]
 80096b2:	f080 0001 	eor.w	r0, r0, #1
 80096b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ba:	2102      	movs	r1, #2
 80096bc:	4620      	mov	r0, r4
 80096be:	f000 ff19 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 80096c2:	b178      	cbz	r0, 80096e4 <ucdr_deserialize_endian_uint16_t+0xa4>
 80096c4:	2e01      	cmp	r6, #1
 80096c6:	68a3      	ldr	r3, [r4, #8]
 80096c8:	d011      	beq.n	80096ee <ucdr_deserialize_endian_uint16_t+0xae>
 80096ca:	785b      	ldrb	r3, [r3, #1]
 80096cc:	702b      	strb	r3, [r5, #0]
 80096ce:	68a3      	ldr	r3, [r4, #8]
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	706b      	strb	r3, [r5, #1]
 80096d4:	68a2      	ldr	r2, [r4, #8]
 80096d6:	6923      	ldr	r3, [r4, #16]
 80096d8:	3202      	adds	r2, #2
 80096da:	3302      	adds	r3, #2
 80096dc:	2102      	movs	r1, #2
 80096de:	60a2      	str	r2, [r4, #8]
 80096e0:	6123      	str	r3, [r4, #16]
 80096e2:	7561      	strb	r1, [r4, #21]
 80096e4:	7da0      	ldrb	r0, [r4, #22]
 80096e6:	f080 0001 	eor.w	r0, r0, #1
 80096ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ee:	881b      	ldrh	r3, [r3, #0]
 80096f0:	802b      	strh	r3, [r5, #0]
 80096f2:	e7ef      	b.n	80096d4 <ucdr_deserialize_endian_uint16_t+0x94>
 80096f4:	68a2      	ldr	r2, [r4, #8]
 80096f6:	6923      	ldr	r3, [r4, #16]
 80096f8:	7da0      	ldrb	r0, [r4, #22]
 80096fa:	f884 9015 	strb.w	r9, [r4, #21]
 80096fe:	1bd2      	subs	r2, r2, r7
 8009700:	1bdb      	subs	r3, r3, r7
 8009702:	60a2      	str	r2, [r4, #8]
 8009704:	6123      	str	r3, [r4, #16]
 8009706:	f080 0001 	eor.w	r0, r0, #1
 800970a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800970e:	68a3      	ldr	r3, [r4, #8]
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	706b      	strb	r3, [r5, #1]
 8009714:	e7c3      	b.n	800969e <ucdr_deserialize_endian_uint16_t+0x5e>
 8009716:	4641      	mov	r1, r8
 8009718:	463a      	mov	r2, r7
 800971a:	4628      	mov	r0, r5
 800971c:	f00b fc30 	bl	8014f80 <memcpy>
 8009720:	68a1      	ldr	r1, [r4, #8]
 8009722:	4652      	mov	r2, sl
 8009724:	19e8      	adds	r0, r5, r7
 8009726:	f00b fc2b 	bl	8014f80 <memcpy>
 800972a:	e7b8      	b.n	800969e <ucdr_deserialize_endian_uint16_t+0x5e>

0800972c <ucdr_serialize_uint32_t>:
 800972c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009730:	b082      	sub	sp, #8
 8009732:	4604      	mov	r4, r0
 8009734:	9101      	str	r1, [sp, #4]
 8009736:	2104      	movs	r1, #4
 8009738:	f000 ff2e 	bl	800a598 <ucdr_buffer_alignment>
 800973c:	4601      	mov	r1, r0
 800973e:	4620      	mov	r0, r4
 8009740:	7d67      	ldrb	r7, [r4, #21]
 8009742:	f000 ff6d 	bl	800a620 <ucdr_advance_buffer>
 8009746:	4620      	mov	r0, r4
 8009748:	2104      	movs	r1, #4
 800974a:	f000 fec7 	bl	800a4dc <ucdr_check_buffer_available_for>
 800974e:	2800      	cmp	r0, #0
 8009750:	d139      	bne.n	80097c6 <ucdr_serialize_uint32_t+0x9a>
 8009752:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 8009756:	42ae      	cmp	r6, r5
 8009758:	d930      	bls.n	80097bc <ucdr_serialize_uint32_t+0x90>
 800975a:	6922      	ldr	r2, [r4, #16]
 800975c:	60a6      	str	r6, [r4, #8]
 800975e:	1b76      	subs	r6, r6, r5
 8009760:	4432      	add	r2, r6
 8009762:	f1c6 0804 	rsb	r8, r6, #4
 8009766:	6122      	str	r2, [r4, #16]
 8009768:	4641      	mov	r1, r8
 800976a:	4620      	mov	r0, r4
 800976c:	f000 fec2 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 8009770:	2800      	cmp	r0, #0
 8009772:	d04c      	beq.n	800980e <ucdr_serialize_uint32_t+0xe2>
 8009774:	7d23      	ldrb	r3, [r4, #20]
 8009776:	2b01      	cmp	r3, #1
 8009778:	d063      	beq.n	8009842 <ucdr_serialize_uint32_t+0x116>
 800977a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800977e:	702b      	strb	r3, [r5, #0]
 8009780:	2e00      	cmp	r6, #0
 8009782:	d051      	beq.n	8009828 <ucdr_serialize_uint32_t+0xfc>
 8009784:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009788:	706b      	strb	r3, [r5, #1]
 800978a:	2e01      	cmp	r6, #1
 800978c:	d050      	beq.n	8009830 <ucdr_serialize_uint32_t+0x104>
 800978e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009792:	70ab      	strb	r3, [r5, #2]
 8009794:	2e02      	cmp	r6, #2
 8009796:	d04f      	beq.n	8009838 <ucdr_serialize_uint32_t+0x10c>
 8009798:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800979c:	70eb      	strb	r3, [r5, #3]
 800979e:	6923      	ldr	r3, [r4, #16]
 80097a0:	68a2      	ldr	r2, [r4, #8]
 80097a2:	7da0      	ldrb	r0, [r4, #22]
 80097a4:	3304      	adds	r3, #4
 80097a6:	1b9b      	subs	r3, r3, r6
 80097a8:	4442      	add	r2, r8
 80097aa:	2104      	movs	r1, #4
 80097ac:	f080 0001 	eor.w	r0, r0, #1
 80097b0:	6123      	str	r3, [r4, #16]
 80097b2:	60a2      	str	r2, [r4, #8]
 80097b4:	7561      	strb	r1, [r4, #21]
 80097b6:	b002      	add	sp, #8
 80097b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097bc:	2104      	movs	r1, #4
 80097be:	4620      	mov	r0, r4
 80097c0:	f000 fe98 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 80097c4:	b1d0      	cbz	r0, 80097fc <ucdr_serialize_uint32_t+0xd0>
 80097c6:	7d23      	ldrb	r3, [r4, #20]
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	68a3      	ldr	r3, [r4, #8]
 80097cc:	d01c      	beq.n	8009808 <ucdr_serialize_uint32_t+0xdc>
 80097ce:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80097d2:	701a      	strb	r2, [r3, #0]
 80097d4:	68a3      	ldr	r3, [r4, #8]
 80097d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80097da:	705a      	strb	r2, [r3, #1]
 80097dc:	68a3      	ldr	r3, [r4, #8]
 80097de:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80097e2:	709a      	strb	r2, [r3, #2]
 80097e4:	68a3      	ldr	r3, [r4, #8]
 80097e6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80097ea:	70da      	strb	r2, [r3, #3]
 80097ec:	68a2      	ldr	r2, [r4, #8]
 80097ee:	6923      	ldr	r3, [r4, #16]
 80097f0:	3204      	adds	r2, #4
 80097f2:	3304      	adds	r3, #4
 80097f4:	2104      	movs	r1, #4
 80097f6:	60a2      	str	r2, [r4, #8]
 80097f8:	6123      	str	r3, [r4, #16]
 80097fa:	7561      	strb	r1, [r4, #21]
 80097fc:	7da0      	ldrb	r0, [r4, #22]
 80097fe:	f080 0001 	eor.w	r0, r0, #1
 8009802:	b002      	add	sp, #8
 8009804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009808:	9a01      	ldr	r2, [sp, #4]
 800980a:	601a      	str	r2, [r3, #0]
 800980c:	e7ee      	b.n	80097ec <ucdr_serialize_uint32_t+0xc0>
 800980e:	68a2      	ldr	r2, [r4, #8]
 8009810:	6923      	ldr	r3, [r4, #16]
 8009812:	7da0      	ldrb	r0, [r4, #22]
 8009814:	7567      	strb	r7, [r4, #21]
 8009816:	1b92      	subs	r2, r2, r6
 8009818:	1b9b      	subs	r3, r3, r6
 800981a:	f080 0001 	eor.w	r0, r0, #1
 800981e:	60a2      	str	r2, [r4, #8]
 8009820:	6123      	str	r3, [r4, #16]
 8009822:	b002      	add	sp, #8
 8009824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009828:	68a3      	ldr	r3, [r4, #8]
 800982a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800982e:	701a      	strb	r2, [r3, #0]
 8009830:	68a3      	ldr	r3, [r4, #8]
 8009832:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009836:	701a      	strb	r2, [r3, #0]
 8009838:	68a3      	ldr	r3, [r4, #8]
 800983a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800983e:	701a      	strb	r2, [r3, #0]
 8009840:	e7ad      	b.n	800979e <ucdr_serialize_uint32_t+0x72>
 8009842:	4628      	mov	r0, r5
 8009844:	ad01      	add	r5, sp, #4
 8009846:	4629      	mov	r1, r5
 8009848:	4632      	mov	r2, r6
 800984a:	f00b fb99 	bl	8014f80 <memcpy>
 800984e:	68a0      	ldr	r0, [r4, #8]
 8009850:	4642      	mov	r2, r8
 8009852:	19a9      	adds	r1, r5, r6
 8009854:	f00b fb94 	bl	8014f80 <memcpy>
 8009858:	e7a1      	b.n	800979e <ucdr_serialize_uint32_t+0x72>
 800985a:	bf00      	nop

0800985c <ucdr_serialize_endian_uint32_t>:
 800985c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009860:	b083      	sub	sp, #12
 8009862:	460d      	mov	r5, r1
 8009864:	2104      	movs	r1, #4
 8009866:	4604      	mov	r4, r0
 8009868:	9201      	str	r2, [sp, #4]
 800986a:	f000 fe95 	bl	800a598 <ucdr_buffer_alignment>
 800986e:	4601      	mov	r1, r0
 8009870:	4620      	mov	r0, r4
 8009872:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009876:	f000 fed3 	bl	800a620 <ucdr_advance_buffer>
 800987a:	4620      	mov	r0, r4
 800987c:	2104      	movs	r1, #4
 800987e:	f000 fe2d 	bl	800a4dc <ucdr_check_buffer_available_for>
 8009882:	2800      	cmp	r0, #0
 8009884:	d138      	bne.n	80098f8 <ucdr_serialize_endian_uint32_t+0x9c>
 8009886:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800988a:	42b7      	cmp	r7, r6
 800988c:	d92f      	bls.n	80098ee <ucdr_serialize_endian_uint32_t+0x92>
 800988e:	6922      	ldr	r2, [r4, #16]
 8009890:	60a7      	str	r7, [r4, #8]
 8009892:	1bbf      	subs	r7, r7, r6
 8009894:	443a      	add	r2, r7
 8009896:	f1c7 0904 	rsb	r9, r7, #4
 800989a:	6122      	str	r2, [r4, #16]
 800989c:	4649      	mov	r1, r9
 800989e:	4620      	mov	r0, r4
 80098a0:	f000 fe28 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 80098a4:	2800      	cmp	r0, #0
 80098a6:	d04a      	beq.n	800993e <ucdr_serialize_endian_uint32_t+0xe2>
 80098a8:	2d01      	cmp	r5, #1
 80098aa:	d063      	beq.n	8009974 <ucdr_serialize_endian_uint32_t+0x118>
 80098ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80098b0:	7033      	strb	r3, [r6, #0]
 80098b2:	2f00      	cmp	r7, #0
 80098b4:	d051      	beq.n	800995a <ucdr_serialize_endian_uint32_t+0xfe>
 80098b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80098ba:	7073      	strb	r3, [r6, #1]
 80098bc:	2f01      	cmp	r7, #1
 80098be:	d050      	beq.n	8009962 <ucdr_serialize_endian_uint32_t+0x106>
 80098c0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80098c4:	70b3      	strb	r3, [r6, #2]
 80098c6:	2f02      	cmp	r7, #2
 80098c8:	d04f      	beq.n	800996a <ucdr_serialize_endian_uint32_t+0x10e>
 80098ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80098ce:	70f3      	strb	r3, [r6, #3]
 80098d0:	6923      	ldr	r3, [r4, #16]
 80098d2:	68a2      	ldr	r2, [r4, #8]
 80098d4:	7da0      	ldrb	r0, [r4, #22]
 80098d6:	3304      	adds	r3, #4
 80098d8:	1bdb      	subs	r3, r3, r7
 80098da:	444a      	add	r2, r9
 80098dc:	2104      	movs	r1, #4
 80098de:	f080 0001 	eor.w	r0, r0, #1
 80098e2:	6123      	str	r3, [r4, #16]
 80098e4:	60a2      	str	r2, [r4, #8]
 80098e6:	7561      	strb	r1, [r4, #21]
 80098e8:	b003      	add	sp, #12
 80098ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098ee:	2104      	movs	r1, #4
 80098f0:	4620      	mov	r0, r4
 80098f2:	f000 fdff 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 80098f6:	b1c8      	cbz	r0, 800992c <ucdr_serialize_endian_uint32_t+0xd0>
 80098f8:	2d01      	cmp	r5, #1
 80098fa:	68a3      	ldr	r3, [r4, #8]
 80098fc:	d01c      	beq.n	8009938 <ucdr_serialize_endian_uint32_t+0xdc>
 80098fe:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009902:	701a      	strb	r2, [r3, #0]
 8009904:	68a3      	ldr	r3, [r4, #8]
 8009906:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800990a:	705a      	strb	r2, [r3, #1]
 800990c:	68a3      	ldr	r3, [r4, #8]
 800990e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009912:	709a      	strb	r2, [r3, #2]
 8009914:	68a3      	ldr	r3, [r4, #8]
 8009916:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800991a:	70da      	strb	r2, [r3, #3]
 800991c:	68a2      	ldr	r2, [r4, #8]
 800991e:	6923      	ldr	r3, [r4, #16]
 8009920:	3204      	adds	r2, #4
 8009922:	3304      	adds	r3, #4
 8009924:	2104      	movs	r1, #4
 8009926:	60a2      	str	r2, [r4, #8]
 8009928:	6123      	str	r3, [r4, #16]
 800992a:	7561      	strb	r1, [r4, #21]
 800992c:	7da0      	ldrb	r0, [r4, #22]
 800992e:	f080 0001 	eor.w	r0, r0, #1
 8009932:	b003      	add	sp, #12
 8009934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009938:	9a01      	ldr	r2, [sp, #4]
 800993a:	601a      	str	r2, [r3, #0]
 800993c:	e7ee      	b.n	800991c <ucdr_serialize_endian_uint32_t+0xc0>
 800993e:	68a2      	ldr	r2, [r4, #8]
 8009940:	6923      	ldr	r3, [r4, #16]
 8009942:	7da0      	ldrb	r0, [r4, #22]
 8009944:	f884 8015 	strb.w	r8, [r4, #21]
 8009948:	1bd2      	subs	r2, r2, r7
 800994a:	1bdb      	subs	r3, r3, r7
 800994c:	f080 0001 	eor.w	r0, r0, #1
 8009950:	60a2      	str	r2, [r4, #8]
 8009952:	6123      	str	r3, [r4, #16]
 8009954:	b003      	add	sp, #12
 8009956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800995a:	68a3      	ldr	r3, [r4, #8]
 800995c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009960:	701a      	strb	r2, [r3, #0]
 8009962:	68a3      	ldr	r3, [r4, #8]
 8009964:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009968:	701a      	strb	r2, [r3, #0]
 800996a:	68a3      	ldr	r3, [r4, #8]
 800996c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009970:	701a      	strb	r2, [r3, #0]
 8009972:	e7ad      	b.n	80098d0 <ucdr_serialize_endian_uint32_t+0x74>
 8009974:	ad01      	add	r5, sp, #4
 8009976:	4629      	mov	r1, r5
 8009978:	463a      	mov	r2, r7
 800997a:	4630      	mov	r0, r6
 800997c:	f00b fb00 	bl	8014f80 <memcpy>
 8009980:	68a0      	ldr	r0, [r4, #8]
 8009982:	464a      	mov	r2, r9
 8009984:	19e9      	adds	r1, r5, r7
 8009986:	f00b fafb 	bl	8014f80 <memcpy>
 800998a:	e7a1      	b.n	80098d0 <ucdr_serialize_endian_uint32_t+0x74>

0800998c <ucdr_deserialize_uint32_t>:
 800998c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009990:	460d      	mov	r5, r1
 8009992:	2104      	movs	r1, #4
 8009994:	4604      	mov	r4, r0
 8009996:	f000 fdff 	bl	800a598 <ucdr_buffer_alignment>
 800999a:	4601      	mov	r1, r0
 800999c:	4620      	mov	r0, r4
 800999e:	f894 8015 	ldrb.w	r8, [r4, #21]
 80099a2:	f000 fe3d 	bl	800a620 <ucdr_advance_buffer>
 80099a6:	4620      	mov	r0, r4
 80099a8:	2104      	movs	r1, #4
 80099aa:	f000 fd97 	bl	800a4dc <ucdr_check_buffer_available_for>
 80099ae:	2800      	cmp	r0, #0
 80099b0:	d138      	bne.n	8009a24 <ucdr_deserialize_uint32_t+0x98>
 80099b2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80099b6:	42b7      	cmp	r7, r6
 80099b8:	d92f      	bls.n	8009a1a <ucdr_deserialize_uint32_t+0x8e>
 80099ba:	6922      	ldr	r2, [r4, #16]
 80099bc:	60a7      	str	r7, [r4, #8]
 80099be:	1bbf      	subs	r7, r7, r6
 80099c0:	443a      	add	r2, r7
 80099c2:	f1c7 0904 	rsb	r9, r7, #4
 80099c6:	6122      	str	r2, [r4, #16]
 80099c8:	4649      	mov	r1, r9
 80099ca:	4620      	mov	r0, r4
 80099cc:	f000 fd92 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 80099d0:	2800      	cmp	r0, #0
 80099d2:	d046      	beq.n	8009a62 <ucdr_deserialize_uint32_t+0xd6>
 80099d4:	7d23      	ldrb	r3, [r4, #20]
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d05c      	beq.n	8009a94 <ucdr_deserialize_uint32_t+0x108>
 80099da:	78f3      	ldrb	r3, [r6, #3]
 80099dc:	702b      	strb	r3, [r5, #0]
 80099de:	2f00      	cmp	r7, #0
 80099e0:	d04c      	beq.n	8009a7c <ucdr_deserialize_uint32_t+0xf0>
 80099e2:	78b3      	ldrb	r3, [r6, #2]
 80099e4:	706b      	strb	r3, [r5, #1]
 80099e6:	2f01      	cmp	r7, #1
 80099e8:	f105 0302 	add.w	r3, r5, #2
 80099ec:	d04a      	beq.n	8009a84 <ucdr_deserialize_uint32_t+0xf8>
 80099ee:	7873      	ldrb	r3, [r6, #1]
 80099f0:	70ab      	strb	r3, [r5, #2]
 80099f2:	2f02      	cmp	r7, #2
 80099f4:	f105 0303 	add.w	r3, r5, #3
 80099f8:	d048      	beq.n	8009a8c <ucdr_deserialize_uint32_t+0x100>
 80099fa:	7833      	ldrb	r3, [r6, #0]
 80099fc:	70eb      	strb	r3, [r5, #3]
 80099fe:	6923      	ldr	r3, [r4, #16]
 8009a00:	68a2      	ldr	r2, [r4, #8]
 8009a02:	7da0      	ldrb	r0, [r4, #22]
 8009a04:	2104      	movs	r1, #4
 8009a06:	3304      	adds	r3, #4
 8009a08:	1bdb      	subs	r3, r3, r7
 8009a0a:	444a      	add	r2, r9
 8009a0c:	7561      	strb	r1, [r4, #21]
 8009a0e:	6123      	str	r3, [r4, #16]
 8009a10:	60a2      	str	r2, [r4, #8]
 8009a12:	f080 0001 	eor.w	r0, r0, #1
 8009a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a1a:	2104      	movs	r1, #4
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	f000 fd69 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 8009a22:	b1b0      	cbz	r0, 8009a52 <ucdr_deserialize_uint32_t+0xc6>
 8009a24:	7d23      	ldrb	r3, [r4, #20]
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	68a3      	ldr	r3, [r4, #8]
 8009a2a:	d017      	beq.n	8009a5c <ucdr_deserialize_uint32_t+0xd0>
 8009a2c:	78db      	ldrb	r3, [r3, #3]
 8009a2e:	702b      	strb	r3, [r5, #0]
 8009a30:	68a3      	ldr	r3, [r4, #8]
 8009a32:	789b      	ldrb	r3, [r3, #2]
 8009a34:	706b      	strb	r3, [r5, #1]
 8009a36:	68a3      	ldr	r3, [r4, #8]
 8009a38:	785b      	ldrb	r3, [r3, #1]
 8009a3a:	70ab      	strb	r3, [r5, #2]
 8009a3c:	68a3      	ldr	r3, [r4, #8]
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	70eb      	strb	r3, [r5, #3]
 8009a42:	68a2      	ldr	r2, [r4, #8]
 8009a44:	6923      	ldr	r3, [r4, #16]
 8009a46:	3204      	adds	r2, #4
 8009a48:	3304      	adds	r3, #4
 8009a4a:	2104      	movs	r1, #4
 8009a4c:	60a2      	str	r2, [r4, #8]
 8009a4e:	6123      	str	r3, [r4, #16]
 8009a50:	7561      	strb	r1, [r4, #21]
 8009a52:	7da0      	ldrb	r0, [r4, #22]
 8009a54:	f080 0001 	eor.w	r0, r0, #1
 8009a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	602b      	str	r3, [r5, #0]
 8009a60:	e7ef      	b.n	8009a42 <ucdr_deserialize_uint32_t+0xb6>
 8009a62:	68a2      	ldr	r2, [r4, #8]
 8009a64:	6923      	ldr	r3, [r4, #16]
 8009a66:	7da0      	ldrb	r0, [r4, #22]
 8009a68:	f884 8015 	strb.w	r8, [r4, #21]
 8009a6c:	1bd2      	subs	r2, r2, r7
 8009a6e:	1bdb      	subs	r3, r3, r7
 8009a70:	60a2      	str	r2, [r4, #8]
 8009a72:	6123      	str	r3, [r4, #16]
 8009a74:	f080 0001 	eor.w	r0, r0, #1
 8009a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a7c:	68a3      	ldr	r3, [r4, #8]
 8009a7e:	789b      	ldrb	r3, [r3, #2]
 8009a80:	706b      	strb	r3, [r5, #1]
 8009a82:	1cab      	adds	r3, r5, #2
 8009a84:	68a2      	ldr	r2, [r4, #8]
 8009a86:	7852      	ldrb	r2, [r2, #1]
 8009a88:	f803 2b01 	strb.w	r2, [r3], #1
 8009a8c:	68a2      	ldr	r2, [r4, #8]
 8009a8e:	7812      	ldrb	r2, [r2, #0]
 8009a90:	701a      	strb	r2, [r3, #0]
 8009a92:	e7b4      	b.n	80099fe <ucdr_deserialize_uint32_t+0x72>
 8009a94:	4631      	mov	r1, r6
 8009a96:	463a      	mov	r2, r7
 8009a98:	4628      	mov	r0, r5
 8009a9a:	f00b fa71 	bl	8014f80 <memcpy>
 8009a9e:	68a1      	ldr	r1, [r4, #8]
 8009aa0:	464a      	mov	r2, r9
 8009aa2:	19e8      	adds	r0, r5, r7
 8009aa4:	f00b fa6c 	bl	8014f80 <memcpy>
 8009aa8:	e7a9      	b.n	80099fe <ucdr_deserialize_uint32_t+0x72>
 8009aaa:	bf00      	nop

08009aac <ucdr_deserialize_endian_uint32_t>:
 8009aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab0:	460e      	mov	r6, r1
 8009ab2:	2104      	movs	r1, #4
 8009ab4:	4604      	mov	r4, r0
 8009ab6:	4615      	mov	r5, r2
 8009ab8:	f000 fd6e 	bl	800a598 <ucdr_buffer_alignment>
 8009abc:	4601      	mov	r1, r0
 8009abe:	4620      	mov	r0, r4
 8009ac0:	f894 9015 	ldrb.w	r9, [r4, #21]
 8009ac4:	f000 fdac 	bl	800a620 <ucdr_advance_buffer>
 8009ac8:	4620      	mov	r0, r4
 8009aca:	2104      	movs	r1, #4
 8009acc:	f000 fd06 	bl	800a4dc <ucdr_check_buffer_available_for>
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	d13c      	bne.n	8009b4e <ucdr_deserialize_endian_uint32_t+0xa2>
 8009ad4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8009ad8:	42bb      	cmp	r3, r7
 8009ada:	d933      	bls.n	8009b44 <ucdr_deserialize_endian_uint32_t+0x98>
 8009adc:	6922      	ldr	r2, [r4, #16]
 8009ade:	60a3      	str	r3, [r4, #8]
 8009ae0:	eba3 0807 	sub.w	r8, r3, r7
 8009ae4:	4442      	add	r2, r8
 8009ae6:	f1c8 0a04 	rsb	sl, r8, #4
 8009aea:	6122      	str	r2, [r4, #16]
 8009aec:	4651      	mov	r1, sl
 8009aee:	4620      	mov	r0, r4
 8009af0:	f000 fd00 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	d048      	beq.n	8009b8a <ucdr_deserialize_endian_uint32_t+0xde>
 8009af8:	2e01      	cmp	r6, #1
 8009afa:	d061      	beq.n	8009bc0 <ucdr_deserialize_endian_uint32_t+0x114>
 8009afc:	78fb      	ldrb	r3, [r7, #3]
 8009afe:	702b      	strb	r3, [r5, #0]
 8009b00:	f1b8 0f00 	cmp.w	r8, #0
 8009b04:	d050      	beq.n	8009ba8 <ucdr_deserialize_endian_uint32_t+0xfc>
 8009b06:	78bb      	ldrb	r3, [r7, #2]
 8009b08:	706b      	strb	r3, [r5, #1]
 8009b0a:	f1b8 0f01 	cmp.w	r8, #1
 8009b0e:	f105 0302 	add.w	r3, r5, #2
 8009b12:	d04d      	beq.n	8009bb0 <ucdr_deserialize_endian_uint32_t+0x104>
 8009b14:	787b      	ldrb	r3, [r7, #1]
 8009b16:	70ab      	strb	r3, [r5, #2]
 8009b18:	f1b8 0f02 	cmp.w	r8, #2
 8009b1c:	f105 0303 	add.w	r3, r5, #3
 8009b20:	d04a      	beq.n	8009bb8 <ucdr_deserialize_endian_uint32_t+0x10c>
 8009b22:	783b      	ldrb	r3, [r7, #0]
 8009b24:	70eb      	strb	r3, [r5, #3]
 8009b26:	6923      	ldr	r3, [r4, #16]
 8009b28:	68a2      	ldr	r2, [r4, #8]
 8009b2a:	7da0      	ldrb	r0, [r4, #22]
 8009b2c:	2104      	movs	r1, #4
 8009b2e:	3304      	adds	r3, #4
 8009b30:	eba3 0308 	sub.w	r3, r3, r8
 8009b34:	4452      	add	r2, sl
 8009b36:	7561      	strb	r1, [r4, #21]
 8009b38:	6123      	str	r3, [r4, #16]
 8009b3a:	60a2      	str	r2, [r4, #8]
 8009b3c:	f080 0001 	eor.w	r0, r0, #1
 8009b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b44:	2104      	movs	r1, #4
 8009b46:	4620      	mov	r0, r4
 8009b48:	f000 fcd4 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 8009b4c:	b1a8      	cbz	r0, 8009b7a <ucdr_deserialize_endian_uint32_t+0xce>
 8009b4e:	2e01      	cmp	r6, #1
 8009b50:	68a3      	ldr	r3, [r4, #8]
 8009b52:	d017      	beq.n	8009b84 <ucdr_deserialize_endian_uint32_t+0xd8>
 8009b54:	78db      	ldrb	r3, [r3, #3]
 8009b56:	702b      	strb	r3, [r5, #0]
 8009b58:	68a3      	ldr	r3, [r4, #8]
 8009b5a:	789b      	ldrb	r3, [r3, #2]
 8009b5c:	706b      	strb	r3, [r5, #1]
 8009b5e:	68a3      	ldr	r3, [r4, #8]
 8009b60:	785b      	ldrb	r3, [r3, #1]
 8009b62:	70ab      	strb	r3, [r5, #2]
 8009b64:	68a3      	ldr	r3, [r4, #8]
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	70eb      	strb	r3, [r5, #3]
 8009b6a:	68a2      	ldr	r2, [r4, #8]
 8009b6c:	6923      	ldr	r3, [r4, #16]
 8009b6e:	3204      	adds	r2, #4
 8009b70:	3304      	adds	r3, #4
 8009b72:	2104      	movs	r1, #4
 8009b74:	60a2      	str	r2, [r4, #8]
 8009b76:	6123      	str	r3, [r4, #16]
 8009b78:	7561      	strb	r1, [r4, #21]
 8009b7a:	7da0      	ldrb	r0, [r4, #22]
 8009b7c:	f080 0001 	eor.w	r0, r0, #1
 8009b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	602b      	str	r3, [r5, #0]
 8009b88:	e7ef      	b.n	8009b6a <ucdr_deserialize_endian_uint32_t+0xbe>
 8009b8a:	68a2      	ldr	r2, [r4, #8]
 8009b8c:	6923      	ldr	r3, [r4, #16]
 8009b8e:	7da0      	ldrb	r0, [r4, #22]
 8009b90:	f884 9015 	strb.w	r9, [r4, #21]
 8009b94:	eba2 0208 	sub.w	r2, r2, r8
 8009b98:	eba3 0308 	sub.w	r3, r3, r8
 8009b9c:	60a2      	str	r2, [r4, #8]
 8009b9e:	6123      	str	r3, [r4, #16]
 8009ba0:	f080 0001 	eor.w	r0, r0, #1
 8009ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ba8:	68a3      	ldr	r3, [r4, #8]
 8009baa:	789b      	ldrb	r3, [r3, #2]
 8009bac:	706b      	strb	r3, [r5, #1]
 8009bae:	1cab      	adds	r3, r5, #2
 8009bb0:	68a2      	ldr	r2, [r4, #8]
 8009bb2:	7852      	ldrb	r2, [r2, #1]
 8009bb4:	f803 2b01 	strb.w	r2, [r3], #1
 8009bb8:	68a2      	ldr	r2, [r4, #8]
 8009bba:	7812      	ldrb	r2, [r2, #0]
 8009bbc:	701a      	strb	r2, [r3, #0]
 8009bbe:	e7b2      	b.n	8009b26 <ucdr_deserialize_endian_uint32_t+0x7a>
 8009bc0:	4639      	mov	r1, r7
 8009bc2:	4642      	mov	r2, r8
 8009bc4:	4628      	mov	r0, r5
 8009bc6:	f00b f9db 	bl	8014f80 <memcpy>
 8009bca:	68a1      	ldr	r1, [r4, #8]
 8009bcc:	4652      	mov	r2, sl
 8009bce:	eb05 0008 	add.w	r0, r5, r8
 8009bd2:	f00b f9d5 	bl	8014f80 <memcpy>
 8009bd6:	e7a6      	b.n	8009b26 <ucdr_deserialize_endian_uint32_t+0x7a>

08009bd8 <ucdr_serialize_uint64_t>:
 8009bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bdc:	2108      	movs	r1, #8
 8009bde:	b082      	sub	sp, #8
 8009be0:	4604      	mov	r4, r0
 8009be2:	e9cd 2300 	strd	r2, r3, [sp]
 8009be6:	f000 fcd7 	bl	800a598 <ucdr_buffer_alignment>
 8009bea:	4601      	mov	r1, r0
 8009bec:	4620      	mov	r0, r4
 8009bee:	7d67      	ldrb	r7, [r4, #21]
 8009bf0:	f000 fd16 	bl	800a620 <ucdr_advance_buffer>
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	2108      	movs	r1, #8
 8009bf8:	f000 fc70 	bl	800a4dc <ucdr_check_buffer_available_for>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	d14e      	bne.n	8009c9e <ucdr_serialize_uint64_t+0xc6>
 8009c00:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8009c04:	42b5      	cmp	r5, r6
 8009c06:	d945      	bls.n	8009c94 <ucdr_serialize_uint64_t+0xbc>
 8009c08:	6923      	ldr	r3, [r4, #16]
 8009c0a:	60a5      	str	r5, [r4, #8]
 8009c0c:	1bad      	subs	r5, r5, r6
 8009c0e:	442b      	add	r3, r5
 8009c10:	f1c5 0808 	rsb	r8, r5, #8
 8009c14:	6123      	str	r3, [r4, #16]
 8009c16:	4641      	mov	r1, r8
 8009c18:	4620      	mov	r0, r4
 8009c1a:	f000 fc6b 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 8009c1e:	2800      	cmp	r0, #0
 8009c20:	d074      	beq.n	8009d0c <ucdr_serialize_uint64_t+0x134>
 8009c22:	7d23      	ldrb	r3, [r4, #20]
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	f000 809b 	beq.w	8009d60 <ucdr_serialize_uint64_t+0x188>
 8009c2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009c2e:	7033      	strb	r3, [r6, #0]
 8009c30:	2d00      	cmp	r5, #0
 8009c32:	d078      	beq.n	8009d26 <ucdr_serialize_uint64_t+0x14e>
 8009c34:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009c38:	7073      	strb	r3, [r6, #1]
 8009c3a:	2d01      	cmp	r5, #1
 8009c3c:	d077      	beq.n	8009d2e <ucdr_serialize_uint64_t+0x156>
 8009c3e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009c42:	70b3      	strb	r3, [r6, #2]
 8009c44:	2d02      	cmp	r5, #2
 8009c46:	d076      	beq.n	8009d36 <ucdr_serialize_uint64_t+0x15e>
 8009c48:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009c4c:	70f3      	strb	r3, [r6, #3]
 8009c4e:	2d03      	cmp	r5, #3
 8009c50:	d075      	beq.n	8009d3e <ucdr_serialize_uint64_t+0x166>
 8009c52:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009c56:	7133      	strb	r3, [r6, #4]
 8009c58:	2d04      	cmp	r5, #4
 8009c5a:	d074      	beq.n	8009d46 <ucdr_serialize_uint64_t+0x16e>
 8009c5c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8009c60:	7173      	strb	r3, [r6, #5]
 8009c62:	2d05      	cmp	r5, #5
 8009c64:	d073      	beq.n	8009d4e <ucdr_serialize_uint64_t+0x176>
 8009c66:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8009c6a:	71b3      	strb	r3, [r6, #6]
 8009c6c:	2d06      	cmp	r5, #6
 8009c6e:	d072      	beq.n	8009d56 <ucdr_serialize_uint64_t+0x17e>
 8009c70:	f89d 3000 	ldrb.w	r3, [sp]
 8009c74:	71f3      	strb	r3, [r6, #7]
 8009c76:	6923      	ldr	r3, [r4, #16]
 8009c78:	68a2      	ldr	r2, [r4, #8]
 8009c7a:	7da0      	ldrb	r0, [r4, #22]
 8009c7c:	3308      	adds	r3, #8
 8009c7e:	1b5d      	subs	r5, r3, r5
 8009c80:	4442      	add	r2, r8
 8009c82:	2308      	movs	r3, #8
 8009c84:	f080 0001 	eor.w	r0, r0, #1
 8009c88:	6125      	str	r5, [r4, #16]
 8009c8a:	60a2      	str	r2, [r4, #8]
 8009c8c:	7563      	strb	r3, [r4, #21]
 8009c8e:	b002      	add	sp, #8
 8009c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c94:	2108      	movs	r1, #8
 8009c96:	4620      	mov	r0, r4
 8009c98:	f000 fc2c 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 8009c9c:	b350      	cbz	r0, 8009cf4 <ucdr_serialize_uint64_t+0x11c>
 8009c9e:	7d23      	ldrb	r3, [r4, #20]
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d02d      	beq.n	8009d00 <ucdr_serialize_uint64_t+0x128>
 8009ca4:	68a3      	ldr	r3, [r4, #8]
 8009ca6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009caa:	701a      	strb	r2, [r3, #0]
 8009cac:	68a3      	ldr	r3, [r4, #8]
 8009cae:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009cb2:	705a      	strb	r2, [r3, #1]
 8009cb4:	68a3      	ldr	r3, [r4, #8]
 8009cb6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009cba:	709a      	strb	r2, [r3, #2]
 8009cbc:	68a3      	ldr	r3, [r4, #8]
 8009cbe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009cc2:	70da      	strb	r2, [r3, #3]
 8009cc4:	68a3      	ldr	r3, [r4, #8]
 8009cc6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009cca:	711a      	strb	r2, [r3, #4]
 8009ccc:	68a3      	ldr	r3, [r4, #8]
 8009cce:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009cd2:	715a      	strb	r2, [r3, #5]
 8009cd4:	68a3      	ldr	r3, [r4, #8]
 8009cd6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009cda:	719a      	strb	r2, [r3, #6]
 8009cdc:	68a3      	ldr	r3, [r4, #8]
 8009cde:	f89d 2000 	ldrb.w	r2, [sp]
 8009ce2:	71da      	strb	r2, [r3, #7]
 8009ce4:	68a2      	ldr	r2, [r4, #8]
 8009ce6:	6923      	ldr	r3, [r4, #16]
 8009ce8:	3208      	adds	r2, #8
 8009cea:	3308      	adds	r3, #8
 8009cec:	2108      	movs	r1, #8
 8009cee:	60a2      	str	r2, [r4, #8]
 8009cf0:	6123      	str	r3, [r4, #16]
 8009cf2:	7561      	strb	r1, [r4, #21]
 8009cf4:	7da0      	ldrb	r0, [r4, #22]
 8009cf6:	f080 0001 	eor.w	r0, r0, #1
 8009cfa:	b002      	add	sp, #8
 8009cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d00:	466b      	mov	r3, sp
 8009d02:	cb03      	ldmia	r3!, {r0, r1}
 8009d04:	68a3      	ldr	r3, [r4, #8]
 8009d06:	6018      	str	r0, [r3, #0]
 8009d08:	6059      	str	r1, [r3, #4]
 8009d0a:	e7eb      	b.n	8009ce4 <ucdr_serialize_uint64_t+0x10c>
 8009d0c:	68a2      	ldr	r2, [r4, #8]
 8009d0e:	6923      	ldr	r3, [r4, #16]
 8009d10:	7da0      	ldrb	r0, [r4, #22]
 8009d12:	7567      	strb	r7, [r4, #21]
 8009d14:	1b52      	subs	r2, r2, r5
 8009d16:	f080 0001 	eor.w	r0, r0, #1
 8009d1a:	1b5d      	subs	r5, r3, r5
 8009d1c:	60a2      	str	r2, [r4, #8]
 8009d1e:	6125      	str	r5, [r4, #16]
 8009d20:	b002      	add	sp, #8
 8009d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d26:	68a3      	ldr	r3, [r4, #8]
 8009d28:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009d2c:	701a      	strb	r2, [r3, #0]
 8009d2e:	68a3      	ldr	r3, [r4, #8]
 8009d30:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009d34:	701a      	strb	r2, [r3, #0]
 8009d36:	68a3      	ldr	r3, [r4, #8]
 8009d38:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009d3c:	701a      	strb	r2, [r3, #0]
 8009d3e:	68a3      	ldr	r3, [r4, #8]
 8009d40:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009d44:	701a      	strb	r2, [r3, #0]
 8009d46:	68a3      	ldr	r3, [r4, #8]
 8009d48:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009d4c:	701a      	strb	r2, [r3, #0]
 8009d4e:	68a3      	ldr	r3, [r4, #8]
 8009d50:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009d54:	701a      	strb	r2, [r3, #0]
 8009d56:	68a3      	ldr	r3, [r4, #8]
 8009d58:	f89d 2000 	ldrb.w	r2, [sp]
 8009d5c:	701a      	strb	r2, [r3, #0]
 8009d5e:	e78a      	b.n	8009c76 <ucdr_serialize_uint64_t+0x9e>
 8009d60:	4630      	mov	r0, r6
 8009d62:	466e      	mov	r6, sp
 8009d64:	4631      	mov	r1, r6
 8009d66:	462a      	mov	r2, r5
 8009d68:	f00b f90a 	bl	8014f80 <memcpy>
 8009d6c:	68a0      	ldr	r0, [r4, #8]
 8009d6e:	4642      	mov	r2, r8
 8009d70:	1971      	adds	r1, r6, r5
 8009d72:	f00b f905 	bl	8014f80 <memcpy>
 8009d76:	e77e      	b.n	8009c76 <ucdr_serialize_uint64_t+0x9e>

08009d78 <ucdr_serialize_int16_t>:
 8009d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d7c:	b082      	sub	sp, #8
 8009d7e:	460b      	mov	r3, r1
 8009d80:	2102      	movs	r1, #2
 8009d82:	4604      	mov	r4, r0
 8009d84:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009d88:	f000 fc06 	bl	800a598 <ucdr_buffer_alignment>
 8009d8c:	4601      	mov	r1, r0
 8009d8e:	4620      	mov	r0, r4
 8009d90:	7d67      	ldrb	r7, [r4, #21]
 8009d92:	f000 fc45 	bl	800a620 <ucdr_advance_buffer>
 8009d96:	4620      	mov	r0, r4
 8009d98:	2102      	movs	r1, #2
 8009d9a:	f000 fb9f 	bl	800a4dc <ucdr_check_buffer_available_for>
 8009d9e:	bb78      	cbnz	r0, 8009e00 <ucdr_serialize_int16_t+0x88>
 8009da0:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8009da4:	42b5      	cmp	r5, r6
 8009da6:	d926      	bls.n	8009df6 <ucdr_serialize_int16_t+0x7e>
 8009da8:	6922      	ldr	r2, [r4, #16]
 8009daa:	60a5      	str	r5, [r4, #8]
 8009dac:	1bad      	subs	r5, r5, r6
 8009dae:	442a      	add	r2, r5
 8009db0:	f1c5 0802 	rsb	r8, r5, #2
 8009db4:	6122      	str	r2, [r4, #16]
 8009db6:	4641      	mov	r1, r8
 8009db8:	4620      	mov	r0, r4
 8009dba:	f000 fb9b 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	d03b      	beq.n	8009e3a <ucdr_serialize_int16_t+0xc2>
 8009dc2:	7d23      	ldrb	r3, [r4, #20]
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d04a      	beq.n	8009e5e <ucdr_serialize_int16_t+0xe6>
 8009dc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009dcc:	7033      	strb	r3, [r6, #0]
 8009dce:	2d00      	cmp	r5, #0
 8009dd0:	d040      	beq.n	8009e54 <ucdr_serialize_int16_t+0xdc>
 8009dd2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009dd6:	7073      	strb	r3, [r6, #1]
 8009dd8:	6923      	ldr	r3, [r4, #16]
 8009dda:	68a2      	ldr	r2, [r4, #8]
 8009ddc:	7da0      	ldrb	r0, [r4, #22]
 8009dde:	3302      	adds	r3, #2
 8009de0:	1b5b      	subs	r3, r3, r5
 8009de2:	4442      	add	r2, r8
 8009de4:	2102      	movs	r1, #2
 8009de6:	f080 0001 	eor.w	r0, r0, #1
 8009dea:	6123      	str	r3, [r4, #16]
 8009dec:	60a2      	str	r2, [r4, #8]
 8009dee:	7561      	strb	r1, [r4, #21]
 8009df0:	b002      	add	sp, #8
 8009df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009df6:	2102      	movs	r1, #2
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f000 fb7b 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 8009dfe:	b190      	cbz	r0, 8009e26 <ucdr_serialize_int16_t+0xae>
 8009e00:	7d23      	ldrb	r3, [r4, #20]
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	68a3      	ldr	r3, [r4, #8]
 8009e06:	d014      	beq.n	8009e32 <ucdr_serialize_int16_t+0xba>
 8009e08:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009e0c:	701a      	strb	r2, [r3, #0]
 8009e0e:	68a3      	ldr	r3, [r4, #8]
 8009e10:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009e14:	705a      	strb	r2, [r3, #1]
 8009e16:	68a2      	ldr	r2, [r4, #8]
 8009e18:	6923      	ldr	r3, [r4, #16]
 8009e1a:	3202      	adds	r2, #2
 8009e1c:	3302      	adds	r3, #2
 8009e1e:	2102      	movs	r1, #2
 8009e20:	60a2      	str	r2, [r4, #8]
 8009e22:	6123      	str	r3, [r4, #16]
 8009e24:	7561      	strb	r1, [r4, #21]
 8009e26:	7da0      	ldrb	r0, [r4, #22]
 8009e28:	f080 0001 	eor.w	r0, r0, #1
 8009e2c:	b002      	add	sp, #8
 8009e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e32:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009e36:	801a      	strh	r2, [r3, #0]
 8009e38:	e7ed      	b.n	8009e16 <ucdr_serialize_int16_t+0x9e>
 8009e3a:	68a2      	ldr	r2, [r4, #8]
 8009e3c:	6923      	ldr	r3, [r4, #16]
 8009e3e:	7da0      	ldrb	r0, [r4, #22]
 8009e40:	7567      	strb	r7, [r4, #21]
 8009e42:	1b52      	subs	r2, r2, r5
 8009e44:	1b5b      	subs	r3, r3, r5
 8009e46:	f080 0001 	eor.w	r0, r0, #1
 8009e4a:	60a2      	str	r2, [r4, #8]
 8009e4c:	6123      	str	r3, [r4, #16]
 8009e4e:	b002      	add	sp, #8
 8009e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e54:	68a3      	ldr	r3, [r4, #8]
 8009e56:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009e5a:	701a      	strb	r2, [r3, #0]
 8009e5c:	e7bc      	b.n	8009dd8 <ucdr_serialize_int16_t+0x60>
 8009e5e:	4630      	mov	r0, r6
 8009e60:	f10d 0606 	add.w	r6, sp, #6
 8009e64:	4631      	mov	r1, r6
 8009e66:	462a      	mov	r2, r5
 8009e68:	f00b f88a 	bl	8014f80 <memcpy>
 8009e6c:	68a0      	ldr	r0, [r4, #8]
 8009e6e:	4642      	mov	r2, r8
 8009e70:	1971      	adds	r1, r6, r5
 8009e72:	f00b f885 	bl	8014f80 <memcpy>
 8009e76:	e7af      	b.n	8009dd8 <ucdr_serialize_int16_t+0x60>

08009e78 <ucdr_deserialize_int16_t>:
 8009e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e7c:	460d      	mov	r5, r1
 8009e7e:	2102      	movs	r1, #2
 8009e80:	4604      	mov	r4, r0
 8009e82:	f000 fb89 	bl	800a598 <ucdr_buffer_alignment>
 8009e86:	4601      	mov	r1, r0
 8009e88:	4620      	mov	r0, r4
 8009e8a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009e8e:	f000 fbc7 	bl	800a620 <ucdr_advance_buffer>
 8009e92:	4620      	mov	r0, r4
 8009e94:	2102      	movs	r1, #2
 8009e96:	f000 fb21 	bl	800a4dc <ucdr_check_buffer_available_for>
 8009e9a:	bb60      	cbnz	r0, 8009ef6 <ucdr_deserialize_int16_t+0x7e>
 8009e9c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009ea0:	42be      	cmp	r6, r7
 8009ea2:	d923      	bls.n	8009eec <ucdr_deserialize_int16_t+0x74>
 8009ea4:	6922      	ldr	r2, [r4, #16]
 8009ea6:	60a6      	str	r6, [r4, #8]
 8009ea8:	1bf6      	subs	r6, r6, r7
 8009eaa:	4432      	add	r2, r6
 8009eac:	f1c6 0902 	rsb	r9, r6, #2
 8009eb0:	6122      	str	r2, [r4, #16]
 8009eb2:	4649      	mov	r1, r9
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	f000 fb1d 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	d034      	beq.n	8009f28 <ucdr_deserialize_int16_t+0xb0>
 8009ebe:	7d23      	ldrb	r3, [r4, #20]
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d042      	beq.n	8009f4a <ucdr_deserialize_int16_t+0xd2>
 8009ec4:	787b      	ldrb	r3, [r7, #1]
 8009ec6:	702b      	strb	r3, [r5, #0]
 8009ec8:	2e00      	cmp	r6, #0
 8009eca:	d03a      	beq.n	8009f42 <ucdr_deserialize_int16_t+0xca>
 8009ecc:	783b      	ldrb	r3, [r7, #0]
 8009ece:	706b      	strb	r3, [r5, #1]
 8009ed0:	6923      	ldr	r3, [r4, #16]
 8009ed2:	68a2      	ldr	r2, [r4, #8]
 8009ed4:	7da0      	ldrb	r0, [r4, #22]
 8009ed6:	2102      	movs	r1, #2
 8009ed8:	3302      	adds	r3, #2
 8009eda:	1b9b      	subs	r3, r3, r6
 8009edc:	444a      	add	r2, r9
 8009ede:	7561      	strb	r1, [r4, #21]
 8009ee0:	6123      	str	r3, [r4, #16]
 8009ee2:	60a2      	str	r2, [r4, #8]
 8009ee4:	f080 0001 	eor.w	r0, r0, #1
 8009ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eec:	2102      	movs	r1, #2
 8009eee:	4620      	mov	r0, r4
 8009ef0:	f000 fb00 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 8009ef4:	b180      	cbz	r0, 8009f18 <ucdr_deserialize_int16_t+0xa0>
 8009ef6:	7d23      	ldrb	r3, [r4, #20]
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	68a3      	ldr	r3, [r4, #8]
 8009efc:	d011      	beq.n	8009f22 <ucdr_deserialize_int16_t+0xaa>
 8009efe:	785b      	ldrb	r3, [r3, #1]
 8009f00:	702b      	strb	r3, [r5, #0]
 8009f02:	68a3      	ldr	r3, [r4, #8]
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	706b      	strb	r3, [r5, #1]
 8009f08:	68a2      	ldr	r2, [r4, #8]
 8009f0a:	6923      	ldr	r3, [r4, #16]
 8009f0c:	3202      	adds	r2, #2
 8009f0e:	3302      	adds	r3, #2
 8009f10:	2102      	movs	r1, #2
 8009f12:	60a2      	str	r2, [r4, #8]
 8009f14:	6123      	str	r3, [r4, #16]
 8009f16:	7561      	strb	r1, [r4, #21]
 8009f18:	7da0      	ldrb	r0, [r4, #22]
 8009f1a:	f080 0001 	eor.w	r0, r0, #1
 8009f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f22:	881b      	ldrh	r3, [r3, #0]
 8009f24:	802b      	strh	r3, [r5, #0]
 8009f26:	e7ef      	b.n	8009f08 <ucdr_deserialize_int16_t+0x90>
 8009f28:	68a2      	ldr	r2, [r4, #8]
 8009f2a:	6923      	ldr	r3, [r4, #16]
 8009f2c:	7da0      	ldrb	r0, [r4, #22]
 8009f2e:	f884 8015 	strb.w	r8, [r4, #21]
 8009f32:	1b92      	subs	r2, r2, r6
 8009f34:	1b9b      	subs	r3, r3, r6
 8009f36:	60a2      	str	r2, [r4, #8]
 8009f38:	6123      	str	r3, [r4, #16]
 8009f3a:	f080 0001 	eor.w	r0, r0, #1
 8009f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f42:	68a3      	ldr	r3, [r4, #8]
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	706b      	strb	r3, [r5, #1]
 8009f48:	e7c2      	b.n	8009ed0 <ucdr_deserialize_int16_t+0x58>
 8009f4a:	4639      	mov	r1, r7
 8009f4c:	4632      	mov	r2, r6
 8009f4e:	4628      	mov	r0, r5
 8009f50:	f00b f816 	bl	8014f80 <memcpy>
 8009f54:	68a1      	ldr	r1, [r4, #8]
 8009f56:	464a      	mov	r2, r9
 8009f58:	19a8      	adds	r0, r5, r6
 8009f5a:	f00b f811 	bl	8014f80 <memcpy>
 8009f5e:	e7b7      	b.n	8009ed0 <ucdr_deserialize_int16_t+0x58>

08009f60 <ucdr_serialize_int32_t>:
 8009f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f64:	b082      	sub	sp, #8
 8009f66:	4604      	mov	r4, r0
 8009f68:	9101      	str	r1, [sp, #4]
 8009f6a:	2104      	movs	r1, #4
 8009f6c:	f000 fb14 	bl	800a598 <ucdr_buffer_alignment>
 8009f70:	4601      	mov	r1, r0
 8009f72:	4620      	mov	r0, r4
 8009f74:	7d67      	ldrb	r7, [r4, #21]
 8009f76:	f000 fb53 	bl	800a620 <ucdr_advance_buffer>
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	2104      	movs	r1, #4
 8009f7e:	f000 faad 	bl	800a4dc <ucdr_check_buffer_available_for>
 8009f82:	2800      	cmp	r0, #0
 8009f84:	d139      	bne.n	8009ffa <ucdr_serialize_int32_t+0x9a>
 8009f86:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 8009f8a:	42ae      	cmp	r6, r5
 8009f8c:	d930      	bls.n	8009ff0 <ucdr_serialize_int32_t+0x90>
 8009f8e:	6922      	ldr	r2, [r4, #16]
 8009f90:	60a6      	str	r6, [r4, #8]
 8009f92:	1b76      	subs	r6, r6, r5
 8009f94:	4432      	add	r2, r6
 8009f96:	f1c6 0804 	rsb	r8, r6, #4
 8009f9a:	6122      	str	r2, [r4, #16]
 8009f9c:	4641      	mov	r1, r8
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	f000 faa8 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	d04c      	beq.n	800a042 <ucdr_serialize_int32_t+0xe2>
 8009fa8:	7d23      	ldrb	r3, [r4, #20]
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d063      	beq.n	800a076 <ucdr_serialize_int32_t+0x116>
 8009fae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009fb2:	702b      	strb	r3, [r5, #0]
 8009fb4:	2e00      	cmp	r6, #0
 8009fb6:	d051      	beq.n	800a05c <ucdr_serialize_int32_t+0xfc>
 8009fb8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009fbc:	706b      	strb	r3, [r5, #1]
 8009fbe:	2e01      	cmp	r6, #1
 8009fc0:	d050      	beq.n	800a064 <ucdr_serialize_int32_t+0x104>
 8009fc2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009fc6:	70ab      	strb	r3, [r5, #2]
 8009fc8:	2e02      	cmp	r6, #2
 8009fca:	d04f      	beq.n	800a06c <ucdr_serialize_int32_t+0x10c>
 8009fcc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009fd0:	70eb      	strb	r3, [r5, #3]
 8009fd2:	6923      	ldr	r3, [r4, #16]
 8009fd4:	68a2      	ldr	r2, [r4, #8]
 8009fd6:	7da0      	ldrb	r0, [r4, #22]
 8009fd8:	3304      	adds	r3, #4
 8009fda:	1b9b      	subs	r3, r3, r6
 8009fdc:	4442      	add	r2, r8
 8009fde:	2104      	movs	r1, #4
 8009fe0:	f080 0001 	eor.w	r0, r0, #1
 8009fe4:	6123      	str	r3, [r4, #16]
 8009fe6:	60a2      	str	r2, [r4, #8]
 8009fe8:	7561      	strb	r1, [r4, #21]
 8009fea:	b002      	add	sp, #8
 8009fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ff0:	2104      	movs	r1, #4
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	f000 fa7e 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 8009ff8:	b1d0      	cbz	r0, 800a030 <ucdr_serialize_int32_t+0xd0>
 8009ffa:	7d23      	ldrb	r3, [r4, #20]
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	68a3      	ldr	r3, [r4, #8]
 800a000:	d01c      	beq.n	800a03c <ucdr_serialize_int32_t+0xdc>
 800a002:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a006:	701a      	strb	r2, [r3, #0]
 800a008:	68a3      	ldr	r3, [r4, #8]
 800a00a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a00e:	705a      	strb	r2, [r3, #1]
 800a010:	68a3      	ldr	r3, [r4, #8]
 800a012:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a016:	709a      	strb	r2, [r3, #2]
 800a018:	68a3      	ldr	r3, [r4, #8]
 800a01a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a01e:	70da      	strb	r2, [r3, #3]
 800a020:	68a2      	ldr	r2, [r4, #8]
 800a022:	6923      	ldr	r3, [r4, #16]
 800a024:	3204      	adds	r2, #4
 800a026:	3304      	adds	r3, #4
 800a028:	2104      	movs	r1, #4
 800a02a:	60a2      	str	r2, [r4, #8]
 800a02c:	6123      	str	r3, [r4, #16]
 800a02e:	7561      	strb	r1, [r4, #21]
 800a030:	7da0      	ldrb	r0, [r4, #22]
 800a032:	f080 0001 	eor.w	r0, r0, #1
 800a036:	b002      	add	sp, #8
 800a038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a03c:	9a01      	ldr	r2, [sp, #4]
 800a03e:	601a      	str	r2, [r3, #0]
 800a040:	e7ee      	b.n	800a020 <ucdr_serialize_int32_t+0xc0>
 800a042:	68a2      	ldr	r2, [r4, #8]
 800a044:	6923      	ldr	r3, [r4, #16]
 800a046:	7da0      	ldrb	r0, [r4, #22]
 800a048:	7567      	strb	r7, [r4, #21]
 800a04a:	1b92      	subs	r2, r2, r6
 800a04c:	1b9b      	subs	r3, r3, r6
 800a04e:	f080 0001 	eor.w	r0, r0, #1
 800a052:	60a2      	str	r2, [r4, #8]
 800a054:	6123      	str	r3, [r4, #16]
 800a056:	b002      	add	sp, #8
 800a058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a05c:	68a3      	ldr	r3, [r4, #8]
 800a05e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a062:	701a      	strb	r2, [r3, #0]
 800a064:	68a3      	ldr	r3, [r4, #8]
 800a066:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a06a:	701a      	strb	r2, [r3, #0]
 800a06c:	68a3      	ldr	r3, [r4, #8]
 800a06e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a072:	701a      	strb	r2, [r3, #0]
 800a074:	e7ad      	b.n	8009fd2 <ucdr_serialize_int32_t+0x72>
 800a076:	4628      	mov	r0, r5
 800a078:	ad01      	add	r5, sp, #4
 800a07a:	4629      	mov	r1, r5
 800a07c:	4632      	mov	r2, r6
 800a07e:	f00a ff7f 	bl	8014f80 <memcpy>
 800a082:	68a0      	ldr	r0, [r4, #8]
 800a084:	4642      	mov	r2, r8
 800a086:	19a9      	adds	r1, r5, r6
 800a088:	f00a ff7a 	bl	8014f80 <memcpy>
 800a08c:	e7a1      	b.n	8009fd2 <ucdr_serialize_int32_t+0x72>
 800a08e:	bf00      	nop

0800a090 <ucdr_deserialize_int32_t>:
 800a090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a094:	460d      	mov	r5, r1
 800a096:	2104      	movs	r1, #4
 800a098:	4604      	mov	r4, r0
 800a09a:	f000 fa7d 	bl	800a598 <ucdr_buffer_alignment>
 800a09e:	4601      	mov	r1, r0
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a0a6:	f000 fabb 	bl	800a620 <ucdr_advance_buffer>
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	2104      	movs	r1, #4
 800a0ae:	f000 fa15 	bl	800a4dc <ucdr_check_buffer_available_for>
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	d138      	bne.n	800a128 <ucdr_deserialize_int32_t+0x98>
 800a0b6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800a0ba:	42b7      	cmp	r7, r6
 800a0bc:	d92f      	bls.n	800a11e <ucdr_deserialize_int32_t+0x8e>
 800a0be:	6922      	ldr	r2, [r4, #16]
 800a0c0:	60a7      	str	r7, [r4, #8]
 800a0c2:	1bbf      	subs	r7, r7, r6
 800a0c4:	443a      	add	r2, r7
 800a0c6:	f1c7 0904 	rsb	r9, r7, #4
 800a0ca:	6122      	str	r2, [r4, #16]
 800a0cc:	4649      	mov	r1, r9
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	f000 fa10 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	d046      	beq.n	800a166 <ucdr_deserialize_int32_t+0xd6>
 800a0d8:	7d23      	ldrb	r3, [r4, #20]
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d05c      	beq.n	800a198 <ucdr_deserialize_int32_t+0x108>
 800a0de:	78f3      	ldrb	r3, [r6, #3]
 800a0e0:	702b      	strb	r3, [r5, #0]
 800a0e2:	2f00      	cmp	r7, #0
 800a0e4:	d04c      	beq.n	800a180 <ucdr_deserialize_int32_t+0xf0>
 800a0e6:	78b3      	ldrb	r3, [r6, #2]
 800a0e8:	706b      	strb	r3, [r5, #1]
 800a0ea:	2f01      	cmp	r7, #1
 800a0ec:	f105 0302 	add.w	r3, r5, #2
 800a0f0:	d04a      	beq.n	800a188 <ucdr_deserialize_int32_t+0xf8>
 800a0f2:	7873      	ldrb	r3, [r6, #1]
 800a0f4:	70ab      	strb	r3, [r5, #2]
 800a0f6:	2f02      	cmp	r7, #2
 800a0f8:	f105 0303 	add.w	r3, r5, #3
 800a0fc:	d048      	beq.n	800a190 <ucdr_deserialize_int32_t+0x100>
 800a0fe:	7833      	ldrb	r3, [r6, #0]
 800a100:	70eb      	strb	r3, [r5, #3]
 800a102:	6923      	ldr	r3, [r4, #16]
 800a104:	68a2      	ldr	r2, [r4, #8]
 800a106:	7da0      	ldrb	r0, [r4, #22]
 800a108:	2104      	movs	r1, #4
 800a10a:	3304      	adds	r3, #4
 800a10c:	1bdb      	subs	r3, r3, r7
 800a10e:	444a      	add	r2, r9
 800a110:	7561      	strb	r1, [r4, #21]
 800a112:	6123      	str	r3, [r4, #16]
 800a114:	60a2      	str	r2, [r4, #8]
 800a116:	f080 0001 	eor.w	r0, r0, #1
 800a11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a11e:	2104      	movs	r1, #4
 800a120:	4620      	mov	r0, r4
 800a122:	f000 f9e7 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 800a126:	b1b0      	cbz	r0, 800a156 <ucdr_deserialize_int32_t+0xc6>
 800a128:	7d23      	ldrb	r3, [r4, #20]
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	68a3      	ldr	r3, [r4, #8]
 800a12e:	d017      	beq.n	800a160 <ucdr_deserialize_int32_t+0xd0>
 800a130:	78db      	ldrb	r3, [r3, #3]
 800a132:	702b      	strb	r3, [r5, #0]
 800a134:	68a3      	ldr	r3, [r4, #8]
 800a136:	789b      	ldrb	r3, [r3, #2]
 800a138:	706b      	strb	r3, [r5, #1]
 800a13a:	68a3      	ldr	r3, [r4, #8]
 800a13c:	785b      	ldrb	r3, [r3, #1]
 800a13e:	70ab      	strb	r3, [r5, #2]
 800a140:	68a3      	ldr	r3, [r4, #8]
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	70eb      	strb	r3, [r5, #3]
 800a146:	68a2      	ldr	r2, [r4, #8]
 800a148:	6923      	ldr	r3, [r4, #16]
 800a14a:	3204      	adds	r2, #4
 800a14c:	3304      	adds	r3, #4
 800a14e:	2104      	movs	r1, #4
 800a150:	60a2      	str	r2, [r4, #8]
 800a152:	6123      	str	r3, [r4, #16]
 800a154:	7561      	strb	r1, [r4, #21]
 800a156:	7da0      	ldrb	r0, [r4, #22]
 800a158:	f080 0001 	eor.w	r0, r0, #1
 800a15c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	602b      	str	r3, [r5, #0]
 800a164:	e7ef      	b.n	800a146 <ucdr_deserialize_int32_t+0xb6>
 800a166:	68a2      	ldr	r2, [r4, #8]
 800a168:	6923      	ldr	r3, [r4, #16]
 800a16a:	7da0      	ldrb	r0, [r4, #22]
 800a16c:	f884 8015 	strb.w	r8, [r4, #21]
 800a170:	1bd2      	subs	r2, r2, r7
 800a172:	1bdb      	subs	r3, r3, r7
 800a174:	60a2      	str	r2, [r4, #8]
 800a176:	6123      	str	r3, [r4, #16]
 800a178:	f080 0001 	eor.w	r0, r0, #1
 800a17c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a180:	68a3      	ldr	r3, [r4, #8]
 800a182:	789b      	ldrb	r3, [r3, #2]
 800a184:	706b      	strb	r3, [r5, #1]
 800a186:	1cab      	adds	r3, r5, #2
 800a188:	68a2      	ldr	r2, [r4, #8]
 800a18a:	7852      	ldrb	r2, [r2, #1]
 800a18c:	f803 2b01 	strb.w	r2, [r3], #1
 800a190:	68a2      	ldr	r2, [r4, #8]
 800a192:	7812      	ldrb	r2, [r2, #0]
 800a194:	701a      	strb	r2, [r3, #0]
 800a196:	e7b4      	b.n	800a102 <ucdr_deserialize_int32_t+0x72>
 800a198:	4631      	mov	r1, r6
 800a19a:	463a      	mov	r2, r7
 800a19c:	4628      	mov	r0, r5
 800a19e:	f00a feef 	bl	8014f80 <memcpy>
 800a1a2:	68a1      	ldr	r1, [r4, #8]
 800a1a4:	464a      	mov	r2, r9
 800a1a6:	19e8      	adds	r0, r5, r7
 800a1a8:	f00a feea 	bl	8014f80 <memcpy>
 800a1ac:	e7a9      	b.n	800a102 <ucdr_deserialize_int32_t+0x72>
 800a1ae:	bf00      	nop

0800a1b0 <ucdr_serialize_double>:
 800a1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b4:	2108      	movs	r1, #8
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	4604      	mov	r4, r0
 800a1ba:	ed8d 0b00 	vstr	d0, [sp]
 800a1be:	f000 f9eb 	bl	800a598 <ucdr_buffer_alignment>
 800a1c2:	4601      	mov	r1, r0
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	7d67      	ldrb	r7, [r4, #21]
 800a1c8:	f000 fa2a 	bl	800a620 <ucdr_advance_buffer>
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	2108      	movs	r1, #8
 800a1d0:	f000 f984 	bl	800a4dc <ucdr_check_buffer_available_for>
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	d14e      	bne.n	800a276 <ucdr_serialize_double+0xc6>
 800a1d8:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800a1dc:	42b5      	cmp	r5, r6
 800a1de:	d945      	bls.n	800a26c <ucdr_serialize_double+0xbc>
 800a1e0:	6923      	ldr	r3, [r4, #16]
 800a1e2:	60a5      	str	r5, [r4, #8]
 800a1e4:	1bad      	subs	r5, r5, r6
 800a1e6:	442b      	add	r3, r5
 800a1e8:	f1c5 0808 	rsb	r8, r5, #8
 800a1ec:	6123      	str	r3, [r4, #16]
 800a1ee:	4641      	mov	r1, r8
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	f000 f97f 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	d074      	beq.n	800a2e4 <ucdr_serialize_double+0x134>
 800a1fa:	7d23      	ldrb	r3, [r4, #20]
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	f000 809b 	beq.w	800a338 <ucdr_serialize_double+0x188>
 800a202:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a206:	7033      	strb	r3, [r6, #0]
 800a208:	2d00      	cmp	r5, #0
 800a20a:	d078      	beq.n	800a2fe <ucdr_serialize_double+0x14e>
 800a20c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a210:	7073      	strb	r3, [r6, #1]
 800a212:	2d01      	cmp	r5, #1
 800a214:	d077      	beq.n	800a306 <ucdr_serialize_double+0x156>
 800a216:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a21a:	70b3      	strb	r3, [r6, #2]
 800a21c:	2d02      	cmp	r5, #2
 800a21e:	d076      	beq.n	800a30e <ucdr_serialize_double+0x15e>
 800a220:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a224:	70f3      	strb	r3, [r6, #3]
 800a226:	2d03      	cmp	r5, #3
 800a228:	d075      	beq.n	800a316 <ucdr_serialize_double+0x166>
 800a22a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a22e:	7133      	strb	r3, [r6, #4]
 800a230:	2d04      	cmp	r5, #4
 800a232:	d074      	beq.n	800a31e <ucdr_serialize_double+0x16e>
 800a234:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800a238:	7173      	strb	r3, [r6, #5]
 800a23a:	2d05      	cmp	r5, #5
 800a23c:	d073      	beq.n	800a326 <ucdr_serialize_double+0x176>
 800a23e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800a242:	71b3      	strb	r3, [r6, #6]
 800a244:	2d06      	cmp	r5, #6
 800a246:	d072      	beq.n	800a32e <ucdr_serialize_double+0x17e>
 800a248:	f89d 3000 	ldrb.w	r3, [sp]
 800a24c:	71f3      	strb	r3, [r6, #7]
 800a24e:	6923      	ldr	r3, [r4, #16]
 800a250:	68a2      	ldr	r2, [r4, #8]
 800a252:	7da0      	ldrb	r0, [r4, #22]
 800a254:	3308      	adds	r3, #8
 800a256:	1b5d      	subs	r5, r3, r5
 800a258:	4442      	add	r2, r8
 800a25a:	2308      	movs	r3, #8
 800a25c:	f080 0001 	eor.w	r0, r0, #1
 800a260:	6125      	str	r5, [r4, #16]
 800a262:	60a2      	str	r2, [r4, #8]
 800a264:	7563      	strb	r3, [r4, #21]
 800a266:	b002      	add	sp, #8
 800a268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a26c:	2108      	movs	r1, #8
 800a26e:	4620      	mov	r0, r4
 800a270:	f000 f940 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 800a274:	b350      	cbz	r0, 800a2cc <ucdr_serialize_double+0x11c>
 800a276:	7d23      	ldrb	r3, [r4, #20]
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d02d      	beq.n	800a2d8 <ucdr_serialize_double+0x128>
 800a27c:	68a3      	ldr	r3, [r4, #8]
 800a27e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a282:	701a      	strb	r2, [r3, #0]
 800a284:	68a3      	ldr	r3, [r4, #8]
 800a286:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a28a:	705a      	strb	r2, [r3, #1]
 800a28c:	68a3      	ldr	r3, [r4, #8]
 800a28e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a292:	709a      	strb	r2, [r3, #2]
 800a294:	68a3      	ldr	r3, [r4, #8]
 800a296:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a29a:	70da      	strb	r2, [r3, #3]
 800a29c:	68a3      	ldr	r3, [r4, #8]
 800a29e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800a2a2:	711a      	strb	r2, [r3, #4]
 800a2a4:	68a3      	ldr	r3, [r4, #8]
 800a2a6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800a2aa:	715a      	strb	r2, [r3, #5]
 800a2ac:	68a3      	ldr	r3, [r4, #8]
 800a2ae:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800a2b2:	719a      	strb	r2, [r3, #6]
 800a2b4:	68a3      	ldr	r3, [r4, #8]
 800a2b6:	f89d 2000 	ldrb.w	r2, [sp]
 800a2ba:	71da      	strb	r2, [r3, #7]
 800a2bc:	68a2      	ldr	r2, [r4, #8]
 800a2be:	6923      	ldr	r3, [r4, #16]
 800a2c0:	3208      	adds	r2, #8
 800a2c2:	3308      	adds	r3, #8
 800a2c4:	2108      	movs	r1, #8
 800a2c6:	60a2      	str	r2, [r4, #8]
 800a2c8:	6123      	str	r3, [r4, #16]
 800a2ca:	7561      	strb	r1, [r4, #21]
 800a2cc:	7da0      	ldrb	r0, [r4, #22]
 800a2ce:	f080 0001 	eor.w	r0, r0, #1
 800a2d2:	b002      	add	sp, #8
 800a2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2d8:	466b      	mov	r3, sp
 800a2da:	cb03      	ldmia	r3!, {r0, r1}
 800a2dc:	68a3      	ldr	r3, [r4, #8]
 800a2de:	6018      	str	r0, [r3, #0]
 800a2e0:	6059      	str	r1, [r3, #4]
 800a2e2:	e7eb      	b.n	800a2bc <ucdr_serialize_double+0x10c>
 800a2e4:	68a2      	ldr	r2, [r4, #8]
 800a2e6:	6923      	ldr	r3, [r4, #16]
 800a2e8:	7da0      	ldrb	r0, [r4, #22]
 800a2ea:	7567      	strb	r7, [r4, #21]
 800a2ec:	1b52      	subs	r2, r2, r5
 800a2ee:	f080 0001 	eor.w	r0, r0, #1
 800a2f2:	1b5d      	subs	r5, r3, r5
 800a2f4:	60a2      	str	r2, [r4, #8]
 800a2f6:	6125      	str	r5, [r4, #16]
 800a2f8:	b002      	add	sp, #8
 800a2fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2fe:	68a3      	ldr	r3, [r4, #8]
 800a300:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a304:	701a      	strb	r2, [r3, #0]
 800a306:	68a3      	ldr	r3, [r4, #8]
 800a308:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a30c:	701a      	strb	r2, [r3, #0]
 800a30e:	68a3      	ldr	r3, [r4, #8]
 800a310:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a314:	701a      	strb	r2, [r3, #0]
 800a316:	68a3      	ldr	r3, [r4, #8]
 800a318:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800a31c:	701a      	strb	r2, [r3, #0]
 800a31e:	68a3      	ldr	r3, [r4, #8]
 800a320:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800a324:	701a      	strb	r2, [r3, #0]
 800a326:	68a3      	ldr	r3, [r4, #8]
 800a328:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800a32c:	701a      	strb	r2, [r3, #0]
 800a32e:	68a3      	ldr	r3, [r4, #8]
 800a330:	f89d 2000 	ldrb.w	r2, [sp]
 800a334:	701a      	strb	r2, [r3, #0]
 800a336:	e78a      	b.n	800a24e <ucdr_serialize_double+0x9e>
 800a338:	4630      	mov	r0, r6
 800a33a:	466e      	mov	r6, sp
 800a33c:	4631      	mov	r1, r6
 800a33e:	462a      	mov	r2, r5
 800a340:	f00a fe1e 	bl	8014f80 <memcpy>
 800a344:	68a0      	ldr	r0, [r4, #8]
 800a346:	4642      	mov	r2, r8
 800a348:	1971      	adds	r1, r6, r5
 800a34a:	f00a fe19 	bl	8014f80 <memcpy>
 800a34e:	e77e      	b.n	800a24e <ucdr_serialize_double+0x9e>

0800a350 <ucdr_deserialize_double>:
 800a350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a354:	460d      	mov	r5, r1
 800a356:	2108      	movs	r1, #8
 800a358:	4604      	mov	r4, r0
 800a35a:	f000 f91d 	bl	800a598 <ucdr_buffer_alignment>
 800a35e:	4601      	mov	r1, r0
 800a360:	4620      	mov	r0, r4
 800a362:	f894 9015 	ldrb.w	r9, [r4, #21]
 800a366:	f000 f95b 	bl	800a620 <ucdr_advance_buffer>
 800a36a:	4620      	mov	r0, r4
 800a36c:	2108      	movs	r1, #8
 800a36e:	f000 f8b5 	bl	800a4dc <ucdr_check_buffer_available_for>
 800a372:	2800      	cmp	r0, #0
 800a374:	d151      	bne.n	800a41a <ucdr_deserialize_double+0xca>
 800a376:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a37a:	42be      	cmp	r6, r7
 800a37c:	d948      	bls.n	800a410 <ucdr_deserialize_double+0xc0>
 800a37e:	6923      	ldr	r3, [r4, #16]
 800a380:	60a6      	str	r6, [r4, #8]
 800a382:	1bf6      	subs	r6, r6, r7
 800a384:	4433      	add	r3, r6
 800a386:	f1c6 0808 	rsb	r8, r6, #8
 800a38a:	6123      	str	r3, [r4, #16]
 800a38c:	4641      	mov	r1, r8
 800a38e:	4620      	mov	r0, r4
 800a390:	f000 f8b0 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 800a394:	2800      	cmp	r0, #0
 800a396:	d06d      	beq.n	800a474 <ucdr_deserialize_double+0x124>
 800a398:	7d23      	ldrb	r3, [r4, #20]
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	f000 8093 	beq.w	800a4c6 <ucdr_deserialize_double+0x176>
 800a3a0:	79fb      	ldrb	r3, [r7, #7]
 800a3a2:	702b      	strb	r3, [r5, #0]
 800a3a4:	2e00      	cmp	r6, #0
 800a3a6:	d072      	beq.n	800a48e <ucdr_deserialize_double+0x13e>
 800a3a8:	79bb      	ldrb	r3, [r7, #6]
 800a3aa:	706b      	strb	r3, [r5, #1]
 800a3ac:	2e01      	cmp	r6, #1
 800a3ae:	f105 0302 	add.w	r3, r5, #2
 800a3b2:	d070      	beq.n	800a496 <ucdr_deserialize_double+0x146>
 800a3b4:	797b      	ldrb	r3, [r7, #5]
 800a3b6:	70ab      	strb	r3, [r5, #2]
 800a3b8:	2e02      	cmp	r6, #2
 800a3ba:	f105 0303 	add.w	r3, r5, #3
 800a3be:	d06e      	beq.n	800a49e <ucdr_deserialize_double+0x14e>
 800a3c0:	793b      	ldrb	r3, [r7, #4]
 800a3c2:	70eb      	strb	r3, [r5, #3]
 800a3c4:	2e03      	cmp	r6, #3
 800a3c6:	f105 0304 	add.w	r3, r5, #4
 800a3ca:	d06c      	beq.n	800a4a6 <ucdr_deserialize_double+0x156>
 800a3cc:	78fb      	ldrb	r3, [r7, #3]
 800a3ce:	712b      	strb	r3, [r5, #4]
 800a3d0:	2e04      	cmp	r6, #4
 800a3d2:	f105 0305 	add.w	r3, r5, #5
 800a3d6:	d06a      	beq.n	800a4ae <ucdr_deserialize_double+0x15e>
 800a3d8:	78bb      	ldrb	r3, [r7, #2]
 800a3da:	716b      	strb	r3, [r5, #5]
 800a3dc:	2e05      	cmp	r6, #5
 800a3de:	f105 0306 	add.w	r3, r5, #6
 800a3e2:	d068      	beq.n	800a4b6 <ucdr_deserialize_double+0x166>
 800a3e4:	787b      	ldrb	r3, [r7, #1]
 800a3e6:	71ab      	strb	r3, [r5, #6]
 800a3e8:	2e06      	cmp	r6, #6
 800a3ea:	f105 0307 	add.w	r3, r5, #7
 800a3ee:	d066      	beq.n	800a4be <ucdr_deserialize_double+0x16e>
 800a3f0:	783b      	ldrb	r3, [r7, #0]
 800a3f2:	71eb      	strb	r3, [r5, #7]
 800a3f4:	6923      	ldr	r3, [r4, #16]
 800a3f6:	68a2      	ldr	r2, [r4, #8]
 800a3f8:	7da0      	ldrb	r0, [r4, #22]
 800a3fa:	3308      	adds	r3, #8
 800a3fc:	1b9e      	subs	r6, r3, r6
 800a3fe:	2308      	movs	r3, #8
 800a400:	4442      	add	r2, r8
 800a402:	7563      	strb	r3, [r4, #21]
 800a404:	6126      	str	r6, [r4, #16]
 800a406:	60a2      	str	r2, [r4, #8]
 800a408:	f080 0001 	eor.w	r0, r0, #1
 800a40c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a410:	2108      	movs	r1, #8
 800a412:	4620      	mov	r0, r4
 800a414:	f000 f86e 	bl	800a4f4 <ucdr_check_final_buffer_behavior>
 800a418:	b310      	cbz	r0, 800a460 <ucdr_deserialize_double+0x110>
 800a41a:	7d23      	ldrb	r3, [r4, #20]
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	68a3      	ldr	r3, [r4, #8]
 800a420:	d023      	beq.n	800a46a <ucdr_deserialize_double+0x11a>
 800a422:	79db      	ldrb	r3, [r3, #7]
 800a424:	702b      	strb	r3, [r5, #0]
 800a426:	68a3      	ldr	r3, [r4, #8]
 800a428:	799b      	ldrb	r3, [r3, #6]
 800a42a:	706b      	strb	r3, [r5, #1]
 800a42c:	68a3      	ldr	r3, [r4, #8]
 800a42e:	795b      	ldrb	r3, [r3, #5]
 800a430:	70ab      	strb	r3, [r5, #2]
 800a432:	68a3      	ldr	r3, [r4, #8]
 800a434:	791b      	ldrb	r3, [r3, #4]
 800a436:	70eb      	strb	r3, [r5, #3]
 800a438:	68a3      	ldr	r3, [r4, #8]
 800a43a:	78db      	ldrb	r3, [r3, #3]
 800a43c:	712b      	strb	r3, [r5, #4]
 800a43e:	68a3      	ldr	r3, [r4, #8]
 800a440:	789b      	ldrb	r3, [r3, #2]
 800a442:	716b      	strb	r3, [r5, #5]
 800a444:	68a3      	ldr	r3, [r4, #8]
 800a446:	785b      	ldrb	r3, [r3, #1]
 800a448:	71ab      	strb	r3, [r5, #6]
 800a44a:	68a3      	ldr	r3, [r4, #8]
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	71eb      	strb	r3, [r5, #7]
 800a450:	68a2      	ldr	r2, [r4, #8]
 800a452:	6923      	ldr	r3, [r4, #16]
 800a454:	3208      	adds	r2, #8
 800a456:	3308      	adds	r3, #8
 800a458:	2108      	movs	r1, #8
 800a45a:	60a2      	str	r2, [r4, #8]
 800a45c:	6123      	str	r3, [r4, #16]
 800a45e:	7561      	strb	r1, [r4, #21]
 800a460:	7da0      	ldrb	r0, [r4, #22]
 800a462:	f080 0001 	eor.w	r0, r0, #1
 800a466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	606b      	str	r3, [r5, #4]
 800a470:	602a      	str	r2, [r5, #0]
 800a472:	e7ed      	b.n	800a450 <ucdr_deserialize_double+0x100>
 800a474:	68a2      	ldr	r2, [r4, #8]
 800a476:	6923      	ldr	r3, [r4, #16]
 800a478:	7da0      	ldrb	r0, [r4, #22]
 800a47a:	f884 9015 	strb.w	r9, [r4, #21]
 800a47e:	1b92      	subs	r2, r2, r6
 800a480:	1b9e      	subs	r6, r3, r6
 800a482:	60a2      	str	r2, [r4, #8]
 800a484:	6126      	str	r6, [r4, #16]
 800a486:	f080 0001 	eor.w	r0, r0, #1
 800a48a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a48e:	68a3      	ldr	r3, [r4, #8]
 800a490:	799b      	ldrb	r3, [r3, #6]
 800a492:	706b      	strb	r3, [r5, #1]
 800a494:	1cab      	adds	r3, r5, #2
 800a496:	68a2      	ldr	r2, [r4, #8]
 800a498:	7952      	ldrb	r2, [r2, #5]
 800a49a:	f803 2b01 	strb.w	r2, [r3], #1
 800a49e:	68a2      	ldr	r2, [r4, #8]
 800a4a0:	7912      	ldrb	r2, [r2, #4]
 800a4a2:	f803 2b01 	strb.w	r2, [r3], #1
 800a4a6:	68a2      	ldr	r2, [r4, #8]
 800a4a8:	78d2      	ldrb	r2, [r2, #3]
 800a4aa:	f803 2b01 	strb.w	r2, [r3], #1
 800a4ae:	68a2      	ldr	r2, [r4, #8]
 800a4b0:	7892      	ldrb	r2, [r2, #2]
 800a4b2:	f803 2b01 	strb.w	r2, [r3], #1
 800a4b6:	68a2      	ldr	r2, [r4, #8]
 800a4b8:	7852      	ldrb	r2, [r2, #1]
 800a4ba:	f803 2b01 	strb.w	r2, [r3], #1
 800a4be:	68a2      	ldr	r2, [r4, #8]
 800a4c0:	7812      	ldrb	r2, [r2, #0]
 800a4c2:	701a      	strb	r2, [r3, #0]
 800a4c4:	e796      	b.n	800a3f4 <ucdr_deserialize_double+0xa4>
 800a4c6:	4639      	mov	r1, r7
 800a4c8:	4632      	mov	r2, r6
 800a4ca:	4628      	mov	r0, r5
 800a4cc:	f00a fd58 	bl	8014f80 <memcpy>
 800a4d0:	68a1      	ldr	r1, [r4, #8]
 800a4d2:	4642      	mov	r2, r8
 800a4d4:	19a8      	adds	r0, r5, r6
 800a4d6:	f00a fd53 	bl	8014f80 <memcpy>
 800a4da:	e78b      	b.n	800a3f4 <ucdr_deserialize_double+0xa4>

0800a4dc <ucdr_check_buffer_available_for>:
 800a4dc:	7d83      	ldrb	r3, [r0, #22]
 800a4de:	b93b      	cbnz	r3, 800a4f0 <ucdr_check_buffer_available_for+0x14>
 800a4e0:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800a4e4:	4419      	add	r1, r3
 800a4e6:	4288      	cmp	r0, r1
 800a4e8:	bf34      	ite	cc
 800a4ea:	2000      	movcc	r0, #0
 800a4ec:	2001      	movcs	r0, #1
 800a4ee:	4770      	bx	lr
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	4770      	bx	lr

0800a4f4 <ucdr_check_final_buffer_behavior>:
 800a4f4:	7d83      	ldrb	r3, [r0, #22]
 800a4f6:	b943      	cbnz	r3, 800a50a <ucdr_check_final_buffer_behavior+0x16>
 800a4f8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800a4fc:	4291      	cmp	r1, r2
 800a4fe:	b510      	push	{r4, lr}
 800a500:	4604      	mov	r4, r0
 800a502:	d205      	bcs.n	800a510 <ucdr_check_final_buffer_behavior+0x1c>
 800a504:	2301      	movs	r3, #1
 800a506:	4618      	mov	r0, r3
 800a508:	bd10      	pop	{r4, pc}
 800a50a:	2300      	movs	r3, #0
 800a50c:	4618      	mov	r0, r3
 800a50e:	4770      	bx	lr
 800a510:	6982      	ldr	r2, [r0, #24]
 800a512:	b13a      	cbz	r2, 800a524 <ucdr_check_final_buffer_behavior+0x30>
 800a514:	69c1      	ldr	r1, [r0, #28]
 800a516:	4790      	blx	r2
 800a518:	f080 0301 	eor.w	r3, r0, #1
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	75a0      	strb	r0, [r4, #22]
 800a520:	4618      	mov	r0, r3
 800a522:	bd10      	pop	{r4, pc}
 800a524:	2001      	movs	r0, #1
 800a526:	75a0      	strb	r0, [r4, #22]
 800a528:	e7fa      	b.n	800a520 <ucdr_check_final_buffer_behavior+0x2c>
 800a52a:	bf00      	nop

0800a52c <ucdr_set_on_full_buffer_callback>:
 800a52c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop

0800a534 <ucdr_init_buffer_origin_offset_endian>:
 800a534:	b430      	push	{r4, r5}
 800a536:	9c02      	ldr	r4, [sp, #8]
 800a538:	f89d 500c 	ldrb.w	r5, [sp, #12]
 800a53c:	6001      	str	r1, [r0, #0]
 800a53e:	440a      	add	r2, r1
 800a540:	60c3      	str	r3, [r0, #12]
 800a542:	4421      	add	r1, r4
 800a544:	441c      	add	r4, r3
 800a546:	2300      	movs	r3, #0
 800a548:	6104      	str	r4, [r0, #16]
 800a54a:	7505      	strb	r5, [r0, #20]
 800a54c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a550:	bc30      	pop	{r4, r5}
 800a552:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800a556:	7543      	strb	r3, [r0, #21]
 800a558:	7583      	strb	r3, [r0, #22]
 800a55a:	4770      	bx	lr

0800a55c <ucdr_init_buffer_origin_offset>:
 800a55c:	b510      	push	{r4, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	9c04      	ldr	r4, [sp, #16]
 800a562:	9400      	str	r4, [sp, #0]
 800a564:	2401      	movs	r4, #1
 800a566:	9401      	str	r4, [sp, #4]
 800a568:	f7ff ffe4 	bl	800a534 <ucdr_init_buffer_origin_offset_endian>
 800a56c:	b002      	add	sp, #8
 800a56e:	bd10      	pop	{r4, pc}

0800a570 <ucdr_init_buffer_origin>:
 800a570:	b510      	push	{r4, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	2400      	movs	r4, #0
 800a576:	9400      	str	r4, [sp, #0]
 800a578:	f7ff fff0 	bl	800a55c <ucdr_init_buffer_origin_offset>
 800a57c:	b002      	add	sp, #8
 800a57e:	bd10      	pop	{r4, pc}

0800a580 <ucdr_init_buffer>:
 800a580:	2300      	movs	r3, #0
 800a582:	f7ff bff5 	b.w	800a570 <ucdr_init_buffer_origin>
 800a586:	bf00      	nop

0800a588 <ucdr_alignment>:
 800a588:	fbb0 f3f1 	udiv	r3, r0, r1
 800a58c:	fb03 0011 	mls	r0, r3, r1, r0
 800a590:	1a08      	subs	r0, r1, r0
 800a592:	3901      	subs	r1, #1
 800a594:	4008      	ands	r0, r1
 800a596:	4770      	bx	lr

0800a598 <ucdr_buffer_alignment>:
 800a598:	7d43      	ldrb	r3, [r0, #21]
 800a59a:	428b      	cmp	r3, r1
 800a59c:	d208      	bcs.n	800a5b0 <ucdr_buffer_alignment+0x18>
 800a59e:	6903      	ldr	r3, [r0, #16]
 800a5a0:	fbb3 f0f1 	udiv	r0, r3, r1
 800a5a4:	fb01 3010 	mls	r0, r1, r0, r3
 800a5a8:	1a08      	subs	r0, r1, r0
 800a5aa:	3901      	subs	r1, #1
 800a5ac:	4008      	ands	r0, r1
 800a5ae:	4770      	bx	lr
 800a5b0:	2000      	movs	r0, #0
 800a5b2:	4770      	bx	lr

0800a5b4 <ucdr_align_to>:
 800a5b4:	b570      	push	{r4, r5, r6, lr}
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	460e      	mov	r6, r1
 800a5ba:	f7ff ffed 	bl	800a598 <ucdr_buffer_alignment>
 800a5be:	68a5      	ldr	r5, [r4, #8]
 800a5c0:	6863      	ldr	r3, [r4, #4]
 800a5c2:	6922      	ldr	r2, [r4, #16]
 800a5c4:	7566      	strb	r6, [r4, #21]
 800a5c6:	4405      	add	r5, r0
 800a5c8:	42ab      	cmp	r3, r5
 800a5ca:	4410      	add	r0, r2
 800a5cc:	bf28      	it	cs
 800a5ce:	462b      	movcs	r3, r5
 800a5d0:	6120      	str	r0, [r4, #16]
 800a5d2:	60a3      	str	r3, [r4, #8]
 800a5d4:	bd70      	pop	{r4, r5, r6, pc}
 800a5d6:	bf00      	nop

0800a5d8 <ucdr_buffer_length>:
 800a5d8:	6882      	ldr	r2, [r0, #8]
 800a5da:	6800      	ldr	r0, [r0, #0]
 800a5dc:	1a10      	subs	r0, r2, r0
 800a5de:	4770      	bx	lr

0800a5e0 <ucdr_buffer_remaining>:
 800a5e0:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800a5e4:	1a10      	subs	r0, r2, r0
 800a5e6:	4770      	bx	lr

0800a5e8 <ucdr_check_final_buffer_behavior_array>:
 800a5e8:	b538      	push	{r3, r4, r5, lr}
 800a5ea:	7d83      	ldrb	r3, [r0, #22]
 800a5ec:	b963      	cbnz	r3, 800a608 <ucdr_check_final_buffer_behavior_array+0x20>
 800a5ee:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	4604      	mov	r4, r0
 800a5f6:	460d      	mov	r5, r1
 800a5f8:	d308      	bcc.n	800a60c <ucdr_check_final_buffer_behavior_array+0x24>
 800a5fa:	b139      	cbz	r1, 800a60c <ucdr_check_final_buffer_behavior_array+0x24>
 800a5fc:	6983      	ldr	r3, [r0, #24]
 800a5fe:	b163      	cbz	r3, 800a61a <ucdr_check_final_buffer_behavior_array+0x32>
 800a600:	69c1      	ldr	r1, [r0, #28]
 800a602:	4798      	blx	r3
 800a604:	75a0      	strb	r0, [r4, #22]
 800a606:	b108      	cbz	r0, 800a60c <ucdr_check_final_buffer_behavior_array+0x24>
 800a608:	2000      	movs	r0, #0
 800a60a:	bd38      	pop	{r3, r4, r5, pc}
 800a60c:	4620      	mov	r0, r4
 800a60e:	f7ff ffe7 	bl	800a5e0 <ucdr_buffer_remaining>
 800a612:	42a8      	cmp	r0, r5
 800a614:	bf28      	it	cs
 800a616:	4628      	movcs	r0, r5
 800a618:	bd38      	pop	{r3, r4, r5, pc}
 800a61a:	2301      	movs	r3, #1
 800a61c:	7583      	strb	r3, [r0, #22]
 800a61e:	e7f3      	b.n	800a608 <ucdr_check_final_buffer_behavior_array+0x20>

0800a620 <ucdr_advance_buffer>:
 800a620:	b538      	push	{r3, r4, r5, lr}
 800a622:	4604      	mov	r4, r0
 800a624:	460d      	mov	r5, r1
 800a626:	f7ff ff59 	bl	800a4dc <ucdr_check_buffer_available_for>
 800a62a:	b178      	cbz	r0, 800a64c <ucdr_advance_buffer+0x2c>
 800a62c:	68a3      	ldr	r3, [r4, #8]
 800a62e:	6921      	ldr	r1, [r4, #16]
 800a630:	442b      	add	r3, r5
 800a632:	60a3      	str	r3, [r4, #8]
 800a634:	2301      	movs	r3, #1
 800a636:	4429      	add	r1, r5
 800a638:	7563      	strb	r3, [r4, #21]
 800a63a:	6121      	str	r1, [r4, #16]
 800a63c:	bd38      	pop	{r3, r4, r5, pc}
 800a63e:	68a2      	ldr	r2, [r4, #8]
 800a640:	6923      	ldr	r3, [r4, #16]
 800a642:	4402      	add	r2, r0
 800a644:	4403      	add	r3, r0
 800a646:	1a2d      	subs	r5, r5, r0
 800a648:	60a2      	str	r2, [r4, #8]
 800a64a:	6123      	str	r3, [r4, #16]
 800a64c:	2201      	movs	r2, #1
 800a64e:	4629      	mov	r1, r5
 800a650:	4620      	mov	r0, r4
 800a652:	f7ff ffc9 	bl	800a5e8 <ucdr_check_final_buffer_behavior_array>
 800a656:	2800      	cmp	r0, #0
 800a658:	d1f1      	bne.n	800a63e <ucdr_advance_buffer+0x1e>
 800a65a:	2301      	movs	r3, #1
 800a65c:	7563      	strb	r3, [r4, #21]
 800a65e:	bd38      	pop	{r3, r4, r5, pc}

0800a660 <rcl_get_zero_initialized_node>:
 800a660:	4a03      	ldr	r2, [pc, #12]	; (800a670 <rcl_get_zero_initialized_node+0x10>)
 800a662:	4603      	mov	r3, r0
 800a664:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a668:	e883 0003 	stmia.w	r3, {r0, r1}
 800a66c:	4618      	mov	r0, r3
 800a66e:	4770      	bx	lr
 800a670:	08016870 	.word	0x08016870

0800a674 <rcl_node_init>:
 800a674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a678:	b09b      	sub	sp, #108	; 0x6c
 800a67a:	4604      	mov	r4, r0
 800a67c:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 800a680:	f04f 0c00 	mov.w	ip, #0
 800a684:	a815      	add	r0, sp, #84	; 0x54
 800a686:	460e      	mov	r6, r1
 800a688:	4615      	mov	r5, r2
 800a68a:	461f      	mov	r7, r3
 800a68c:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 800a690:	f006 f90a 	bl	80108a8 <rcl_guard_condition_get_default_options>
 800a694:	f1b8 0f00 	cmp.w	r8, #0
 800a698:	f000 80fd 	beq.w	800a896 <rcl_node_init+0x222>
 800a69c:	f108 0b04 	add.w	fp, r8, #4
 800a6a0:	4658      	mov	r0, fp
 800a6a2:	f001 f9c3 	bl	800ba2c <rcutils_allocator_is_valid>
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	f000 80f5 	beq.w	800a896 <rcl_node_init+0x222>
 800a6ac:	2e00      	cmp	r6, #0
 800a6ae:	f000 80f2 	beq.w	800a896 <rcl_node_init+0x222>
 800a6b2:	2d00      	cmp	r5, #0
 800a6b4:	f000 80ef 	beq.w	800a896 <rcl_node_init+0x222>
 800a6b8:	2c00      	cmp	r4, #0
 800a6ba:	f000 80ec 	beq.w	800a896 <rcl_node_init+0x222>
 800a6be:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a6c2:	f1b9 0f00 	cmp.w	r9, #0
 800a6c6:	f040 8112 	bne.w	800a8ee <rcl_node_init+0x27a>
 800a6ca:	2f00      	cmp	r7, #0
 800a6cc:	f000 80e3 	beq.w	800a896 <rcl_node_init+0x222>
 800a6d0:	4638      	mov	r0, r7
 800a6d2:	f005 fdfd 	bl	80102d0 <rcl_context_is_valid>
 800a6d6:	4682      	mov	sl, r0
 800a6d8:	2800      	cmp	r0, #0
 800a6da:	f000 80e2 	beq.w	800a8a2 <rcl_node_init+0x22e>
 800a6de:	464a      	mov	r2, r9
 800a6e0:	a914      	add	r1, sp, #80	; 0x50
 800a6e2:	4630      	mov	r0, r6
 800a6e4:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 800a6e8:	f001 fdb6 	bl	800c258 <rmw_validate_node_name>
 800a6ec:	4681      	mov	r9, r0
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	f040 80d3 	bne.w	800a89a <rcl_node_init+0x226>
 800a6f4:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	f040 8105 	bne.w	800a906 <rcl_node_init+0x292>
 800a6fc:	4628      	mov	r0, r5
 800a6fe:	f7f5 fd91 	bl	8000224 <strlen>
 800a702:	2800      	cmp	r0, #0
 800a704:	f040 80d0 	bne.w	800a8a8 <rcl_node_init+0x234>
 800a708:	4d8e      	ldr	r5, [pc, #568]	; (800a944 <rcl_node_init+0x2d0>)
 800a70a:	a914      	add	r1, sp, #80	; 0x50
 800a70c:	2200      	movs	r2, #0
 800a70e:	4628      	mov	r0, r5
 800a710:	f001 fd84 	bl	800c21c <rmw_validate_namespace>
 800a714:	4681      	mov	r9, r0
 800a716:	2800      	cmp	r0, #0
 800a718:	f040 80bf 	bne.w	800a89a <rcl_node_init+0x226>
 800a71c:	4682      	mov	sl, r0
 800a71e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a720:	2b00      	cmp	r3, #0
 800a722:	f040 80f5 	bne.w	800a910 <rcl_node_init+0x29c>
 800a726:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a72a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800a72e:	9307      	str	r3, [sp, #28]
 800a730:	2030      	movs	r0, #48	; 0x30
 800a732:	4790      	blx	r2
 800a734:	4681      	mov	r9, r0
 800a736:	6060      	str	r0, [r4, #4]
 800a738:	2800      	cmp	r0, #0
 800a73a:	f000 80de 	beq.w	800a8fa <rcl_node_init+0x286>
 800a73e:	9b07      	ldr	r3, [sp, #28]
 800a740:	e9c0 3308 	strd	r3, r3, [r0, #32]
 800a744:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 800a748:	a80a      	add	r0, sp, #40	; 0x28
 800a74a:	f000 f95d 	bl	800aa08 <rcl_node_get_default_options>
 800a74e:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800a752:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a756:	46cc      	mov	ip, r9
 800a758:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a75c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800a760:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800a764:	6861      	ldr	r1, [r4, #4]
 800a766:	6027      	str	r7, [r4, #0]
 800a768:	4640      	mov	r0, r8
 800a76a:	f000 f969 	bl	800aa40 <rcl_node_options_copy>
 800a76e:	2800      	cmp	r0, #0
 800a770:	d167      	bne.n	800a842 <rcl_node_init+0x1ce>
 800a772:	4628      	mov	r0, r5
 800a774:	f7f5 fd56 	bl	8000224 <strlen>
 800a778:	4428      	add	r0, r5
 800a77a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a77e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800a782:	2b2f      	cmp	r3, #47	; 0x2f
 800a784:	bf08      	it	eq
 800a786:	4970      	ldreq	r1, [pc, #448]	; (800a948 <rcl_node_init+0x2d4>)
 800a788:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a78c:	bf18      	it	ne
 800a78e:	496f      	ldrne	r1, [pc, #444]	; (800a94c <rcl_node_init+0x2d8>)
 800a790:	9604      	str	r6, [sp, #16]
 800a792:	e9cd 1502 	strd	r1, r5, [sp, #8]
 800a796:	e9cd 3200 	strd	r3, r2, [sp]
 800a79a:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800a79e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a7a2:	f001 f97f 	bl	800baa4 <rcutils_format_string_limit>
 800a7a6:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 800a7aa:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a7ae:	f8d9 3000 	ldr.w	r3, [r9]
 800a7b2:	9313      	str	r3, [sp, #76]	; 0x4c
 800a7b4:	1c59      	adds	r1, r3, #1
 800a7b6:	f000 80b7 	beq.w	800a928 <rcl_node_init+0x2b4>
 800a7ba:	683a      	ldr	r2, [r7, #0]
 800a7bc:	f8c9 301c 	str.w	r3, [r9, #28]
 800a7c0:	6952      	ldr	r2, [r2, #20]
 800a7c2:	6821      	ldr	r1, [r4, #0]
 800a7c4:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800a7c8:	6808      	ldr	r0, [r1, #0]
 800a7ca:	f1a2 0201 	sub.w	r2, r2, #1
 800a7ce:	fab2 f282 	clz	r2, r2
 800a7d2:	0952      	lsrs	r2, r2, #5
 800a7d4:	9200      	str	r2, [sp, #0]
 800a7d6:	4631      	mov	r1, r6
 800a7d8:	3028      	adds	r0, #40	; 0x28
 800a7da:	462a      	mov	r2, r5
 800a7dc:	f001 fe2a 	bl	800c434 <rmw_create_node>
 800a7e0:	6863      	ldr	r3, [r4, #4]
 800a7e2:	f8c9 0020 	str.w	r0, [r9, #32]
 800a7e6:	6a18      	ldr	r0, [r3, #32]
 800a7e8:	b368      	cbz	r0, 800a846 <rcl_node_init+0x1d2>
 800a7ea:	f001 feb7 	bl	800c55c <rmw_node_get_graph_guard_condition>
 800a7ee:	4681      	mov	r9, r0
 800a7f0:	b338      	cbz	r0, 800a842 <rcl_node_init+0x1ce>
 800a7f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a7f6:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800a7fa:	6866      	ldr	r6, [r4, #4]
 800a7fc:	2008      	movs	r0, #8
 800a7fe:	4798      	blx	r3
 800a800:	6863      	ldr	r3, [r4, #4]
 800a802:	6270      	str	r0, [r6, #36]	; 0x24
 800a804:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800a806:	b1f6      	cbz	r6, 800a846 <rcl_node_init+0x1d2>
 800a808:	a808      	add	r0, sp, #32
 800a80a:	f005 ff6b 	bl	80106e4 <rcl_get_zero_initialized_guard_condition>
 800a80e:	a808      	add	r0, sp, #32
 800a810:	c803      	ldmia	r0, {r0, r1}
 800a812:	e886 0003 	stmia.w	r6, {r0, r1}
 800a816:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800a81a:	ae15      	add	r6, sp, #84	; 0x54
 800a81c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a81e:	f8db 3000 	ldr.w	r3, [fp]
 800a822:	6033      	str	r3, [r6, #0]
 800a824:	ab1a      	add	r3, sp, #104	; 0x68
 800a826:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800a82a:	6866      	ldr	r6, [r4, #4]
 800a82c:	6a76      	ldr	r6, [r6, #36]	; 0x24
 800a82e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a832:	4649      	mov	r1, r9
 800a834:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a836:	4630      	mov	r0, r6
 800a838:	463a      	mov	r2, r7
 800a83a:	f005 ffb7 	bl	80107ac <rcl_guard_condition_init_from_rmw>
 800a83e:	4681      	mov	r9, r0
 800a840:	b328      	cbz	r0, 800a88e <rcl_node_init+0x21a>
 800a842:	6863      	ldr	r3, [r4, #4]
 800a844:	b1f3      	cbz	r3, 800a884 <rcl_node_init+0x210>
 800a846:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a848:	b128      	cbz	r0, 800a856 <rcl_node_init+0x1e2>
 800a84a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a84e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800a852:	4798      	blx	r3
 800a854:	6863      	ldr	r3, [r4, #4]
 800a856:	6a18      	ldr	r0, [r3, #32]
 800a858:	b110      	cbz	r0, 800a860 <rcl_node_init+0x1ec>
 800a85a:	f001 fe03 	bl	800c464 <rmw_destroy_node>
 800a85e:	6863      	ldr	r3, [r4, #4]
 800a860:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a862:	b148      	cbz	r0, 800a878 <rcl_node_init+0x204>
 800a864:	f005 fffa 	bl	801085c <rcl_guard_condition_fini>
 800a868:	6862      	ldr	r2, [r4, #4]
 800a86a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a86e:	6a50      	ldr	r0, [r2, #36]	; 0x24
 800a870:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800a874:	4798      	blx	r3
 800a876:	6863      	ldr	r3, [r4, #4]
 800a878:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800a87c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800a880:	4618      	mov	r0, r3
 800a882:	4790      	blx	r2
 800a884:	2300      	movs	r3, #0
 800a886:	e9c4 3300 	strd	r3, r3, [r4]
 800a88a:	f04f 0901 	mov.w	r9, #1
 800a88e:	f1ba 0f00 	cmp.w	sl, #0
 800a892:	d125      	bne.n	800a8e0 <rcl_node_init+0x26c>
 800a894:	e001      	b.n	800a89a <rcl_node_init+0x226>
 800a896:	f04f 090b 	mov.w	r9, #11
 800a89a:	4648      	mov	r0, r9
 800a89c:	b01b      	add	sp, #108	; 0x6c
 800a89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8a2:	f04f 0965 	mov.w	r9, #101	; 0x65
 800a8a6:	e7f8      	b.n	800a89a <rcl_node_init+0x226>
 800a8a8:	782b      	ldrb	r3, [r5, #0]
 800a8aa:	2b2f      	cmp	r3, #47	; 0x2f
 800a8ac:	f43f af2d 	beq.w	800a70a <rcl_node_init+0x96>
 800a8b0:	4927      	ldr	r1, [pc, #156]	; (800a950 <rcl_node_init+0x2dc>)
 800a8b2:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a8b6:	9300      	str	r3, [sp, #0]
 800a8b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a8bc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a8c0:	9503      	str	r5, [sp, #12]
 800a8c2:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800a8c6:	f001 f8ed 	bl	800baa4 <rcutils_format_string_limit>
 800a8ca:	4605      	mov	r5, r0
 800a8cc:	b348      	cbz	r0, 800a922 <rcl_node_init+0x2ae>
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	a914      	add	r1, sp, #80	; 0x50
 800a8d2:	9214      	str	r2, [sp, #80]	; 0x50
 800a8d4:	f001 fca2 	bl	800c21c <rmw_validate_namespace>
 800a8d8:	4681      	mov	r9, r0
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	f43f af1f 	beq.w	800a71e <rcl_node_init+0xaa>
 800a8e0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a8e4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	4798      	blx	r3
 800a8ec:	e7d5      	b.n	800a89a <rcl_node_init+0x226>
 800a8ee:	f04f 0964 	mov.w	r9, #100	; 0x64
 800a8f2:	4648      	mov	r0, r9
 800a8f4:	b01b      	add	sp, #108	; 0x6c
 800a8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8fa:	f04f 090a 	mov.w	r9, #10
 800a8fe:	f1ba 0f00 	cmp.w	sl, #0
 800a902:	d1ed      	bne.n	800a8e0 <rcl_node_init+0x26c>
 800a904:	e7c9      	b.n	800a89a <rcl_node_init+0x226>
 800a906:	f001 fcf9 	bl	800c2fc <rmw_node_name_validation_result_string>
 800a90a:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 800a90e:	e7c4      	b.n	800a89a <rcl_node_init+0x226>
 800a910:	4618      	mov	r0, r3
 800a912:	f001 fc95 	bl	800c240 <rmw_namespace_validation_result_string>
 800a916:	f04f 09ca 	mov.w	r9, #202	; 0xca
 800a91a:	f1ba 0f00 	cmp.w	sl, #0
 800a91e:	d1df      	bne.n	800a8e0 <rcl_node_init+0x26c>
 800a920:	e7bb      	b.n	800a89a <rcl_node_init+0x226>
 800a922:	f04f 090a 	mov.w	r9, #10
 800a926:	e7b8      	b.n	800a89a <rcl_node_init+0x226>
 800a928:	a813      	add	r0, sp, #76	; 0x4c
 800a92a:	f005 fd3b 	bl	80103a4 <rcl_get_default_domain_id>
 800a92e:	2800      	cmp	r0, #0
 800a930:	d187      	bne.n	800a842 <rcl_node_init+0x1ce>
 800a932:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a934:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a938:	1c5a      	adds	r2, r3, #1
 800a93a:	bf04      	itt	eq
 800a93c:	9013      	streq	r0, [sp, #76]	; 0x4c
 800a93e:	4603      	moveq	r3, r0
 800a940:	e73b      	b.n	800a7ba <rcl_node_init+0x146>
 800a942:	bf00      	nop
 800a944:	08016858 	.word	0x08016858
 800a948:	08016860 	.word	0x08016860
 800a94c:	08016868 	.word	0x08016868
 800a950:	0801685c 	.word	0x0801685c

0800a954 <rcl_node_fini>:
 800a954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a956:	b320      	cbz	r0, 800a9a2 <rcl_node_fini+0x4e>
 800a958:	6845      	ldr	r5, [r0, #4]
 800a95a:	4604      	mov	r4, r0
 800a95c:	b1fd      	cbz	r5, 800a99e <rcl_node_fini+0x4a>
 800a95e:	6a28      	ldr	r0, [r5, #32]
 800a960:	68af      	ldr	r7, [r5, #8]
 800a962:	696e      	ldr	r6, [r5, #20]
 800a964:	f001 fd7e 	bl	800c464 <rmw_destroy_node>
 800a968:	6863      	ldr	r3, [r4, #4]
 800a96a:	4605      	mov	r5, r0
 800a96c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a96e:	f005 ff75 	bl	801085c <rcl_guard_condition_fini>
 800a972:	6863      	ldr	r3, [r4, #4]
 800a974:	ea55 0200 	orrs.w	r2, r5, r0
 800a978:	4631      	mov	r1, r6
 800a97a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a97c:	bf14      	ite	ne
 800a97e:	2501      	movne	r5, #1
 800a980:	2500      	moveq	r5, #0
 800a982:	47b8      	blx	r7
 800a984:	6863      	ldr	r3, [r4, #4]
 800a986:	4631      	mov	r1, r6
 800a988:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a98a:	47b8      	blx	r7
 800a98c:	6863      	ldr	r3, [r4, #4]
 800a98e:	4631      	mov	r1, r6
 800a990:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a992:	47b8      	blx	r7
 800a994:	6860      	ldr	r0, [r4, #4]
 800a996:	4631      	mov	r1, r6
 800a998:	47b8      	blx	r7
 800a99a:	2300      	movs	r3, #0
 800a99c:	6063      	str	r3, [r4, #4]
 800a99e:	4628      	mov	r0, r5
 800a9a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9a2:	25c8      	movs	r5, #200	; 0xc8
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a9a8 <rcl_node_is_valid_except_context>:
 800a9a8:	b128      	cbz	r0, 800a9b6 <rcl_node_is_valid_except_context+0xe>
 800a9aa:	6840      	ldr	r0, [r0, #4]
 800a9ac:	b118      	cbz	r0, 800a9b6 <rcl_node_is_valid_except_context+0xe>
 800a9ae:	6a00      	ldr	r0, [r0, #32]
 800a9b0:	3800      	subs	r0, #0
 800a9b2:	bf18      	it	ne
 800a9b4:	2001      	movne	r0, #1
 800a9b6:	4770      	bx	lr

0800a9b8 <rcl_node_is_valid>:
 800a9b8:	b130      	cbz	r0, 800a9c8 <rcl_node_is_valid+0x10>
 800a9ba:	6843      	ldr	r3, [r0, #4]
 800a9bc:	b123      	cbz	r3, 800a9c8 <rcl_node_is_valid+0x10>
 800a9be:	6a1b      	ldr	r3, [r3, #32]
 800a9c0:	b113      	cbz	r3, 800a9c8 <rcl_node_is_valid+0x10>
 800a9c2:	6800      	ldr	r0, [r0, #0]
 800a9c4:	f005 bc84 	b.w	80102d0 <rcl_context_is_valid>
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	4770      	bx	lr

0800a9cc <rcl_node_get_name>:
 800a9cc:	b120      	cbz	r0, 800a9d8 <rcl_node_get_name+0xc>
 800a9ce:	6840      	ldr	r0, [r0, #4]
 800a9d0:	b110      	cbz	r0, 800a9d8 <rcl_node_get_name+0xc>
 800a9d2:	6a00      	ldr	r0, [r0, #32]
 800a9d4:	b100      	cbz	r0, 800a9d8 <rcl_node_get_name+0xc>
 800a9d6:	6880      	ldr	r0, [r0, #8]
 800a9d8:	4770      	bx	lr
 800a9da:	bf00      	nop

0800a9dc <rcl_node_get_namespace>:
 800a9dc:	b120      	cbz	r0, 800a9e8 <rcl_node_get_namespace+0xc>
 800a9de:	6840      	ldr	r0, [r0, #4]
 800a9e0:	b110      	cbz	r0, 800a9e8 <rcl_node_get_namespace+0xc>
 800a9e2:	6a00      	ldr	r0, [r0, #32]
 800a9e4:	b100      	cbz	r0, 800a9e8 <rcl_node_get_namespace+0xc>
 800a9e6:	68c0      	ldr	r0, [r0, #12]
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop

0800a9ec <rcl_node_get_options>:
 800a9ec:	b128      	cbz	r0, 800a9fa <rcl_node_get_options+0xe>
 800a9ee:	6840      	ldr	r0, [r0, #4]
 800a9f0:	b118      	cbz	r0, 800a9fa <rcl_node_get_options+0xe>
 800a9f2:	6a03      	ldr	r3, [r0, #32]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	bf08      	it	eq
 800a9f8:	2000      	moveq	r0, #0
 800a9fa:	4770      	bx	lr

0800a9fc <rcl_node_get_rmw_handle>:
 800a9fc:	b110      	cbz	r0, 800aa04 <rcl_node_get_rmw_handle+0x8>
 800a9fe:	6840      	ldr	r0, [r0, #4]
 800aa00:	b100      	cbz	r0, 800aa04 <rcl_node_get_rmw_handle+0x8>
 800aa02:	6a00      	ldr	r0, [r0, #32]
 800aa04:	4770      	bx	lr
 800aa06:	bf00      	nop

0800aa08 <rcl_node_get_default_options>:
 800aa08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa0a:	b087      	sub	sp, #28
 800aa0c:	4607      	mov	r7, r0
 800aa0e:	466d      	mov	r5, sp
 800aa10:	4668      	mov	r0, sp
 800aa12:	f000 fffd 	bl	800ba10 <rcutils_get_default_allocator>
 800aa16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa18:	4c08      	ldr	r4, [pc, #32]	; (800aa3c <rcl_node_get_default_options+0x34>)
 800aa1a:	f8d5 c000 	ldr.w	ip, [r5]
 800aa1e:	1d26      	adds	r6, r4, #4
 800aa20:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800aa22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa24:	463d      	mov	r5, r7
 800aa26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aa28:	f8c6 c000 	str.w	ip, [r6]
 800aa2c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800aa30:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800aa34:	4638      	mov	r0, r7
 800aa36:	b007      	add	sp, #28
 800aa38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	20000064 	.word	0x20000064

0800aa40 <rcl_node_options_copy>:
 800aa40:	b1c8      	cbz	r0, 800aa76 <rcl_node_options_copy+0x36>
 800aa42:	b4f0      	push	{r4, r5, r6, r7}
 800aa44:	460f      	mov	r7, r1
 800aa46:	b199      	cbz	r1, 800aa70 <rcl_node_options_copy+0x30>
 800aa48:	4288      	cmp	r0, r1
 800aa4a:	4606      	mov	r6, r0
 800aa4c:	d010      	beq.n	800aa70 <rcl_node_options_copy+0x30>
 800aa4e:	4605      	mov	r5, r0
 800aa50:	460c      	mov	r4, r1
 800aa52:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa56:	f844 3b04 	str.w	r3, [r4], #4
 800aa5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa5e:	7e32      	ldrb	r2, [r6, #24]
 800aa60:	6829      	ldr	r1, [r5, #0]
 800aa62:	7e73      	ldrb	r3, [r6, #25]
 800aa64:	6021      	str	r1, [r4, #0]
 800aa66:	2000      	movs	r0, #0
 800aa68:	763a      	strb	r2, [r7, #24]
 800aa6a:	767b      	strb	r3, [r7, #25]
 800aa6c:	bcf0      	pop	{r4, r5, r6, r7}
 800aa6e:	4770      	bx	lr
 800aa70:	200b      	movs	r0, #11
 800aa72:	bcf0      	pop	{r4, r5, r6, r7}
 800aa74:	4770      	bx	lr
 800aa76:	200b      	movs	r0, #11
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop

0800aa7c <rcl_get_zero_initialized_publisher>:
 800aa7c:	4b01      	ldr	r3, [pc, #4]	; (800aa84 <rcl_get_zero_initialized_publisher+0x8>)
 800aa7e:	6818      	ldr	r0, [r3, #0]
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop
 800aa84:	08016878 	.word	0x08016878

0800aa88 <rcl_publisher_init>:
 800aa88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa8c:	b091      	sub	sp, #68	; 0x44
 800aa8e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800aa90:	b3d7      	cbz	r7, 800ab08 <rcl_publisher_init+0x80>
 800aa92:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800aa96:	4604      	mov	r4, r0
 800aa98:	4648      	mov	r0, r9
 800aa9a:	4688      	mov	r8, r1
 800aa9c:	4616      	mov	r6, r2
 800aa9e:	461d      	mov	r5, r3
 800aaa0:	f000 ffc4 	bl	800ba2c <rcutils_allocator_is_valid>
 800aaa4:	b380      	cbz	r0, 800ab08 <rcl_publisher_init+0x80>
 800aaa6:	b37c      	cbz	r4, 800ab08 <rcl_publisher_init+0x80>
 800aaa8:	f8d4 a000 	ldr.w	sl, [r4]
 800aaac:	f1ba 0f00 	cmp.w	sl, #0
 800aab0:	d004      	beq.n	800aabc <rcl_publisher_init+0x34>
 800aab2:	2564      	movs	r5, #100	; 0x64
 800aab4:	4628      	mov	r0, r5
 800aab6:	b011      	add	sp, #68	; 0x44
 800aab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aabc:	4640      	mov	r0, r8
 800aabe:	f7ff ff7b 	bl	800a9b8 <rcl_node_is_valid>
 800aac2:	b330      	cbz	r0, 800ab12 <rcl_publisher_init+0x8a>
 800aac4:	b306      	cbz	r6, 800ab08 <rcl_publisher_init+0x80>
 800aac6:	b1fd      	cbz	r5, 800ab08 <rcl_publisher_init+0x80>
 800aac8:	46ce      	mov	lr, r9
 800aaca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800aace:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800aad2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aad6:	f8de 3000 	ldr.w	r3, [lr]
 800aada:	f8cc 3000 	str.w	r3, [ip]
 800aade:	f001 f931 	bl	800bd44 <rcutils_get_zero_initialized_string_map>
 800aae2:	ab10      	add	r3, sp, #64	; 0x40
 800aae4:	4684      	mov	ip, r0
 800aae6:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800aaea:	f8cd c020 	str.w	ip, [sp, #32]
 800aaee:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800aaf2:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800aaf6:	4651      	mov	r1, sl
 800aaf8:	a808      	add	r0, sp, #32
 800aafa:	f001 f99d 	bl	800be38 <rcutils_string_map_init>
 800aafe:	b150      	cbz	r0, 800ab16 <rcl_publisher_init+0x8e>
 800ab00:	280a      	cmp	r0, #10
 800ab02:	d013      	beq.n	800ab2c <rcl_publisher_init+0xa4>
 800ab04:	2501      	movs	r5, #1
 800ab06:	e7d5      	b.n	800aab4 <rcl_publisher_init+0x2c>
 800ab08:	250b      	movs	r5, #11
 800ab0a:	4628      	mov	r0, r5
 800ab0c:	b011      	add	sp, #68	; 0x44
 800ab0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab12:	25c8      	movs	r5, #200	; 0xc8
 800ab14:	e7ce      	b.n	800aab4 <rcl_publisher_init+0x2c>
 800ab16:	a808      	add	r0, sp, #32
 800ab18:	f005 fdde 	bl	80106d8 <rcl_get_default_topic_name_substitutions>
 800ab1c:	4682      	mov	sl, r0
 800ab1e:	b138      	cbz	r0, 800ab30 <rcl_publisher_init+0xa8>
 800ab20:	a808      	add	r0, sp, #32
 800ab22:	f001 f9c9 	bl	800beb8 <rcutils_string_map_fini>
 800ab26:	f1ba 0f0a 	cmp.w	sl, #10
 800ab2a:	d1eb      	bne.n	800ab04 <rcl_publisher_init+0x7c>
 800ab2c:	250a      	movs	r5, #10
 800ab2e:	e7c1      	b.n	800aab4 <rcl_publisher_init+0x2c>
 800ab30:	4640      	mov	r0, r8
 800ab32:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ab36:	f7ff ff49 	bl	800a9cc <rcl_node_get_name>
 800ab3a:	4682      	mov	sl, r0
 800ab3c:	4640      	mov	r0, r8
 800ab3e:	f7ff ff4d 	bl	800a9dc <rcl_node_get_namespace>
 800ab42:	4686      	mov	lr, r0
 800ab44:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800ab48:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800ab4c:	46ec      	mov	ip, sp
 800ab4e:	f8cd b014 	str.w	fp, [sp, #20]
 800ab52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab56:	f8d9 3000 	ldr.w	r3, [r9]
 800ab5a:	f8cc 3000 	str.w	r3, [ip]
 800ab5e:	4628      	mov	r0, r5
 800ab60:	4651      	mov	r1, sl
 800ab62:	4672      	mov	r2, lr
 800ab64:	ab08      	add	r3, sp, #32
 800ab66:	f005 fc51 	bl	801040c <rcl_expand_topic_name>
 800ab6a:	4605      	mov	r5, r0
 800ab6c:	a808      	add	r0, sp, #32
 800ab6e:	f001 f9a3 	bl	800beb8 <rcutils_string_map_fini>
 800ab72:	b920      	cbnz	r0, 800ab7e <rcl_publisher_init+0xf6>
 800ab74:	b15d      	cbz	r5, 800ab8e <rcl_publisher_init+0x106>
 800ab76:	2d67      	cmp	r5, #103	; 0x67
 800ab78:	d002      	beq.n	800ab80 <rcl_publisher_init+0xf8>
 800ab7a:	2d69      	cmp	r5, #105	; 0x69
 800ab7c:	d05f      	beq.n	800ac3e <rcl_publisher_init+0x1b6>
 800ab7e:	2501      	movs	r5, #1
 800ab80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab82:	2800      	cmp	r0, #0
 800ab84:	d096      	beq.n	800aab4 <rcl_publisher_init+0x2c>
 800ab86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab88:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ab8a:	4798      	blx	r3
 800ab8c:	e792      	b.n	800aab4 <rcl_publisher_init+0x2c>
 800ab8e:	4640      	mov	r0, r8
 800ab90:	f7ff ff2c 	bl	800a9ec <rcl_node_get_options>
 800ab94:	2800      	cmp	r0, #0
 800ab96:	d0f2      	beq.n	800ab7e <rcl_publisher_init+0xf6>
 800ab98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab9a:	f7f5 fb43 	bl	8000224 <strlen>
 800ab9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aba0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800aba2:	3001      	adds	r0, #1
 800aba4:	4798      	blx	r3
 800aba6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aba8:	9107      	str	r1, [sp, #28]
 800abaa:	4681      	mov	r9, r0
 800abac:	4608      	mov	r0, r1
 800abae:	f7f5 fb39 	bl	8000224 <strlen>
 800abb2:	9907      	ldr	r1, [sp, #28]
 800abb4:	1c42      	adds	r2, r0, #1
 800abb6:	4648      	mov	r0, r9
 800abb8:	f00a f9e2 	bl	8014f80 <memcpy>
 800abbc:	462a      	mov	r2, r5
 800abbe:	4648      	mov	r0, r9
 800abc0:	a90a      	add	r1, sp, #40	; 0x28
 800abc2:	f001 fa57 	bl	800c074 <rmw_validate_full_topic_name>
 800abc6:	2800      	cmp	r0, #0
 800abc8:	d137      	bne.n	800ac3a <rcl_publisher_init+0x1b2>
 800abca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d138      	bne.n	800ac42 <rcl_publisher_init+0x1ba>
 800abd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abd2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800abd4:	20c0      	movs	r0, #192	; 0xc0
 800abd6:	4798      	blx	r3
 800abd8:	6020      	str	r0, [r4, #0]
 800abda:	b3a0      	cbz	r0, 800ac46 <rcl_publisher_init+0x1be>
 800abdc:	4640      	mov	r0, r8
 800abde:	f7ff ff0d 	bl	800a9fc <rcl_node_get_rmw_handle>
 800abe2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800abe6:	9300      	str	r3, [sp, #0]
 800abe8:	4631      	mov	r1, r6
 800abea:	463b      	mov	r3, r7
 800abec:	464a      	mov	r2, r9
 800abee:	6825      	ldr	r5, [r4, #0]
 800abf0:	f001 fd1e 	bl	800c630 <rmw_create_publisher>
 800abf4:	6821      	ldr	r1, [r4, #0]
 800abf6:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 800abfa:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 800abfe:	b388      	cbz	r0, 800ac64 <rcl_publisher_init+0x1dc>
 800ac00:	3168      	adds	r1, #104	; 0x68
 800ac02:	f001 fdef 	bl	800c7e4 <rmw_publisher_get_actual_qos>
 800ac06:	6823      	ldr	r3, [r4, #0]
 800ac08:	4605      	mov	r5, r0
 800ac0a:	b9f0      	cbnz	r0, 800ac4a <rcl_publisher_init+0x1c2>
 800ac0c:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800ac10:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800ac14:	4618      	mov	r0, r3
 800ac16:	2268      	movs	r2, #104	; 0x68
 800ac18:	4639      	mov	r1, r7
 800ac1a:	f00a f9b1 	bl	8014f80 <memcpy>
 800ac1e:	f8d8 2000 	ldr.w	r2, [r8]
 800ac22:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 800ac26:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac28:	b110      	cbz	r0, 800ac30 <rcl_publisher_init+0x1a8>
 800ac2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac2c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ac2e:	4798      	blx	r3
 800ac30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac32:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ac34:	4648      	mov	r0, r9
 800ac36:	4798      	blx	r3
 800ac38:	e73c      	b.n	800aab4 <rcl_publisher_init+0x2c>
 800ac3a:	2501      	movs	r5, #1
 800ac3c:	e7f3      	b.n	800ac26 <rcl_publisher_init+0x19e>
 800ac3e:	2567      	movs	r5, #103	; 0x67
 800ac40:	e79e      	b.n	800ab80 <rcl_publisher_init+0xf8>
 800ac42:	2567      	movs	r5, #103	; 0x67
 800ac44:	e7ef      	b.n	800ac26 <rcl_publisher_init+0x19e>
 800ac46:	250a      	movs	r5, #10
 800ac48:	e7ed      	b.n	800ac26 <rcl_publisher_init+0x19e>
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d0f5      	beq.n	800ac3a <rcl_publisher_init+0x1b2>
 800ac4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ac52:	b13b      	cbz	r3, 800ac64 <rcl_publisher_init+0x1dc>
 800ac54:	4640      	mov	r0, r8
 800ac56:	f7ff fed1 	bl	800a9fc <rcl_node_get_rmw_handle>
 800ac5a:	6823      	ldr	r3, [r4, #0]
 800ac5c:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800ac60:	f001 fdce 	bl	800c800 <rmw_destroy_publisher>
 800ac64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac66:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ac68:	6820      	ldr	r0, [r4, #0]
 800ac6a:	4798      	blx	r3
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	6023      	str	r3, [r4, #0]
 800ac70:	2501      	movs	r5, #1
 800ac72:	e7d8      	b.n	800ac26 <rcl_publisher_init+0x19e>

0800ac74 <rcl_publisher_get_default_options>:
 800ac74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac76:	4f0e      	ldr	r7, [pc, #56]	; (800acb0 <rcl_publisher_get_default_options+0x3c>)
 800ac78:	490e      	ldr	r1, [pc, #56]	; (800acb4 <rcl_publisher_get_default_options+0x40>)
 800ac7a:	b087      	sub	sp, #28
 800ac7c:	4606      	mov	r6, r0
 800ac7e:	2250      	movs	r2, #80	; 0x50
 800ac80:	4638      	mov	r0, r7
 800ac82:	f00a f97d 	bl	8014f80 <memcpy>
 800ac86:	466c      	mov	r4, sp
 800ac88:	4668      	mov	r0, sp
 800ac8a:	f000 fec1 	bl	800ba10 <rcutils_get_default_allocator>
 800ac8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ac90:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800ac94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ac96:	6823      	ldr	r3, [r4, #0]
 800ac98:	602b      	str	r3, [r5, #0]
 800ac9a:	f001 f9d3 	bl	800c044 <rmw_get_default_publisher_options>
 800ac9e:	4639      	mov	r1, r7
 800aca0:	6678      	str	r0, [r7, #100]	; 0x64
 800aca2:	2268      	movs	r2, #104	; 0x68
 800aca4:	4630      	mov	r0, r6
 800aca6:	f00a f96b 	bl	8014f80 <memcpy>
 800acaa:	4630      	mov	r0, r6
 800acac:	b007      	add	sp, #28
 800acae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acb0:	2000c0a0 	.word	0x2000c0a0
 800acb4:	08016880 	.word	0x08016880

0800acb8 <rcl_publish>:
 800acb8:	b1f8      	cbz	r0, 800acfa <rcl_publish+0x42>
 800acba:	6803      	ldr	r3, [r0, #0]
 800acbc:	b570      	push	{r4, r5, r6, lr}
 800acbe:	4604      	mov	r4, r0
 800acc0:	b1b3      	cbz	r3, 800acf0 <rcl_publish+0x38>
 800acc2:	4616      	mov	r6, r2
 800acc4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800acc8:	b192      	cbz	r2, 800acf0 <rcl_publish+0x38>
 800acca:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800acce:	460d      	mov	r5, r1
 800acd0:	f005 fafe 	bl	80102d0 <rcl_context_is_valid>
 800acd4:	b160      	cbz	r0, 800acf0 <rcl_publish+0x38>
 800acd6:	6823      	ldr	r3, [r4, #0]
 800acd8:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 800acdc:	b140      	cbz	r0, 800acf0 <rcl_publish+0x38>
 800acde:	b155      	cbz	r5, 800acf6 <rcl_publish+0x3e>
 800ace0:	4632      	mov	r2, r6
 800ace2:	4629      	mov	r1, r5
 800ace4:	f001 fc44 	bl	800c570 <rmw_publish>
 800ace8:	3800      	subs	r0, #0
 800acea:	bf18      	it	ne
 800acec:	2001      	movne	r0, #1
 800acee:	bd70      	pop	{r4, r5, r6, pc}
 800acf0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800acf4:	bd70      	pop	{r4, r5, r6, pc}
 800acf6:	200b      	movs	r0, #11
 800acf8:	bd70      	pop	{r4, r5, r6, pc}
 800acfa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800acfe:	4770      	bx	lr

0800ad00 <rcl_get_zero_initialized_subscription>:
 800ad00:	4b01      	ldr	r3, [pc, #4]	; (800ad08 <rcl_get_zero_initialized_subscription+0x8>)
 800ad02:	6818      	ldr	r0, [r3, #0]
 800ad04:	4770      	bx	lr
 800ad06:	bf00      	nop
 800ad08:	080168d0 	.word	0x080168d0

0800ad0c <rcl_subscription_init>:
 800ad0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad10:	b091      	sub	sp, #68	; 0x44
 800ad12:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800ad14:	b1d7      	cbz	r7, 800ad4c <rcl_subscription_init+0x40>
 800ad16:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800ad1a:	4604      	mov	r4, r0
 800ad1c:	4648      	mov	r0, r9
 800ad1e:	4688      	mov	r8, r1
 800ad20:	4616      	mov	r6, r2
 800ad22:	461d      	mov	r5, r3
 800ad24:	f000 fe82 	bl	800ba2c <rcutils_allocator_is_valid>
 800ad28:	b180      	cbz	r0, 800ad4c <rcl_subscription_init+0x40>
 800ad2a:	b17c      	cbz	r4, 800ad4c <rcl_subscription_init+0x40>
 800ad2c:	4640      	mov	r0, r8
 800ad2e:	f7ff fe43 	bl	800a9b8 <rcl_node_is_valid>
 800ad32:	b380      	cbz	r0, 800ad96 <rcl_subscription_init+0x8a>
 800ad34:	b156      	cbz	r6, 800ad4c <rcl_subscription_init+0x40>
 800ad36:	b14d      	cbz	r5, 800ad4c <rcl_subscription_init+0x40>
 800ad38:	f8d4 a000 	ldr.w	sl, [r4]
 800ad3c:	f1ba 0f00 	cmp.w	sl, #0
 800ad40:	d009      	beq.n	800ad56 <rcl_subscription_init+0x4a>
 800ad42:	2564      	movs	r5, #100	; 0x64
 800ad44:	4628      	mov	r0, r5
 800ad46:	b011      	add	sp, #68	; 0x44
 800ad48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad4c:	250b      	movs	r5, #11
 800ad4e:	4628      	mov	r0, r5
 800ad50:	b011      	add	sp, #68	; 0x44
 800ad52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad56:	46ce      	mov	lr, r9
 800ad58:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ad5c:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800ad60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ad64:	f8de 3000 	ldr.w	r3, [lr]
 800ad68:	f8cc 3000 	str.w	r3, [ip]
 800ad6c:	f000 ffea 	bl	800bd44 <rcutils_get_zero_initialized_string_map>
 800ad70:	ab10      	add	r3, sp, #64	; 0x40
 800ad72:	4684      	mov	ip, r0
 800ad74:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800ad78:	f8cd c020 	str.w	ip, [sp, #32]
 800ad7c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ad80:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800ad84:	4651      	mov	r1, sl
 800ad86:	a808      	add	r0, sp, #32
 800ad88:	f001 f856 	bl	800be38 <rcutils_string_map_init>
 800ad8c:	b140      	cbz	r0, 800ada0 <rcl_subscription_init+0x94>
 800ad8e:	280a      	cmp	r0, #10
 800ad90:	d011      	beq.n	800adb6 <rcl_subscription_init+0xaa>
 800ad92:	2501      	movs	r5, #1
 800ad94:	e7db      	b.n	800ad4e <rcl_subscription_init+0x42>
 800ad96:	25c8      	movs	r5, #200	; 0xc8
 800ad98:	4628      	mov	r0, r5
 800ad9a:	b011      	add	sp, #68	; 0x44
 800ad9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada0:	a808      	add	r0, sp, #32
 800ada2:	f005 fc99 	bl	80106d8 <rcl_get_default_topic_name_substitutions>
 800ada6:	4682      	mov	sl, r0
 800ada8:	b138      	cbz	r0, 800adba <rcl_subscription_init+0xae>
 800adaa:	a808      	add	r0, sp, #32
 800adac:	f001 f884 	bl	800beb8 <rcutils_string_map_fini>
 800adb0:	f1ba 0f0a 	cmp.w	sl, #10
 800adb4:	d1ed      	bne.n	800ad92 <rcl_subscription_init+0x86>
 800adb6:	250a      	movs	r5, #10
 800adb8:	e7c9      	b.n	800ad4e <rcl_subscription_init+0x42>
 800adba:	4640      	mov	r0, r8
 800adbc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800adc0:	f7ff fe04 	bl	800a9cc <rcl_node_get_name>
 800adc4:	4682      	mov	sl, r0
 800adc6:	4640      	mov	r0, r8
 800adc8:	f7ff fe08 	bl	800a9dc <rcl_node_get_namespace>
 800adcc:	4686      	mov	lr, r0
 800adce:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800add2:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800add6:	46ec      	mov	ip, sp
 800add8:	f8cd b014 	str.w	fp, [sp, #20]
 800addc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ade0:	f8d9 3000 	ldr.w	r3, [r9]
 800ade4:	f8cc 3000 	str.w	r3, [ip]
 800ade8:	4628      	mov	r0, r5
 800adea:	4651      	mov	r1, sl
 800adec:	4672      	mov	r2, lr
 800adee:	ab08      	add	r3, sp, #32
 800adf0:	f005 fb0c 	bl	801040c <rcl_expand_topic_name>
 800adf4:	4605      	mov	r5, r0
 800adf6:	a808      	add	r0, sp, #32
 800adf8:	f001 f85e 	bl	800beb8 <rcutils_string_map_fini>
 800adfc:	b920      	cbnz	r0, 800ae08 <rcl_subscription_init+0xfc>
 800adfe:	b15d      	cbz	r5, 800ae18 <rcl_subscription_init+0x10c>
 800ae00:	2d67      	cmp	r5, #103	; 0x67
 800ae02:	d002      	beq.n	800ae0a <rcl_subscription_init+0xfe>
 800ae04:	2d69      	cmp	r5, #105	; 0x69
 800ae06:	d05a      	beq.n	800aebe <rcl_subscription_init+0x1b2>
 800ae08:	2501      	movs	r5, #1
 800ae0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	d09e      	beq.n	800ad4e <rcl_subscription_init+0x42>
 800ae10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae12:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ae14:	4798      	blx	r3
 800ae16:	e79a      	b.n	800ad4e <rcl_subscription_init+0x42>
 800ae18:	4640      	mov	r0, r8
 800ae1a:	f7ff fde7 	bl	800a9ec <rcl_node_get_options>
 800ae1e:	2800      	cmp	r0, #0
 800ae20:	d0f2      	beq.n	800ae08 <rcl_subscription_init+0xfc>
 800ae22:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae24:	f7f5 f9fe 	bl	8000224 <strlen>
 800ae28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae2a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ae2c:	3001      	adds	r0, #1
 800ae2e:	4798      	blx	r3
 800ae30:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae32:	9107      	str	r1, [sp, #28]
 800ae34:	4681      	mov	r9, r0
 800ae36:	4608      	mov	r0, r1
 800ae38:	f7f5 f9f4 	bl	8000224 <strlen>
 800ae3c:	9907      	ldr	r1, [sp, #28]
 800ae3e:	1c42      	adds	r2, r0, #1
 800ae40:	4648      	mov	r0, r9
 800ae42:	f00a f89d 	bl	8014f80 <memcpy>
 800ae46:	462a      	mov	r2, r5
 800ae48:	4648      	mov	r0, r9
 800ae4a:	a90a      	add	r1, sp, #40	; 0x28
 800ae4c:	f001 f912 	bl	800c074 <rmw_validate_full_topic_name>
 800ae50:	2800      	cmp	r0, #0
 800ae52:	d132      	bne.n	800aeba <rcl_subscription_init+0x1ae>
 800ae54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d133      	bne.n	800aec2 <rcl_subscription_init+0x1b6>
 800ae5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae5c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ae5e:	20c8      	movs	r0, #200	; 0xc8
 800ae60:	4798      	blx	r3
 800ae62:	6020      	str	r0, [r4, #0]
 800ae64:	b378      	cbz	r0, 800aec6 <rcl_subscription_init+0x1ba>
 800ae66:	4640      	mov	r0, r8
 800ae68:	f7ff fdc8 	bl	800a9fc <rcl_node_get_rmw_handle>
 800ae6c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ae70:	9300      	str	r3, [sp, #0]
 800ae72:	4631      	mov	r1, r6
 800ae74:	463b      	mov	r3, r7
 800ae76:	464a      	mov	r2, r9
 800ae78:	6825      	ldr	r5, [r4, #0]
 800ae7a:	f001 fd55 	bl	800c928 <rmw_create_subscription>
 800ae7e:	6821      	ldr	r1, [r4, #0]
 800ae80:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 800ae84:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 800ae88:	b368      	cbz	r0, 800aee6 <rcl_subscription_init+0x1da>
 800ae8a:	3170      	adds	r1, #112	; 0x70
 800ae8c:	f001 fe28 	bl	800cae0 <rmw_subscription_get_actual_qos>
 800ae90:	4605      	mov	r5, r0
 800ae92:	b9d0      	cbnz	r0, 800aeca <rcl_subscription_init+0x1be>
 800ae94:	6820      	ldr	r0, [r4, #0]
 800ae96:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800ae9a:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 800ae9e:	2270      	movs	r2, #112	; 0x70
 800aea0:	4639      	mov	r1, r7
 800aea2:	f00a f86d 	bl	8014f80 <memcpy>
 800aea6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aea8:	b110      	cbz	r0, 800aeb0 <rcl_subscription_init+0x1a4>
 800aeaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aeac:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800aeae:	4798      	blx	r3
 800aeb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aeb2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800aeb4:	4648      	mov	r0, r9
 800aeb6:	4798      	blx	r3
 800aeb8:	e749      	b.n	800ad4e <rcl_subscription_init+0x42>
 800aeba:	2501      	movs	r5, #1
 800aebc:	e7f3      	b.n	800aea6 <rcl_subscription_init+0x19a>
 800aebe:	2567      	movs	r5, #103	; 0x67
 800aec0:	e7a3      	b.n	800ae0a <rcl_subscription_init+0xfe>
 800aec2:	2567      	movs	r5, #103	; 0x67
 800aec4:	e7ef      	b.n	800aea6 <rcl_subscription_init+0x19a>
 800aec6:	250a      	movs	r5, #10
 800aec8:	e7ed      	b.n	800aea6 <rcl_subscription_init+0x19a>
 800aeca:	6823      	ldr	r3, [r4, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d0f4      	beq.n	800aeba <rcl_subscription_init+0x1ae>
 800aed0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800aed4:	b13b      	cbz	r3, 800aee6 <rcl_subscription_init+0x1da>
 800aed6:	4640      	mov	r0, r8
 800aed8:	f7ff fd90 	bl	800a9fc <rcl_node_get_rmw_handle>
 800aedc:	6823      	ldr	r3, [r4, #0]
 800aede:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800aee2:	f001 fe0b 	bl	800cafc <rmw_destroy_subscription>
 800aee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aee8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800aeea:	6820      	ldr	r0, [r4, #0]
 800aeec:	4798      	blx	r3
 800aeee:	2300      	movs	r3, #0
 800aef0:	6023      	str	r3, [r4, #0]
 800aef2:	2501      	movs	r5, #1
 800aef4:	e7d7      	b.n	800aea6 <rcl_subscription_init+0x19a>
 800aef6:	bf00      	nop

0800aef8 <rcl_subscription_fini>:
 800aef8:	b570      	push	{r4, r5, r6, lr}
 800aefa:	b300      	cbz	r0, 800af3e <rcl_subscription_fini+0x46>
 800aefc:	4604      	mov	r4, r0
 800aefe:	4608      	mov	r0, r1
 800af00:	460d      	mov	r5, r1
 800af02:	f7ff fd51 	bl	800a9a8 <rcl_node_is_valid_except_context>
 800af06:	b1f0      	cbz	r0, 800af46 <rcl_subscription_fini+0x4e>
 800af08:	6823      	ldr	r3, [r4, #0]
 800af0a:	b1ab      	cbz	r3, 800af38 <rcl_subscription_fini+0x40>
 800af0c:	4628      	mov	r0, r5
 800af0e:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 800af10:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 800af12:	f7ff fd73 	bl	800a9fc <rcl_node_get_rmw_handle>
 800af16:	b1c8      	cbz	r0, 800af4c <rcl_subscription_fini+0x54>
 800af18:	6823      	ldr	r3, [r4, #0]
 800af1a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800af1e:	f001 fded 	bl	800cafc <rmw_destroy_subscription>
 800af22:	4603      	mov	r3, r0
 800af24:	4629      	mov	r1, r5
 800af26:	6820      	ldr	r0, [r4, #0]
 800af28:	1e1d      	subs	r5, r3, #0
 800af2a:	bf18      	it	ne
 800af2c:	2501      	movne	r5, #1
 800af2e:	47b0      	blx	r6
 800af30:	2300      	movs	r3, #0
 800af32:	6023      	str	r3, [r4, #0]
 800af34:	4628      	mov	r0, r5
 800af36:	bd70      	pop	{r4, r5, r6, pc}
 800af38:	461d      	mov	r5, r3
 800af3a:	4628      	mov	r0, r5
 800af3c:	bd70      	pop	{r4, r5, r6, pc}
 800af3e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800af42:	4628      	mov	r0, r5
 800af44:	bd70      	pop	{r4, r5, r6, pc}
 800af46:	25c8      	movs	r5, #200	; 0xc8
 800af48:	4628      	mov	r0, r5
 800af4a:	bd70      	pop	{r4, r5, r6, pc}
 800af4c:	250b      	movs	r5, #11
 800af4e:	e7f1      	b.n	800af34 <rcl_subscription_fini+0x3c>

0800af50 <rcl_subscription_get_default_options>:
 800af50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af54:	4f12      	ldr	r7, [pc, #72]	; (800afa0 <rcl_subscription_get_default_options+0x50>)
 800af56:	4913      	ldr	r1, [pc, #76]	; (800afa4 <rcl_subscription_get_default_options+0x54>)
 800af58:	b088      	sub	sp, #32
 800af5a:	4606      	mov	r6, r0
 800af5c:	2250      	movs	r2, #80	; 0x50
 800af5e:	4638      	mov	r0, r7
 800af60:	f00a f80e 	bl	8014f80 <memcpy>
 800af64:	ac02      	add	r4, sp, #8
 800af66:	a802      	add	r0, sp, #8
 800af68:	f000 fd52 	bl	800ba10 <rcutils_get_default_allocator>
 800af6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800af6e:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800af72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800af74:	46e8      	mov	r8, sp
 800af76:	6823      	ldr	r3, [r4, #0]
 800af78:	602b      	str	r3, [r5, #0]
 800af7a:	4640      	mov	r0, r8
 800af7c:	f001 f864 	bl	800c048 <rmw_get_default_subscription_options>
 800af80:	e898 0003 	ldmia.w	r8, {r0, r1}
 800af84:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800af88:	e883 0003 	stmia.w	r3, {r0, r1}
 800af8c:	2270      	movs	r2, #112	; 0x70
 800af8e:	4639      	mov	r1, r7
 800af90:	4630      	mov	r0, r6
 800af92:	f009 fff5 	bl	8014f80 <memcpy>
 800af96:	4630      	mov	r0, r6
 800af98:	b008      	add	sp, #32
 800af9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af9e:	bf00      	nop
 800afa0:	2000c108 	.word	0x2000c108
 800afa4:	080168d8 	.word	0x080168d8

0800afa8 <rcl_take>:
 800afa8:	2800      	cmp	r0, #0
 800afaa:	d03f      	beq.n	800b02c <rcl_take+0x84>
 800afac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800afb0:	4617      	mov	r7, r2
 800afb2:	6802      	ldr	r2, [r0, #0]
 800afb4:	b09d      	sub	sp, #116	; 0x74
 800afb6:	4606      	mov	r6, r0
 800afb8:	b382      	cbz	r2, 800b01c <rcl_take+0x74>
 800afba:	4699      	mov	r9, r3
 800afbc:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800afc0:	b363      	cbz	r3, 800b01c <rcl_take+0x74>
 800afc2:	4688      	mov	r8, r1
 800afc4:	b381      	cbz	r1, 800b028 <rcl_take+0x80>
 800afc6:	2f00      	cmp	r7, #0
 800afc8:	d034      	beq.n	800b034 <rcl_take+0x8c>
 800afca:	a802      	add	r0, sp, #8
 800afcc:	ac02      	add	r4, sp, #8
 800afce:	f001 f83f 	bl	800c050 <rmw_get_zero_initialized_message_info>
 800afd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800afd4:	463d      	mov	r5, r7
 800afd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800afd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800afda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800afdc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800afe0:	6834      	ldr	r4, [r6, #0]
 800afe2:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
 800afe6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800afea:	2400      	movs	r4, #0
 800afec:	463b      	mov	r3, r7
 800afee:	4630      	mov	r0, r6
 800aff0:	f8cd 9000 	str.w	r9, [sp]
 800aff4:	4641      	mov	r1, r8
 800aff6:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 800affa:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
 800affe:	f001 fddb 	bl	800cbb8 <rmw_take_with_info>
 800b002:	4603      	mov	r3, r0
 800b004:	b9c0      	cbnz	r0, 800b038 <rcl_take+0x90>
 800b006:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 800b00a:	f240 1291 	movw	r2, #401	; 0x191
 800b00e:	2900      	cmp	r1, #0
 800b010:	bf08      	it	eq
 800b012:	4613      	moveq	r3, r2
 800b014:	4618      	mov	r0, r3
 800b016:	b01d      	add	sp, #116	; 0x74
 800b018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b01c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800b020:	4618      	mov	r0, r3
 800b022:	b01d      	add	sp, #116	; 0x74
 800b024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b028:	230b      	movs	r3, #11
 800b02a:	e7f3      	b.n	800b014 <rcl_take+0x6c>
 800b02c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800b030:	4618      	mov	r0, r3
 800b032:	4770      	bx	lr
 800b034:	af10      	add	r7, sp, #64	; 0x40
 800b036:	e7c8      	b.n	800afca <rcl_take+0x22>
 800b038:	f005 f92c 	bl	8010294 <rcl_convert_rmw_ret_to_rcl_ret>
 800b03c:	4603      	mov	r3, r0
 800b03e:	e7e9      	b.n	800b014 <rcl_take+0x6c>

0800b040 <rcl_subscription_get_rmw_handle>:
 800b040:	b118      	cbz	r0, 800b04a <rcl_subscription_get_rmw_handle+0xa>
 800b042:	6800      	ldr	r0, [r0, #0]
 800b044:	b108      	cbz	r0, 800b04a <rcl_subscription_get_rmw_handle+0xa>
 800b046:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800b04a:	4770      	bx	lr

0800b04c <_rclc_check_for_new_data>:
 800b04c:	b1e0      	cbz	r0, 800b088 <_rclc_check_for_new_data+0x3c>
 800b04e:	7803      	ldrb	r3, [r0, #0]
 800b050:	2b08      	cmp	r3, #8
 800b052:	d81b      	bhi.n	800b08c <_rclc_check_for_new_data+0x40>
 800b054:	e8df f003 	tbb	[pc, r3]
 800b058:	12161010 	.word	0x12161010
 800b05c:	05050512 	.word	0x05050512
 800b060:	14          	.byte	0x14
 800b061:	00          	.byte	0x00
 800b062:	6a0b      	ldr	r3, [r1, #32]
 800b064:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800b066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b06a:	3b00      	subs	r3, #0
 800b06c:	bf18      	it	ne
 800b06e:	2301      	movne	r3, #1
 800b070:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800b074:	2000      	movs	r0, #0
 800b076:	4770      	bx	lr
 800b078:	680b      	ldr	r3, [r1, #0]
 800b07a:	e7f3      	b.n	800b064 <_rclc_check_for_new_data+0x18>
 800b07c:	698b      	ldr	r3, [r1, #24]
 800b07e:	e7f1      	b.n	800b064 <_rclc_check_for_new_data+0x18>
 800b080:	688b      	ldr	r3, [r1, #8]
 800b082:	e7ef      	b.n	800b064 <_rclc_check_for_new_data+0x18>
 800b084:	690b      	ldr	r3, [r1, #16]
 800b086:	e7ed      	b.n	800b064 <_rclc_check_for_new_data+0x18>
 800b088:	200b      	movs	r0, #11
 800b08a:	4770      	bx	lr
 800b08c:	2300      	movs	r3, #0
 800b08e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800b092:	2001      	movs	r0, #1
 800b094:	4770      	bx	lr
 800b096:	bf00      	nop

0800b098 <_rclc_take_new_data>:
 800b098:	2800      	cmp	r0, #0
 800b09a:	d049      	beq.n	800b130 <_rclc_take_new_data+0x98>
 800b09c:	b510      	push	{r4, lr}
 800b09e:	7803      	ldrb	r3, [r0, #0]
 800b0a0:	b08e      	sub	sp, #56	; 0x38
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	2b08      	cmp	r3, #8
 800b0a6:	d84a      	bhi.n	800b13e <_rclc_take_new_data+0xa6>
 800b0a8:	e8df f003 	tbb	[pc, r3]
 800b0ac:	2b121515 	.word	0x2b121515
 800b0b0:	0505052b 	.word	0x0505052b
 800b0b4:	12          	.byte	0x12
 800b0b5:	00          	.byte	0x00
 800b0b6:	6a0b      	ldr	r3, [r1, #32]
 800b0b8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800b0ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0be:	b13b      	cbz	r3, 800b0d0 <_rclc_take_new_data+0x38>
 800b0c0:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800b0c4:	f104 0110 	add.w	r1, r4, #16
 800b0c8:	f005 ff62 	bl	8010f90 <rcl_take_request>
 800b0cc:	2800      	cmp	r0, #0
 800b0ce:	d131      	bne.n	800b134 <_rclc_take_new_data+0x9c>
 800b0d0:	2000      	movs	r0, #0
 800b0d2:	b00e      	add	sp, #56	; 0x38
 800b0d4:	bd10      	pop	{r4, pc}
 800b0d6:	680b      	ldr	r3, [r1, #0]
 800b0d8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800b0da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d0f6      	beq.n	800b0d0 <_rclc_take_new_data+0x38>
 800b0e2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	aa02      	add	r2, sp, #8
 800b0ea:	f7ff ff5d 	bl	800afa8 <rcl_take>
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	d0ef      	beq.n	800b0d2 <_rclc_take_new_data+0x3a>
 800b0f2:	f240 1391 	movw	r3, #401	; 0x191
 800b0f6:	4298      	cmp	r0, r3
 800b0f8:	d115      	bne.n	800b126 <_rclc_take_new_data+0x8e>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800b100:	e7e7      	b.n	800b0d2 <_rclc_take_new_data+0x3a>
 800b102:	698b      	ldr	r3, [r1, #24]
 800b104:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800b106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d0e0      	beq.n	800b0d0 <_rclc_take_new_data+0x38>
 800b10e:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800b112:	f104 0110 	add.w	r1, r4, #16
 800b116:	f005 f881 	bl	801021c <rcl_take_response>
 800b11a:	2800      	cmp	r0, #0
 800b11c:	d0d8      	beq.n	800b0d0 <_rclc_take_new_data+0x38>
 800b11e:	f240 13f5 	movw	r3, #501	; 0x1f5
 800b122:	4298      	cmp	r0, r3
 800b124:	d0d5      	beq.n	800b0d2 <_rclc_take_new_data+0x3a>
 800b126:	9001      	str	r0, [sp, #4]
 800b128:	f000 fca4 	bl	800ba74 <rcutils_reset_error>
 800b12c:	9801      	ldr	r0, [sp, #4]
 800b12e:	e7d0      	b.n	800b0d2 <_rclc_take_new_data+0x3a>
 800b130:	200b      	movs	r0, #11
 800b132:	4770      	bx	lr
 800b134:	f240 2359 	movw	r3, #601	; 0x259
 800b138:	4298      	cmp	r0, r3
 800b13a:	d0de      	beq.n	800b0fa <_rclc_take_new_data+0x62>
 800b13c:	e7f3      	b.n	800b126 <_rclc_take_new_data+0x8e>
 800b13e:	2001      	movs	r0, #1
 800b140:	e7c7      	b.n	800b0d2 <_rclc_take_new_data+0x3a>
 800b142:	bf00      	nop

0800b144 <rclc_executor_trigger_any>:
 800b144:	b170      	cbz	r0, 800b164 <rclc_executor_trigger_any+0x20>
 800b146:	b179      	cbz	r1, 800b168 <rclc_executor_trigger_any+0x24>
 800b148:	4603      	mov	r3, r0
 800b14a:	2200      	movs	r2, #0
 800b14c:	e005      	b.n	800b15a <rclc_executor_trigger_any+0x16>
 800b14e:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800b152:	3340      	adds	r3, #64	; 0x40
 800b154:	b930      	cbnz	r0, 800b164 <rclc_executor_trigger_any+0x20>
 800b156:	4291      	cmp	r1, r2
 800b158:	d005      	beq.n	800b166 <rclc_executor_trigger_any+0x22>
 800b15a:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800b15e:	3201      	adds	r2, #1
 800b160:	2800      	cmp	r0, #0
 800b162:	d1f4      	bne.n	800b14e <rclc_executor_trigger_any+0xa>
 800b164:	4770      	bx	lr
 800b166:	4770      	bx	lr
 800b168:	4608      	mov	r0, r1
 800b16a:	e7fb      	b.n	800b164 <rclc_executor_trigger_any+0x20>

0800b16c <_rclc_execute.part.0>:
 800b16c:	b530      	push	{r4, r5, lr}
 800b16e:	7803      	ldrb	r3, [r0, #0]
 800b170:	b083      	sub	sp, #12
 800b172:	4604      	mov	r4, r0
 800b174:	2b08      	cmp	r3, #8
 800b176:	d85b      	bhi.n	800b230 <_rclc_execute.part.0+0xc4>
 800b178:	e8df f003 	tbb	[pc, r3]
 800b17c:	3036271f 	.word	0x3036271f
 800b180:	0505053f 	.word	0x0505053f
 800b184:	1a          	.byte	0x1a
 800b185:	00          	.byte	0x00
 800b186:	2b06      	cmp	r3, #6
 800b188:	d049      	beq.n	800b21e <_rclc_execute.part.0+0xb2>
 800b18a:	2b07      	cmp	r3, #7
 800b18c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b18e:	d140      	bne.n	800b212 <_rclc_execute.part.0+0xa6>
 800b190:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800b194:	6880      	ldr	r0, [r0, #8]
 800b196:	4798      	blx	r3
 800b198:	f104 0110 	add.w	r1, r4, #16
 800b19c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b19e:	6860      	ldr	r0, [r4, #4]
 800b1a0:	f005 ff2e 	bl	8011000 <rcl_send_response>
 800b1a4:	b138      	cbz	r0, 800b1b6 <_rclc_execute.part.0+0x4a>
 800b1a6:	9001      	str	r0, [sp, #4]
 800b1a8:	f000 fc64 	bl	800ba74 <rcutils_reset_error>
 800b1ac:	9801      	ldr	r0, [sp, #4]
 800b1ae:	e002      	b.n	800b1b6 <_rclc_execute.part.0+0x4a>
 800b1b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b1b2:	4798      	blx	r3
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	b003      	add	sp, #12
 800b1b8:	bd30      	pop	{r4, r5, pc}
 800b1ba:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800b1be:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b1c0:	b96d      	cbnz	r5, 800b1de <_rclc_execute.part.0+0x72>
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	4798      	blx	r3
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	e7f5      	b.n	800b1b6 <_rclc_execute.part.0+0x4a>
 800b1ca:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800b1ce:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 800b1d2:	b1d5      	cbz	r5, 800b20a <_rclc_execute.part.0+0x9e>
 800b1d4:	6880      	ldr	r0, [r0, #8]
 800b1d6:	4798      	blx	r3
 800b1d8:	2000      	movs	r0, #0
 800b1da:	e7ec      	b.n	800b1b6 <_rclc_execute.part.0+0x4a>
 800b1dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b1de:	68a0      	ldr	r0, [r4, #8]
 800b1e0:	4798      	blx	r3
 800b1e2:	2000      	movs	r0, #0
 800b1e4:	b003      	add	sp, #12
 800b1e6:	bd30      	pop	{r4, r5, pc}
 800b1e8:	6840      	ldr	r0, [r0, #4]
 800b1ea:	f006 f9dd 	bl	80115a8 <rcl_timer_call>
 800b1ee:	f240 3321 	movw	r3, #801	; 0x321
 800b1f2:	4298      	cmp	r0, r3
 800b1f4:	d1d6      	bne.n	800b1a4 <_rclc_execute.part.0+0x38>
 800b1f6:	2000      	movs	r0, #0
 800b1f8:	e7dd      	b.n	800b1b6 <_rclc_execute.part.0+0x4a>
 800b1fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b1fc:	6880      	ldr	r0, [r0, #8]
 800b1fe:	f104 0110 	add.w	r1, r4, #16
 800b202:	4798      	blx	r3
 800b204:	2000      	movs	r0, #0
 800b206:	b003      	add	sp, #12
 800b208:	bd30      	pop	{r4, r5, pc}
 800b20a:	4628      	mov	r0, r5
 800b20c:	4798      	blx	r3
 800b20e:	4628      	mov	r0, r5
 800b210:	e7d1      	b.n	800b1b6 <_rclc_execute.part.0+0x4a>
 800b212:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800b214:	6880      	ldr	r0, [r0, #8]
 800b216:	4798      	blx	r3
 800b218:	f104 0110 	add.w	r1, r4, #16
 800b21c:	e7be      	b.n	800b19c <_rclc_execute.part.0+0x30>
 800b21e:	f100 0110 	add.w	r1, r0, #16
 800b222:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b224:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800b226:	6880      	ldr	r0, [r0, #8]
 800b228:	9101      	str	r1, [sp, #4]
 800b22a:	4798      	blx	r3
 800b22c:	9901      	ldr	r1, [sp, #4]
 800b22e:	e7b5      	b.n	800b19c <_rclc_execute.part.0+0x30>
 800b230:	2001      	movs	r0, #1
 800b232:	e7c0      	b.n	800b1b6 <_rclc_execute.part.0+0x4a>

0800b234 <rclc_executor_get_zero_initialized_executor>:
 800b234:	b510      	push	{r4, lr}
 800b236:	4903      	ldr	r1, [pc, #12]	; (800b244 <rclc_executor_get_zero_initialized_executor+0x10>)
 800b238:	4604      	mov	r4, r0
 800b23a:	2280      	movs	r2, #128	; 0x80
 800b23c:	f009 fea0 	bl	8014f80 <memcpy>
 800b240:	4620      	mov	r0, r4
 800b242:	bd10      	pop	{r4, pc}
 800b244:	08016928 	.word	0x08016928

0800b248 <rclc_executor_init>:
 800b248:	2800      	cmp	r0, #0
 800b24a:	d063      	beq.n	800b314 <rclc_executor_init+0xcc>
 800b24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b250:	460f      	mov	r7, r1
 800b252:	b0ae      	sub	sp, #184	; 0xb8
 800b254:	2900      	cmp	r1, #0
 800b256:	d055      	beq.n	800b304 <rclc_executor_init+0xbc>
 800b258:	4605      	mov	r5, r0
 800b25a:	4618      	mov	r0, r3
 800b25c:	4616      	mov	r6, r2
 800b25e:	4698      	mov	r8, r3
 800b260:	f000 fbe4 	bl	800ba2c <rcutils_allocator_is_valid>
 800b264:	2800      	cmp	r0, #0
 800b266:	d04d      	beq.n	800b304 <rclc_executor_init+0xbc>
 800b268:	2e00      	cmp	r6, #0
 800b26a:	d04b      	beq.n	800b304 <rclc_executor_init+0xbc>
 800b26c:	492e      	ldr	r1, [pc, #184]	; (800b328 <rclc_executor_init+0xe0>)
 800b26e:	2280      	movs	r2, #128	; 0x80
 800b270:	a80e      	add	r0, sp, #56	; 0x38
 800b272:	f009 fe85 	bl	8014f80 <memcpy>
 800b276:	2400      	movs	r4, #0
 800b278:	a90e      	add	r1, sp, #56	; 0x38
 800b27a:	2280      	movs	r2, #128	; 0x80
 800b27c:	4628      	mov	r0, r5
 800b27e:	f009 fe7f 	bl	8014f80 <memcpy>
 800b282:	602f      	str	r7, [r5, #0]
 800b284:	4668      	mov	r0, sp
 800b286:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800b28a:	466f      	mov	r7, sp
 800b28c:	f006 fbe6 	bl	8011a5c <rcl_get_zero_initialized_wait_set>
 800b290:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b292:	f105 0c14 	add.w	ip, r5, #20
 800b296:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b29a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b29c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b2a0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b2a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b2a6:	a31e      	add	r3, pc, #120	; (adr r3, 800b320 <rclc_executor_init+0xd8>)
 800b2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ac:	6839      	ldr	r1, [r7, #0]
 800b2ae:	f8cc 1000 	str.w	r1, [ip]
 800b2b2:	f8d8 7000 	ldr.w	r7, [r8]
 800b2b6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b2ba:	f8c5 8010 	str.w	r8, [r5, #16]
 800b2be:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
 800b2c2:	01b0      	lsls	r0, r6, #6
 800b2c4:	47b8      	blx	r7
 800b2c6:	6068      	str	r0, [r5, #4]
 800b2c8:	b908      	cbnz	r0, 800b2ce <rclc_executor_init+0x86>
 800b2ca:	e025      	b.n	800b318 <rclc_executor_init+0xd0>
 800b2cc:	6868      	ldr	r0, [r5, #4]
 800b2ce:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800b2d2:	4631      	mov	r1, r6
 800b2d4:	3401      	adds	r4, #1
 800b2d6:	f000 fa31 	bl	800b73c <rclc_executor_handle_init>
 800b2da:	42a6      	cmp	r6, r4
 800b2dc:	d1f6      	bne.n	800b2cc <rclc_executor_init+0x84>
 800b2de:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800b2e2:	f000 fa1f 	bl	800b724 <rclc_executor_handle_counters_zero_init>
 800b2e6:	686b      	ldr	r3, [r5, #4]
 800b2e8:	4a10      	ldr	r2, [pc, #64]	; (800b32c <rclc_executor_init+0xe4>)
 800b2ea:	672a      	str	r2, [r5, #112]	; 0x70
 800b2ec:	2000      	movs	r0, #0
 800b2ee:	6768      	str	r0, [r5, #116]	; 0x74
 800b2f0:	b163      	cbz	r3, 800b30c <rclc_executor_init+0xc4>
 800b2f2:	692b      	ldr	r3, [r5, #16]
 800b2f4:	b153      	cbz	r3, 800b30c <rclc_executor_init+0xc4>
 800b2f6:	68ab      	ldr	r3, [r5, #8]
 800b2f8:	b143      	cbz	r3, 800b30c <rclc_executor_init+0xc4>
 800b2fa:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 800b2fe:	b02e      	add	sp, #184	; 0xb8
 800b300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b304:	200b      	movs	r0, #11
 800b306:	b02e      	add	sp, #184	; 0xb8
 800b308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b30c:	4618      	mov	r0, r3
 800b30e:	b02e      	add	sp, #184	; 0xb8
 800b310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b314:	200b      	movs	r0, #11
 800b316:	4770      	bx	lr
 800b318:	200a      	movs	r0, #10
 800b31a:	e7f4      	b.n	800b306 <rclc_executor_init+0xbe>
 800b31c:	f3af 8000 	nop.w
 800b320:	3b9aca00 	.word	0x3b9aca00
 800b324:	00000000 	.word	0x00000000
 800b328:	08016928 	.word	0x08016928
 800b32c:	0800b145 	.word	0x0800b145

0800b330 <rclc_executor_add_subscription>:
 800b330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b334:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800b338:	b358      	cbz	r0, 800b392 <rclc_executor_add_subscription+0x62>
 800b33a:	b351      	cbz	r1, 800b392 <rclc_executor_add_subscription+0x62>
 800b33c:	b34a      	cbz	r2, 800b392 <rclc_executor_add_subscription+0x62>
 800b33e:	b343      	cbz	r3, 800b392 <rclc_executor_add_subscription+0x62>
 800b340:	4604      	mov	r4, r0
 800b342:	e9d0 0502 	ldrd	r0, r5, [r0, #8]
 800b346:	4285      	cmp	r5, r0
 800b348:	d302      	bcc.n	800b350 <rclc_executor_add_subscription+0x20>
 800b34a:	2001      	movs	r0, #1
 800b34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b350:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800b354:	ea4f 1885 	mov.w	r8, r5, lsl #6
 800b358:	eb0e 1685 	add.w	r6, lr, r5, lsl #6
 800b35c:	f04f 0c00 	mov.w	ip, #0
 800b360:	f80e c008 	strb.w	ip, [lr, r8]
 800b364:	2001      	movs	r0, #1
 800b366:	3501      	adds	r5, #1
 800b368:	f104 0814 	add.w	r8, r4, #20
 800b36c:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
 800b370:	e9c6 1201 	strd	r1, r2, [r6, #4]
 800b374:	6333      	str	r3, [r6, #48]	; 0x30
 800b376:	7077      	strb	r7, [r6, #1]
 800b378:	f8c6 c02c 	str.w	ip, [r6, #44]	; 0x2c
 800b37c:	4640      	mov	r0, r8
 800b37e:	60e5      	str	r5, [r4, #12]
 800b380:	f006 fb7e 	bl	8011a80 <rcl_wait_set_is_valid>
 800b384:	b940      	cbnz	r0, 800b398 <rclc_executor_add_subscription+0x68>
 800b386:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b388:	3301      	adds	r3, #1
 800b38a:	64a3      	str	r3, [r4, #72]	; 0x48
 800b38c:	2000      	movs	r0, #0
 800b38e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b392:	200b      	movs	r0, #11
 800b394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b398:	4640      	mov	r0, r8
 800b39a:	f006 fb77 	bl	8011a8c <rcl_wait_set_fini>
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	d0f1      	beq.n	800b386 <rclc_executor_add_subscription+0x56>
 800b3a2:	e7d3      	b.n	800b34c <rclc_executor_add_subscription+0x1c>

0800b3a4 <rclc_executor_add_timer>:
 800b3a4:	b308      	cbz	r0, 800b3ea <rclc_executor_add_timer+0x46>
 800b3a6:	b301      	cbz	r1, 800b3ea <rclc_executor_add_timer+0x46>
 800b3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3aa:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	4604      	mov	r4, r0
 800b3b2:	d301      	bcc.n	800b3b8 <rclc_executor_add_timer+0x14>
 800b3b4:	2001      	movs	r0, #1
 800b3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3b8:	6840      	ldr	r0, [r0, #4]
 800b3ba:	019d      	lsls	r5, r3, #6
 800b3bc:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800b3c0:	2702      	movs	r7, #2
 800b3c2:	6051      	str	r1, [r2, #4]
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	5347      	strh	r7, [r0, r5]
 800b3c8:	2601      	movs	r6, #1
 800b3ca:	2100      	movs	r1, #0
 800b3cc:	f104 0514 	add.w	r5, r4, #20
 800b3d0:	f882 6038 	strb.w	r6, [r2, #56]	; 0x38
 800b3d4:	62d1      	str	r1, [r2, #44]	; 0x2c
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	60e3      	str	r3, [r4, #12]
 800b3da:	f006 fb51 	bl	8011a80 <rcl_wait_set_is_valid>
 800b3de:	b930      	cbnz	r0, 800b3ee <rclc_executor_add_timer+0x4a>
 800b3e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b3e6:	2000      	movs	r0, #0
 800b3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3ea:	200b      	movs	r0, #11
 800b3ec:	4770      	bx	lr
 800b3ee:	4628      	mov	r0, r5
 800b3f0:	f006 fb4c 	bl	8011a8c <rcl_wait_set_fini>
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	d0f3      	beq.n	800b3e0 <rclc_executor_add_timer+0x3c>
 800b3f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3fa:	bf00      	nop

0800b3fc <rclc_executor_prepare>:
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	d03d      	beq.n	800b47c <rclc_executor_prepare+0x80>
 800b400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b404:	f100 0814 	add.w	r8, r0, #20
 800b408:	b09a      	sub	sp, #104	; 0x68
 800b40a:	4604      	mov	r4, r0
 800b40c:	4640      	mov	r0, r8
 800b40e:	f006 fb37 	bl	8011a80 <rcl_wait_set_is_valid>
 800b412:	b118      	cbz	r0, 800b41c <rclc_executor_prepare+0x20>
 800b414:	2000      	movs	r0, #0
 800b416:	b01a      	add	sp, #104	; 0x68
 800b418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b41c:	4640      	mov	r0, r8
 800b41e:	f006 fb35 	bl	8011a8c <rcl_wait_set_fini>
 800b422:	2800      	cmp	r0, #0
 800b424:	d127      	bne.n	800b476 <rclc_executor_prepare+0x7a>
 800b426:	a80c      	add	r0, sp, #48	; 0x30
 800b428:	ad0c      	add	r5, sp, #48	; 0x30
 800b42a:	f006 fb17 	bl	8011a5c <rcl_get_zero_initialized_wait_set>
 800b42e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b430:	4646      	mov	r6, r8
 800b432:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b436:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b43a:	6927      	ldr	r7, [r4, #16]
 800b43c:	682d      	ldr	r5, [r5, #0]
 800b43e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b440:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b442:	6035      	str	r5, [r6, #0]
 800b444:	ad04      	add	r5, sp, #16
 800b446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b448:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800b44c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b44e:	6826      	ldr	r6, [r4, #0]
 800b450:	6838      	ldr	r0, [r7, #0]
 800b452:	6028      	str	r0, [r5, #0]
 800b454:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800b458:	e9cd 3200 	strd	r3, r2, [sp]
 800b45c:	4640      	mov	r0, r8
 800b45e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b460:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800b462:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b464:	f006 fe30 	bl	80120c8 <rcl_wait_set_init>
 800b468:	2800      	cmp	r0, #0
 800b46a:	d0d4      	beq.n	800b416 <rclc_executor_prepare+0x1a>
 800b46c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b46e:	f000 fb01 	bl	800ba74 <rcutils_reset_error>
 800b472:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b474:	e7cf      	b.n	800b416 <rclc_executor_prepare+0x1a>
 800b476:	f000 fafd 	bl	800ba74 <rcutils_reset_error>
 800b47a:	e7d4      	b.n	800b426 <rclc_executor_prepare+0x2a>
 800b47c:	200b      	movs	r0, #11
 800b47e:	4770      	bx	lr

0800b480 <rclc_executor_spin_some.part.0>:
 800b480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b484:	f100 0814 	add.w	r8, r0, #20
 800b488:	b083      	sub	sp, #12
 800b48a:	4692      	mov	sl, r2
 800b48c:	4699      	mov	r9, r3
 800b48e:	4605      	mov	r5, r0
 800b490:	f7ff ffb4 	bl	800b3fc <rclc_executor_prepare>
 800b494:	4640      	mov	r0, r8
 800b496:	f006 fbc5 	bl	8011c24 <rcl_wait_set_clear>
 800b49a:	4607      	mov	r7, r0
 800b49c:	2800      	cmp	r0, #0
 800b49e:	f040 80be 	bne.w	800b61e <rclc_executor_spin_some.part.0+0x19e>
 800b4a2:	68ab      	ldr	r3, [r5, #8]
 800b4a4:	4604      	mov	r4, r0
 800b4a6:	b1eb      	cbz	r3, 800b4e4 <rclc_executor_spin_some.part.0+0x64>
 800b4a8:	686e      	ldr	r6, [r5, #4]
 800b4aa:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800b4ae:	01a2      	lsls	r2, r4, #6
 800b4b0:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 800b4b4:	b1b3      	cbz	r3, 800b4e4 <rclc_executor_spin_some.part.0+0x64>
 800b4b6:	5cb3      	ldrb	r3, [r6, r2]
 800b4b8:	2b08      	cmp	r3, #8
 800b4ba:	f200 80a9 	bhi.w	800b610 <rclc_executor_spin_some.part.0+0x190>
 800b4be:	e8df f003 	tbb	[pc, r3]
 800b4c2:	8989      	.short	0x8989
 800b4c4:	057b7b93 	.word	0x057b7b93
 800b4c8:	0505      	.short	0x0505
 800b4ca:	9d          	.byte	0x9d
 800b4cb:	00          	.byte	0x00
 800b4cc:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800b4d0:	4640      	mov	r0, r8
 800b4d2:	6849      	ldr	r1, [r1, #4]
 800b4d4:	f006 ff0e 	bl	80122f4 <rcl_wait_set_add_service>
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	d175      	bne.n	800b5c8 <rclc_executor_spin_some.part.0+0x148>
 800b4dc:	68ab      	ldr	r3, [r5, #8]
 800b4de:	3401      	adds	r4, #1
 800b4e0:	429c      	cmp	r4, r3
 800b4e2:	d3e1      	bcc.n	800b4a8 <rclc_executor_spin_some.part.0+0x28>
 800b4e4:	464b      	mov	r3, r9
 800b4e6:	4652      	mov	r2, sl
 800b4e8:	4640      	mov	r0, r8
 800b4ea:	f006 ff31 	bl	8012350 <rcl_wait>
 800b4ee:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	f000 809b 	beq.w	800b62e <rclc_executor_spin_some.part.0+0x1ae>
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	f040 8089 	bne.w	800b610 <rclc_executor_spin_some.part.0+0x190>
 800b4fe:	68ab      	ldr	r3, [r5, #8]
 800b500:	2b00      	cmp	r3, #0
 800b502:	f000 80ef 	beq.w	800b6e4 <rclc_executor_spin_some.part.0+0x264>
 800b506:	2400      	movs	r4, #0
 800b508:	4626      	mov	r6, r4
 800b50a:	f240 1991 	movw	r9, #401	; 0x191
 800b50e:	e00a      	b.n	800b526 <rclc_executor_spin_some.part.0+0xa6>
 800b510:	f7ff fd9c 	bl	800b04c <_rclc_check_for_new_data>
 800b514:	4604      	mov	r4, r0
 800b516:	b110      	cbz	r0, 800b51e <rclc_executor_spin_some.part.0+0x9e>
 800b518:	4548      	cmp	r0, r9
 800b51a:	f040 8086 	bne.w	800b62a <rclc_executor_spin_some.part.0+0x1aa>
 800b51e:	68ab      	ldr	r3, [r5, #8]
 800b520:	429e      	cmp	r6, r3
 800b522:	f080 80db 	bcs.w	800b6dc <rclc_executor_spin_some.part.0+0x25c>
 800b526:	686a      	ldr	r2, [r5, #4]
 800b528:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800b52c:	4641      	mov	r1, r8
 800b52e:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800b532:	3601      	adds	r6, #1
 800b534:	f1bc 0f00 	cmp.w	ip, #0
 800b538:	d1ea      	bne.n	800b510 <rclc_executor_spin_some.part.0+0x90>
 800b53a:	4619      	mov	r1, r3
 800b53c:	4610      	mov	r0, r2
 800b53e:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800b542:	4798      	blx	r3
 800b544:	2800      	cmp	r0, #0
 800b546:	d070      	beq.n	800b62a <rclc_executor_spin_some.part.0+0x1aa>
 800b548:	68aa      	ldr	r2, [r5, #8]
 800b54a:	2a00      	cmp	r2, #0
 800b54c:	d06d      	beq.n	800b62a <rclc_executor_spin_some.part.0+0x1aa>
 800b54e:	2600      	movs	r6, #0
 800b550:	f240 1991 	movw	r9, #401	; 0x191
 800b554:	e008      	b.n	800b568 <rclc_executor_spin_some.part.0+0xe8>
 800b556:	f7ff fd9f 	bl	800b098 <_rclc_take_new_data>
 800b55a:	4604      	mov	r4, r0
 800b55c:	b108      	cbz	r0, 800b562 <rclc_executor_spin_some.part.0+0xe2>
 800b55e:	4548      	cmp	r0, r9
 800b560:	d163      	bne.n	800b62a <rclc_executor_spin_some.part.0+0x1aa>
 800b562:	68aa      	ldr	r2, [r5, #8]
 800b564:	4296      	cmp	r6, r2
 800b566:	d208      	bcs.n	800b57a <rclc_executor_spin_some.part.0+0xfa>
 800b568:	6868      	ldr	r0, [r5, #4]
 800b56a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800b56e:	4641      	mov	r1, r8
 800b570:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800b574:	3601      	adds	r6, #1
 800b576:	2b00      	cmp	r3, #0
 800b578:	d1ed      	bne.n	800b556 <rclc_executor_spin_some.part.0+0xd6>
 800b57a:	2600      	movs	r6, #0
 800b57c:	b932      	cbnz	r2, 800b58c <rclc_executor_spin_some.part.0+0x10c>
 800b57e:	e054      	b.n	800b62a <rclc_executor_spin_some.part.0+0x1aa>
 800b580:	2901      	cmp	r1, #1
 800b582:	d012      	beq.n	800b5aa <rclc_executor_spin_some.part.0+0x12a>
 800b584:	3601      	adds	r6, #1
 800b586:	4296      	cmp	r6, r2
 800b588:	d245      	bcs.n	800b616 <rclc_executor_spin_some.part.0+0x196>
 800b58a:	2400      	movs	r4, #0
 800b58c:	686b      	ldr	r3, [r5, #4]
 800b58e:	eb03 1386 	add.w	r3, r3, r6, lsl #6
 800b592:	4618      	mov	r0, r3
 800b594:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 800b598:	2900      	cmp	r1, #0
 800b59a:	d046      	beq.n	800b62a <rclc_executor_spin_some.part.0+0x1aa>
 800b59c:	7859      	ldrb	r1, [r3, #1]
 800b59e:	2900      	cmp	r1, #0
 800b5a0:	d1ee      	bne.n	800b580 <rclc_executor_spin_some.part.0+0x100>
 800b5a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d0ec      	beq.n	800b584 <rclc_executor_spin_some.part.0+0x104>
 800b5aa:	f7ff fddf 	bl	800b16c <_rclc_execute.part.0>
 800b5ae:	2800      	cmp	r0, #0
 800b5b0:	f040 8096 	bne.w	800b6e0 <rclc_executor_spin_some.part.0+0x260>
 800b5b4:	68aa      	ldr	r2, [r5, #8]
 800b5b6:	e7e5      	b.n	800b584 <rclc_executor_spin_some.part.0+0x104>
 800b5b8:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800b5bc:	4640      	mov	r0, r8
 800b5be:	6849      	ldr	r1, [r1, #4]
 800b5c0:	f006 fe6c 	bl	801229c <rcl_wait_set_add_client>
 800b5c4:	2800      	cmp	r0, #0
 800b5c6:	d089      	beq.n	800b4dc <rclc_executor_spin_some.part.0+0x5c>
 800b5c8:	9001      	str	r0, [sp, #4]
 800b5ca:	f000 fa53 	bl	800ba74 <rcutils_reset_error>
 800b5ce:	9801      	ldr	r0, [sp, #4]
 800b5d0:	4607      	mov	r7, r0
 800b5d2:	e020      	b.n	800b616 <rclc_executor_spin_some.part.0+0x196>
 800b5d4:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800b5d8:	4640      	mov	r0, r8
 800b5da:	6849      	ldr	r1, [r1, #4]
 800b5dc:	f006 faf6 	bl	8011bcc <rcl_wait_set_add_subscription>
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	f43f af7b 	beq.w	800b4dc <rclc_executor_spin_some.part.0+0x5c>
 800b5e6:	e7ef      	b.n	800b5c8 <rclc_executor_spin_some.part.0+0x148>
 800b5e8:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800b5ec:	4640      	mov	r0, r8
 800b5ee:	6849      	ldr	r1, [r1, #4]
 800b5f0:	f006 fe24 	bl	801223c <rcl_wait_set_add_timer>
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	f43f af71 	beq.w	800b4dc <rclc_executor_spin_some.part.0+0x5c>
 800b5fa:	e7e5      	b.n	800b5c8 <rclc_executor_spin_some.part.0+0x148>
 800b5fc:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800b600:	4640      	mov	r0, r8
 800b602:	6849      	ldr	r1, [r1, #4]
 800b604:	f006 fdee 	bl	80121e4 <rcl_wait_set_add_guard_condition>
 800b608:	2800      	cmp	r0, #0
 800b60a:	f43f af67 	beq.w	800b4dc <rclc_executor_spin_some.part.0+0x5c>
 800b60e:	e7db      	b.n	800b5c8 <rclc_executor_spin_some.part.0+0x148>
 800b610:	f000 fa30 	bl	800ba74 <rcutils_reset_error>
 800b614:	2701      	movs	r7, #1
 800b616:	4638      	mov	r0, r7
 800b618:	b003      	add	sp, #12
 800b61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b61e:	f000 fa29 	bl	800ba74 <rcutils_reset_error>
 800b622:	4638      	mov	r0, r7
 800b624:	b003      	add	sp, #12
 800b626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b62a:	4627      	mov	r7, r4
 800b62c:	e7f3      	b.n	800b616 <rclc_executor_spin_some.part.0+0x196>
 800b62e:	68ab      	ldr	r3, [r5, #8]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d05a      	beq.n	800b6ea <rclc_executor_spin_some.part.0+0x26a>
 800b634:	2400      	movs	r4, #0
 800b636:	4626      	mov	r6, r4
 800b638:	f240 1991 	movw	r9, #401	; 0x191
 800b63c:	e008      	b.n	800b650 <rclc_executor_spin_some.part.0+0x1d0>
 800b63e:	f7ff fd05 	bl	800b04c <_rclc_check_for_new_data>
 800b642:	4604      	mov	r4, r0
 800b644:	b108      	cbz	r0, 800b64a <rclc_executor_spin_some.part.0+0x1ca>
 800b646:	4548      	cmp	r0, r9
 800b648:	d1ef      	bne.n	800b62a <rclc_executor_spin_some.part.0+0x1aa>
 800b64a:	68ab      	ldr	r3, [r5, #8]
 800b64c:	429e      	cmp	r6, r3
 800b64e:	d243      	bcs.n	800b6d8 <rclc_executor_spin_some.part.0+0x258>
 800b650:	686a      	ldr	r2, [r5, #4]
 800b652:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800b656:	4641      	mov	r1, r8
 800b658:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800b65c:	3601      	adds	r6, #1
 800b65e:	f1bc 0f00 	cmp.w	ip, #0
 800b662:	d1ec      	bne.n	800b63e <rclc_executor_spin_some.part.0+0x1be>
 800b664:	4619      	mov	r1, r3
 800b666:	4610      	mov	r0, r2
 800b668:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800b66c:	4798      	blx	r3
 800b66e:	2800      	cmp	r0, #0
 800b670:	d0db      	beq.n	800b62a <rclc_executor_spin_some.part.0+0x1aa>
 800b672:	68ab      	ldr	r3, [r5, #8]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d0d8      	beq.n	800b62a <rclc_executor_spin_some.part.0+0x1aa>
 800b678:	f04f 0a00 	mov.w	sl, #0
 800b67c:	f240 1691 	movw	r6, #401	; 0x191
 800b680:	f240 2959 	movw	r9, #601	; 0x259
 800b684:	e00b      	b.n	800b69e <rclc_executor_spin_some.part.0+0x21e>
 800b686:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800b68a:	b113      	cbz	r3, 800b692 <rclc_executor_spin_some.part.0+0x212>
 800b68c:	f7ff fd6e 	bl	800b16c <_rclc_execute.part.0>
 800b690:	bb30      	cbnz	r0, 800b6e0 <rclc_executor_spin_some.part.0+0x260>
 800b692:	68ab      	ldr	r3, [r5, #8]
 800b694:	f10a 0a01 	add.w	sl, sl, #1
 800b698:	459a      	cmp	sl, r3
 800b69a:	d2bc      	bcs.n	800b616 <rclc_executor_spin_some.part.0+0x196>
 800b69c:	2400      	movs	r4, #0
 800b69e:	6868      	ldr	r0, [r5, #4]
 800b6a0:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800b6a4:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800b6a8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d0bc      	beq.n	800b62a <rclc_executor_spin_some.part.0+0x1aa>
 800b6b0:	4641      	mov	r1, r8
 800b6b2:	f7ff fcf1 	bl	800b098 <_rclc_take_new_data>
 800b6b6:	b118      	cbz	r0, 800b6c0 <rclc_executor_spin_some.part.0+0x240>
 800b6b8:	42b0      	cmp	r0, r6
 800b6ba:	d001      	beq.n	800b6c0 <rclc_executor_spin_some.part.0+0x240>
 800b6bc:	4548      	cmp	r0, r9
 800b6be:	d10f      	bne.n	800b6e0 <rclc_executor_spin_some.part.0+0x260>
 800b6c0:	6868      	ldr	r0, [r5, #4]
 800b6c2:	eb10 000b 	adds.w	r0, r0, fp
 800b6c6:	d005      	beq.n	800b6d4 <rclc_executor_spin_some.part.0+0x254>
 800b6c8:	7843      	ldrb	r3, [r0, #1]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d0db      	beq.n	800b686 <rclc_executor_spin_some.part.0+0x206>
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	d1df      	bne.n	800b692 <rclc_executor_spin_some.part.0+0x212>
 800b6d2:	e7db      	b.n	800b68c <rclc_executor_spin_some.part.0+0x20c>
 800b6d4:	270b      	movs	r7, #11
 800b6d6:	e79e      	b.n	800b616 <rclc_executor_spin_some.part.0+0x196>
 800b6d8:	686a      	ldr	r2, [r5, #4]
 800b6da:	e7c3      	b.n	800b664 <rclc_executor_spin_some.part.0+0x1e4>
 800b6dc:	686a      	ldr	r2, [r5, #4]
 800b6de:	e72c      	b.n	800b53a <rclc_executor_spin_some.part.0+0xba>
 800b6e0:	4607      	mov	r7, r0
 800b6e2:	e798      	b.n	800b616 <rclc_executor_spin_some.part.0+0x196>
 800b6e4:	686a      	ldr	r2, [r5, #4]
 800b6e6:	461c      	mov	r4, r3
 800b6e8:	e727      	b.n	800b53a <rclc_executor_spin_some.part.0+0xba>
 800b6ea:	686a      	ldr	r2, [r5, #4]
 800b6ec:	461c      	mov	r4, r3
 800b6ee:	e7b9      	b.n	800b664 <rclc_executor_spin_some.part.0+0x1e4>

0800b6f0 <rclc_executor_spin>:
 800b6f0:	b1a8      	cbz	r0, 800b71e <rclc_executor_spin+0x2e>
 800b6f2:	b5d0      	push	{r4, r6, r7, lr}
 800b6f4:	4604      	mov	r4, r0
 800b6f6:	6820      	ldr	r0, [r4, #0]
 800b6f8:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
 800b6fc:	f004 fde8 	bl	80102d0 <rcl_context_is_valid>
 800b700:	4601      	mov	r1, r0
 800b702:	4632      	mov	r2, r6
 800b704:	463b      	mov	r3, r7
 800b706:	4620      	mov	r0, r4
 800b708:	b129      	cbz	r1, 800b716 <rclc_executor_spin+0x26>
 800b70a:	f7ff feb9 	bl	800b480 <rclc_executor_spin_some.part.0>
 800b70e:	f030 0302 	bics.w	r3, r0, #2
 800b712:	d0f0      	beq.n	800b6f6 <rclc_executor_spin+0x6>
 800b714:	bdd0      	pop	{r4, r6, r7, pc}
 800b716:	f000 f9ad 	bl	800ba74 <rcutils_reset_error>
 800b71a:	2001      	movs	r0, #1
 800b71c:	bdd0      	pop	{r4, r6, r7, pc}
 800b71e:	200b      	movs	r0, #11
 800b720:	4770      	bx	lr
 800b722:	bf00      	nop

0800b724 <rclc_executor_handle_counters_zero_init>:
 800b724:	b140      	cbz	r0, 800b738 <rclc_executor_handle_counters_zero_init+0x14>
 800b726:	2300      	movs	r3, #0
 800b728:	6003      	str	r3, [r0, #0]
 800b72a:	6043      	str	r3, [r0, #4]
 800b72c:	6083      	str	r3, [r0, #8]
 800b72e:	60c3      	str	r3, [r0, #12]
 800b730:	6103      	str	r3, [r0, #16]
 800b732:	6143      	str	r3, [r0, #20]
 800b734:	4618      	mov	r0, r3
 800b736:	4770      	bx	lr
 800b738:	200b      	movs	r0, #11
 800b73a:	4770      	bx	lr

0800b73c <rclc_executor_handle_init>:
 800b73c:	b178      	cbz	r0, 800b75e <rclc_executor_handle_init+0x22>
 800b73e:	b430      	push	{r4, r5}
 800b740:	4603      	mov	r3, r0
 800b742:	2209      	movs	r2, #9
 800b744:	2000      	movs	r0, #0
 800b746:	2400      	movs	r4, #0
 800b748:	2500      	movs	r5, #0
 800b74a:	801a      	strh	r2, [r3, #0]
 800b74c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 800b750:	bc30      	pop	{r4, r5}
 800b752:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800b756:	6359      	str	r1, [r3, #52]	; 0x34
 800b758:	6318      	str	r0, [r3, #48]	; 0x30
 800b75a:	8718      	strh	r0, [r3, #56]	; 0x38
 800b75c:	4770      	bx	lr
 800b75e:	200b      	movs	r0, #11
 800b760:	4770      	bx	lr
 800b762:	bf00      	nop

0800b764 <rclc_support_init>:
 800b764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b768:	b086      	sub	sp, #24
 800b76a:	2800      	cmp	r0, #0
 800b76c:	d042      	beq.n	800b7f4 <rclc_support_init+0x90>
 800b76e:	461c      	mov	r4, r3
 800b770:	2b00      	cmp	r3, #0
 800b772:	d03f      	beq.n	800b7f4 <rclc_support_init+0x90>
 800b774:	460f      	mov	r7, r1
 800b776:	4690      	mov	r8, r2
 800b778:	4606      	mov	r6, r0
 800b77a:	f005 f9cf 	bl	8010b1c <rcl_get_zero_initialized_init_options>
 800b77e:	4603      	mov	r3, r0
 800b780:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800b784:	e88d 0003 	stmia.w	sp, {r0, r1}
 800b788:	9305      	str	r3, [sp, #20]
 800b78a:	a805      	add	r0, sp, #20
 800b78c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800b790:	f005 f9c6 	bl	8010b20 <rcl_init_options_init>
 800b794:	4605      	mov	r5, r0
 800b796:	bb38      	cbnz	r0, 800b7e8 <rclc_support_init+0x84>
 800b798:	f005 f9c0 	bl	8010b1c <rcl_get_zero_initialized_init_options>
 800b79c:	4631      	mov	r1, r6
 800b79e:	6030      	str	r0, [r6, #0]
 800b7a0:	a805      	add	r0, sp, #20
 800b7a2:	f005 fa33 	bl	8010c0c <rcl_init_options_copy>
 800b7a6:	4605      	mov	r5, r0
 800b7a8:	b9c0      	cbnz	r0, 800b7dc <rclc_support_init+0x78>
 800b7aa:	ad02      	add	r5, sp, #8
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	f004 fd85 	bl	80102bc <rcl_get_zero_initialized_context>
 800b7b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b7b6:	1d33      	adds	r3, r6, #4
 800b7b8:	e883 0003 	stmia.w	r3, {r0, r1}
 800b7bc:	4632      	mov	r2, r6
 800b7be:	4641      	mov	r1, r8
 800b7c0:	4638      	mov	r0, r7
 800b7c2:	f005 f8a1 	bl	8010908 <rcl_init>
 800b7c6:	4605      	mov	r5, r0
 800b7c8:	b940      	cbnz	r0, 800b7dc <rclc_support_init+0x78>
 800b7ca:	60f4      	str	r4, [r6, #12]
 800b7cc:	4622      	mov	r2, r4
 800b7ce:	f106 0110 	add.w	r1, r6, #16
 800b7d2:	2003      	movs	r0, #3
 800b7d4:	f005 fc42 	bl	801105c <rcl_clock_init>
 800b7d8:	4605      	mov	r5, r0
 800b7da:	b108      	cbz	r0, 800b7e0 <rclc_support_init+0x7c>
 800b7dc:	f000 f94a 	bl	800ba74 <rcutils_reset_error>
 800b7e0:	a805      	add	r0, sp, #20
 800b7e2:	f005 f9ef 	bl	8010bc4 <rcl_init_options_fini>
 800b7e6:	b108      	cbz	r0, 800b7ec <rclc_support_init+0x88>
 800b7e8:	f000 f944 	bl	800ba74 <rcutils_reset_error>
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	b006      	add	sp, #24
 800b7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7f4:	250b      	movs	r5, #11
 800b7f6:	4628      	mov	r0, r5
 800b7f8:	b006      	add	sp, #24
 800b7fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7fe:	bf00      	nop

0800b800 <rclc_node_init_default>:
 800b800:	b3b8      	cbz	r0, 800b872 <rclc_node_init_default+0x72>
 800b802:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b806:	460d      	mov	r5, r1
 800b808:	b08f      	sub	sp, #60	; 0x3c
 800b80a:	b329      	cbz	r1, 800b858 <rclc_node_init_default+0x58>
 800b80c:	4616      	mov	r6, r2
 800b80e:	b31a      	cbz	r2, 800b858 <rclc_node_init_default+0x58>
 800b810:	461f      	mov	r7, r3
 800b812:	b30b      	cbz	r3, 800b858 <rclc_node_init_default+0x58>
 800b814:	f10d 0810 	add.w	r8, sp, #16
 800b818:	4604      	mov	r4, r0
 800b81a:	4640      	mov	r0, r8
 800b81c:	f7fe ff20 	bl	800a660 <rcl_get_zero_initialized_node>
 800b820:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b824:	f10d 091c 	add.w	r9, sp, #28
 800b828:	e884 0003 	stmia.w	r4, {r0, r1}
 800b82c:	4648      	mov	r0, r9
 800b82e:	f7ff f8eb 	bl	800aa08 <rcl_node_get_default_options>
 800b832:	4640      	mov	r0, r8
 800b834:	f7fe ff14 	bl	800a660 <rcl_get_zero_initialized_node>
 800b838:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b83c:	1d3b      	adds	r3, r7, #4
 800b83e:	f8cd 9000 	str.w	r9, [sp]
 800b842:	4632      	mov	r2, r6
 800b844:	e884 0003 	stmia.w	r4, {r0, r1}
 800b848:	4629      	mov	r1, r5
 800b84a:	4620      	mov	r0, r4
 800b84c:	f7fe ff12 	bl	800a674 <rcl_node_init>
 800b850:	b930      	cbnz	r0, 800b860 <rclc_node_init_default+0x60>
 800b852:	b00f      	add	sp, #60	; 0x3c
 800b854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b858:	200b      	movs	r0, #11
 800b85a:	b00f      	add	sp, #60	; 0x3c
 800b85c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b860:	9003      	str	r0, [sp, #12]
 800b862:	f000 f907 	bl	800ba74 <rcutils_reset_error>
 800b866:	f000 f905 	bl	800ba74 <rcutils_reset_error>
 800b86a:	9803      	ldr	r0, [sp, #12]
 800b86c:	b00f      	add	sp, #60	; 0x3c
 800b86e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b872:	200b      	movs	r0, #11
 800b874:	4770      	bx	lr
 800b876:	bf00      	nop

0800b878 <rclc_publisher_init_default>:
 800b878:	b368      	cbz	r0, 800b8d6 <rclc_publisher_init_default+0x5e>
 800b87a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b87e:	460d      	mov	r5, r1
 800b880:	b09e      	sub	sp, #120	; 0x78
 800b882:	b321      	cbz	r1, 800b8ce <rclc_publisher_init_default+0x56>
 800b884:	4616      	mov	r6, r2
 800b886:	b312      	cbz	r2, 800b8ce <rclc_publisher_init_default+0x56>
 800b888:	461f      	mov	r7, r3
 800b88a:	b303      	cbz	r3, 800b8ce <rclc_publisher_init_default+0x56>
 800b88c:	4604      	mov	r4, r0
 800b88e:	f7ff f8f5 	bl	800aa7c <rcl_get_zero_initialized_publisher>
 800b892:	f10d 0810 	add.w	r8, sp, #16
 800b896:	6020      	str	r0, [r4, #0]
 800b898:	4640      	mov	r0, r8
 800b89a:	f7ff f9eb 	bl	800ac74 <rcl_publisher_get_default_options>
 800b89e:	490f      	ldr	r1, [pc, #60]	; (800b8dc <rclc_publisher_init_default+0x64>)
 800b8a0:	2250      	movs	r2, #80	; 0x50
 800b8a2:	4640      	mov	r0, r8
 800b8a4:	f009 fb6c 	bl	8014f80 <memcpy>
 800b8a8:	f8cd 8000 	str.w	r8, [sp]
 800b8ac:	463b      	mov	r3, r7
 800b8ae:	4632      	mov	r2, r6
 800b8b0:	4629      	mov	r1, r5
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	f7ff f8e8 	bl	800aa88 <rcl_publisher_init>
 800b8b8:	b910      	cbnz	r0, 800b8c0 <rclc_publisher_init_default+0x48>
 800b8ba:	b01e      	add	sp, #120	; 0x78
 800b8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8c0:	9003      	str	r0, [sp, #12]
 800b8c2:	f000 f8d7 	bl	800ba74 <rcutils_reset_error>
 800b8c6:	9803      	ldr	r0, [sp, #12]
 800b8c8:	b01e      	add	sp, #120	; 0x78
 800b8ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8ce:	200b      	movs	r0, #11
 800b8d0:	b01e      	add	sp, #120	; 0x78
 800b8d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8d6:	200b      	movs	r0, #11
 800b8d8:	4770      	bx	lr
 800b8da:	bf00      	nop
 800b8dc:	080169a8 	.word	0x080169a8

0800b8e0 <rclc_subscription_init_default>:
 800b8e0:	b368      	cbz	r0, 800b93e <rclc_subscription_init_default+0x5e>
 800b8e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8e6:	460d      	mov	r5, r1
 800b8e8:	b0a0      	sub	sp, #128	; 0x80
 800b8ea:	b321      	cbz	r1, 800b936 <rclc_subscription_init_default+0x56>
 800b8ec:	4616      	mov	r6, r2
 800b8ee:	b312      	cbz	r2, 800b936 <rclc_subscription_init_default+0x56>
 800b8f0:	461f      	mov	r7, r3
 800b8f2:	b303      	cbz	r3, 800b936 <rclc_subscription_init_default+0x56>
 800b8f4:	4604      	mov	r4, r0
 800b8f6:	f7ff fa03 	bl	800ad00 <rcl_get_zero_initialized_subscription>
 800b8fa:	f10d 0810 	add.w	r8, sp, #16
 800b8fe:	6020      	str	r0, [r4, #0]
 800b900:	4640      	mov	r0, r8
 800b902:	f7ff fb25 	bl	800af50 <rcl_subscription_get_default_options>
 800b906:	490f      	ldr	r1, [pc, #60]	; (800b944 <rclc_subscription_init_default+0x64>)
 800b908:	2250      	movs	r2, #80	; 0x50
 800b90a:	4640      	mov	r0, r8
 800b90c:	f009 fb38 	bl	8014f80 <memcpy>
 800b910:	f8cd 8000 	str.w	r8, [sp]
 800b914:	463b      	mov	r3, r7
 800b916:	4632      	mov	r2, r6
 800b918:	4629      	mov	r1, r5
 800b91a:	4620      	mov	r0, r4
 800b91c:	f7ff f9f6 	bl	800ad0c <rcl_subscription_init>
 800b920:	b910      	cbnz	r0, 800b928 <rclc_subscription_init_default+0x48>
 800b922:	b020      	add	sp, #128	; 0x80
 800b924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b928:	9003      	str	r0, [sp, #12]
 800b92a:	f000 f8a3 	bl	800ba74 <rcutils_reset_error>
 800b92e:	9803      	ldr	r0, [sp, #12]
 800b930:	b020      	add	sp, #128	; 0x80
 800b932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b936:	200b      	movs	r0, #11
 800b938:	b020      	add	sp, #128	; 0x80
 800b93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b93e:	200b      	movs	r0, #11
 800b940:	4770      	bx	lr
 800b942:	bf00      	nop
 800b944:	080169f8 	.word	0x080169f8

0800b948 <rclc_timer_init_default>:
 800b948:	b348      	cbz	r0, 800b99e <rclc_timer_init_default+0x56>
 800b94a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b94e:	460c      	mov	r4, r1
 800b950:	b08b      	sub	sp, #44	; 0x2c
 800b952:	b301      	cbz	r1, 800b996 <rclc_timer_init_default+0x4e>
 800b954:	4691      	mov	r9, r2
 800b956:	4698      	mov	r8, r3
 800b958:	4607      	mov	r7, r0
 800b95a:	f005 fd6b 	bl	8011434 <rcl_get_zero_initialized_timer>
 800b95e:	68e6      	ldr	r6, [r4, #12]
 800b960:	6038      	str	r0, [r7, #0]
 800b962:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b964:	ad03      	add	r5, sp, #12
 800b966:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b968:	6833      	ldr	r3, [r6, #0]
 800b96a:	602b      	str	r3, [r5, #0]
 800b96c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b96e:	9302      	str	r3, [sp, #8]
 800b970:	e9cd 9800 	strd	r9, r8, [sp]
 800b974:	4638      	mov	r0, r7
 800b976:	1d22      	adds	r2, r4, #4
 800b978:	f104 0110 	add.w	r1, r4, #16
 800b97c:	f005 fd60 	bl	8011440 <rcl_timer_init>
 800b980:	b910      	cbnz	r0, 800b988 <rclc_timer_init_default+0x40>
 800b982:	b00b      	add	sp, #44	; 0x2c
 800b984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b988:	9009      	str	r0, [sp, #36]	; 0x24
 800b98a:	f000 f873 	bl	800ba74 <rcutils_reset_error>
 800b98e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b990:	b00b      	add	sp, #44	; 0x2c
 800b992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b996:	200b      	movs	r0, #11
 800b998:	b00b      	add	sp, #44	; 0x2c
 800b99a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b99e:	200b      	movs	r0, #11
 800b9a0:	4770      	bx	lr
 800b9a2:	bf00      	nop

0800b9a4 <__default_zero_allocate>:
 800b9a4:	f009 ba62 	b.w	8014e6c <calloc>

0800b9a8 <__default_reallocate>:
 800b9a8:	f009 bc94 	b.w	80152d4 <realloc>

0800b9ac <__default_deallocate>:
 800b9ac:	f009 bae0 	b.w	8014f70 <free>

0800b9b0 <__default_allocate>:
 800b9b0:	f009 bad6 	b.w	8014f60 <malloc>

0800b9b4 <rcutils_get_zero_initialized_allocator>:
 800b9b4:	b470      	push	{r4, r5, r6}
 800b9b6:	4d05      	ldr	r5, [pc, #20]	; (800b9cc <rcutils_get_zero_initialized_allocator+0x18>)
 800b9b8:	4606      	mov	r6, r0
 800b9ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b9bc:	4634      	mov	r4, r6
 800b9be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b9c0:	682b      	ldr	r3, [r5, #0]
 800b9c2:	6023      	str	r3, [r4, #0]
 800b9c4:	4630      	mov	r0, r6
 800b9c6:	bc70      	pop	{r4, r5, r6}
 800b9c8:	4770      	bx	lr
 800b9ca:	bf00      	nop
 800b9cc:	08016a48 	.word	0x08016a48

0800b9d0 <rcutils_set_default_allocator>:
 800b9d0:	b1a0      	cbz	r0, 800b9fc <rcutils_set_default_allocator+0x2c>
 800b9d2:	6801      	ldr	r1, [r0, #0]
 800b9d4:	b199      	cbz	r1, 800b9fe <rcutils_set_default_allocator+0x2e>
 800b9d6:	b430      	push	{r4, r5}
 800b9d8:	6844      	ldr	r4, [r0, #4]
 800b9da:	b194      	cbz	r4, 800ba02 <rcutils_set_default_allocator+0x32>
 800b9dc:	68c5      	ldr	r5, [r0, #12]
 800b9de:	b15d      	cbz	r5, 800b9f8 <rcutils_set_default_allocator+0x28>
 800b9e0:	6883      	ldr	r3, [r0, #8]
 800b9e2:	b18b      	cbz	r3, 800ba08 <rcutils_set_default_allocator+0x38>
 800b9e4:	4a09      	ldr	r2, [pc, #36]	; (800ba0c <rcutils_set_default_allocator+0x3c>)
 800b9e6:	e9c2 1400 	strd	r1, r4, [r2]
 800b9ea:	e9c2 3502 	strd	r3, r5, [r2, #8]
 800b9ee:	2000      	movs	r0, #0
 800b9f0:	6110      	str	r0, [r2, #16]
 800b9f2:	2001      	movs	r0, #1
 800b9f4:	bc30      	pop	{r4, r5}
 800b9f6:	4770      	bx	lr
 800b9f8:	4628      	mov	r0, r5
 800b9fa:	e7fb      	b.n	800b9f4 <rcutils_set_default_allocator+0x24>
 800b9fc:	4770      	bx	lr
 800b9fe:	4608      	mov	r0, r1
 800ba00:	4770      	bx	lr
 800ba02:	4620      	mov	r0, r4
 800ba04:	bc30      	pop	{r4, r5}
 800ba06:	4770      	bx	lr
 800ba08:	4618      	mov	r0, r3
 800ba0a:	e7f3      	b.n	800b9f4 <rcutils_set_default_allocator+0x24>
 800ba0c:	20000080 	.word	0x20000080

0800ba10 <rcutils_get_default_allocator>:
 800ba10:	b470      	push	{r4, r5, r6}
 800ba12:	4d05      	ldr	r5, [pc, #20]	; (800ba28 <rcutils_get_default_allocator+0x18>)
 800ba14:	4606      	mov	r6, r0
 800ba16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba18:	4634      	mov	r4, r6
 800ba1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba1c:	682b      	ldr	r3, [r5, #0]
 800ba1e:	6023      	str	r3, [r4, #0]
 800ba20:	4630      	mov	r0, r6
 800ba22:	bc70      	pop	{r4, r5, r6}
 800ba24:	4770      	bx	lr
 800ba26:	bf00      	nop
 800ba28:	20000080 	.word	0x20000080

0800ba2c <rcutils_allocator_is_valid>:
 800ba2c:	b158      	cbz	r0, 800ba46 <rcutils_allocator_is_valid+0x1a>
 800ba2e:	6803      	ldr	r3, [r0, #0]
 800ba30:	b143      	cbz	r3, 800ba44 <rcutils_allocator_is_valid+0x18>
 800ba32:	6843      	ldr	r3, [r0, #4]
 800ba34:	b133      	cbz	r3, 800ba44 <rcutils_allocator_is_valid+0x18>
 800ba36:	68c3      	ldr	r3, [r0, #12]
 800ba38:	b123      	cbz	r3, 800ba44 <rcutils_allocator_is_valid+0x18>
 800ba3a:	6880      	ldr	r0, [r0, #8]
 800ba3c:	3800      	subs	r0, #0
 800ba3e:	bf18      	it	ne
 800ba40:	2001      	movne	r0, #1
 800ba42:	4770      	bx	lr
 800ba44:	4618      	mov	r0, r3
 800ba46:	4770      	bx	lr

0800ba48 <rcutils_get_error_string>:
 800ba48:	4b06      	ldr	r3, [pc, #24]	; (800ba64 <rcutils_get_error_string+0x1c>)
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	b13b      	cbz	r3, 800ba5e <rcutils_get_error_string+0x16>
 800ba4e:	4b06      	ldr	r3, [pc, #24]	; (800ba68 <rcutils_get_error_string+0x20>)
 800ba50:	781a      	ldrb	r2, [r3, #0]
 800ba52:	b90a      	cbnz	r2, 800ba58 <rcutils_get_error_string+0x10>
 800ba54:	2201      	movs	r2, #1
 800ba56:	701a      	strb	r2, [r3, #0]
 800ba58:	4b04      	ldr	r3, [pc, #16]	; (800ba6c <rcutils_get_error_string+0x24>)
 800ba5a:	7818      	ldrb	r0, [r3, #0]
 800ba5c:	4770      	bx	lr
 800ba5e:	4b04      	ldr	r3, [pc, #16]	; (800ba70 <rcutils_get_error_string+0x28>)
 800ba60:	7818      	ldrb	r0, [r3, #0]
 800ba62:	4770      	bx	lr
 800ba64:	2000c178 	.word	0x2000c178
 800ba68:	2000c179 	.word	0x2000c179
 800ba6c:	2000c2a0 	.word	0x2000c2a0
 800ba70:	08016a5c 	.word	0x08016a5c

0800ba74 <rcutils_reset_error>:
 800ba74:	b4d0      	push	{r4, r6, r7}
 800ba76:	4a07      	ldr	r2, [pc, #28]	; (800ba94 <rcutils_reset_error+0x20>)
 800ba78:	4807      	ldr	r0, [pc, #28]	; (800ba98 <rcutils_reset_error+0x24>)
 800ba7a:	4c08      	ldr	r4, [pc, #32]	; (800ba9c <rcutils_reset_error+0x28>)
 800ba7c:	4908      	ldr	r1, [pc, #32]	; (800baa0 <rcutils_reset_error+0x2c>)
 800ba7e:	2300      	movs	r3, #0
 800ba80:	2600      	movs	r6, #0
 800ba82:	2700      	movs	r7, #0
 800ba84:	8013      	strh	r3, [r2, #0]
 800ba86:	7003      	strb	r3, [r0, #0]
 800ba88:	e9c2 6702 	strd	r6, r7, [r2, #8]
 800ba8c:	7023      	strb	r3, [r4, #0]
 800ba8e:	700b      	strb	r3, [r1, #0]
 800ba90:	bcd0      	pop	{r4, r6, r7}
 800ba92:	4770      	bx	lr
 800ba94:	2000c2a8 	.word	0x2000c2a8
 800ba98:	2000c2a0 	.word	0x2000c2a0
 800ba9c:	2000c179 	.word	0x2000c179
 800baa0:	2000c178 	.word	0x2000c178

0800baa4 <rcutils_format_string_limit>:
 800baa4:	b40f      	push	{r0, r1, r2, r3}
 800baa6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baa8:	b083      	sub	sp, #12
 800baaa:	ac08      	add	r4, sp, #32
 800baac:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800baae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bab2:	b34e      	cbz	r6, 800bb08 <rcutils_format_string_limit+0x64>
 800bab4:	a808      	add	r0, sp, #32
 800bab6:	f7ff ffb9 	bl	800ba2c <rcutils_allocator_is_valid>
 800baba:	b328      	cbz	r0, 800bb08 <rcutils_format_string_limit+0x64>
 800babc:	2100      	movs	r1, #0
 800babe:	ab0f      	add	r3, sp, #60	; 0x3c
 800bac0:	4608      	mov	r0, r1
 800bac2:	4632      	mov	r2, r6
 800bac4:	e9cd 3300 	strd	r3, r3, [sp]
 800bac8:	f000 f8ec 	bl	800bca4 <rcutils_vsnprintf>
 800bacc:	1c43      	adds	r3, r0, #1
 800bace:	4605      	mov	r5, r0
 800bad0:	d01a      	beq.n	800bb08 <rcutils_format_string_limit+0x64>
 800bad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bad4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bad6:	1c47      	adds	r7, r0, #1
 800bad8:	429f      	cmp	r7, r3
 800bada:	bf84      	itt	hi
 800badc:	461f      	movhi	r7, r3
 800bade:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 800bae2:	4638      	mov	r0, r7
 800bae4:	9b08      	ldr	r3, [sp, #32]
 800bae6:	4798      	blx	r3
 800bae8:	4604      	mov	r4, r0
 800baea:	b168      	cbz	r0, 800bb08 <rcutils_format_string_limit+0x64>
 800baec:	9b01      	ldr	r3, [sp, #4]
 800baee:	4632      	mov	r2, r6
 800baf0:	4639      	mov	r1, r7
 800baf2:	f000 f8d7 	bl	800bca4 <rcutils_vsnprintf>
 800baf6:	2800      	cmp	r0, #0
 800baf8:	db02      	blt.n	800bb00 <rcutils_format_string_limit+0x5c>
 800bafa:	2300      	movs	r3, #0
 800bafc:	5563      	strb	r3, [r4, r5]
 800bafe:	e004      	b.n	800bb0a <rcutils_format_string_limit+0x66>
 800bb00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb02:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bb04:	4620      	mov	r0, r4
 800bb06:	4798      	blx	r3
 800bb08:	2400      	movs	r4, #0
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	b003      	add	sp, #12
 800bb0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bb12:	b004      	add	sp, #16
 800bb14:	4770      	bx	lr
 800bb16:	bf00      	nop

0800bb18 <rcutils_repl_str>:
 800bb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb1c:	ed2d 8b02 	vpush	{d8}
 800bb20:	b087      	sub	sp, #28
 800bb22:	4680      	mov	r8, r0
 800bb24:	4608      	mov	r0, r1
 800bb26:	f8cd 8000 	str.w	r8, [sp]
 800bb2a:	ee08 2a10 	vmov	s16, r2
 800bb2e:	468a      	mov	sl, r1
 800bb30:	4699      	mov	r9, r3
 800bb32:	f7f4 fb77 	bl	8000224 <strlen>
 800bb36:	2600      	movs	r6, #0
 800bb38:	4647      	mov	r7, r8
 800bb3a:	9001      	str	r0, [sp, #4]
 800bb3c:	46b3      	mov	fp, r6
 800bb3e:	2510      	movs	r5, #16
 800bb40:	46b0      	mov	r8, r6
 800bb42:	e01d      	b.n	800bb80 <rcutils_repl_str+0x68>
 800bb44:	f10b 0b01 	add.w	fp, fp, #1
 800bb48:	455e      	cmp	r6, fp
 800bb4a:	d211      	bcs.n	800bb70 <rcutils_repl_str+0x58>
 800bb4c:	442e      	add	r6, r5
 800bb4e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800bb52:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800bb56:	00b1      	lsls	r1, r6, #2
 800bb58:	4798      	blx	r3
 800bb5a:	2800      	cmp	r0, #0
 800bb5c:	f000 8084 	beq.w	800bc68 <rcutils_repl_str+0x150>
 800bb60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb64:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800bb68:	bf28      	it	cs
 800bb6a:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 800bb6e:	4680      	mov	r8, r0
 800bb70:	9a00      	ldr	r2, [sp, #0]
 800bb72:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800bb76:	1aa2      	subs	r2, r4, r2
 800bb78:	f843 2c04 	str.w	r2, [r3, #-4]
 800bb7c:	9b01      	ldr	r3, [sp, #4]
 800bb7e:	18e7      	adds	r7, r4, r3
 800bb80:	4651      	mov	r1, sl
 800bb82:	4638      	mov	r0, r7
 800bb84:	f009 fc1b 	bl	80153be <strstr>
 800bb88:	4604      	mov	r4, r0
 800bb8a:	4640      	mov	r0, r8
 800bb8c:	2c00      	cmp	r4, #0
 800bb8e:	d1d9      	bne.n	800bb44 <rcutils_repl_str+0x2c>
 800bb90:	46b8      	mov	r8, r7
 800bb92:	4607      	mov	r7, r0
 800bb94:	4640      	mov	r0, r8
 800bb96:	f7f4 fb45 	bl	8000224 <strlen>
 800bb9a:	9b00      	ldr	r3, [sp, #0]
 800bb9c:	eba8 0303 	sub.w	r3, r8, r3
 800bba0:	181d      	adds	r5, r3, r0
 800bba2:	9504      	str	r5, [sp, #16]
 800bba4:	f1bb 0f00 	cmp.w	fp, #0
 800bba8:	d03d      	beq.n	800bc26 <rcutils_repl_str+0x10e>
 800bbaa:	ee18 0a10 	vmov	r0, s16
 800bbae:	f7f4 fb39 	bl	8000224 <strlen>
 800bbb2:	9b01      	ldr	r3, [sp, #4]
 800bbb4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800bbb8:	1ac3      	subs	r3, r0, r3
 800bbba:	fb0b 5303 	mla	r3, fp, r3, r5
 800bbbe:	9305      	str	r3, [sp, #20]
 800bbc0:	4606      	mov	r6, r0
 800bbc2:	1c58      	adds	r0, r3, #1
 800bbc4:	f8d9 3000 	ldr.w	r3, [r9]
 800bbc8:	4798      	blx	r3
 800bbca:	9003      	str	r0, [sp, #12]
 800bbcc:	2800      	cmp	r0, #0
 800bbce:	d04c      	beq.n	800bc6a <rcutils_repl_str+0x152>
 800bbd0:	683a      	ldr	r2, [r7, #0]
 800bbd2:	9900      	ldr	r1, [sp, #0]
 800bbd4:	f009 f9d4 	bl	8014f80 <memcpy>
 800bbd8:	9b03      	ldr	r3, [sp, #12]
 800bbda:	683d      	ldr	r5, [r7, #0]
 800bbdc:	ee18 8a10 	vmov	r8, s16
 800bbe0:	441d      	add	r5, r3
 800bbe2:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800bbe6:	9302      	str	r3, [sp, #8]
 800bbe8:	46ba      	mov	sl, r7
 800bbea:	4632      	mov	r2, r6
 800bbec:	4641      	mov	r1, r8
 800bbee:	4628      	mov	r0, r5
 800bbf0:	f009 f9c6 	bl	8014f80 <memcpy>
 800bbf4:	9b01      	ldr	r3, [sp, #4]
 800bbf6:	f85a 2b04 	ldr.w	r2, [sl], #4
 800bbfa:	441a      	add	r2, r3
 800bbfc:	9b00      	ldr	r3, [sp, #0]
 800bbfe:	1899      	adds	r1, r3, r2
 800bc00:	9b02      	ldr	r3, [sp, #8]
 800bc02:	4435      	add	r5, r6
 800bc04:	429c      	cmp	r4, r3
 800bc06:	4628      	mov	r0, r5
 800bc08:	d025      	beq.n	800bc56 <rcutils_repl_str+0x13e>
 800bc0a:	f8da 3000 	ldr.w	r3, [sl]
 800bc0e:	3401      	adds	r4, #1
 800bc10:	1a9a      	subs	r2, r3, r2
 800bc12:	4415      	add	r5, r2
 800bc14:	f009 f9b4 	bl	8014f80 <memcpy>
 800bc18:	455c      	cmp	r4, fp
 800bc1a:	d3e6      	bcc.n	800bbea <rcutils_repl_str+0xd2>
 800bc1c:	9a03      	ldr	r2, [sp, #12]
 800bc1e:	9905      	ldr	r1, [sp, #20]
 800bc20:	2300      	movs	r3, #0
 800bc22:	5453      	strb	r3, [r2, r1]
 800bc24:	e00b      	b.n	800bc3e <rcutils_repl_str+0x126>
 800bc26:	4628      	mov	r0, r5
 800bc28:	f8d9 3000 	ldr.w	r3, [r9]
 800bc2c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800bc30:	3001      	adds	r0, #1
 800bc32:	4798      	blx	r3
 800bc34:	9003      	str	r0, [sp, #12]
 800bc36:	b110      	cbz	r0, 800bc3e <rcutils_repl_str+0x126>
 800bc38:	9900      	ldr	r1, [sp, #0]
 800bc3a:	f009 fba4 	bl	8015386 <strcpy>
 800bc3e:	4638      	mov	r0, r7
 800bc40:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bc44:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800bc48:	4798      	blx	r3
 800bc4a:	9803      	ldr	r0, [sp, #12]
 800bc4c:	b007      	add	sp, #28
 800bc4e:	ecbd 8b02 	vpop	{d8}
 800bc52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc56:	9b04      	ldr	r3, [sp, #16]
 800bc58:	3401      	adds	r4, #1
 800bc5a:	1a9a      	subs	r2, r3, r2
 800bc5c:	4415      	add	r5, r2
 800bc5e:	f009 f98f 	bl	8014f80 <memcpy>
 800bc62:	455c      	cmp	r4, fp
 800bc64:	d3c1      	bcc.n	800bbea <rcutils_repl_str+0xd2>
 800bc66:	e7d9      	b.n	800bc1c <rcutils_repl_str+0x104>
 800bc68:	4647      	mov	r7, r8
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	9303      	str	r3, [sp, #12]
 800bc6e:	e7e6      	b.n	800bc3e <rcutils_repl_str+0x126>

0800bc70 <rcutils_snprintf>:
 800bc70:	b40c      	push	{r2, r3}
 800bc72:	b530      	push	{r4, r5, lr}
 800bc74:	b083      	sub	sp, #12
 800bc76:	ab06      	add	r3, sp, #24
 800bc78:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc7c:	9301      	str	r3, [sp, #4]
 800bc7e:	b152      	cbz	r2, 800bc96 <rcutils_snprintf+0x26>
 800bc80:	b138      	cbz	r0, 800bc92 <rcutils_snprintf+0x22>
 800bc82:	b141      	cbz	r1, 800bc96 <rcutils_snprintf+0x26>
 800bc84:	f009 fc5a 	bl	801553c <vsniprintf>
 800bc88:	b003      	add	sp, #12
 800bc8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc8e:	b002      	add	sp, #8
 800bc90:	4770      	bx	lr
 800bc92:	2900      	cmp	r1, #0
 800bc94:	d0f6      	beq.n	800bc84 <rcutils_snprintf+0x14>
 800bc96:	f009 f8f1 	bl	8014e7c <__errno>
 800bc9a:	2316      	movs	r3, #22
 800bc9c:	6003      	str	r3, [r0, #0]
 800bc9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bca2:	e7f1      	b.n	800bc88 <rcutils_snprintf+0x18>

0800bca4 <rcutils_vsnprintf>:
 800bca4:	b570      	push	{r4, r5, r6, lr}
 800bca6:	b13a      	cbz	r2, 800bcb8 <rcutils_vsnprintf+0x14>
 800bca8:	b120      	cbz	r0, 800bcb4 <rcutils_vsnprintf+0x10>
 800bcaa:	b129      	cbz	r1, 800bcb8 <rcutils_vsnprintf+0x14>
 800bcac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bcb0:	f009 bc44 	b.w	801553c <vsniprintf>
 800bcb4:	2900      	cmp	r1, #0
 800bcb6:	d0f9      	beq.n	800bcac <rcutils_vsnprintf+0x8>
 800bcb8:	f009 f8e0 	bl	8014e7c <__errno>
 800bcbc:	2316      	movs	r3, #22
 800bcbe:	6003      	str	r3, [r0, #0]
 800bcc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcc4:	bd70      	pop	{r4, r5, r6, pc}
 800bcc6:	bf00      	nop

0800bcc8 <rcutils_strdup>:
 800bcc8:	b084      	sub	sp, #16
 800bcca:	b570      	push	{r4, r5, r6, lr}
 800bccc:	b082      	sub	sp, #8
 800bcce:	ac07      	add	r4, sp, #28
 800bcd0:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800bcd4:	4605      	mov	r5, r0
 800bcd6:	b1b0      	cbz	r0, 800bd06 <rcutils_strdup+0x3e>
 800bcd8:	f7f4 faa4 	bl	8000224 <strlen>
 800bcdc:	1c42      	adds	r2, r0, #1
 800bcde:	9b07      	ldr	r3, [sp, #28]
 800bce0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bce2:	9201      	str	r2, [sp, #4]
 800bce4:	4606      	mov	r6, r0
 800bce6:	4610      	mov	r0, r2
 800bce8:	4798      	blx	r3
 800bcea:	4604      	mov	r4, r0
 800bcec:	b128      	cbz	r0, 800bcfa <rcutils_strdup+0x32>
 800bcee:	9a01      	ldr	r2, [sp, #4]
 800bcf0:	4629      	mov	r1, r5
 800bcf2:	f009 f945 	bl	8014f80 <memcpy>
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	55a3      	strb	r3, [r4, r6]
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	b002      	add	sp, #8
 800bcfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd02:	b004      	add	sp, #16
 800bd04:	4770      	bx	lr
 800bd06:	4604      	mov	r4, r0
 800bd08:	e7f7      	b.n	800bcfa <rcutils_strdup+0x32>
 800bd0a:	bf00      	nop

0800bd0c <rcutils_strndup>:
 800bd0c:	b082      	sub	sp, #8
 800bd0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd10:	460e      	mov	r6, r1
 800bd12:	a906      	add	r1, sp, #24
 800bd14:	e881 000c 	stmia.w	r1, {r2, r3}
 800bd18:	4605      	mov	r5, r0
 800bd1a:	b180      	cbz	r0, 800bd3e <rcutils_strndup+0x32>
 800bd1c:	1c77      	adds	r7, r6, #1
 800bd1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bd20:	4638      	mov	r0, r7
 800bd22:	4790      	blx	r2
 800bd24:	4604      	mov	r4, r0
 800bd26:	b128      	cbz	r0, 800bd34 <rcutils_strndup+0x28>
 800bd28:	463a      	mov	r2, r7
 800bd2a:	4629      	mov	r1, r5
 800bd2c:	f009 f928 	bl	8014f80 <memcpy>
 800bd30:	2300      	movs	r3, #0
 800bd32:	55a3      	strb	r3, [r4, r6]
 800bd34:	4620      	mov	r0, r4
 800bd36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bd3a:	b002      	add	sp, #8
 800bd3c:	4770      	bx	lr
 800bd3e:	4604      	mov	r4, r0
 800bd40:	e7f8      	b.n	800bd34 <rcutils_strndup+0x28>
 800bd42:	bf00      	nop

0800bd44 <rcutils_get_zero_initialized_string_map>:
 800bd44:	4b01      	ldr	r3, [pc, #4]	; (800bd4c <rcutils_get_zero_initialized_string_map+0x8>)
 800bd46:	2000      	movs	r0, #0
 800bd48:	6018      	str	r0, [r3, #0]
 800bd4a:	4770      	bx	lr
 800bd4c:	2000c17c 	.word	0x2000c17c

0800bd50 <rcutils_string_map_reserve>:
 800bd50:	2800      	cmp	r0, #0
 800bd52:	d061      	beq.n	800be18 <rcutils_string_map_reserve+0xc8>
 800bd54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd58:	6805      	ldr	r5, [r0, #0]
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	460c      	mov	r4, r1
 800bd5e:	4606      	mov	r6, r0
 800bd60:	b12d      	cbz	r5, 800bd6e <rcutils_string_map_reserve+0x1e>
 800bd62:	68eb      	ldr	r3, [r5, #12]
 800bd64:	42a3      	cmp	r3, r4
 800bd66:	d906      	bls.n	800bd76 <rcutils_string_map_reserve+0x26>
 800bd68:	461c      	mov	r4, r3
 800bd6a:	2d00      	cmp	r5, #0
 800bd6c:	d1f9      	bne.n	800bd62 <rcutils_string_map_reserve+0x12>
 800bd6e:	201f      	movs	r0, #31
 800bd70:	b003      	add	sp, #12
 800bd72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd76:	68ab      	ldr	r3, [r5, #8]
 800bd78:	42a3      	cmp	r3, r4
 800bd7a:	d049      	beq.n	800be10 <rcutils_string_map_reserve+0xc0>
 800bd7c:	6a2f      	ldr	r7, [r5, #32]
 800bd7e:	2c00      	cmp	r4, #0
 800bd80:	d035      	beq.n	800bdee <rcutils_string_map_reserve+0x9e>
 800bd82:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800bd86:	d245      	bcs.n	800be14 <rcutils_string_map_reserve+0xc4>
 800bd88:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800bd8c:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800bd90:	6828      	ldr	r0, [r5, #0]
 800bd92:	4641      	mov	r1, r8
 800bd94:	463a      	mov	r2, r7
 800bd96:	47c8      	blx	r9
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	d03b      	beq.n	800be14 <rcutils_string_map_reserve+0xc4>
 800bd9c:	6833      	ldr	r3, [r6, #0]
 800bd9e:	463a      	mov	r2, r7
 800bda0:	6018      	str	r0, [r3, #0]
 800bda2:	4641      	mov	r1, r8
 800bda4:	6858      	ldr	r0, [r3, #4]
 800bda6:	47c8      	blx	r9
 800bda8:	2800      	cmp	r0, #0
 800bdaa:	d033      	beq.n	800be14 <rcutils_string_map_reserve+0xc4>
 800bdac:	6835      	ldr	r5, [r6, #0]
 800bdae:	68ab      	ldr	r3, [r5, #8]
 800bdb0:	6068      	str	r0, [r5, #4]
 800bdb2:	42a3      	cmp	r3, r4
 800bdb4:	d227      	bcs.n	800be06 <rcutils_string_map_reserve+0xb6>
 800bdb6:	682a      	ldr	r2, [r5, #0]
 800bdb8:	eb00 0108 	add.w	r1, r0, r8
 800bdbc:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800bdc0:	428f      	cmp	r7, r1
 800bdc2:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800bdc6:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800bdca:	d203      	bcs.n	800bdd4 <rcutils_string_map_reserve+0x84>
 800bdcc:	eb02 0108 	add.w	r1, r2, r8
 800bdd0:	428e      	cmp	r6, r1
 800bdd2:	d323      	bcc.n	800be1c <rcutils_string_map_reserve+0xcc>
 800bdd4:	1ae3      	subs	r3, r4, r3
 800bdd6:	009a      	lsls	r2, r3, #2
 800bdd8:	4638      	mov	r0, r7
 800bdda:	2100      	movs	r1, #0
 800bddc:	9201      	str	r2, [sp, #4]
 800bdde:	f009 f8f7 	bl	8014fd0 <memset>
 800bde2:	9a01      	ldr	r2, [sp, #4]
 800bde4:	4630      	mov	r0, r6
 800bde6:	2100      	movs	r1, #0
 800bde8:	f009 f8f2 	bl	8014fd0 <memset>
 800bdec:	e00b      	b.n	800be06 <rcutils_string_map_reserve+0xb6>
 800bdee:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800bdf2:	6828      	ldr	r0, [r5, #0]
 800bdf4:	4639      	mov	r1, r7
 800bdf6:	47c0      	blx	r8
 800bdf8:	6833      	ldr	r3, [r6, #0]
 800bdfa:	4639      	mov	r1, r7
 800bdfc:	6858      	ldr	r0, [r3, #4]
 800bdfe:	601c      	str	r4, [r3, #0]
 800be00:	47c0      	blx	r8
 800be02:	6835      	ldr	r5, [r6, #0]
 800be04:	606c      	str	r4, [r5, #4]
 800be06:	2000      	movs	r0, #0
 800be08:	60ac      	str	r4, [r5, #8]
 800be0a:	b003      	add	sp, #12
 800be0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be10:	2000      	movs	r0, #0
 800be12:	e7ad      	b.n	800bd70 <rcutils_string_map_reserve+0x20>
 800be14:	200a      	movs	r0, #10
 800be16:	e7ab      	b.n	800bd70 <rcutils_string_map_reserve+0x20>
 800be18:	200b      	movs	r0, #11
 800be1a:	4770      	bx	lr
 800be1c:	1f13      	subs	r3, r2, #4
 800be1e:	f1ac 0c04 	sub.w	ip, ip, #4
 800be22:	4498      	add	r8, r3
 800be24:	4460      	add	r0, ip
 800be26:	4462      	add	r2, ip
 800be28:	2300      	movs	r3, #0
 800be2a:	f842 3f04 	str.w	r3, [r2, #4]!
 800be2e:	4542      	cmp	r2, r8
 800be30:	f840 3f04 	str.w	r3, [r0, #4]!
 800be34:	d1f9      	bne.n	800be2a <rcutils_string_map_reserve+0xda>
 800be36:	e7e6      	b.n	800be06 <rcutils_string_map_reserve+0xb6>

0800be38 <rcutils_string_map_init>:
 800be38:	b082      	sub	sp, #8
 800be3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be3c:	460e      	mov	r6, r1
 800be3e:	a906      	add	r1, sp, #24
 800be40:	e881 000c 	stmia.w	r1, {r2, r3}
 800be44:	b380      	cbz	r0, 800bea8 <rcutils_string_map_init+0x70>
 800be46:	6807      	ldr	r7, [r0, #0]
 800be48:	4604      	mov	r4, r0
 800be4a:	b12f      	cbz	r7, 800be58 <rcutils_string_map_init+0x20>
 800be4c:	251e      	movs	r5, #30
 800be4e:	4628      	mov	r0, r5
 800be50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800be54:	b002      	add	sp, #8
 800be56:	4770      	bx	lr
 800be58:	a806      	add	r0, sp, #24
 800be5a:	f7ff fde7 	bl	800ba2c <rcutils_allocator_is_valid>
 800be5e:	b318      	cbz	r0, 800bea8 <rcutils_string_map_init+0x70>
 800be60:	9b06      	ldr	r3, [sp, #24]
 800be62:	990a      	ldr	r1, [sp, #40]	; 0x28
 800be64:	2024      	movs	r0, #36	; 0x24
 800be66:	4798      	blx	r3
 800be68:	4605      	mov	r5, r0
 800be6a:	6020      	str	r0, [r4, #0]
 800be6c:	b310      	cbz	r0, 800beb4 <rcutils_string_map_init+0x7c>
 800be6e:	f10d 0e18 	add.w	lr, sp, #24
 800be72:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800be76:	f105 0c10 	add.w	ip, r5, #16
 800be7a:	e9c5 7700 	strd	r7, r7, [r5]
 800be7e:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800be82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800be86:	f8de 3000 	ldr.w	r3, [lr]
 800be8a:	f8cc 3000 	str.w	r3, [ip]
 800be8e:	4631      	mov	r1, r6
 800be90:	4620      	mov	r0, r4
 800be92:	f7ff ff5d 	bl	800bd50 <rcutils_string_map_reserve>
 800be96:	4605      	mov	r5, r0
 800be98:	2800      	cmp	r0, #0
 800be9a:	d0d8      	beq.n	800be4e <rcutils_string_map_init+0x16>
 800be9c:	9b07      	ldr	r3, [sp, #28]
 800be9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bea0:	6820      	ldr	r0, [r4, #0]
 800bea2:	4798      	blx	r3
 800bea4:	6027      	str	r7, [r4, #0]
 800bea6:	e7d2      	b.n	800be4e <rcutils_string_map_init+0x16>
 800bea8:	250b      	movs	r5, #11
 800beaa:	4628      	mov	r0, r5
 800beac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800beb0:	b002      	add	sp, #8
 800beb2:	4770      	bx	lr
 800beb4:	250a      	movs	r5, #10
 800beb6:	e7ca      	b.n	800be4e <rcutils_string_map_init+0x16>

0800beb8 <rcutils_string_map_fini>:
 800beb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bebc:	b082      	sub	sp, #8
 800bebe:	2800      	cmp	r0, #0
 800bec0:	d039      	beq.n	800bf36 <rcutils_string_map_fini+0x7e>
 800bec2:	6804      	ldr	r4, [r0, #0]
 800bec4:	4606      	mov	r6, r0
 800bec6:	2c00      	cmp	r4, #0
 800bec8:	d031      	beq.n	800bf2e <rcutils_string_map_fini+0x76>
 800beca:	68a3      	ldr	r3, [r4, #8]
 800becc:	b323      	cbz	r3, 800bf18 <rcutils_string_map_fini+0x60>
 800bece:	2500      	movs	r5, #0
 800bed0:	6822      	ldr	r2, [r4, #0]
 800bed2:	46a8      	mov	r8, r5
 800bed4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800bed8:	b1d8      	cbz	r0, 800bf12 <rcutils_string_map_fini+0x5a>
 800beda:	6a21      	ldr	r1, [r4, #32]
 800bedc:	6967      	ldr	r7, [r4, #20]
 800bede:	9101      	str	r1, [sp, #4]
 800bee0:	47b8      	blx	r7
 800bee2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bee6:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800beea:	9901      	ldr	r1, [sp, #4]
 800beec:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bef0:	47b8      	blx	r7
 800bef2:	68e3      	ldr	r3, [r4, #12]
 800bef4:	6862      	ldr	r2, [r4, #4]
 800bef6:	3b01      	subs	r3, #1
 800bef8:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800befc:	60e3      	str	r3, [r4, #12]
 800befe:	6834      	ldr	r4, [r6, #0]
 800bf00:	68a3      	ldr	r3, [r4, #8]
 800bf02:	3501      	adds	r5, #1
 800bf04:	429d      	cmp	r5, r3
 800bf06:	d207      	bcs.n	800bf18 <rcutils_string_map_fini+0x60>
 800bf08:	6822      	ldr	r2, [r4, #0]
 800bf0a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800bf0e:	2800      	cmp	r0, #0
 800bf10:	d1e3      	bne.n	800beda <rcutils_string_map_fini+0x22>
 800bf12:	3501      	adds	r5, #1
 800bf14:	429d      	cmp	r5, r3
 800bf16:	d3dd      	bcc.n	800bed4 <rcutils_string_map_fini+0x1c>
 800bf18:	2100      	movs	r1, #0
 800bf1a:	4630      	mov	r0, r6
 800bf1c:	f7ff ff18 	bl	800bd50 <rcutils_string_map_reserve>
 800bf20:	4604      	mov	r4, r0
 800bf22:	b920      	cbnz	r0, 800bf2e <rcutils_string_map_fini+0x76>
 800bf24:	6830      	ldr	r0, [r6, #0]
 800bf26:	6943      	ldr	r3, [r0, #20]
 800bf28:	6a01      	ldr	r1, [r0, #32]
 800bf2a:	4798      	blx	r3
 800bf2c:	6034      	str	r4, [r6, #0]
 800bf2e:	4620      	mov	r0, r4
 800bf30:	b002      	add	sp, #8
 800bf32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf36:	240b      	movs	r4, #11
 800bf38:	4620      	mov	r0, r4
 800bf3a:	b002      	add	sp, #8
 800bf3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bf40 <rcutils_string_map_getn>:
 800bf40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf44:	b082      	sub	sp, #8
 800bf46:	b308      	cbz	r0, 800bf8c <rcutils_string_map_getn+0x4c>
 800bf48:	6804      	ldr	r4, [r0, #0]
 800bf4a:	b304      	cbz	r4, 800bf8e <rcutils_string_map_getn+0x4e>
 800bf4c:	460d      	mov	r5, r1
 800bf4e:	b1e9      	cbz	r1, 800bf8c <rcutils_string_map_getn+0x4c>
 800bf50:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800bf54:	6827      	ldr	r7, [r4, #0]
 800bf56:	f1b9 0f00 	cmp.w	r9, #0
 800bf5a:	d017      	beq.n	800bf8c <rcutils_string_map_getn+0x4c>
 800bf5c:	4690      	mov	r8, r2
 800bf5e:	3f04      	subs	r7, #4
 800bf60:	2600      	movs	r6, #0
 800bf62:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800bf66:	9101      	str	r1, [sp, #4]
 800bf68:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800bf6c:	4608      	mov	r0, r1
 800bf6e:	3601      	adds	r6, #1
 800bf70:	b151      	cbz	r1, 800bf88 <rcutils_string_map_getn+0x48>
 800bf72:	f7f4 f957 	bl	8000224 <strlen>
 800bf76:	4540      	cmp	r0, r8
 800bf78:	4602      	mov	r2, r0
 800bf7a:	9901      	ldr	r1, [sp, #4]
 800bf7c:	bf38      	it	cc
 800bf7e:	4642      	movcc	r2, r8
 800bf80:	4628      	mov	r0, r5
 800bf82:	f009 fa08 	bl	8015396 <strncmp>
 800bf86:	b130      	cbz	r0, 800bf96 <rcutils_string_map_getn+0x56>
 800bf88:	45b1      	cmp	r9, r6
 800bf8a:	d1ea      	bne.n	800bf62 <rcutils_string_map_getn+0x22>
 800bf8c:	2400      	movs	r4, #0
 800bf8e:	4620      	mov	r0, r4
 800bf90:	b002      	add	sp, #8
 800bf92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf96:	6863      	ldr	r3, [r4, #4]
 800bf98:	f853 400a 	ldr.w	r4, [r3, sl]
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	b002      	add	sp, #8
 800bfa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bfa4 <rcutils_system_time_now>:
 800bfa4:	b310      	cbz	r0, 800bfec <rcutils_system_time_now+0x48>
 800bfa6:	b570      	push	{r4, r5, r6, lr}
 800bfa8:	b084      	sub	sp, #16
 800bfaa:	4669      	mov	r1, sp
 800bfac:	4604      	mov	r4, r0
 800bfae:	2001      	movs	r0, #1
 800bfb0:	f7f6 f86e 	bl	8002090 <clock_gettime>
 800bfb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	f171 0300 	sbcs.w	r3, r1, #0
 800bfbe:	db12      	blt.n	800bfe6 <rcutils_system_time_now+0x42>
 800bfc0:	9d02      	ldr	r5, [sp, #8]
 800bfc2:	2d00      	cmp	r5, #0
 800bfc4:	db0c      	blt.n	800bfe0 <rcutils_system_time_now+0x3c>
 800bfc6:	4e0a      	ldr	r6, [pc, #40]	; (800bff0 <rcutils_system_time_now+0x4c>)
 800bfc8:	fba0 2306 	umull	r2, r3, r0, r6
 800bfcc:	1952      	adds	r2, r2, r5
 800bfce:	fb06 3301 	mla	r3, r6, r1, r3
 800bfd2:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800bfd6:	2000      	movs	r0, #0
 800bfd8:	e9c4 2300 	strd	r2, r3, [r4]
 800bfdc:	b004      	add	sp, #16
 800bfde:	bd70      	pop	{r4, r5, r6, pc}
 800bfe0:	ea50 0301 	orrs.w	r3, r0, r1
 800bfe4:	d1ef      	bne.n	800bfc6 <rcutils_system_time_now+0x22>
 800bfe6:	2002      	movs	r0, #2
 800bfe8:	b004      	add	sp, #16
 800bfea:	bd70      	pop	{r4, r5, r6, pc}
 800bfec:	200b      	movs	r0, #11
 800bfee:	4770      	bx	lr
 800bff0:	3b9aca00 	.word	0x3b9aca00

0800bff4 <rcutils_steady_time_now>:
 800bff4:	b310      	cbz	r0, 800c03c <rcutils_steady_time_now+0x48>
 800bff6:	b570      	push	{r4, r5, r6, lr}
 800bff8:	b084      	sub	sp, #16
 800bffa:	4669      	mov	r1, sp
 800bffc:	4604      	mov	r4, r0
 800bffe:	2000      	movs	r0, #0
 800c000:	f7f6 f846 	bl	8002090 <clock_gettime>
 800c004:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c008:	2800      	cmp	r0, #0
 800c00a:	f171 0300 	sbcs.w	r3, r1, #0
 800c00e:	db12      	blt.n	800c036 <rcutils_steady_time_now+0x42>
 800c010:	9d02      	ldr	r5, [sp, #8]
 800c012:	2d00      	cmp	r5, #0
 800c014:	db0c      	blt.n	800c030 <rcutils_steady_time_now+0x3c>
 800c016:	4e0a      	ldr	r6, [pc, #40]	; (800c040 <rcutils_steady_time_now+0x4c>)
 800c018:	fba0 2306 	umull	r2, r3, r0, r6
 800c01c:	1952      	adds	r2, r2, r5
 800c01e:	fb06 3301 	mla	r3, r6, r1, r3
 800c022:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800c026:	2000      	movs	r0, #0
 800c028:	e9c4 2300 	strd	r2, r3, [r4]
 800c02c:	b004      	add	sp, #16
 800c02e:	bd70      	pop	{r4, r5, r6, pc}
 800c030:	ea50 0301 	orrs.w	r3, r0, r1
 800c034:	d1ef      	bne.n	800c016 <rcutils_steady_time_now+0x22>
 800c036:	2002      	movs	r0, #2
 800c038:	b004      	add	sp, #16
 800c03a:	bd70      	pop	{r4, r5, r6, pc}
 800c03c:	200b      	movs	r0, #11
 800c03e:	4770      	bx	lr
 800c040:	3b9aca00 	.word	0x3b9aca00

0800c044 <rmw_get_default_publisher_options>:
 800c044:	2000      	movs	r0, #0
 800c046:	4770      	bx	lr

0800c048 <rmw_get_default_subscription_options>:
 800c048:	2200      	movs	r2, #0
 800c04a:	6002      	str	r2, [r0, #0]
 800c04c:	7102      	strb	r2, [r0, #4]
 800c04e:	4770      	bx	lr

0800c050 <rmw_get_zero_initialized_message_info>:
 800c050:	b470      	push	{r4, r5, r6}
 800c052:	4d07      	ldr	r5, [pc, #28]	; (800c070 <rmw_get_zero_initialized_message_info+0x20>)
 800c054:	4606      	mov	r6, r0
 800c056:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c058:	4634      	mov	r4, r6
 800c05a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c05c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c05e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c060:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c064:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c068:	4630      	mov	r0, r6
 800c06a:	bc70      	pop	{r4, r5, r6}
 800c06c:	4770      	bx	lr
 800c06e:	bf00      	nop
 800c070:	08016750 	.word	0x08016750

0800c074 <rmw_validate_full_topic_name>:
 800c074:	2800      	cmp	r0, #0
 800c076:	d062      	beq.n	800c13e <rmw_validate_full_topic_name+0xca>
 800c078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c07c:	460d      	mov	r5, r1
 800c07e:	2900      	cmp	r1, #0
 800c080:	d05f      	beq.n	800c142 <rmw_validate_full_topic_name+0xce>
 800c082:	4616      	mov	r6, r2
 800c084:	4604      	mov	r4, r0
 800c086:	f7f4 f8cd 	bl	8000224 <strlen>
 800c08a:	b148      	cbz	r0, 800c0a0 <rmw_validate_full_topic_name+0x2c>
 800c08c:	7823      	ldrb	r3, [r4, #0]
 800c08e:	2b2f      	cmp	r3, #47	; 0x2f
 800c090:	d00d      	beq.n	800c0ae <rmw_validate_full_topic_name+0x3a>
 800c092:	2302      	movs	r3, #2
 800c094:	602b      	str	r3, [r5, #0]
 800c096:	b13e      	cbz	r6, 800c0a8 <rmw_validate_full_topic_name+0x34>
 800c098:	2000      	movs	r0, #0
 800c09a:	6030      	str	r0, [r6, #0]
 800c09c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	602b      	str	r3, [r5, #0]
 800c0a4:	2e00      	cmp	r6, #0
 800c0a6:	d1f7      	bne.n	800c098 <rmw_validate_full_topic_name+0x24>
 800c0a8:	2000      	movs	r0, #0
 800c0aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ae:	1e47      	subs	r7, r0, #1
 800c0b0:	5de3      	ldrb	r3, [r4, r7]
 800c0b2:	2b2f      	cmp	r3, #47	; 0x2f
 800c0b4:	d047      	beq.n	800c146 <rmw_validate_full_topic_name+0xd2>
 800c0b6:	1e63      	subs	r3, r4, #1
 800c0b8:	eb03 0900 	add.w	r9, r3, r0
 800c0bc:	f1c4 0e01 	rsb	lr, r4, #1
 800c0c0:	eb0e 0803 	add.w	r8, lr, r3
 800c0c4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800c0c8:	f021 0220 	bic.w	r2, r1, #32
 800c0cc:	3a41      	subs	r2, #65	; 0x41
 800c0ce:	2a19      	cmp	r2, #25
 800c0d0:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800c0d4:	d90c      	bls.n	800c0f0 <rmw_validate_full_topic_name+0x7c>
 800c0d6:	295f      	cmp	r1, #95	; 0x5f
 800c0d8:	d00a      	beq.n	800c0f0 <rmw_validate_full_topic_name+0x7c>
 800c0da:	f1bc 0f0a 	cmp.w	ip, #10
 800c0de:	d907      	bls.n	800c0f0 <rmw_validate_full_topic_name+0x7c>
 800c0e0:	2304      	movs	r3, #4
 800c0e2:	602b      	str	r3, [r5, #0]
 800c0e4:	2e00      	cmp	r6, #0
 800c0e6:	d0df      	beq.n	800c0a8 <rmw_validate_full_topic_name+0x34>
 800c0e8:	f8c6 8000 	str.w	r8, [r6]
 800c0ec:	2000      	movs	r0, #0
 800c0ee:	e7d5      	b.n	800c09c <rmw_validate_full_topic_name+0x28>
 800c0f0:	454b      	cmp	r3, r9
 800c0f2:	d1e5      	bne.n	800c0c0 <rmw_validate_full_topic_name+0x4c>
 800c0f4:	f8df e084 	ldr.w	lr, [pc, #132]	; 800c17c <rmw_validate_full_topic_name+0x108>
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	f107 0801 	add.w	r8, r7, #1
 800c0fe:	e005      	b.n	800c10c <rmw_validate_full_topic_name+0x98>
 800c100:	4611      	mov	r1, r2
 800c102:	4288      	cmp	r0, r1
 800c104:	4613      	mov	r3, r2
 800c106:	f104 0401 	add.w	r4, r4, #1
 800c10a:	d925      	bls.n	800c158 <rmw_validate_full_topic_name+0xe4>
 800c10c:	429f      	cmp	r7, r3
 800c10e:	f103 0201 	add.w	r2, r3, #1
 800c112:	d01e      	beq.n	800c152 <rmw_validate_full_topic_name+0xde>
 800c114:	7821      	ldrb	r1, [r4, #0]
 800c116:	292f      	cmp	r1, #47	; 0x2f
 800c118:	d1f2      	bne.n	800c100 <rmw_validate_full_topic_name+0x8c>
 800c11a:	f894 c001 	ldrb.w	ip, [r4, #1]
 800c11e:	1c5a      	adds	r2, r3, #1
 800c120:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800c124:	4611      	mov	r1, r2
 800c126:	d024      	beq.n	800c172 <rmw_validate_full_topic_name+0xfe>
 800c128:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800c12c:	075b      	lsls	r3, r3, #29
 800c12e:	d5e8      	bpl.n	800c102 <rmw_validate_full_topic_name+0x8e>
 800c130:	2306      	movs	r3, #6
 800c132:	602b      	str	r3, [r5, #0]
 800c134:	2e00      	cmp	r6, #0
 800c136:	d0b7      	beq.n	800c0a8 <rmw_validate_full_topic_name+0x34>
 800c138:	6032      	str	r2, [r6, #0]
 800c13a:	2000      	movs	r0, #0
 800c13c:	e7ae      	b.n	800c09c <rmw_validate_full_topic_name+0x28>
 800c13e:	200b      	movs	r0, #11
 800c140:	4770      	bx	lr
 800c142:	200b      	movs	r0, #11
 800c144:	e7aa      	b.n	800c09c <rmw_validate_full_topic_name+0x28>
 800c146:	2303      	movs	r3, #3
 800c148:	602b      	str	r3, [r5, #0]
 800c14a:	2e00      	cmp	r6, #0
 800c14c:	d0ac      	beq.n	800c0a8 <rmw_validate_full_topic_name+0x34>
 800c14e:	6037      	str	r7, [r6, #0]
 800c150:	e7aa      	b.n	800c0a8 <rmw_validate_full_topic_name+0x34>
 800c152:	4641      	mov	r1, r8
 800c154:	1c7a      	adds	r2, r7, #1
 800c156:	e7d4      	b.n	800c102 <rmw_validate_full_topic_name+0x8e>
 800c158:	28f7      	cmp	r0, #247	; 0xf7
 800c15a:	d802      	bhi.n	800c162 <rmw_validate_full_topic_name+0xee>
 800c15c:	2000      	movs	r0, #0
 800c15e:	6028      	str	r0, [r5, #0]
 800c160:	e79c      	b.n	800c09c <rmw_validate_full_topic_name+0x28>
 800c162:	2307      	movs	r3, #7
 800c164:	602b      	str	r3, [r5, #0]
 800c166:	2e00      	cmp	r6, #0
 800c168:	d09e      	beq.n	800c0a8 <rmw_validate_full_topic_name+0x34>
 800c16a:	23f6      	movs	r3, #246	; 0xf6
 800c16c:	6033      	str	r3, [r6, #0]
 800c16e:	2000      	movs	r0, #0
 800c170:	e794      	b.n	800c09c <rmw_validate_full_topic_name+0x28>
 800c172:	2305      	movs	r3, #5
 800c174:	602b      	str	r3, [r5, #0]
 800c176:	2e00      	cmp	r6, #0
 800c178:	d1de      	bne.n	800c138 <rmw_validate_full_topic_name+0xc4>
 800c17a:	e795      	b.n	800c0a8 <rmw_validate_full_topic_name+0x34>
 800c17c:	0801715d 	.word	0x0801715d

0800c180 <rmw_validate_namespace_with_size>:
 800c180:	b340      	cbz	r0, 800c1d4 <rmw_validate_namespace_with_size+0x54>
 800c182:	b5d0      	push	{r4, r6, r7, lr}
 800c184:	4614      	mov	r4, r2
 800c186:	b0c2      	sub	sp, #264	; 0x108
 800c188:	b332      	cbz	r2, 800c1d8 <rmw_validate_namespace_with_size+0x58>
 800c18a:	2901      	cmp	r1, #1
 800c18c:	460f      	mov	r7, r1
 800c18e:	461e      	mov	r6, r3
 800c190:	d102      	bne.n	800c198 <rmw_validate_namespace_with_size+0x18>
 800c192:	7803      	ldrb	r3, [r0, #0]
 800c194:	2b2f      	cmp	r3, #47	; 0x2f
 800c196:	d019      	beq.n	800c1cc <rmw_validate_namespace_with_size+0x4c>
 800c198:	aa01      	add	r2, sp, #4
 800c19a:	4669      	mov	r1, sp
 800c19c:	f7ff ff6a 	bl	800c074 <rmw_validate_full_topic_name>
 800c1a0:	b990      	cbnz	r0, 800c1c8 <rmw_validate_namespace_with_size+0x48>
 800c1a2:	9b00      	ldr	r3, [sp, #0]
 800c1a4:	b14b      	cbz	r3, 800c1ba <rmw_validate_namespace_with_size+0x3a>
 800c1a6:	2b07      	cmp	r3, #7
 800c1a8:	d007      	beq.n	800c1ba <rmw_validate_namespace_with_size+0x3a>
 800c1aa:	1e5a      	subs	r2, r3, #1
 800c1ac:	2a05      	cmp	r2, #5
 800c1ae:	d82b      	bhi.n	800c208 <rmw_validate_namespace_with_size+0x88>
 800c1b0:	e8df f002 	tbb	[pc, r2]
 800c1b4:	24211e1b 	.word	0x24211e1b
 800c1b8:	1427      	.short	0x1427
 800c1ba:	2ff5      	cmp	r7, #245	; 0xf5
 800c1bc:	d906      	bls.n	800c1cc <rmw_validate_namespace_with_size+0x4c>
 800c1be:	2307      	movs	r3, #7
 800c1c0:	6023      	str	r3, [r4, #0]
 800c1c2:	b10e      	cbz	r6, 800c1c8 <rmw_validate_namespace_with_size+0x48>
 800c1c4:	23f4      	movs	r3, #244	; 0xf4
 800c1c6:	6033      	str	r3, [r6, #0]
 800c1c8:	b042      	add	sp, #264	; 0x108
 800c1ca:	bdd0      	pop	{r4, r6, r7, pc}
 800c1cc:	2000      	movs	r0, #0
 800c1ce:	6020      	str	r0, [r4, #0]
 800c1d0:	b042      	add	sp, #264	; 0x108
 800c1d2:	bdd0      	pop	{r4, r6, r7, pc}
 800c1d4:	200b      	movs	r0, #11
 800c1d6:	4770      	bx	lr
 800c1d8:	200b      	movs	r0, #11
 800c1da:	e7f5      	b.n	800c1c8 <rmw_validate_namespace_with_size+0x48>
 800c1dc:	2306      	movs	r3, #6
 800c1de:	6023      	str	r3, [r4, #0]
 800c1e0:	2e00      	cmp	r6, #0
 800c1e2:	d0f1      	beq.n	800c1c8 <rmw_validate_namespace_with_size+0x48>
 800c1e4:	9b01      	ldr	r3, [sp, #4]
 800c1e6:	6033      	str	r3, [r6, #0]
 800c1e8:	e7ee      	b.n	800c1c8 <rmw_validate_namespace_with_size+0x48>
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	6023      	str	r3, [r4, #0]
 800c1ee:	e7f7      	b.n	800c1e0 <rmw_validate_namespace_with_size+0x60>
 800c1f0:	2302      	movs	r3, #2
 800c1f2:	6023      	str	r3, [r4, #0]
 800c1f4:	e7f4      	b.n	800c1e0 <rmw_validate_namespace_with_size+0x60>
 800c1f6:	2303      	movs	r3, #3
 800c1f8:	6023      	str	r3, [r4, #0]
 800c1fa:	e7f1      	b.n	800c1e0 <rmw_validate_namespace_with_size+0x60>
 800c1fc:	2304      	movs	r3, #4
 800c1fe:	6023      	str	r3, [r4, #0]
 800c200:	e7ee      	b.n	800c1e0 <rmw_validate_namespace_with_size+0x60>
 800c202:	2305      	movs	r3, #5
 800c204:	6023      	str	r3, [r4, #0]
 800c206:	e7eb      	b.n	800c1e0 <rmw_validate_namespace_with_size+0x60>
 800c208:	4a03      	ldr	r2, [pc, #12]	; (800c218 <rmw_validate_namespace_with_size+0x98>)
 800c20a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c20e:	a802      	add	r0, sp, #8
 800c210:	f7ff fd2e 	bl	800bc70 <rcutils_snprintf>
 800c214:	2001      	movs	r0, #1
 800c216:	e7d7      	b.n	800c1c8 <rmw_validate_namespace_with_size+0x48>
 800c218:	08016a60 	.word	0x08016a60

0800c21c <rmw_validate_namespace>:
 800c21c:	b168      	cbz	r0, 800c23a <rmw_validate_namespace+0x1e>
 800c21e:	b570      	push	{r4, r5, r6, lr}
 800c220:	460d      	mov	r5, r1
 800c222:	4616      	mov	r6, r2
 800c224:	4604      	mov	r4, r0
 800c226:	f7f3 fffd 	bl	8000224 <strlen>
 800c22a:	4633      	mov	r3, r6
 800c22c:	4601      	mov	r1, r0
 800c22e:	462a      	mov	r2, r5
 800c230:	4620      	mov	r0, r4
 800c232:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c236:	f7ff bfa3 	b.w	800c180 <rmw_validate_namespace_with_size>
 800c23a:	200b      	movs	r0, #11
 800c23c:	4770      	bx	lr
 800c23e:	bf00      	nop

0800c240 <rmw_namespace_validation_result_string>:
 800c240:	2807      	cmp	r0, #7
 800c242:	bf9a      	itte	ls
 800c244:	4b02      	ldrls	r3, [pc, #8]	; (800c250 <rmw_namespace_validation_result_string+0x10>)
 800c246:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800c24a:	4802      	ldrhi	r0, [pc, #8]	; (800c254 <rmw_namespace_validation_result_string+0x14>)
 800c24c:	4770      	bx	lr
 800c24e:	bf00      	nop
 800c250:	08016c58 	.word	0x08016c58
 800c254:	08016ab0 	.word	0x08016ab0

0800c258 <rmw_validate_node_name>:
 800c258:	2800      	cmp	r0, #0
 800c25a:	d03b      	beq.n	800c2d4 <rmw_validate_node_name+0x7c>
 800c25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c260:	460f      	mov	r7, r1
 800c262:	2900      	cmp	r1, #0
 800c264:	d038      	beq.n	800c2d8 <rmw_validate_node_name+0x80>
 800c266:	4615      	mov	r5, r2
 800c268:	4604      	mov	r4, r0
 800c26a:	f7f3 ffdb 	bl	8000224 <strlen>
 800c26e:	b1e0      	cbz	r0, 800c2aa <rmw_validate_node_name+0x52>
 800c270:	1e63      	subs	r3, r4, #1
 800c272:	eb03 0e00 	add.w	lr, r3, r0
 800c276:	f1c4 0c01 	rsb	ip, r4, #1
 800c27a:	eb0c 0803 	add.w	r8, ip, r3
 800c27e:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800c282:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 800c286:	f026 0220 	bic.w	r2, r6, #32
 800c28a:	2909      	cmp	r1, #9
 800c28c:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 800c290:	d913      	bls.n	800c2ba <rmw_validate_node_name+0x62>
 800c292:	2a19      	cmp	r2, #25
 800c294:	d911      	bls.n	800c2ba <rmw_validate_node_name+0x62>
 800c296:	2e5f      	cmp	r6, #95	; 0x5f
 800c298:	d00f      	beq.n	800c2ba <rmw_validate_node_name+0x62>
 800c29a:	2302      	movs	r3, #2
 800c29c:	603b      	str	r3, [r7, #0]
 800c29e:	b10d      	cbz	r5, 800c2a4 <rmw_validate_node_name+0x4c>
 800c2a0:	f8c5 8000 	str.w	r8, [r5]
 800c2a4:	2000      	movs	r0, #0
 800c2a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	603b      	str	r3, [r7, #0]
 800c2ae:	2d00      	cmp	r5, #0
 800c2b0:	d0f8      	beq.n	800c2a4 <rmw_validate_node_name+0x4c>
 800c2b2:	2000      	movs	r0, #0
 800c2b4:	6028      	str	r0, [r5, #0]
 800c2b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2ba:	4573      	cmp	r3, lr
 800c2bc:	d1dd      	bne.n	800c27a <rmw_validate_node_name+0x22>
 800c2be:	7822      	ldrb	r2, [r4, #0]
 800c2c0:	4b0d      	ldr	r3, [pc, #52]	; (800c2f8 <rmw_validate_node_name+0xa0>)
 800c2c2:	5cd3      	ldrb	r3, [r2, r3]
 800c2c4:	f013 0304 	ands.w	r3, r3, #4
 800c2c8:	d110      	bne.n	800c2ec <rmw_validate_node_name+0x94>
 800c2ca:	28ff      	cmp	r0, #255	; 0xff
 800c2cc:	d806      	bhi.n	800c2dc <rmw_validate_node_name+0x84>
 800c2ce:	603b      	str	r3, [r7, #0]
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	e7e8      	b.n	800c2a6 <rmw_validate_node_name+0x4e>
 800c2d4:	200b      	movs	r0, #11
 800c2d6:	4770      	bx	lr
 800c2d8:	200b      	movs	r0, #11
 800c2da:	e7e4      	b.n	800c2a6 <rmw_validate_node_name+0x4e>
 800c2dc:	2204      	movs	r2, #4
 800c2de:	603a      	str	r2, [r7, #0]
 800c2e0:	2d00      	cmp	r5, #0
 800c2e2:	d0df      	beq.n	800c2a4 <rmw_validate_node_name+0x4c>
 800c2e4:	22fe      	movs	r2, #254	; 0xfe
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	602a      	str	r2, [r5, #0]
 800c2ea:	e7dc      	b.n	800c2a6 <rmw_validate_node_name+0x4e>
 800c2ec:	2303      	movs	r3, #3
 800c2ee:	603b      	str	r3, [r7, #0]
 800c2f0:	2d00      	cmp	r5, #0
 800c2f2:	d1de      	bne.n	800c2b2 <rmw_validate_node_name+0x5a>
 800c2f4:	e7d6      	b.n	800c2a4 <rmw_validate_node_name+0x4c>
 800c2f6:	bf00      	nop
 800c2f8:	0801715d 	.word	0x0801715d

0800c2fc <rmw_node_name_validation_result_string>:
 800c2fc:	2804      	cmp	r0, #4
 800c2fe:	bf9a      	itte	ls
 800c300:	4b02      	ldrls	r3, [pc, #8]	; (800c30c <rmw_node_name_validation_result_string+0x10>)
 800c302:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800c306:	4802      	ldrhi	r0, [pc, #8]	; (800c310 <rmw_node_name_validation_result_string+0x14>)
 800c308:	4770      	bx	lr
 800c30a:	bf00      	nop
 800c30c:	08016d64 	.word	0x08016d64
 800c310:	08016c78 	.word	0x08016c78

0800c314 <rmw_uros_set_custom_transport>:
 800c314:	b470      	push	{r4, r5, r6}
 800c316:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800c31a:	b162      	cbz	r2, 800c336 <rmw_uros_set_custom_transport+0x22>
 800c31c:	b15b      	cbz	r3, 800c336 <rmw_uros_set_custom_transport+0x22>
 800c31e:	b155      	cbz	r5, 800c336 <rmw_uros_set_custom_transport+0x22>
 800c320:	b14e      	cbz	r6, 800c336 <rmw_uros_set_custom_transport+0x22>
 800c322:	4c06      	ldr	r4, [pc, #24]	; (800c33c <rmw_uros_set_custom_transport+0x28>)
 800c324:	7020      	strb	r0, [r4, #0]
 800c326:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800c32a:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c32e:	6166      	str	r6, [r4, #20]
 800c330:	2000      	movs	r0, #0
 800c332:	bc70      	pop	{r4, r5, r6}
 800c334:	4770      	bx	lr
 800c336:	200b      	movs	r0, #11
 800c338:	bc70      	pop	{r4, r5, r6}
 800c33a:	4770      	bx	lr
 800c33c:	2000c2b8 	.word	0x2000c2b8

0800c340 <create_node>:
 800c340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c344:	b083      	sub	sp, #12
 800c346:	2b00      	cmp	r3, #0
 800c348:	d05f      	beq.n	800c40a <create_node+0xca>
 800c34a:	4606      	mov	r6, r0
 800c34c:	4835      	ldr	r0, [pc, #212]	; (800c424 <create_node+0xe4>)
 800c34e:	460f      	mov	r7, r1
 800c350:	4690      	mov	r8, r2
 800c352:	461d      	mov	r5, r3
 800c354:	f006 fa5e 	bl	8012814 <get_memory>
 800c358:	2800      	cmp	r0, #0
 800c35a:	d056      	beq.n	800c40a <create_node+0xca>
 800c35c:	68c4      	ldr	r4, [r0, #12]
 800c35e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800c360:	6123      	str	r3, [r4, #16]
 800c362:	f006 fabf 	bl	80128e4 <rmw_get_implementation_identifier>
 800c366:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800c36a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800c36e:	f8c4 9020 	str.w	r9, [r4, #32]
 800c372:	4630      	mov	r0, r6
 800c374:	f7f3 ff56 	bl	8000224 <strlen>
 800c378:	1c42      	adds	r2, r0, #1
 800c37a:	2a3c      	cmp	r2, #60	; 0x3c
 800c37c:	f104 0518 	add.w	r5, r4, #24
 800c380:	d840      	bhi.n	800c404 <create_node+0xc4>
 800c382:	4648      	mov	r0, r9
 800c384:	4631      	mov	r1, r6
 800c386:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800c38a:	f008 fdf9 	bl	8014f80 <memcpy>
 800c38e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800c392:	4638      	mov	r0, r7
 800c394:	f7f3 ff46 	bl	8000224 <strlen>
 800c398:	1c42      	adds	r2, r0, #1
 800c39a:	2a3c      	cmp	r2, #60	; 0x3c
 800c39c:	d832      	bhi.n	800c404 <create_node+0xc4>
 800c39e:	4639      	mov	r1, r7
 800c3a0:	4648      	mov	r0, r9
 800c3a2:	f008 fded 	bl	8014f80 <memcpy>
 800c3a6:	f241 5394 	movw	r3, #5524	; 0x1594
 800c3aa:	6922      	ldr	r2, [r4, #16]
 800c3ac:	5ad0      	ldrh	r0, [r2, r3]
 800c3ae:	2101      	movs	r1, #1
 800c3b0:	eb00 0c01 	add.w	ip, r0, r1
 800c3b4:	f822 c003 	strh.w	ip, [r2, r3]
 800c3b8:	f001 f986 	bl	800d6c8 <uxr_object_id>
 800c3bc:	6160      	str	r0, [r4, #20]
 800c3be:	783b      	ldrb	r3, [r7, #0]
 800c3c0:	2b2f      	cmp	r3, #47	; 0x2f
 800c3c2:	d127      	bne.n	800c414 <create_node+0xd4>
 800c3c4:	787b      	ldrb	r3, [r7, #1]
 800c3c6:	bb2b      	cbnz	r3, 800c414 <create_node+0xd4>
 800c3c8:	4a17      	ldr	r2, [pc, #92]	; (800c428 <create_node+0xe8>)
 800c3ca:	4818      	ldr	r0, [pc, #96]	; (800c42c <create_node+0xec>)
 800c3cc:	4633      	mov	r3, r6
 800c3ce:	213c      	movs	r1, #60	; 0x3c
 800c3d0:	f008 ff98 	bl	8015304 <sniprintf>
 800c3d4:	6920      	ldr	r0, [r4, #16]
 800c3d6:	4b15      	ldr	r3, [pc, #84]	; (800c42c <create_node+0xec>)
 800c3d8:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800c3dc:	9300      	str	r3, [sp, #0]
 800c3de:	2306      	movs	r3, #6
 800c3e0:	9301      	str	r3, [sp, #4]
 800c3e2:	6811      	ldr	r1, [r2, #0]
 800c3e4:	6962      	ldr	r2, [r4, #20]
 800c3e6:	fa1f f388 	uxth.w	r3, r8
 800c3ea:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c3ee:	f000 ffb5 	bl	800d35c <uxr_buffer_create_participant_bin>
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	6920      	ldr	r0, [r4, #16]
 800c3f6:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800c3fa:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800c3fe:	f000 fec7 	bl	800d190 <run_xrce_session>
 800c402:	b918      	cbnz	r0, 800c40c <create_node+0xcc>
 800c404:	4628      	mov	r0, r5
 800c406:	f000 fd5b 	bl	800cec0 <rmw_uxrce_fini_node_memory>
 800c40a:	2500      	movs	r5, #0
 800c40c:	4628      	mov	r0, r5
 800c40e:	b003      	add	sp, #12
 800c410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c414:	4a06      	ldr	r2, [pc, #24]	; (800c430 <create_node+0xf0>)
 800c416:	9600      	str	r6, [sp, #0]
 800c418:	463b      	mov	r3, r7
 800c41a:	213c      	movs	r1, #60	; 0x3c
 800c41c:	4803      	ldr	r0, [pc, #12]	; (800c42c <create_node+0xec>)
 800c41e:	f008 ff71 	bl	8015304 <sniprintf>
 800c422:	e7d7      	b.n	800c3d4 <create_node+0x94>
 800c424:	2000f2ac 	.word	0x2000f2ac
 800c428:	08016d88 	.word	0x08016d88
 800c42c:	2000c180 	.word	0x2000c180
 800c430:	08016868 	.word	0x08016868

0800c434 <rmw_create_node>:
 800c434:	b199      	cbz	r1, 800c45e <rmw_create_node+0x2a>
 800c436:	b430      	push	{r4, r5}
 800c438:	4615      	mov	r5, r2
 800c43a:	461a      	mov	r2, r3
 800c43c:	780b      	ldrb	r3, [r1, #0]
 800c43e:	460c      	mov	r4, r1
 800c440:	b153      	cbz	r3, 800c458 <rmw_create_node+0x24>
 800c442:	b14d      	cbz	r5, 800c458 <rmw_create_node+0x24>
 800c444:	782b      	ldrb	r3, [r5, #0]
 800c446:	b13b      	cbz	r3, 800c458 <rmw_create_node+0x24>
 800c448:	b902      	cbnz	r2, 800c44c <rmw_create_node+0x18>
 800c44a:	69c2      	ldr	r2, [r0, #28]
 800c44c:	4603      	mov	r3, r0
 800c44e:	4629      	mov	r1, r5
 800c450:	4620      	mov	r0, r4
 800c452:	bc30      	pop	{r4, r5}
 800c454:	f7ff bf74 	b.w	800c340 <create_node>
 800c458:	2000      	movs	r0, #0
 800c45a:	bc30      	pop	{r4, r5}
 800c45c:	4770      	bx	lr
 800c45e:	2000      	movs	r0, #0
 800c460:	4770      	bx	lr
 800c462:	bf00      	nop

0800c464 <rmw_destroy_node>:
 800c464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c466:	b328      	cbz	r0, 800c4b4 <rmw_destroy_node+0x50>
 800c468:	4607      	mov	r7, r0
 800c46a:	6800      	ldr	r0, [r0, #0]
 800c46c:	b120      	cbz	r0, 800c478 <rmw_destroy_node+0x14>
 800c46e:	4b36      	ldr	r3, [pc, #216]	; (800c548 <rmw_destroy_node+0xe4>)
 800c470:	6819      	ldr	r1, [r3, #0]
 800c472:	f7f3 fecd 	bl	8000210 <strcmp>
 800c476:	b9e8      	cbnz	r0, 800c4b4 <rmw_destroy_node+0x50>
 800c478:	687d      	ldr	r5, [r7, #4]
 800c47a:	b1dd      	cbz	r5, 800c4b4 <rmw_destroy_node+0x50>
 800c47c:	4b33      	ldr	r3, [pc, #204]	; (800c54c <rmw_destroy_node+0xe8>)
 800c47e:	681c      	ldr	r4, [r3, #0]
 800c480:	2c00      	cmp	r4, #0
 800c482:	d05f      	beq.n	800c544 <rmw_destroy_node+0xe0>
 800c484:	2600      	movs	r6, #0
 800c486:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800c48a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800c48e:	429d      	cmp	r5, r3
 800c490:	d013      	beq.n	800c4ba <rmw_destroy_node+0x56>
 800c492:	2c00      	cmp	r4, #0
 800c494:	d1f7      	bne.n	800c486 <rmw_destroy_node+0x22>
 800c496:	4b2e      	ldr	r3, [pc, #184]	; (800c550 <rmw_destroy_node+0xec>)
 800c498:	681c      	ldr	r4, [r3, #0]
 800c49a:	b1c4      	cbz	r4, 800c4ce <rmw_destroy_node+0x6a>
 800c49c:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800c4a0:	6a0b      	ldr	r3, [r1, #32]
 800c4a2:	429d      	cmp	r5, r3
 800c4a4:	d1f9      	bne.n	800c49a <rmw_destroy_node+0x36>
 800c4a6:	317c      	adds	r1, #124	; 0x7c
 800c4a8:	4638      	mov	r0, r7
 800c4aa:	f000 fb27 	bl	800cafc <rmw_destroy_subscription>
 800c4ae:	2801      	cmp	r0, #1
 800c4b0:	4606      	mov	r6, r0
 800c4b2:	d1f2      	bne.n	800c49a <rmw_destroy_node+0x36>
 800c4b4:	2601      	movs	r6, #1
 800c4b6:	4630      	mov	r0, r6
 800c4b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4ba:	3184      	adds	r1, #132	; 0x84
 800c4bc:	4638      	mov	r0, r7
 800c4be:	f000 f99f 	bl	800c800 <rmw_destroy_publisher>
 800c4c2:	2801      	cmp	r0, #1
 800c4c4:	4606      	mov	r6, r0
 800c4c6:	d0f5      	beq.n	800c4b4 <rmw_destroy_node+0x50>
 800c4c8:	2c00      	cmp	r4, #0
 800c4ca:	d1dc      	bne.n	800c486 <rmw_destroy_node+0x22>
 800c4cc:	e7e3      	b.n	800c496 <rmw_destroy_node+0x32>
 800c4ce:	4b21      	ldr	r3, [pc, #132]	; (800c554 <rmw_destroy_node+0xf0>)
 800c4d0:	681c      	ldr	r4, [r3, #0]
 800c4d2:	b16c      	cbz	r4, 800c4f0 <rmw_destroy_node+0x8c>
 800c4d4:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800c4d8:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800c4da:	429d      	cmp	r5, r3
 800c4dc:	d1f9      	bne.n	800c4d2 <rmw_destroy_node+0x6e>
 800c4de:	317c      	adds	r1, #124	; 0x7c
 800c4e0:	4638      	mov	r0, r7
 800c4e2:	f000 f9dd 	bl	800c8a0 <rmw_destroy_service>
 800c4e6:	2801      	cmp	r0, #1
 800c4e8:	4606      	mov	r6, r0
 800c4ea:	d0e3      	beq.n	800c4b4 <rmw_destroy_node+0x50>
 800c4ec:	2c00      	cmp	r4, #0
 800c4ee:	d1f1      	bne.n	800c4d4 <rmw_destroy_node+0x70>
 800c4f0:	4b19      	ldr	r3, [pc, #100]	; (800c558 <rmw_destroy_node+0xf4>)
 800c4f2:	681c      	ldr	r4, [r3, #0]
 800c4f4:	b16c      	cbz	r4, 800c512 <rmw_destroy_node+0xae>
 800c4f6:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800c4fa:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800c4fc:	429d      	cmp	r5, r3
 800c4fe:	d1f9      	bne.n	800c4f4 <rmw_destroy_node+0x90>
 800c500:	317c      	adds	r1, #124	; 0x7c
 800c502:	4638      	mov	r0, r7
 800c504:	f006 f9aa 	bl	801285c <rmw_destroy_client>
 800c508:	2801      	cmp	r0, #1
 800c50a:	4606      	mov	r6, r0
 800c50c:	d0d2      	beq.n	800c4b4 <rmw_destroy_node+0x50>
 800c50e:	2c00      	cmp	r4, #0
 800c510:	d1f1      	bne.n	800c4f6 <rmw_destroy_node+0x92>
 800c512:	e9d5 0204 	ldrd	r0, r2, [r5, #16]
 800c516:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800c51a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c51e:	6819      	ldr	r1, [r3, #0]
 800c520:	f000 fed0 	bl	800d2c4 <uxr_buffer_delete_entity>
 800c524:	4602      	mov	r2, r0
 800c526:	6928      	ldr	r0, [r5, #16]
 800c528:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800c52c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800c530:	f000 fe2e 	bl	800d190 <run_xrce_session>
 800c534:	2800      	cmp	r0, #0
 800c536:	bf08      	it	eq
 800c538:	2602      	moveq	r6, #2
 800c53a:	4638      	mov	r0, r7
 800c53c:	f000 fcc0 	bl	800cec0 <rmw_uxrce_fini_node_memory>
 800c540:	4630      	mov	r0, r6
 800c542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c544:	4626      	mov	r6, r4
 800c546:	e7a6      	b.n	800c496 <rmw_destroy_node+0x32>
 800c548:	08016f58 	.word	0x08016f58
 800c54c:	2000c2e8 	.word	0x2000c2e8
 800c550:	2000f544 	.word	0x2000f544
 800c554:	2000f534 	.word	0x2000f534
 800c558:	2000cb68 	.word	0x2000cb68

0800c55c <rmw_node_get_graph_guard_condition>:
 800c55c:	6843      	ldr	r3, [r0, #4]
 800c55e:	6918      	ldr	r0, [r3, #16]
 800c560:	f500 705a 	add.w	r0, r0, #872	; 0x368
 800c564:	4770      	bx	lr
 800c566:	bf00      	nop

0800c568 <flush_session>:
 800c568:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800c56a:	f001 bedb 	b.w	800e324 <uxr_run_session_until_confirm_delivery>
 800c56e:	bf00      	nop

0800c570 <rmw_publish>:
 800c570:	2800      	cmp	r0, #0
 800c572:	d053      	beq.n	800c61c <rmw_publish+0xac>
 800c574:	b570      	push	{r4, r5, r6, lr}
 800c576:	460d      	mov	r5, r1
 800c578:	b08e      	sub	sp, #56	; 0x38
 800c57a:	2900      	cmp	r1, #0
 800c57c:	d04b      	beq.n	800c616 <rmw_publish+0xa6>
 800c57e:	4604      	mov	r4, r0
 800c580:	6800      	ldr	r0, [r0, #0]
 800c582:	f000 fe85 	bl	800d290 <is_uxrce_rmw_identifier_valid>
 800c586:	2800      	cmp	r0, #0
 800c588:	d045      	beq.n	800c616 <rmw_publish+0xa6>
 800c58a:	6866      	ldr	r6, [r4, #4]
 800c58c:	2e00      	cmp	r6, #0
 800c58e:	d042      	beq.n	800c616 <rmw_publish+0xa6>
 800c590:	69b4      	ldr	r4, [r6, #24]
 800c592:	4628      	mov	r0, r5
 800c594:	6923      	ldr	r3, [r4, #16]
 800c596:	4798      	blx	r3
 800c598:	69f3      	ldr	r3, [r6, #28]
 800c59a:	9005      	str	r0, [sp, #20]
 800c59c:	b113      	cbz	r3, 800c5a4 <rmw_publish+0x34>
 800c59e:	a805      	add	r0, sp, #20
 800c5a0:	4798      	blx	r3
 800c5a2:	9805      	ldr	r0, [sp, #20]
 800c5a4:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800c5a8:	691b      	ldr	r3, [r3, #16]
 800c5aa:	9000      	str	r0, [sp, #0]
 800c5ac:	6972      	ldr	r2, [r6, #20]
 800c5ae:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800c5b0:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800c5b4:	ab06      	add	r3, sp, #24
 800c5b6:	f002 fcbd 	bl	800ef34 <uxr_prepare_output_stream>
 800c5ba:	b1d8      	cbz	r0, 800c5f4 <rmw_publish+0x84>
 800c5bc:	68a3      	ldr	r3, [r4, #8]
 800c5be:	4628      	mov	r0, r5
 800c5c0:	a906      	add	r1, sp, #24
 800c5c2:	4798      	blx	r3
 800c5c4:	6a33      	ldr	r3, [r6, #32]
 800c5c6:	4604      	mov	r4, r0
 800c5c8:	b10b      	cbz	r3, 800c5ce <rmw_publish+0x5e>
 800c5ca:	a806      	add	r0, sp, #24
 800c5cc:	4798      	blx	r3
 800c5ce:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800c5d8:	d022      	beq.n	800c620 <rmw_publish+0xb0>
 800c5da:	6918      	ldr	r0, [r3, #16]
 800c5dc:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800c5de:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c5e2:	f001 fe9f 	bl	800e324 <uxr_run_session_until_confirm_delivery>
 800c5e6:	4020      	ands	r0, r4
 800c5e8:	b2c4      	uxtb	r4, r0
 800c5ea:	f084 0001 	eor.w	r0, r4, #1
 800c5ee:	b2c0      	uxtb	r0, r0
 800c5f0:	b00e      	add	sp, #56	; 0x38
 800c5f2:	bd70      	pop	{r4, r5, r6, pc}
 800c5f4:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800c5f8:	4a0c      	ldr	r2, [pc, #48]	; (800c62c <rmw_publish+0xbc>)
 800c5fa:	6918      	ldr	r0, [r3, #16]
 800c5fc:	9b05      	ldr	r3, [sp, #20]
 800c5fe:	9300      	str	r3, [sp, #0]
 800c600:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800c604:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c608:	6972      	ldr	r2, [r6, #20]
 800c60a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800c60c:	ab06      	add	r3, sp, #24
 800c60e:	f002 fcc1 	bl	800ef94 <uxr_prepare_output_stream_fragmented>
 800c612:	2800      	cmp	r0, #0
 800c614:	d1d2      	bne.n	800c5bc <rmw_publish+0x4c>
 800c616:	2001      	movs	r0, #1
 800c618:	b00e      	add	sp, #56	; 0x38
 800c61a:	bd70      	pop	{r4, r5, r6, pc}
 800c61c:	2001      	movs	r0, #1
 800c61e:	4770      	bx	lr
 800c620:	6918      	ldr	r0, [r3, #16]
 800c622:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c626:	f001 fac1 	bl	800dbac <uxr_flash_output_streams>
 800c62a:	e7de      	b.n	800c5ea <rmw_publish+0x7a>
 800c62c:	0800c569 	.word	0x0800c569

0800c630 <rmw_create_publisher>:
 800c630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c634:	b087      	sub	sp, #28
 800c636:	2800      	cmp	r0, #0
 800c638:	f000 80c9 	beq.w	800c7ce <rmw_create_publisher+0x19e>
 800c63c:	460e      	mov	r6, r1
 800c63e:	2900      	cmp	r1, #0
 800c640:	f000 80c5 	beq.w	800c7ce <rmw_create_publisher+0x19e>
 800c644:	4604      	mov	r4, r0
 800c646:	6800      	ldr	r0, [r0, #0]
 800c648:	4615      	mov	r5, r2
 800c64a:	4698      	mov	r8, r3
 800c64c:	f000 fe20 	bl	800d290 <is_uxrce_rmw_identifier_valid>
 800c650:	2800      	cmp	r0, #0
 800c652:	f000 80bc 	beq.w	800c7ce <rmw_create_publisher+0x19e>
 800c656:	2d00      	cmp	r5, #0
 800c658:	f000 80b9 	beq.w	800c7ce <rmw_create_publisher+0x19e>
 800c65c:	782b      	ldrb	r3, [r5, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	f000 80b5 	beq.w	800c7ce <rmw_create_publisher+0x19e>
 800c664:	f1b8 0f00 	cmp.w	r8, #0
 800c668:	f000 80b1 	beq.w	800c7ce <rmw_create_publisher+0x19e>
 800c66c:	485a      	ldr	r0, [pc, #360]	; (800c7d8 <rmw_create_publisher+0x1a8>)
 800c66e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c672:	f006 f8cf 	bl	8012814 <get_memory>
 800c676:	2800      	cmp	r0, #0
 800c678:	f000 80a9 	beq.w	800c7ce <rmw_create_publisher+0x19e>
 800c67c:	68c4      	ldr	r4, [r0, #12]
 800c67e:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800c682:	f006 f92f 	bl	80128e4 <rmw_get_implementation_identifier>
 800c686:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 800c68a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800c68e:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800c692:	4628      	mov	r0, r5
 800c694:	f7f3 fdc6 	bl	8000224 <strlen>
 800c698:	3001      	adds	r0, #1
 800c69a:	283c      	cmp	r0, #60	; 0x3c
 800c69c:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800c6a0:	f200 808e 	bhi.w	800c7c0 <rmw_create_publisher+0x190>
 800c6a4:	4a4d      	ldr	r2, [pc, #308]	; (800c7dc <rmw_create_publisher+0x1ac>)
 800c6a6:	462b      	mov	r3, r5
 800c6a8:	213c      	movs	r1, #60	; 0x3c
 800c6aa:	4650      	mov	r0, sl
 800c6ac:	f008 fe2a 	bl	8015304 <sniprintf>
 800c6b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c6b4:	e9c4 391f 	strd	r3, r9, [r4, #124]	; 0x7c
 800c6b8:	4641      	mov	r1, r8
 800c6ba:	2250      	movs	r2, #80	; 0x50
 800c6bc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c6c0:	f008 fc5e 	bl	8014f80 <memcpy>
 800c6c4:	f898 3008 	ldrb.w	r3, [r8, #8]
 800c6c8:	4945      	ldr	r1, [pc, #276]	; (800c7e0 <rmw_create_publisher+0x1b0>)
 800c6ca:	2b02      	cmp	r3, #2
 800c6cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c6d0:	bf0c      	ite	eq
 800c6d2:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800c6d6:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800c6da:	67a3      	str	r3, [r4, #120]	; 0x78
 800c6dc:	2300      	movs	r3, #0
 800c6de:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800c6e2:	4630      	mov	r0, r6
 800c6e4:	f000 fde2 	bl	800d2ac <get_message_typesupport_handle>
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	d069      	beq.n	800c7c0 <rmw_create_publisher+0x190>
 800c6ec:	6842      	ldr	r2, [r0, #4]
 800c6ee:	61a2      	str	r2, [r4, #24]
 800c6f0:	2a00      	cmp	r2, #0
 800c6f2:	d065      	beq.n	800c7c0 <rmw_create_publisher+0x190>
 800c6f4:	4629      	mov	r1, r5
 800c6f6:	4643      	mov	r3, r8
 800c6f8:	4648      	mov	r0, r9
 800c6fa:	f006 fb65 	bl	8012dc8 <create_topic>
 800c6fe:	6260      	str	r0, [r4, #36]	; 0x24
 800c700:	2800      	cmp	r0, #0
 800c702:	d061      	beq.n	800c7c8 <rmw_create_publisher+0x198>
 800c704:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c708:	f241 5398 	movw	r3, #5528	; 0x1598
 800c70c:	2103      	movs	r1, #3
 800c70e:	5ad0      	ldrh	r0, [r2, r3]
 800c710:	1c45      	adds	r5, r0, #1
 800c712:	52d5      	strh	r5, [r2, r3]
 800c714:	f000 ffd8 	bl	800d6c8 <uxr_object_id>
 800c718:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c71c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800c720:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800c724:	6912      	ldr	r2, [r2, #16]
 800c726:	6120      	str	r0, [r4, #16]
 800c728:	f04f 0a06 	mov.w	sl, #6
 800c72c:	f8cd a000 	str.w	sl, [sp]
 800c730:	6819      	ldr	r1, [r3, #0]
 800c732:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c736:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 800c73a:	6922      	ldr	r2, [r4, #16]
 800c73c:	f000 fe74 	bl	800d428 <uxr_buffer_create_publisher_bin>
 800c740:	4602      	mov	r2, r0
 800c742:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c746:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800c74a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800c74e:	f000 fd1f 	bl	800d190 <run_xrce_session>
 800c752:	b3a8      	cbz	r0, 800c7c0 <rmw_create_publisher+0x190>
 800c754:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c758:	f241 539a 	movw	r3, #5530	; 0x159a
 800c75c:	2105      	movs	r1, #5
 800c75e:	5ad0      	ldrh	r0, [r2, r3]
 800c760:	1c45      	adds	r5, r0, #1
 800c762:	52d5      	strh	r5, [r2, r3]
 800c764:	f000 ffb0 	bl	800d6c8 <uxr_object_id>
 800c768:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800c76c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c770:	6915      	ldr	r5, [r2, #16]
 800c772:	6160      	str	r0, [r4, #20]
 800c774:	ae04      	add	r6, sp, #16
 800c776:	4641      	mov	r1, r8
 800c778:	4630      	mov	r0, r6
 800c77a:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800c77e:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800c782:	f000 fd21 	bl	800d1c8 <convert_qos_profile>
 800c786:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c78a:	f8cd a00c 	str.w	sl, [sp, #12]
 800c78e:	9001      	str	r0, [sp, #4]
 800c790:	f8ad 1008 	strh.w	r1, [sp, #8]
 800c794:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c798:	9300      	str	r3, [sp, #0]
 800c79a:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
 800c79e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800c7a2:	f8d8 1000 	ldr.w	r1, [r8]
 800c7a6:	4628      	mov	r0, r5
 800c7a8:	f000 fe9c 	bl	800d4e4 <uxr_buffer_create_datawriter_bin>
 800c7ac:	4602      	mov	r2, r0
 800c7ae:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c7b2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800c7b6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800c7ba:	f000 fce9 	bl	800d190 <run_xrce_session>
 800c7be:	b938      	cbnz	r0, 800c7d0 <rmw_create_publisher+0x1a0>
 800c7c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c7c2:	b108      	cbz	r0, 800c7c8 <rmw_create_publisher+0x198>
 800c7c4:	f000 fbec 	bl	800cfa0 <rmw_uxrce_fini_topic_memory>
 800c7c8:	4638      	mov	r0, r7
 800c7ca:	f000 fb91 	bl	800cef0 <rmw_uxrce_fini_publisher_memory>
 800c7ce:	2700      	movs	r7, #0
 800c7d0:	4638      	mov	r0, r7
 800c7d2:	b007      	add	sp, #28
 800c7d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7d8:	2000c2e8 	.word	0x2000c2e8
 800c7dc:	08016d88 	.word	0x08016d88
 800c7e0:	0801680c 	.word	0x0801680c

0800c7e4 <rmw_publisher_get_actual_qos>:
 800c7e4:	b150      	cbz	r0, 800c7fc <rmw_publisher_get_actual_qos+0x18>
 800c7e6:	b149      	cbz	r1, 800c7fc <rmw_publisher_get_actual_qos+0x18>
 800c7e8:	b508      	push	{r3, lr}
 800c7ea:	6843      	ldr	r3, [r0, #4]
 800c7ec:	2250      	movs	r2, #80	; 0x50
 800c7ee:	4608      	mov	r0, r1
 800c7f0:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800c7f4:	f008 fbc4 	bl	8014f80 <memcpy>
 800c7f8:	2000      	movs	r0, #0
 800c7fa:	bd08      	pop	{r3, pc}
 800c7fc:	200b      	movs	r0, #11
 800c7fe:	4770      	bx	lr

0800c800 <rmw_destroy_publisher>:
 800c800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c802:	b128      	cbz	r0, 800c810 <rmw_destroy_publisher+0x10>
 800c804:	4604      	mov	r4, r0
 800c806:	6800      	ldr	r0, [r0, #0]
 800c808:	460d      	mov	r5, r1
 800c80a:	f000 fd41 	bl	800d290 <is_uxrce_rmw_identifier_valid>
 800c80e:	b910      	cbnz	r0, 800c816 <rmw_destroy_publisher+0x16>
 800c810:	2401      	movs	r4, #1
 800c812:	4620      	mov	r0, r4
 800c814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c816:	6863      	ldr	r3, [r4, #4]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d0f9      	beq.n	800c810 <rmw_destroy_publisher+0x10>
 800c81c:	2d00      	cmp	r5, #0
 800c81e:	d0f7      	beq.n	800c810 <rmw_destroy_publisher+0x10>
 800c820:	6828      	ldr	r0, [r5, #0]
 800c822:	f000 fd35 	bl	800d290 <is_uxrce_rmw_identifier_valid>
 800c826:	2800      	cmp	r0, #0
 800c828:	d0f2      	beq.n	800c810 <rmw_destroy_publisher+0x10>
 800c82a:	686c      	ldr	r4, [r5, #4]
 800c82c:	2c00      	cmp	r4, #0
 800c82e:	d0ef      	beq.n	800c810 <rmw_destroy_publisher+0x10>
 800c830:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c832:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800c836:	f006 fb17 	bl	8012e68 <destroy_topic>
 800c83a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800c83e:	6962      	ldr	r2, [r4, #20]
 800c840:	6918      	ldr	r0, [r3, #16]
 800c842:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800c846:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c84a:	6819      	ldr	r1, [r3, #0]
 800c84c:	f000 fd3a 	bl	800d2c4 <uxr_buffer_delete_entity>
 800c850:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800c854:	6922      	ldr	r2, [r4, #16]
 800c856:	4603      	mov	r3, r0
 800c858:	6908      	ldr	r0, [r1, #16]
 800c85a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800c85e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c862:	6809      	ldr	r1, [r1, #0]
 800c864:	461c      	mov	r4, r3
 800c866:	f000 fd2d 	bl	800d2c4 <uxr_buffer_delete_entity>
 800c86a:	4606      	mov	r6, r0
 800c86c:	6938      	ldr	r0, [r7, #16]
 800c86e:	4622      	mov	r2, r4
 800c870:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800c874:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800c878:	f000 fc8a 	bl	800d190 <run_xrce_session>
 800c87c:	4604      	mov	r4, r0
 800c87e:	6938      	ldr	r0, [r7, #16]
 800c880:	4632      	mov	r2, r6
 800c882:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800c886:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800c88a:	f000 fc81 	bl	800d190 <run_xrce_session>
 800c88e:	b12c      	cbz	r4, 800c89c <rmw_destroy_publisher+0x9c>
 800c890:	b120      	cbz	r0, 800c89c <rmw_destroy_publisher+0x9c>
 800c892:	2400      	movs	r4, #0
 800c894:	4628      	mov	r0, r5
 800c896:	f000 fb2b 	bl	800cef0 <rmw_uxrce_fini_publisher_memory>
 800c89a:	e7ba      	b.n	800c812 <rmw_destroy_publisher+0x12>
 800c89c:	2402      	movs	r4, #2
 800c89e:	e7f9      	b.n	800c894 <rmw_destroy_publisher+0x94>

0800c8a0 <rmw_destroy_service>:
 800c8a0:	b570      	push	{r4, r5, r6, lr}
 800c8a2:	b128      	cbz	r0, 800c8b0 <rmw_destroy_service+0x10>
 800c8a4:	4604      	mov	r4, r0
 800c8a6:	6800      	ldr	r0, [r0, #0]
 800c8a8:	460d      	mov	r5, r1
 800c8aa:	f000 fcf1 	bl	800d290 <is_uxrce_rmw_identifier_valid>
 800c8ae:	b910      	cbnz	r0, 800c8b6 <rmw_destroy_service+0x16>
 800c8b0:	2401      	movs	r4, #1
 800c8b2:	4620      	mov	r0, r4
 800c8b4:	bd70      	pop	{r4, r5, r6, pc}
 800c8b6:	6863      	ldr	r3, [r4, #4]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d0f9      	beq.n	800c8b0 <rmw_destroy_service+0x10>
 800c8bc:	2d00      	cmp	r5, #0
 800c8be:	d0f7      	beq.n	800c8b0 <rmw_destroy_service+0x10>
 800c8c0:	6828      	ldr	r0, [r5, #0]
 800c8c2:	f000 fce5 	bl	800d290 <is_uxrce_rmw_identifier_valid>
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	d0f2      	beq.n	800c8b0 <rmw_destroy_service+0x10>
 800c8ca:	686e      	ldr	r6, [r5, #4]
 800c8cc:	2e00      	cmp	r6, #0
 800c8ce:	d0ef      	beq.n	800c8b0 <rmw_destroy_service+0x10>
 800c8d0:	6864      	ldr	r4, [r4, #4]
 800c8d2:	6932      	ldr	r2, [r6, #16]
 800c8d4:	6920      	ldr	r0, [r4, #16]
 800c8d6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800c8da:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c8de:	6819      	ldr	r1, [r3, #0]
 800c8e0:	f000 ff5a 	bl	800d798 <uxr_buffer_cancel_data>
 800c8e4:	4602      	mov	r2, r0
 800c8e6:	6920      	ldr	r0, [r4, #16]
 800c8e8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800c8ec:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800c8f0:	f000 fc4e 	bl	800d190 <run_xrce_session>
 800c8f4:	6920      	ldr	r0, [r4, #16]
 800c8f6:	6932      	ldr	r2, [r6, #16]
 800c8f8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800c8fc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c900:	6819      	ldr	r1, [r3, #0]
 800c902:	f000 fcdf 	bl	800d2c4 <uxr_buffer_delete_entity>
 800c906:	4602      	mov	r2, r0
 800c908:	6920      	ldr	r0, [r4, #16]
 800c90a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800c90e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800c912:	f000 fc3d 	bl	800d190 <run_xrce_session>
 800c916:	2800      	cmp	r0, #0
 800c918:	4628      	mov	r0, r5
 800c91a:	bf14      	ite	ne
 800c91c:	2400      	movne	r4, #0
 800c91e:	2402      	moveq	r4, #2
 800c920:	f000 fb12 	bl	800cf48 <rmw_uxrce_fini_service_memory>
 800c924:	e7c5      	b.n	800c8b2 <rmw_destroy_service+0x12>
 800c926:	bf00      	nop

0800c928 <rmw_create_subscription>:
 800c928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c92c:	b08d      	sub	sp, #52	; 0x34
 800c92e:	2800      	cmp	r0, #0
 800c930:	f000 80cb 	beq.w	800caca <rmw_create_subscription+0x1a2>
 800c934:	460e      	mov	r6, r1
 800c936:	2900      	cmp	r1, #0
 800c938:	f000 80c7 	beq.w	800caca <rmw_create_subscription+0x1a2>
 800c93c:	4604      	mov	r4, r0
 800c93e:	6800      	ldr	r0, [r0, #0]
 800c940:	4615      	mov	r5, r2
 800c942:	4698      	mov	r8, r3
 800c944:	f000 fca4 	bl	800d290 <is_uxrce_rmw_identifier_valid>
 800c948:	2800      	cmp	r0, #0
 800c94a:	f000 80be 	beq.w	800caca <rmw_create_subscription+0x1a2>
 800c94e:	2d00      	cmp	r5, #0
 800c950:	f000 80bb 	beq.w	800caca <rmw_create_subscription+0x1a2>
 800c954:	782b      	ldrb	r3, [r5, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	f000 80b7 	beq.w	800caca <rmw_create_subscription+0x1a2>
 800c95c:	f1b8 0f00 	cmp.w	r8, #0
 800c960:	f000 80b3 	beq.w	800caca <rmw_create_subscription+0x1a2>
 800c964:	485b      	ldr	r0, [pc, #364]	; (800cad4 <rmw_create_subscription+0x1ac>)
 800c966:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c96a:	f005 ff53 	bl	8012814 <get_memory>
 800c96e:	4604      	mov	r4, r0
 800c970:	2800      	cmp	r0, #0
 800c972:	f000 80ab 	beq.w	800cacc <rmw_create_subscription+0x1a4>
 800c976:	68c7      	ldr	r7, [r0, #12]
 800c978:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 800c97c:	f005 ffb2 	bl	80128e4 <rmw_get_implementation_identifier>
 800c980:	f107 0a94 	add.w	sl, r7, #148	; 0x94
 800c984:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c986:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 800c98a:	4628      	mov	r0, r5
 800c98c:	f7f3 fc4a 	bl	8000224 <strlen>
 800c990:	3001      	adds	r0, #1
 800c992:	283c      	cmp	r0, #60	; 0x3c
 800c994:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 800c998:	f200 8090 	bhi.w	800cabc <rmw_create_subscription+0x194>
 800c99c:	4a4e      	ldr	r2, [pc, #312]	; (800cad8 <rmw_create_subscription+0x1b0>)
 800c99e:	462b      	mov	r3, r5
 800c9a0:	213c      	movs	r1, #60	; 0x3c
 800c9a2:	4650      	mov	r0, sl
 800c9a4:	f008 fcae 	bl	8015304 <sniprintf>
 800c9a8:	4641      	mov	r1, r8
 800c9aa:	f8c7 9020 	str.w	r9, [r7, #32]
 800c9ae:	2250      	movs	r2, #80	; 0x50
 800c9b0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800c9b4:	f008 fae4 	bl	8014f80 <memcpy>
 800c9b8:	4948      	ldr	r1, [pc, #288]	; (800cadc <rmw_create_subscription+0x1b4>)
 800c9ba:	4630      	mov	r0, r6
 800c9bc:	f000 fc76 	bl	800d2ac <get_message_typesupport_handle>
 800c9c0:	2800      	cmp	r0, #0
 800c9c2:	d07b      	beq.n	800cabc <rmw_create_subscription+0x194>
 800c9c4:	6842      	ldr	r2, [r0, #4]
 800c9c6:	61ba      	str	r2, [r7, #24]
 800c9c8:	2a00      	cmp	r2, #0
 800c9ca:	d077      	beq.n	800cabc <rmw_create_subscription+0x194>
 800c9cc:	4629      	mov	r1, r5
 800c9ce:	4643      	mov	r3, r8
 800c9d0:	4648      	mov	r0, r9
 800c9d2:	f006 f9f9 	bl	8012dc8 <create_topic>
 800c9d6:	61f8      	str	r0, [r7, #28]
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	d073      	beq.n	800cac4 <rmw_create_subscription+0x19c>
 800c9dc:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c9e0:	f241 539c 	movw	r3, #5532	; 0x159c
 800c9e4:	2104      	movs	r1, #4
 800c9e6:	5ad0      	ldrh	r0, [r2, r3]
 800c9e8:	1c45      	adds	r5, r0, #1
 800c9ea:	52d5      	strh	r5, [r2, r3]
 800c9ec:	f000 fe6c 	bl	800d6c8 <uxr_object_id>
 800c9f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c9f4:	6138      	str	r0, [r7, #16]
 800c9f6:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800c9fa:	2606      	movs	r6, #6
 800c9fc:	9600      	str	r6, [sp, #0]
 800c9fe:	6811      	ldr	r1, [r2, #0]
 800ca00:	693a      	ldr	r2, [r7, #16]
 800ca02:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800ca06:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ca0a:	f000 fd3b 	bl	800d484 <uxr_buffer_create_subscriber_bin>
 800ca0e:	4602      	mov	r2, r0
 800ca10:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ca14:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800ca18:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800ca1c:	f000 fbb8 	bl	800d190 <run_xrce_session>
 800ca20:	2800      	cmp	r0, #0
 800ca22:	d04b      	beq.n	800cabc <rmw_create_subscription+0x194>
 800ca24:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ca28:	f241 539e 	movw	r3, #5534	; 0x159e
 800ca2c:	4631      	mov	r1, r6
 800ca2e:	5ad0      	ldrh	r0, [r2, r3]
 800ca30:	1c45      	adds	r5, r0, #1
 800ca32:	52d5      	strh	r5, [r2, r3]
 800ca34:	f000 fe48 	bl	800d6c8 <uxr_object_id>
 800ca38:	ad08      	add	r5, sp, #32
 800ca3a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ca3e:	69fb      	ldr	r3, [r7, #28]
 800ca40:	6178      	str	r0, [r7, #20]
 800ca42:	4641      	mov	r1, r8
 800ca44:	4628      	mov	r0, r5
 800ca46:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 800ca4a:	9305      	str	r3, [sp, #20]
 800ca4c:	f000 fbbc 	bl	800d1c8 <convert_qos_profile>
 800ca50:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ca54:	9b05      	ldr	r3, [sp, #20]
 800ca56:	9001      	str	r0, [sp, #4]
 800ca58:	9603      	str	r6, [sp, #12]
 800ca5a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ca5e:	691b      	ldr	r3, [r3, #16]
 800ca60:	9300      	str	r3, [sp, #0]
 800ca62:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800ca66:	f8db 1000 	ldr.w	r1, [fp]
 800ca6a:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 800ca6e:	f000 fdb1 	bl	800d5d4 <uxr_buffer_create_datareader_bin>
 800ca72:	4602      	mov	r2, r0
 800ca74:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ca78:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800ca7c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800ca80:	f000 fb86 	bl	800d190 <run_xrce_session>
 800ca84:	b1d0      	cbz	r0, 800cabc <rmw_create_subscription+0x194>
 800ca86:	f898 3008 	ldrb.w	r3, [r8, #8]
 800ca8a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ca8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ca92:	2200      	movs	r2, #0
 800ca94:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 800ca98:	2b02      	cmp	r3, #2
 800ca9a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800ca9e:	bf0c      	ite	eq
 800caa0:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 800caa4:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 800caa8:	9307      	str	r3, [sp, #28]
 800caaa:	aa0a      	add	r2, sp, #40	; 0x28
 800caac:	9200      	str	r2, [sp, #0]
 800caae:	697a      	ldr	r2, [r7, #20]
 800cab0:	6809      	ldr	r1, [r1, #0]
 800cab2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800cab6:	f000 fe35 	bl	800d724 <uxr_buffer_request_data>
 800caba:	e007      	b.n	800cacc <rmw_create_subscription+0x1a4>
 800cabc:	69f8      	ldr	r0, [r7, #28]
 800cabe:	b108      	cbz	r0, 800cac4 <rmw_create_subscription+0x19c>
 800cac0:	f000 fa6e 	bl	800cfa0 <rmw_uxrce_fini_topic_memory>
 800cac4:	4620      	mov	r0, r4
 800cac6:	f000 fa29 	bl	800cf1c <rmw_uxrce_fini_subscription_memory>
 800caca:	2400      	movs	r4, #0
 800cacc:	4620      	mov	r0, r4
 800cace:	b00d      	add	sp, #52	; 0x34
 800cad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cad4:	2000f544 	.word	0x2000f544
 800cad8:	08016d88 	.word	0x08016d88
 800cadc:	0801680c 	.word	0x0801680c

0800cae0 <rmw_subscription_get_actual_qos>:
 800cae0:	b150      	cbz	r0, 800caf8 <rmw_subscription_get_actual_qos+0x18>
 800cae2:	b149      	cbz	r1, 800caf8 <rmw_subscription_get_actual_qos+0x18>
 800cae4:	b508      	push	{r3, lr}
 800cae6:	6843      	ldr	r3, [r0, #4]
 800cae8:	2250      	movs	r2, #80	; 0x50
 800caea:	4608      	mov	r0, r1
 800caec:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800caf0:	f008 fa46 	bl	8014f80 <memcpy>
 800caf4:	2000      	movs	r0, #0
 800caf6:	bd08      	pop	{r3, pc}
 800caf8:	200b      	movs	r0, #11
 800cafa:	4770      	bx	lr

0800cafc <rmw_destroy_subscription>:
 800cafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cafe:	b128      	cbz	r0, 800cb0c <rmw_destroy_subscription+0x10>
 800cb00:	4604      	mov	r4, r0
 800cb02:	6800      	ldr	r0, [r0, #0]
 800cb04:	460d      	mov	r5, r1
 800cb06:	f000 fbc3 	bl	800d290 <is_uxrce_rmw_identifier_valid>
 800cb0a:	b910      	cbnz	r0, 800cb12 <rmw_destroy_subscription+0x16>
 800cb0c:	2401      	movs	r4, #1
 800cb0e:	4620      	mov	r0, r4
 800cb10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb12:	6863      	ldr	r3, [r4, #4]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d0f9      	beq.n	800cb0c <rmw_destroy_subscription+0x10>
 800cb18:	2d00      	cmp	r5, #0
 800cb1a:	d0f7      	beq.n	800cb0c <rmw_destroy_subscription+0x10>
 800cb1c:	6828      	ldr	r0, [r5, #0]
 800cb1e:	f000 fbb7 	bl	800d290 <is_uxrce_rmw_identifier_valid>
 800cb22:	2800      	cmp	r0, #0
 800cb24:	d0f2      	beq.n	800cb0c <rmw_destroy_subscription+0x10>
 800cb26:	686c      	ldr	r4, [r5, #4]
 800cb28:	2c00      	cmp	r4, #0
 800cb2a:	d0ef      	beq.n	800cb0c <rmw_destroy_subscription+0x10>
 800cb2c:	6a26      	ldr	r6, [r4, #32]
 800cb2e:	6962      	ldr	r2, [r4, #20]
 800cb30:	6930      	ldr	r0, [r6, #16]
 800cb32:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800cb36:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800cb3a:	6819      	ldr	r1, [r3, #0]
 800cb3c:	f000 fe2c 	bl	800d798 <uxr_buffer_cancel_data>
 800cb40:	4602      	mov	r2, r0
 800cb42:	6930      	ldr	r0, [r6, #16]
 800cb44:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800cb48:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800cb4c:	f000 fb20 	bl	800d190 <run_xrce_session>
 800cb50:	69e0      	ldr	r0, [r4, #28]
 800cb52:	f006 f989 	bl	8012e68 <destroy_topic>
 800cb56:	6a23      	ldr	r3, [r4, #32]
 800cb58:	6962      	ldr	r2, [r4, #20]
 800cb5a:	6918      	ldr	r0, [r3, #16]
 800cb5c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800cb60:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800cb64:	6819      	ldr	r1, [r3, #0]
 800cb66:	f000 fbad 	bl	800d2c4 <uxr_buffer_delete_entity>
 800cb6a:	6a21      	ldr	r1, [r4, #32]
 800cb6c:	6922      	ldr	r2, [r4, #16]
 800cb6e:	4603      	mov	r3, r0
 800cb70:	6908      	ldr	r0, [r1, #16]
 800cb72:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800cb76:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800cb7a:	6809      	ldr	r1, [r1, #0]
 800cb7c:	461c      	mov	r4, r3
 800cb7e:	f000 fba1 	bl	800d2c4 <uxr_buffer_delete_entity>
 800cb82:	4607      	mov	r7, r0
 800cb84:	6930      	ldr	r0, [r6, #16]
 800cb86:	4622      	mov	r2, r4
 800cb88:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800cb8c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800cb90:	f000 fafe 	bl	800d190 <run_xrce_session>
 800cb94:	4604      	mov	r4, r0
 800cb96:	6930      	ldr	r0, [r6, #16]
 800cb98:	463a      	mov	r2, r7
 800cb9a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800cb9e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800cba2:	f000 faf5 	bl	800d190 <run_xrce_session>
 800cba6:	b12c      	cbz	r4, 800cbb4 <rmw_destroy_subscription+0xb8>
 800cba8:	b120      	cbz	r0, 800cbb4 <rmw_destroy_subscription+0xb8>
 800cbaa:	2400      	movs	r4, #0
 800cbac:	4628      	mov	r0, r5
 800cbae:	f000 f9b5 	bl	800cf1c <rmw_uxrce_fini_subscription_memory>
 800cbb2:	e7ac      	b.n	800cb0e <rmw_destroy_subscription+0x12>
 800cbb4:	2402      	movs	r4, #2
 800cbb6:	e7f9      	b.n	800cbac <rmw_destroy_subscription+0xb0>

0800cbb8 <rmw_take_with_info>:
 800cbb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbba:	4604      	mov	r4, r0
 800cbbc:	6800      	ldr	r0, [r0, #0]
 800cbbe:	b089      	sub	sp, #36	; 0x24
 800cbc0:	460f      	mov	r7, r1
 800cbc2:	4615      	mov	r5, r2
 800cbc4:	b128      	cbz	r0, 800cbd2 <rmw_take_with_info+0x1a>
 800cbc6:	4b24      	ldr	r3, [pc, #144]	; (800cc58 <rmw_take_with_info+0xa0>)
 800cbc8:	6819      	ldr	r1, [r3, #0]
 800cbca:	f7f3 fb21 	bl	8000210 <strcmp>
 800cbce:	2800      	cmp	r0, #0
 800cbd0:	d13e      	bne.n	800cc50 <rmw_take_with_info+0x98>
 800cbd2:	b305      	cbz	r5, 800cc16 <rmw_take_with_info+0x5e>
 800cbd4:	6864      	ldr	r4, [r4, #4]
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	702b      	strb	r3, [r5, #0]
 800cbda:	f000 fa61 	bl	800d0a0 <rmw_uxrce_clean_expired_static_input_buffer>
 800cbde:	4620      	mov	r0, r4
 800cbe0:	f000 fa36 	bl	800d050 <rmw_uxrce_find_static_input_buffer_by_owner>
 800cbe4:	4606      	mov	r6, r0
 800cbe6:	b1f0      	cbz	r0, 800cc26 <rmw_take_with_info+0x6e>
 800cbe8:	68c1      	ldr	r1, [r0, #12]
 800cbea:	4668      	mov	r0, sp
 800cbec:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800cbf0:	3110      	adds	r1, #16
 800cbf2:	f7fd fcc5 	bl	800a580 <ucdr_init_buffer>
 800cbf6:	69a3      	ldr	r3, [r4, #24]
 800cbf8:	4639      	mov	r1, r7
 800cbfa:	68db      	ldr	r3, [r3, #12]
 800cbfc:	4668      	mov	r0, sp
 800cbfe:	4798      	blx	r3
 800cc00:	4631      	mov	r1, r6
 800cc02:	4604      	mov	r4, r0
 800cc04:	4815      	ldr	r0, [pc, #84]	; (800cc5c <rmw_take_with_info+0xa4>)
 800cc06:	f005 fe15 	bl	8012834 <put_memory>
 800cc0a:	702c      	strb	r4, [r5, #0]
 800cc0c:	f084 0001 	eor.w	r0, r4, #1
 800cc10:	b2c0      	uxtb	r0, r0
 800cc12:	b009      	add	sp, #36	; 0x24
 800cc14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc16:	6864      	ldr	r4, [r4, #4]
 800cc18:	f000 fa42 	bl	800d0a0 <rmw_uxrce_clean_expired_static_input_buffer>
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	f000 fa17 	bl	800d050 <rmw_uxrce_find_static_input_buffer_by_owner>
 800cc22:	4605      	mov	r5, r0
 800cc24:	b910      	cbnz	r0, 800cc2c <rmw_take_with_info+0x74>
 800cc26:	2001      	movs	r0, #1
 800cc28:	b009      	add	sp, #36	; 0x24
 800cc2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc2c:	68e9      	ldr	r1, [r5, #12]
 800cc2e:	4668      	mov	r0, sp
 800cc30:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800cc34:	3110      	adds	r1, #16
 800cc36:	f7fd fca3 	bl	800a580 <ucdr_init_buffer>
 800cc3a:	69a3      	ldr	r3, [r4, #24]
 800cc3c:	4639      	mov	r1, r7
 800cc3e:	68db      	ldr	r3, [r3, #12]
 800cc40:	4668      	mov	r0, sp
 800cc42:	4798      	blx	r3
 800cc44:	4629      	mov	r1, r5
 800cc46:	4604      	mov	r4, r0
 800cc48:	4804      	ldr	r0, [pc, #16]	; (800cc5c <rmw_take_with_info+0xa4>)
 800cc4a:	f005 fdf3 	bl	8012834 <put_memory>
 800cc4e:	e7dd      	b.n	800cc0c <rmw_take_with_info+0x54>
 800cc50:	200c      	movs	r0, #12
 800cc52:	b009      	add	sp, #36	; 0x24
 800cc54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc56:	bf00      	nop
 800cc58:	08016f58 	.word	0x08016f58
 800cc5c:	2000c2d8 	.word	0x2000c2d8

0800cc60 <rmw_uxrce_init_service_memory>:
 800cc60:	b1b2      	cbz	r2, 800cc90 <rmw_uxrce_init_service_memory+0x30>
 800cc62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc64:	7a07      	ldrb	r7, [r0, #8]
 800cc66:	4605      	mov	r5, r0
 800cc68:	b98f      	cbnz	r7, 800cc8e <rmw_uxrce_init_service_memory+0x2e>
 800cc6a:	e9c0 7700 	strd	r7, r7, [r0]
 800cc6e:	460c      	mov	r4, r1
 800cc70:	23c8      	movs	r3, #200	; 0xc8
 800cc72:	2101      	movs	r1, #1
 800cc74:	fb03 4602 	mla	r6, r3, r2, r4
 800cc78:	60c3      	str	r3, [r0, #12]
 800cc7a:	7201      	strb	r1, [r0, #8]
 800cc7c:	4621      	mov	r1, r4
 800cc7e:	4628      	mov	r0, r5
 800cc80:	f005 fdd8 	bl	8012834 <put_memory>
 800cc84:	60e4      	str	r4, [r4, #12]
 800cc86:	f804 7bc8 	strb.w	r7, [r4], #200
 800cc8a:	42a6      	cmp	r6, r4
 800cc8c:	d1f6      	bne.n	800cc7c <rmw_uxrce_init_service_memory+0x1c>
 800cc8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc90:	4770      	bx	lr
 800cc92:	bf00      	nop

0800cc94 <rmw_uxrce_init_client_memory>:
 800cc94:	b1b2      	cbz	r2, 800ccc4 <rmw_uxrce_init_client_memory+0x30>
 800cc96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc98:	7a07      	ldrb	r7, [r0, #8]
 800cc9a:	4605      	mov	r5, r0
 800cc9c:	b98f      	cbnz	r7, 800ccc2 <rmw_uxrce_init_client_memory+0x2e>
 800cc9e:	e9c0 7700 	strd	r7, r7, [r0]
 800cca2:	460c      	mov	r4, r1
 800cca4:	23c8      	movs	r3, #200	; 0xc8
 800cca6:	2101      	movs	r1, #1
 800cca8:	fb03 4602 	mla	r6, r3, r2, r4
 800ccac:	60c3      	str	r3, [r0, #12]
 800ccae:	7201      	strb	r1, [r0, #8]
 800ccb0:	4621      	mov	r1, r4
 800ccb2:	4628      	mov	r0, r5
 800ccb4:	f005 fdbe 	bl	8012834 <put_memory>
 800ccb8:	60e4      	str	r4, [r4, #12]
 800ccba:	f804 7bc8 	strb.w	r7, [r4], #200
 800ccbe:	42a6      	cmp	r6, r4
 800ccc0:	d1f6      	bne.n	800ccb0 <rmw_uxrce_init_client_memory+0x1c>
 800ccc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccc4:	4770      	bx	lr
 800ccc6:	bf00      	nop

0800ccc8 <rmw_uxrce_init_publisher_memory>:
 800ccc8:	b1b2      	cbz	r2, 800ccf8 <rmw_uxrce_init_publisher_memory+0x30>
 800ccca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cccc:	7a07      	ldrb	r7, [r0, #8]
 800ccce:	4605      	mov	r5, r0
 800ccd0:	b98f      	cbnz	r7, 800ccf6 <rmw_uxrce_init_publisher_memory+0x2e>
 800ccd2:	e9c0 7700 	strd	r7, r7, [r0]
 800ccd6:	460c      	mov	r4, r1
 800ccd8:	23d8      	movs	r3, #216	; 0xd8
 800ccda:	2101      	movs	r1, #1
 800ccdc:	fb03 4602 	mla	r6, r3, r2, r4
 800cce0:	60c3      	str	r3, [r0, #12]
 800cce2:	7201      	strb	r1, [r0, #8]
 800cce4:	4621      	mov	r1, r4
 800cce6:	4628      	mov	r0, r5
 800cce8:	f005 fda4 	bl	8012834 <put_memory>
 800ccec:	60e4      	str	r4, [r4, #12]
 800ccee:	f804 7bd8 	strb.w	r7, [r4], #216
 800ccf2:	42a6      	cmp	r6, r4
 800ccf4:	d1f6      	bne.n	800cce4 <rmw_uxrce_init_publisher_memory+0x1c>
 800ccf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccf8:	4770      	bx	lr
 800ccfa:	bf00      	nop

0800ccfc <rmw_uxrce_init_subscription_memory>:
 800ccfc:	b1b2      	cbz	r2, 800cd2c <rmw_uxrce_init_subscription_memory+0x30>
 800ccfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd00:	7a07      	ldrb	r7, [r0, #8]
 800cd02:	4605      	mov	r5, r0
 800cd04:	b98f      	cbnz	r7, 800cd2a <rmw_uxrce_init_subscription_memory+0x2e>
 800cd06:	e9c0 7700 	strd	r7, r7, [r0]
 800cd0a:	460c      	mov	r4, r1
 800cd0c:	23d0      	movs	r3, #208	; 0xd0
 800cd0e:	2101      	movs	r1, #1
 800cd10:	fb03 4602 	mla	r6, r3, r2, r4
 800cd14:	60c3      	str	r3, [r0, #12]
 800cd16:	7201      	strb	r1, [r0, #8]
 800cd18:	4621      	mov	r1, r4
 800cd1a:	4628      	mov	r0, r5
 800cd1c:	f005 fd8a 	bl	8012834 <put_memory>
 800cd20:	60e4      	str	r4, [r4, #12]
 800cd22:	f804 7bd0 	strb.w	r7, [r4], #208
 800cd26:	42a6      	cmp	r6, r4
 800cd28:	d1f6      	bne.n	800cd18 <rmw_uxrce_init_subscription_memory+0x1c>
 800cd2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd2c:	4770      	bx	lr
 800cd2e:	bf00      	nop

0800cd30 <rmw_uxrce_init_node_memory>:
 800cd30:	b1b2      	cbz	r2, 800cd60 <rmw_uxrce_init_node_memory+0x30>
 800cd32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd34:	7a07      	ldrb	r7, [r0, #8]
 800cd36:	4605      	mov	r5, r0
 800cd38:	b98f      	cbnz	r7, 800cd5e <rmw_uxrce_init_node_memory+0x2e>
 800cd3a:	e9c0 7700 	strd	r7, r7, [r0]
 800cd3e:	460c      	mov	r4, r1
 800cd40:	23a4      	movs	r3, #164	; 0xa4
 800cd42:	2101      	movs	r1, #1
 800cd44:	fb03 4602 	mla	r6, r3, r2, r4
 800cd48:	60c3      	str	r3, [r0, #12]
 800cd4a:	7201      	strb	r1, [r0, #8]
 800cd4c:	4621      	mov	r1, r4
 800cd4e:	4628      	mov	r0, r5
 800cd50:	f005 fd70 	bl	8012834 <put_memory>
 800cd54:	60e4      	str	r4, [r4, #12]
 800cd56:	f804 7ba4 	strb.w	r7, [r4], #164
 800cd5a:	42a6      	cmp	r6, r4
 800cd5c:	d1f6      	bne.n	800cd4c <rmw_uxrce_init_node_memory+0x1c>
 800cd5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd60:	4770      	bx	lr
 800cd62:	bf00      	nop

0800cd64 <rmw_uxrce_init_session_memory>:
 800cd64:	b1d2      	cbz	r2, 800cd9c <rmw_uxrce_init_session_memory+0x38>
 800cd66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd6a:	7a07      	ldrb	r7, [r0, #8]
 800cd6c:	4605      	mov	r5, r0
 800cd6e:	b99f      	cbnz	r7, 800cd98 <rmw_uxrce_init_session_memory+0x34>
 800cd70:	e9c0 7700 	strd	r7, r7, [r0]
 800cd74:	f241 53a8 	movw	r3, #5544	; 0x15a8
 800cd78:	460c      	mov	r4, r1
 800cd7a:	2101      	movs	r1, #1
 800cd7c:	fb03 4602 	mla	r6, r3, r2, r4
 800cd80:	60c3      	str	r3, [r0, #12]
 800cd82:	4698      	mov	r8, r3
 800cd84:	7201      	strb	r1, [r0, #8]
 800cd86:	4621      	mov	r1, r4
 800cd88:	4628      	mov	r0, r5
 800cd8a:	f005 fd53 	bl	8012834 <put_memory>
 800cd8e:	60e4      	str	r4, [r4, #12]
 800cd90:	7027      	strb	r7, [r4, #0]
 800cd92:	4444      	add	r4, r8
 800cd94:	42a6      	cmp	r6, r4
 800cd96:	d1f6      	bne.n	800cd86 <rmw_uxrce_init_session_memory+0x22>
 800cd98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd9c:	4770      	bx	lr
 800cd9e:	bf00      	nop

0800cda0 <rmw_uxrce_init_topic_memory>:
 800cda0:	b1c2      	cbz	r2, 800cdd4 <rmw_uxrce_init_topic_memory+0x34>
 800cda2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cda4:	7a07      	ldrb	r7, [r0, #8]
 800cda6:	4606      	mov	r6, r0
 800cda8:	b99f      	cbnz	r7, 800cdd2 <rmw_uxrce_init_topic_memory+0x32>
 800cdaa:	e9c0 7700 	strd	r7, r7, [r0]
 800cdae:	460c      	mov	r4, r1
 800cdb0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800cdb4:	2101      	movs	r1, #1
 800cdb6:	231c      	movs	r3, #28
 800cdb8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cdbc:	7201      	strb	r1, [r0, #8]
 800cdbe:	60c3      	str	r3, [r0, #12]
 800cdc0:	4621      	mov	r1, r4
 800cdc2:	4630      	mov	r0, r6
 800cdc4:	f005 fd36 	bl	8012834 <put_memory>
 800cdc8:	60e4      	str	r4, [r4, #12]
 800cdca:	f804 7b1c 	strb.w	r7, [r4], #28
 800cdce:	42a5      	cmp	r5, r4
 800cdd0:	d1f6      	bne.n	800cdc0 <rmw_uxrce_init_topic_memory+0x20>
 800cdd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdd4:	4770      	bx	lr
 800cdd6:	bf00      	nop

0800cdd8 <rmw_uxrce_init_static_input_buffer_memory>:
 800cdd8:	b1d2      	cbz	r2, 800ce10 <rmw_uxrce_init_static_input_buffer_memory+0x38>
 800cdda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cddc:	7a07      	ldrb	r7, [r0, #8]
 800cdde:	4606      	mov	r6, r0
 800cde0:	b9af      	cbnz	r7, 800ce0e <rmw_uxrce_init_static_input_buffer_memory+0x36>
 800cde2:	e9c0 7700 	strd	r7, r7, [r0]
 800cde6:	460c      	mov	r4, r1
 800cde8:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 800cdec:	2101      	movs	r1, #1
 800cdee:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800cdf2:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 800cdf6:	7201      	strb	r1, [r0, #8]
 800cdf8:	60c3      	str	r3, [r0, #12]
 800cdfa:	4621      	mov	r1, r4
 800cdfc:	4630      	mov	r0, r6
 800cdfe:	f005 fd19 	bl	8012834 <put_memory>
 800ce02:	60e4      	str	r4, [r4, #12]
 800ce04:	7027      	strb	r7, [r4, #0]
 800ce06:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800ce0a:	42a5      	cmp	r5, r4
 800ce0c:	d1f5      	bne.n	800cdfa <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800ce0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce10:	4770      	bx	lr
 800ce12:	bf00      	nop

0800ce14 <rmw_uxrce_init_init_options_impl_memory>:
 800ce14:	b1b2      	cbz	r2, 800ce44 <rmw_uxrce_init_init_options_impl_memory+0x30>
 800ce16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce18:	7a07      	ldrb	r7, [r0, #8]
 800ce1a:	4605      	mov	r5, r0
 800ce1c:	b98f      	cbnz	r7, 800ce42 <rmw_uxrce_init_init_options_impl_memory+0x2e>
 800ce1e:	e9c0 7700 	strd	r7, r7, [r0]
 800ce22:	460c      	mov	r4, r1
 800ce24:	232c      	movs	r3, #44	; 0x2c
 800ce26:	2101      	movs	r1, #1
 800ce28:	fb03 4602 	mla	r6, r3, r2, r4
 800ce2c:	60c3      	str	r3, [r0, #12]
 800ce2e:	7201      	strb	r1, [r0, #8]
 800ce30:	4621      	mov	r1, r4
 800ce32:	4628      	mov	r0, r5
 800ce34:	f005 fcfe 	bl	8012834 <put_memory>
 800ce38:	60e4      	str	r4, [r4, #12]
 800ce3a:	f804 7b2c 	strb.w	r7, [r4], #44
 800ce3e:	42a6      	cmp	r6, r4
 800ce40:	d1f6      	bne.n	800ce30 <rmw_uxrce_init_init_options_impl_memory+0x1c>
 800ce42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce44:	4770      	bx	lr
 800ce46:	bf00      	nop

0800ce48 <rmw_uxrce_init_wait_set_memory>:
 800ce48:	b1c2      	cbz	r2, 800ce7c <rmw_uxrce_init_wait_set_memory+0x34>
 800ce4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce4c:	7a07      	ldrb	r7, [r0, #8]
 800ce4e:	4606      	mov	r6, r0
 800ce50:	b99f      	cbnz	r7, 800ce7a <rmw_uxrce_init_wait_set_memory+0x32>
 800ce52:	e9c0 7700 	strd	r7, r7, [r0]
 800ce56:	460c      	mov	r4, r1
 800ce58:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800ce5c:	2101      	movs	r1, #1
 800ce5e:	231c      	movs	r3, #28
 800ce60:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ce64:	7201      	strb	r1, [r0, #8]
 800ce66:	60c3      	str	r3, [r0, #12]
 800ce68:	4621      	mov	r1, r4
 800ce6a:	4630      	mov	r0, r6
 800ce6c:	f005 fce2 	bl	8012834 <put_memory>
 800ce70:	60e4      	str	r4, [r4, #12]
 800ce72:	f804 7b1c 	strb.w	r7, [r4], #28
 800ce76:	42a5      	cmp	r5, r4
 800ce78:	d1f6      	bne.n	800ce68 <rmw_uxrce_init_wait_set_memory+0x20>
 800ce7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce7c:	4770      	bx	lr
 800ce7e:	bf00      	nop

0800ce80 <rmw_uxrce_init_guard_condition_memory>:
 800ce80:	b1b2      	cbz	r2, 800ceb0 <rmw_uxrce_init_guard_condition_memory+0x30>
 800ce82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce84:	7a07      	ldrb	r7, [r0, #8]
 800ce86:	4605      	mov	r5, r0
 800ce88:	b98f      	cbnz	r7, 800ceae <rmw_uxrce_init_guard_condition_memory+0x2e>
 800ce8a:	e9c0 7700 	strd	r7, r7, [r0]
 800ce8e:	460c      	mov	r4, r1
 800ce90:	2320      	movs	r3, #32
 800ce92:	2101      	movs	r1, #1
 800ce94:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 800ce98:	7201      	strb	r1, [r0, #8]
 800ce9a:	60c3      	str	r3, [r0, #12]
 800ce9c:	4621      	mov	r1, r4
 800ce9e:	4628      	mov	r0, r5
 800cea0:	f005 fcc8 	bl	8012834 <put_memory>
 800cea4:	60e4      	str	r4, [r4, #12]
 800cea6:	f804 7b20 	strb.w	r7, [r4], #32
 800ceaa:	42a6      	cmp	r6, r4
 800ceac:	d1f6      	bne.n	800ce9c <rmw_uxrce_init_guard_condition_memory+0x1c>
 800ceae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ceb0:	4770      	bx	lr
 800ceb2:	bf00      	nop

0800ceb4 <rmw_uxrce_fini_session_memory>:
 800ceb4:	4601      	mov	r1, r0
 800ceb6:	4801      	ldr	r0, [pc, #4]	; (800cebc <rmw_uxrce_fini_session_memory+0x8>)
 800ceb8:	f005 bcbc 	b.w	8012834 <put_memory>
 800cebc:	2000f480 	.word	0x2000f480

0800cec0 <rmw_uxrce_fini_node_memory>:
 800cec0:	b538      	push	{r3, r4, r5, lr}
 800cec2:	4604      	mov	r4, r0
 800cec4:	6800      	ldr	r0, [r0, #0]
 800cec6:	b128      	cbz	r0, 800ced4 <rmw_uxrce_fini_node_memory+0x14>
 800cec8:	4b07      	ldr	r3, [pc, #28]	; (800cee8 <rmw_uxrce_fini_node_memory+0x28>)
 800ceca:	6819      	ldr	r1, [r3, #0]
 800cecc:	f7f3 f9a0 	bl	8000210 <strcmp>
 800ced0:	b940      	cbnz	r0, 800cee4 <rmw_uxrce_fini_node_memory+0x24>
 800ced2:	6020      	str	r0, [r4, #0]
 800ced4:	6861      	ldr	r1, [r4, #4]
 800ced6:	b129      	cbz	r1, 800cee4 <rmw_uxrce_fini_node_memory+0x24>
 800ced8:	2500      	movs	r5, #0
 800ceda:	4804      	ldr	r0, [pc, #16]	; (800ceec <rmw_uxrce_fini_node_memory+0x2c>)
 800cedc:	610d      	str	r5, [r1, #16]
 800cede:	f005 fca9 	bl	8012834 <put_memory>
 800cee2:	6065      	str	r5, [r4, #4]
 800cee4:	bd38      	pop	{r3, r4, r5, pc}
 800cee6:	bf00      	nop
 800cee8:	08016f58 	.word	0x08016f58
 800ceec:	2000f2ac 	.word	0x2000f2ac

0800cef0 <rmw_uxrce_fini_publisher_memory>:
 800cef0:	b510      	push	{r4, lr}
 800cef2:	4604      	mov	r4, r0
 800cef4:	6800      	ldr	r0, [r0, #0]
 800cef6:	b128      	cbz	r0, 800cf04 <rmw_uxrce_fini_publisher_memory+0x14>
 800cef8:	4b06      	ldr	r3, [pc, #24]	; (800cf14 <rmw_uxrce_fini_publisher_memory+0x24>)
 800cefa:	6819      	ldr	r1, [r3, #0]
 800cefc:	f7f3 f988 	bl	8000210 <strcmp>
 800cf00:	b938      	cbnz	r0, 800cf12 <rmw_uxrce_fini_publisher_memory+0x22>
 800cf02:	6020      	str	r0, [r4, #0]
 800cf04:	6861      	ldr	r1, [r4, #4]
 800cf06:	b121      	cbz	r1, 800cf12 <rmw_uxrce_fini_publisher_memory+0x22>
 800cf08:	4803      	ldr	r0, [pc, #12]	; (800cf18 <rmw_uxrce_fini_publisher_memory+0x28>)
 800cf0a:	f005 fc93 	bl	8012834 <put_memory>
 800cf0e:	2300      	movs	r3, #0
 800cf10:	6063      	str	r3, [r4, #4]
 800cf12:	bd10      	pop	{r4, pc}
 800cf14:	08016f58 	.word	0x08016f58
 800cf18:	2000c2e8 	.word	0x2000c2e8

0800cf1c <rmw_uxrce_fini_subscription_memory>:
 800cf1c:	b510      	push	{r4, lr}
 800cf1e:	4604      	mov	r4, r0
 800cf20:	6800      	ldr	r0, [r0, #0]
 800cf22:	b128      	cbz	r0, 800cf30 <rmw_uxrce_fini_subscription_memory+0x14>
 800cf24:	4b06      	ldr	r3, [pc, #24]	; (800cf40 <rmw_uxrce_fini_subscription_memory+0x24>)
 800cf26:	6819      	ldr	r1, [r3, #0]
 800cf28:	f7f3 f972 	bl	8000210 <strcmp>
 800cf2c:	b938      	cbnz	r0, 800cf3e <rmw_uxrce_fini_subscription_memory+0x22>
 800cf2e:	6020      	str	r0, [r4, #0]
 800cf30:	6861      	ldr	r1, [r4, #4]
 800cf32:	b121      	cbz	r1, 800cf3e <rmw_uxrce_fini_subscription_memory+0x22>
 800cf34:	4803      	ldr	r0, [pc, #12]	; (800cf44 <rmw_uxrce_fini_subscription_memory+0x28>)
 800cf36:	f005 fc7d 	bl	8012834 <put_memory>
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	6063      	str	r3, [r4, #4]
 800cf3e:	bd10      	pop	{r4, pc}
 800cf40:	08016f58 	.word	0x08016f58
 800cf44:	2000f544 	.word	0x2000f544

0800cf48 <rmw_uxrce_fini_service_memory>:
 800cf48:	b510      	push	{r4, lr}
 800cf4a:	4604      	mov	r4, r0
 800cf4c:	6800      	ldr	r0, [r0, #0]
 800cf4e:	b128      	cbz	r0, 800cf5c <rmw_uxrce_fini_service_memory+0x14>
 800cf50:	4b06      	ldr	r3, [pc, #24]	; (800cf6c <rmw_uxrce_fini_service_memory+0x24>)
 800cf52:	6819      	ldr	r1, [r3, #0]
 800cf54:	f7f3 f95c 	bl	8000210 <strcmp>
 800cf58:	b938      	cbnz	r0, 800cf6a <rmw_uxrce_fini_service_memory+0x22>
 800cf5a:	6020      	str	r0, [r4, #0]
 800cf5c:	6861      	ldr	r1, [r4, #4]
 800cf5e:	b121      	cbz	r1, 800cf6a <rmw_uxrce_fini_service_memory+0x22>
 800cf60:	4803      	ldr	r0, [pc, #12]	; (800cf70 <rmw_uxrce_fini_service_memory+0x28>)
 800cf62:	f005 fc67 	bl	8012834 <put_memory>
 800cf66:	2300      	movs	r3, #0
 800cf68:	6063      	str	r3, [r4, #4]
 800cf6a:	bd10      	pop	{r4, pc}
 800cf6c:	08016f58 	.word	0x08016f58
 800cf70:	2000f534 	.word	0x2000f534

0800cf74 <rmw_uxrce_fini_client_memory>:
 800cf74:	b510      	push	{r4, lr}
 800cf76:	4604      	mov	r4, r0
 800cf78:	6800      	ldr	r0, [r0, #0]
 800cf7a:	b128      	cbz	r0, 800cf88 <rmw_uxrce_fini_client_memory+0x14>
 800cf7c:	4b06      	ldr	r3, [pc, #24]	; (800cf98 <rmw_uxrce_fini_client_memory+0x24>)
 800cf7e:	6819      	ldr	r1, [r3, #0]
 800cf80:	f7f3 f946 	bl	8000210 <strcmp>
 800cf84:	b938      	cbnz	r0, 800cf96 <rmw_uxrce_fini_client_memory+0x22>
 800cf86:	6020      	str	r0, [r4, #0]
 800cf88:	6861      	ldr	r1, [r4, #4]
 800cf8a:	b121      	cbz	r1, 800cf96 <rmw_uxrce_fini_client_memory+0x22>
 800cf8c:	4803      	ldr	r0, [pc, #12]	; (800cf9c <rmw_uxrce_fini_client_memory+0x28>)
 800cf8e:	f005 fc51 	bl	8012834 <put_memory>
 800cf92:	2300      	movs	r3, #0
 800cf94:	6063      	str	r3, [r4, #4]
 800cf96:	bd10      	pop	{r4, pc}
 800cf98:	08016f58 	.word	0x08016f58
 800cf9c:	2000cb68 	.word	0x2000cb68

0800cfa0 <rmw_uxrce_fini_topic_memory>:
 800cfa0:	b510      	push	{r4, lr}
 800cfa2:	4601      	mov	r1, r0
 800cfa4:	4604      	mov	r4, r0
 800cfa6:	4803      	ldr	r0, [pc, #12]	; (800cfb4 <rmw_uxrce_fini_topic_memory+0x14>)
 800cfa8:	f005 fc44 	bl	8012834 <put_memory>
 800cfac:	2300      	movs	r3, #0
 800cfae:	61a3      	str	r3, [r4, #24]
 800cfb0:	bd10      	pop	{r4, pc}
 800cfb2:	bf00      	nop
 800cfb4:	2000f470 	.word	0x2000f470

0800cfb8 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800cfb8:	b082      	sub	sp, #8
 800cfba:	b4f0      	push	{r4, r5, r6, r7}
 800cfbc:	4923      	ldr	r1, [pc, #140]	; (800d04c <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800cfbe:	ac04      	add	r4, sp, #16
 800cfc0:	e884 000c 	stmia.w	r4, {r2, r3}
 800cfc4:	680d      	ldr	r5, [r1, #0]
 800cfc6:	9c05      	ldr	r4, [sp, #20]
 800cfc8:	2d00      	cmp	r5, #0
 800cfca:	d03d      	beq.n	800d048 <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 800cfcc:	462b      	mov	r3, r5
 800cfce:	2100      	movs	r1, #0
 800cfd0:	68da      	ldr	r2, [r3, #12]
 800cfd2:	689b      	ldr	r3, [r3, #8]
 800cfd4:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800cfd8:	4290      	cmp	r0, r2
 800cfda:	bf08      	it	eq
 800cfdc:	3101      	addeq	r1, #1
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d1f6      	bne.n	800cfd0 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800cfe2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800cfe6:	2b02      	cmp	r3, #2
 800cfe8:	d026      	beq.n	800d038 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 800cfea:	d906      	bls.n	800cffa <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800cfec:	2b03      	cmp	r3, #3
 800cfee:	d004      	beq.n	800cffa <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800cff0:	2100      	movs	r1, #0
 800cff2:	bcf0      	pop	{r4, r5, r6, r7}
 800cff4:	4608      	mov	r0, r1
 800cff6:	b002      	add	sp, #8
 800cff8:	4770      	bx	lr
 800cffa:	b304      	cbz	r4, 800d03e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800cffc:	428c      	cmp	r4, r1
 800cffe:	d81e      	bhi.n	800d03e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800d000:	2d00      	cmp	r5, #0
 800d002:	d0f5      	beq.n	800cff0 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800d004:	2100      	movs	r1, #0
 800d006:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800d00a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800d00e:	e002      	b.n	800d016 <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800d010:	68ad      	ldr	r5, [r5, #8]
 800d012:	2d00      	cmp	r5, #0
 800d014:	d0ed      	beq.n	800cff2 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800d016:	68eb      	ldr	r3, [r5, #12]
 800d018:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800d01c:	4290      	cmp	r0, r2
 800d01e:	d1f7      	bne.n	800d010 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800d020:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800d024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d028:	42b2      	cmp	r2, r6
 800d02a:	eb73 0407 	sbcs.w	r4, r3, r7
 800d02e:	daef      	bge.n	800d010 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800d030:	4616      	mov	r6, r2
 800d032:	461f      	mov	r7, r3
 800d034:	4629      	mov	r1, r5
 800d036:	e7eb      	b.n	800d010 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800d038:	b10c      	cbz	r4, 800d03e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800d03a:	428c      	cmp	r4, r1
 800d03c:	d9d8      	bls.n	800cff0 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800d03e:	bcf0      	pop	{r4, r5, r6, r7}
 800d040:	4802      	ldr	r0, [pc, #8]	; (800d04c <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800d042:	b002      	add	sp, #8
 800d044:	f005 bbe6 	b.w	8012814 <get_memory>
 800d048:	4629      	mov	r1, r5
 800d04a:	e7ca      	b.n	800cfe2 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800d04c:	2000c2d8 	.word	0x2000c2d8

0800d050 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800d050:	4b12      	ldr	r3, [pc, #72]	; (800d09c <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	b1fb      	cbz	r3, 800d096 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800d056:	b4f0      	push	{r4, r5, r6, r7}
 800d058:	f04f 0c00 	mov.w	ip, #0
 800d05c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d060:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800d064:	e001      	b.n	800d06a <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800d066:	689b      	ldr	r3, [r3, #8]
 800d068:	b193      	cbz	r3, 800d090 <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800d06a:	68da      	ldr	r2, [r3, #12]
 800d06c:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800d070:	4288      	cmp	r0, r1
 800d072:	d1f8      	bne.n	800d066 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800d074:	f602 0218 	addw	r2, r2, #2072	; 0x818
 800d078:	e9d2 6700 	ldrd	r6, r7, [r2]
 800d07c:	42a6      	cmp	r6, r4
 800d07e:	eb77 0205 	sbcs.w	r2, r7, r5
 800d082:	daf0      	bge.n	800d066 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800d084:	469c      	mov	ip, r3
 800d086:	689b      	ldr	r3, [r3, #8]
 800d088:	4634      	mov	r4, r6
 800d08a:	463d      	mov	r5, r7
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d1ec      	bne.n	800d06a <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800d090:	4660      	mov	r0, ip
 800d092:	bcf0      	pop	{r4, r5, r6, r7}
 800d094:	4770      	bx	lr
 800d096:	4618      	mov	r0, r3
 800d098:	4770      	bx	lr
 800d09a:	bf00      	nop
 800d09c:	2000c2d8 	.word	0x2000c2d8

0800d0a0 <rmw_uxrce_clean_expired_static_input_buffer>:
 800d0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a4:	4e38      	ldr	r6, [pc, #224]	; (800d188 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 800d0a6:	f8d6 8000 	ldr.w	r8, [r6]
 800d0aa:	b083      	sub	sp, #12
 800d0ac:	f006 f9cc 	bl	8013448 <rmw_uros_epoch_nanos>
 800d0b0:	f1b8 0f00 	cmp.w	r8, #0
 800d0b4:	d05f      	beq.n	800d176 <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800d0b6:	46b1      	mov	r9, r6
 800d0b8:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800d0bc:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800d0c0:	2b04      	cmp	r3, #4
 800d0c2:	4682      	mov	sl, r0
 800d0c4:	468b      	mov	fp, r1
 800d0c6:	d02d      	beq.n	800d124 <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800d0c8:	2b05      	cmp	r3, #5
 800d0ca:	d041      	beq.n	800d150 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 800d0cc:	2b03      	cmp	r3, #3
 800d0ce:	d029      	beq.n	800d124 <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	e9cd 2300 	strd	r2, r3, [sp]
 800d0d8:	2001      	movs	r0, #1
 800d0da:	2100      	movs	r1, #0
 800d0dc:	9b00      	ldr	r3, [sp, #0]
 800d0de:	f606 0618 	addw	r6, r6, #2072	; 0x818
 800d0e2:	e9d6 6700 	ldrd	r6, r7, [r6]
 800d0e6:	18c2      	adds	r2, r0, r3
 800d0e8:	9b01      	ldr	r3, [sp, #4]
 800d0ea:	eb41 0303 	adc.w	r3, r1, r3
 800d0ee:	1994      	adds	r4, r2, r6
 800d0f0:	eb43 0507 	adc.w	r5, r3, r7
 800d0f4:	4554      	cmp	r4, sl
 800d0f6:	eb75 020b 	sbcs.w	r2, r5, fp
 800d0fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d0fe:	db03      	blt.n	800d108 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800d100:	45b2      	cmp	sl, r6
 800d102:	eb7b 0207 	sbcs.w	r2, fp, r7
 800d106:	da05      	bge.n	800d114 <rmw_uxrce_clean_expired_static_input_buffer+0x74>
 800d108:	4641      	mov	r1, r8
 800d10a:	4648      	mov	r0, r9
 800d10c:	9300      	str	r3, [sp, #0]
 800d10e:	f005 fb91 	bl	8012834 <put_memory>
 800d112:	9b00      	ldr	r3, [sp, #0]
 800d114:	b37b      	cbz	r3, 800d176 <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800d116:	4698      	mov	r8, r3
 800d118:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800d11c:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800d120:	2b04      	cmp	r3, #4
 800d122:	d1d1      	bne.n	800d0c8 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 800d124:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800d128:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	; 0x40
 800d12c:	e9cd 2300 	strd	r2, r3, [sp]
 800d130:	4313      	orrs	r3, r2
 800d132:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 800d136:	d015      	beq.n	800d164 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800d138:	9a01      	ldr	r2, [sp, #4]
 800d13a:	4b14      	ldr	r3, [pc, #80]	; (800d18c <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 800d13c:	fb03 f702 	mul.w	r7, r3, r2
 800d140:	9a00      	ldr	r2, [sp, #0]
 800d142:	fba2 2303 	umull	r2, r3, r2, r3
 800d146:	e9cd 2300 	strd	r2, r3, [sp]
 800d14a:	443b      	add	r3, r7
 800d14c:	9301      	str	r3, [sp, #4]
 800d14e:	e7c5      	b.n	800d0dc <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800d150:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800d154:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
 800d158:	e9cd 2300 	strd	r2, r3, [sp]
 800d15c:	4313      	orrs	r3, r2
 800d15e:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 800d162:	d1e9      	bne.n	800d138 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 800d164:	ea50 0301 	orrs.w	r3, r0, r1
 800d168:	bf02      	ittt	eq
 800d16a:	a305      	addeq	r3, pc, #20	; (adr r3, 800d180 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 800d16c:	e9d3 2300 	ldrdeq	r2, r3, [r3]
 800d170:	e9cd 2300 	strdeq	r2, r3, [sp]
 800d174:	e7b2      	b.n	800d0dc <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800d176:	b003      	add	sp, #12
 800d178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d17c:	f3af 8000 	nop.w
 800d180:	fc23ac00 	.word	0xfc23ac00
 800d184:	00000006 	.word	0x00000006
 800d188:	2000c2d8 	.word	0x2000c2d8
 800d18c:	3b9aca00 	.word	0x3b9aca00

0800d190 <run_xrce_session>:
 800d190:	b510      	push	{r4, lr}
 800d192:	788c      	ldrb	r4, [r1, #2]
 800d194:	b086      	sub	sp, #24
 800d196:	2c01      	cmp	r4, #1
 800d198:	f8ad 200e 	strh.w	r2, [sp, #14]
 800d19c:	d00c      	beq.n	800d1b8 <run_xrce_session+0x28>
 800d19e:	4619      	mov	r1, r3
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	9300      	str	r3, [sp, #0]
 800d1a4:	f10d 020e 	add.w	r2, sp, #14
 800d1a8:	f10d 0317 	add.w	r3, sp, #23
 800d1ac:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800d1b0:	f001 f8de 	bl	800e370 <uxr_run_session_until_all_status>
 800d1b4:	b006      	add	sp, #24
 800d1b6:	bd10      	pop	{r4, pc}
 800d1b8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800d1bc:	f000 fcf6 	bl	800dbac <uxr_flash_output_streams>
 800d1c0:	4620      	mov	r0, r4
 800d1c2:	b006      	add	sp, #24
 800d1c4:	bd10      	pop	{r4, pc}
 800d1c6:	bf00      	nop

0800d1c8 <convert_qos_profile>:
 800d1c8:	b430      	push	{r4, r5}
 800d1ca:	7a0d      	ldrb	r5, [r1, #8]
 800d1cc:	780c      	ldrb	r4, [r1, #0]
 800d1ce:	7a4a      	ldrb	r2, [r1, #9]
 800d1d0:	8889      	ldrh	r1, [r1, #4]
 800d1d2:	8081      	strh	r1, [r0, #4]
 800d1d4:	f1a5 0502 	sub.w	r5, r5, #2
 800d1d8:	f1a4 0402 	sub.w	r4, r4, #2
 800d1dc:	2a02      	cmp	r2, #2
 800d1de:	fab5 f585 	clz	r5, r5
 800d1e2:	fab4 f484 	clz	r4, r4
 800d1e6:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800d1ea:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800d1ee:	bf18      	it	ne
 800d1f0:	2200      	movne	r2, #0
 800d1f2:	7045      	strb	r5, [r0, #1]
 800d1f4:	7084      	strb	r4, [r0, #2]
 800d1f6:	7002      	strb	r2, [r0, #0]
 800d1f8:	bc30      	pop	{r4, r5}
 800d1fa:	4770      	bx	lr

0800d1fc <generate_type_name>:
 800d1fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1fe:	2300      	movs	r3, #0
 800d200:	700b      	strb	r3, [r1, #0]
 800d202:	6803      	ldr	r3, [r0, #0]
 800d204:	b087      	sub	sp, #28
 800d206:	4614      	mov	r4, r2
 800d208:	b1d3      	cbz	r3, 800d240 <generate_type_name+0x44>
 800d20a:	4d0f      	ldr	r5, [pc, #60]	; (800d248 <generate_type_name+0x4c>)
 800d20c:	462f      	mov	r7, r5
 800d20e:	4a0f      	ldr	r2, [pc, #60]	; (800d24c <generate_type_name+0x50>)
 800d210:	4e0f      	ldr	r6, [pc, #60]	; (800d250 <generate_type_name+0x54>)
 800d212:	6840      	ldr	r0, [r0, #4]
 800d214:	9004      	str	r0, [sp, #16]
 800d216:	e9cd 6201 	strd	r6, r2, [sp, #4]
 800d21a:	4608      	mov	r0, r1
 800d21c:	9205      	str	r2, [sp, #20]
 800d21e:	9503      	str	r5, [sp, #12]
 800d220:	4a0c      	ldr	r2, [pc, #48]	; (800d254 <generate_type_name+0x58>)
 800d222:	9700      	str	r7, [sp, #0]
 800d224:	4621      	mov	r1, r4
 800d226:	f008 f86d 	bl	8015304 <sniprintf>
 800d22a:	2800      	cmp	r0, #0
 800d22c:	db05      	blt.n	800d23a <generate_type_name+0x3e>
 800d22e:	4284      	cmp	r4, r0
 800d230:	bfd4      	ite	le
 800d232:	2000      	movle	r0, #0
 800d234:	2001      	movgt	r0, #1
 800d236:	b007      	add	sp, #28
 800d238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d23a:	2000      	movs	r0, #0
 800d23c:	b007      	add	sp, #28
 800d23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d240:	4b05      	ldr	r3, [pc, #20]	; (800d258 <generate_type_name+0x5c>)
 800d242:	4d01      	ldr	r5, [pc, #4]	; (800d248 <generate_type_name+0x4c>)
 800d244:	461f      	mov	r7, r3
 800d246:	e7e2      	b.n	800d20e <generate_type_name+0x12>
 800d248:	08016d78 	.word	0x08016d78
 800d24c:	08016d8c 	.word	0x08016d8c
 800d250:	08016d90 	.word	0x08016d90
 800d254:	08016d7c 	.word	0x08016d7c
 800d258:	08016b68 	.word	0x08016b68

0800d25c <generate_topic_name>:
 800d25c:	b510      	push	{r4, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	4b09      	ldr	r3, [pc, #36]	; (800d288 <generate_topic_name+0x2c>)
 800d262:	9000      	str	r0, [sp, #0]
 800d264:	4614      	mov	r4, r2
 800d266:	4608      	mov	r0, r1
 800d268:	4611      	mov	r1, r2
 800d26a:	4a08      	ldr	r2, [pc, #32]	; (800d28c <generate_topic_name+0x30>)
 800d26c:	f008 f84a 	bl	8015304 <sniprintf>
 800d270:	2800      	cmp	r0, #0
 800d272:	db05      	blt.n	800d280 <generate_topic_name+0x24>
 800d274:	4284      	cmp	r4, r0
 800d276:	bfd4      	ite	le
 800d278:	2000      	movle	r0, #0
 800d27a:	2001      	movgt	r0, #1
 800d27c:	b002      	add	sp, #8
 800d27e:	bd10      	pop	{r4, pc}
 800d280:	2000      	movs	r0, #0
 800d282:	b002      	add	sp, #8
 800d284:	bd10      	pop	{r4, pc}
 800d286:	bf00      	nop
 800d288:	08016d94 	.word	0x08016d94
 800d28c:	08016860 	.word	0x08016860

0800d290 <is_uxrce_rmw_identifier_valid>:
 800d290:	b510      	push	{r4, lr}
 800d292:	4604      	mov	r4, r0
 800d294:	b140      	cbz	r0, 800d2a8 <is_uxrce_rmw_identifier_valid+0x18>
 800d296:	f005 fb25 	bl	80128e4 <rmw_get_implementation_identifier>
 800d29a:	4601      	mov	r1, r0
 800d29c:	4620      	mov	r0, r4
 800d29e:	f7f2 ffb7 	bl	8000210 <strcmp>
 800d2a2:	fab0 f080 	clz	r0, r0
 800d2a6:	0940      	lsrs	r0, r0, #5
 800d2a8:	bd10      	pop	{r4, pc}
 800d2aa:	bf00      	nop

0800d2ac <get_message_typesupport_handle>:
 800d2ac:	6883      	ldr	r3, [r0, #8]
 800d2ae:	4718      	bx	r3

0800d2b0 <get_message_typesupport_handle_function>:
 800d2b0:	b510      	push	{r4, lr}
 800d2b2:	4604      	mov	r4, r0
 800d2b4:	6800      	ldr	r0, [r0, #0]
 800d2b6:	f7f2 ffab 	bl	8000210 <strcmp>
 800d2ba:	2800      	cmp	r0, #0
 800d2bc:	bf0c      	ite	eq
 800d2be:	4620      	moveq	r0, r4
 800d2c0:	2000      	movne	r0, #0
 800d2c2:	bd10      	pop	{r4, pc}

0800d2c4 <uxr_buffer_delete_entity>:
 800d2c4:	b530      	push	{r4, r5, lr}
 800d2c6:	b08f      	sub	sp, #60	; 0x3c
 800d2c8:	2403      	movs	r4, #3
 800d2ca:	2500      	movs	r5, #0
 800d2cc:	e9cd 4500 	strd	r4, r5, [sp]
 800d2d0:	9202      	str	r2, [sp, #8]
 800d2d2:	ab06      	add	r3, sp, #24
 800d2d4:	2204      	movs	r2, #4
 800d2d6:	9103      	str	r1, [sp, #12]
 800d2d8:	4604      	mov	r4, r0
 800d2da:	f001 fa85 	bl	800e7e8 <uxr_prepare_stream_to_write_submessage>
 800d2de:	b918      	cbnz	r0, 800d2e8 <uxr_buffer_delete_entity+0x24>
 800d2e0:	4604      	mov	r4, r0
 800d2e2:	4620      	mov	r0, r4
 800d2e4:	b00f      	add	sp, #60	; 0x3c
 800d2e6:	bd30      	pop	{r4, r5, pc}
 800d2e8:	9902      	ldr	r1, [sp, #8]
 800d2ea:	aa05      	add	r2, sp, #20
 800d2ec:	4620      	mov	r0, r4
 800d2ee:	f001 fbb5 	bl	800ea5c <uxr_init_base_object_request>
 800d2f2:	a905      	add	r1, sp, #20
 800d2f4:	4604      	mov	r4, r0
 800d2f6:	a806      	add	r0, sp, #24
 800d2f8:	f002 fdf0 	bl	800fedc <uxr_serialize_DELETE_Payload>
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	b00f      	add	sp, #60	; 0x3c
 800d300:	bd30      	pop	{r4, r5, pc}
 800d302:	bf00      	nop

0800d304 <uxr_common_create_entity>:
 800d304:	b530      	push	{r4, r5, lr}
 800d306:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800d30a:	b08d      	sub	sp, #52	; 0x34
 800d30c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d310:	2d01      	cmp	r5, #1
 800d312:	bf0c      	ite	eq
 800d314:	f003 0201 	andeq.w	r2, r3, #1
 800d318:	2200      	movne	r2, #0
 800d31a:	330e      	adds	r3, #14
 800d31c:	4604      	mov	r4, r0
 800d31e:	441a      	add	r2, r3
 800d320:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 800d324:	9001      	str	r0, [sp, #4]
 800d326:	2101      	movs	r1, #1
 800d328:	9100      	str	r1, [sp, #0]
 800d32a:	b292      	uxth	r2, r2
 800d32c:	9903      	ldr	r1, [sp, #12]
 800d32e:	ab04      	add	r3, sp, #16
 800d330:	4620      	mov	r0, r4
 800d332:	f001 fa59 	bl	800e7e8 <uxr_prepare_stream_to_write_submessage>
 800d336:	b918      	cbnz	r0, 800d340 <uxr_common_create_entity+0x3c>
 800d338:	4604      	mov	r4, r0
 800d33a:	4620      	mov	r0, r4
 800d33c:	b00d      	add	sp, #52	; 0x34
 800d33e:	bd30      	pop	{r4, r5, pc}
 800d340:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d342:	9902      	ldr	r1, [sp, #8]
 800d344:	4620      	mov	r0, r4
 800d346:	f001 fb89 	bl	800ea5c <uxr_init_base_object_request>
 800d34a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d34c:	4604      	mov	r4, r0
 800d34e:	a804      	add	r0, sp, #16
 800d350:	f002 fd18 	bl	800fd84 <uxr_serialize_CREATE_Payload>
 800d354:	4620      	mov	r0, r4
 800d356:	b00d      	add	sp, #52	; 0x34
 800d358:	bd30      	pop	{r4, r5, pc}
 800d35a:	bf00      	nop

0800d35c <uxr_buffer_create_participant_bin>:
 800d35c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d35e:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 800d362:	ac11      	add	r4, sp, #68	; 0x44
 800d364:	9103      	str	r1, [sp, #12]
 800d366:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 800d368:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 800d36c:	2103      	movs	r1, #3
 800d36e:	7221      	strb	r1, [r4, #8]
 800d370:	2301      	movs	r3, #1
 800d372:	2100      	movs	r1, #0
 800d374:	7123      	strb	r3, [r4, #4]
 800d376:	f89d 7274 	ldrb.w	r7, [sp, #628]	; 0x274
 800d37a:	9202      	str	r2, [sp, #8]
 800d37c:	4605      	mov	r5, r0
 800d37e:	f88d 1014 	strb.w	r1, [sp, #20]
 800d382:	b1ce      	cbz	r6, 800d3b8 <uxr_buffer_create_participant_bin+0x5c>
 800d384:	f88d 301c 	strb.w	r3, [sp, #28]
 800d388:	9608      	str	r6, [sp, #32]
 800d38a:	a809      	add	r0, sp, #36	; 0x24
 800d38c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d390:	a915      	add	r1, sp, #84	; 0x54
 800d392:	f7fd f8f5 	bl	800a580 <ucdr_init_buffer>
 800d396:	a905      	add	r1, sp, #20
 800d398:	a809      	add	r0, sp, #36	; 0x24
 800d39a:	f002 f8bb 	bl	800f514 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800d39e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d3a0:	9401      	str	r4, [sp, #4]
 800d3a2:	b283      	uxth	r3, r0
 800d3a4:	9700      	str	r7, [sp, #0]
 800d3a6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d3aa:	60e0      	str	r0, [r4, #12]
 800d3ac:	4628      	mov	r0, r5
 800d3ae:	f7ff ffa9 	bl	800d304 <uxr_common_create_entity>
 800d3b2:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 800d3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3b8:	f88d 601c 	strb.w	r6, [sp, #28]
 800d3bc:	e7e5      	b.n	800d38a <uxr_buffer_create_participant_bin+0x2e>
 800d3be:	bf00      	nop

0800d3c0 <uxr_buffer_create_topic_bin>:
 800d3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3c2:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800d3c6:	ac13      	add	r4, sp, #76	; 0x4c
 800d3c8:	4605      	mov	r5, r0
 800d3ca:	9105      	str	r1, [sp, #20]
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	a997      	add	r1, sp, #604	; 0x25c
 800d3d0:	2602      	movs	r6, #2
 800d3d2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d3d6:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 800d3da:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 800d3de:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 800d3e0:	f000 f994 	bl	800d70c <uxr_object_id_to_raw>
 800d3e4:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 800d3e6:	9206      	str	r2, [sp, #24]
 800d3e8:	2303      	movs	r3, #3
 800d3ea:	2101      	movs	r1, #1
 800d3ec:	7223      	strb	r3, [r4, #8]
 800d3ee:	a80b      	add	r0, sp, #44	; 0x2c
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3f6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800d3fa:	a917      	add	r1, sp, #92	; 0x5c
 800d3fc:	f88d 301c 	strb.w	r3, [sp, #28]
 800d400:	960a      	str	r6, [sp, #40]	; 0x28
 800d402:	f7fd f8bd 	bl	800a580 <ucdr_init_buffer>
 800d406:	a906      	add	r1, sp, #24
 800d408:	a80b      	add	r0, sp, #44	; 0x2c
 800d40a:	f002 f8a5 	bl	800f558 <uxr_serialize_OBJK_Topic_Binary>
 800d40e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800d410:	9401      	str	r4, [sp, #4]
 800d412:	9700      	str	r7, [sp, #0]
 800d414:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d418:	4628      	mov	r0, r5
 800d41a:	b2b3      	uxth	r3, r6
 800d41c:	60e6      	str	r6, [r4, #12]
 800d41e:	f7ff ff71 	bl	800d304 <uxr_common_create_entity>
 800d422:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d426:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d428 <uxr_buffer_create_publisher_bin>:
 800d428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d42a:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800d42e:	ac0e      	add	r4, sp, #56	; 0x38
 800d430:	4605      	mov	r5, r0
 800d432:	9105      	str	r1, [sp, #20]
 800d434:	4618      	mov	r0, r3
 800d436:	2603      	movs	r6, #3
 800d438:	a992      	add	r1, sp, #584	; 0x248
 800d43a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d43e:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800d442:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800d446:	f000 f961 	bl	800d70c <uxr_object_id_to_raw>
 800d44a:	2300      	movs	r3, #0
 800d44c:	a806      	add	r0, sp, #24
 800d44e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d452:	a912      	add	r1, sp, #72	; 0x48
 800d454:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800d458:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800d45c:	7226      	strb	r6, [r4, #8]
 800d45e:	f7fd f88f 	bl	800a580 <ucdr_init_buffer>
 800d462:	a993      	add	r1, sp, #588	; 0x24c
 800d464:	a806      	add	r0, sp, #24
 800d466:	f002 f92b 	bl	800f6c0 <uxr_serialize_OBJK_Publisher_Binary>
 800d46a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d46c:	9700      	str	r7, [sp, #0]
 800d46e:	9401      	str	r4, [sp, #4]
 800d470:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d474:	4628      	mov	r0, r5
 800d476:	b2b3      	uxth	r3, r6
 800d478:	60e6      	str	r6, [r4, #12]
 800d47a:	f7ff ff43 	bl	800d304 <uxr_common_create_entity>
 800d47e:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800d482:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d484 <uxr_buffer_create_subscriber_bin>:
 800d484:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d486:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800d48a:	ac0e      	add	r4, sp, #56	; 0x38
 800d48c:	4605      	mov	r5, r0
 800d48e:	9105      	str	r1, [sp, #20]
 800d490:	4618      	mov	r0, r3
 800d492:	a992      	add	r1, sp, #584	; 0x248
 800d494:	2604      	movs	r6, #4
 800d496:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d49a:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800d49e:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800d4a2:	f000 f933 	bl	800d70c <uxr_object_id_to_raw>
 800d4a6:	2103      	movs	r1, #3
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	a806      	add	r0, sp, #24
 800d4ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d4b0:	7221      	strb	r1, [r4, #8]
 800d4b2:	a912      	add	r1, sp, #72	; 0x48
 800d4b4:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800d4b8:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800d4bc:	f7fd f860 	bl	800a580 <ucdr_init_buffer>
 800d4c0:	a993      	add	r1, sp, #588	; 0x24c
 800d4c2:	a806      	add	r0, sp, #24
 800d4c4:	f002 f9ac 	bl	800f820 <uxr_serialize_OBJK_Subscriber_Binary>
 800d4c8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d4ca:	9700      	str	r7, [sp, #0]
 800d4cc:	9401      	str	r4, [sp, #4]
 800d4ce:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d4d2:	4628      	mov	r0, r5
 800d4d4:	b2b3      	uxth	r3, r6
 800d4d6:	60e6      	str	r6, [r4, #12]
 800d4d8:	f7ff ff14 	bl	800d304 <uxr_common_create_entity>
 800d4dc:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800d4e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4e2:	bf00      	nop

0800d4e4 <uxr_buffer_create_datawriter_bin>:
 800d4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4e8:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800d4ec:	ac1d      	add	r4, sp, #116	; 0x74
 800d4ee:	2505      	movs	r5, #5
 800d4f0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d4f4:	9105      	str	r1, [sp, #20]
 800d4f6:	4606      	mov	r6, r0
 800d4f8:	a9a1      	add	r1, sp, #644	; 0x284
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	7125      	strb	r5, [r4, #4]
 800d4fe:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800d502:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800d506:	2703      	movs	r7, #3
 800d508:	f000 f900 	bl	800d70c <uxr_object_id_to_raw>
 800d50c:	a90e      	add	r1, sp, #56	; 0x38
 800d50e:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800d510:	7227      	strb	r7, [r4, #8]
 800d512:	f000 f8fb 	bl	800d70c <uxr_object_id_to_raw>
 800d516:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800d51a:	f89d 12a5 	ldrb.w	r1, [sp, #677]	; 0x2a5
 800d51e:	3d00      	subs	r5, #0
 800d520:	f04f 0300 	mov.w	r3, #0
 800d524:	bf18      	it	ne
 800d526:	2501      	movne	r5, #1
 800d528:	2201      	movs	r2, #1
 800d52a:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800d52e:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800d532:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800d536:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800d53a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800d53e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800d542:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800d546:	bb89      	cbnz	r1, 800d5ac <uxr_buffer_create_datawriter_bin+0xc8>
 800d548:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800d54c:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800d550:	f04f 0c13 	mov.w	ip, #19
 800d554:	250b      	movs	r5, #11
 800d556:	2221      	movs	r2, #33	; 0x21
 800d558:	2111      	movs	r1, #17
 800d55a:	2009      	movs	r0, #9
 800d55c:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800d560:	b923      	cbnz	r3, 800d56c <uxr_buffer_create_datawriter_bin+0x88>
 800d562:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800d566:	4672      	mov	r2, lr
 800d568:	4661      	mov	r1, ip
 800d56a:	4628      	mov	r0, r5
 800d56c:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800d570:	2b01      	cmp	r3, #1
 800d572:	d025      	beq.n	800d5c0 <uxr_buffer_create_datawriter_bin+0xdc>
 800d574:	2b03      	cmp	r3, #3
 800d576:	d029      	beq.n	800d5cc <uxr_buffer_create_datawriter_bin+0xe8>
 800d578:	b32b      	cbz	r3, 800d5c6 <uxr_buffer_create_datawriter_bin+0xe2>
 800d57a:	a806      	add	r0, sp, #24
 800d57c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d580:	a921      	add	r1, sp, #132	; 0x84
 800d582:	f7fc fffd 	bl	800a580 <ucdr_init_buffer>
 800d586:	a90e      	add	r1, sp, #56	; 0x38
 800d588:	a806      	add	r0, sp, #24
 800d58a:	f002 f9fb 	bl	800f984 <uxr_serialize_OBJK_DataWriter_Binary>
 800d58e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d590:	9401      	str	r4, [sp, #4]
 800d592:	b283      	uxth	r3, r0
 800d594:	f8cd 8000 	str.w	r8, [sp]
 800d598:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d59c:	60e0      	str	r0, [r4, #12]
 800d59e:	4630      	mov	r0, r6
 800d5a0:	f7ff feb0 	bl	800d304 <uxr_common_create_entity>
 800d5a4:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800d5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5ac:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800d5b0:	f04f 0c12 	mov.w	ip, #18
 800d5b4:	250a      	movs	r5, #10
 800d5b6:	2220      	movs	r2, #32
 800d5b8:	2110      	movs	r1, #16
 800d5ba:	2008      	movs	r0, #8
 800d5bc:	2702      	movs	r7, #2
 800d5be:	e7cd      	b.n	800d55c <uxr_buffer_create_datawriter_bin+0x78>
 800d5c0:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800d5c4:	e7d9      	b.n	800d57a <uxr_buffer_create_datawriter_bin+0x96>
 800d5c6:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800d5ca:	e7d6      	b.n	800d57a <uxr_buffer_create_datawriter_bin+0x96>
 800d5cc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800d5d0:	e7d3      	b.n	800d57a <uxr_buffer_create_datawriter_bin+0x96>
 800d5d2:	bf00      	nop

0800d5d4 <uxr_buffer_create_datareader_bin>:
 800d5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5d8:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800d5dc:	ac1f      	add	r4, sp, #124	; 0x7c
 800d5de:	2506      	movs	r5, #6
 800d5e0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d5e4:	9105      	str	r1, [sp, #20]
 800d5e6:	4606      	mov	r6, r0
 800d5e8:	a9a3      	add	r1, sp, #652	; 0x28c
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	7125      	strb	r5, [r4, #4]
 800d5ee:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 800d5f2:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 800d5f6:	2703      	movs	r7, #3
 800d5f8:	f000 f888 	bl	800d70c <uxr_object_id_to_raw>
 800d5fc:	a90e      	add	r1, sp, #56	; 0x38
 800d5fe:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 800d600:	7227      	strb	r7, [r4, #8]
 800d602:	f000 f883 	bl	800d70c <uxr_object_id_to_raw>
 800d606:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800d60a:	f89d 12ad 	ldrb.w	r1, [sp, #685]	; 0x2ad
 800d60e:	3d00      	subs	r5, #0
 800d610:	f04f 0300 	mov.w	r3, #0
 800d614:	bf18      	it	ne
 800d616:	2501      	movne	r5, #1
 800d618:	2201      	movs	r2, #1
 800d61a:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800d61e:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800d622:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800d626:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800d62a:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800d62e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800d632:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800d636:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800d63a:	bb89      	cbnz	r1, 800d6a0 <uxr_buffer_create_datareader_bin+0xcc>
 800d63c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800d640:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800d644:	f04f 0c13 	mov.w	ip, #19
 800d648:	250b      	movs	r5, #11
 800d64a:	2221      	movs	r2, #33	; 0x21
 800d64c:	2111      	movs	r1, #17
 800d64e:	2009      	movs	r0, #9
 800d650:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 800d654:	b923      	cbnz	r3, 800d660 <uxr_buffer_create_datareader_bin+0x8c>
 800d656:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800d65a:	4672      	mov	r2, lr
 800d65c:	4661      	mov	r1, ip
 800d65e:	4628      	mov	r0, r5
 800d660:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 800d664:	2b01      	cmp	r3, #1
 800d666:	d025      	beq.n	800d6b4 <uxr_buffer_create_datareader_bin+0xe0>
 800d668:	2b03      	cmp	r3, #3
 800d66a:	d029      	beq.n	800d6c0 <uxr_buffer_create_datareader_bin+0xec>
 800d66c:	b32b      	cbz	r3, 800d6ba <uxr_buffer_create_datareader_bin+0xe6>
 800d66e:	a806      	add	r0, sp, #24
 800d670:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d674:	a923      	add	r1, sp, #140	; 0x8c
 800d676:	f7fc ff83 	bl	800a580 <ucdr_init_buffer>
 800d67a:	a90e      	add	r1, sp, #56	; 0x38
 800d67c:	a806      	add	r0, sp, #24
 800d67e:	f002 f945 	bl	800f90c <uxr_serialize_OBJK_DataReader_Binary>
 800d682:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d684:	9401      	str	r4, [sp, #4]
 800d686:	b283      	uxth	r3, r0
 800d688:	f8cd 8000 	str.w	r8, [sp]
 800d68c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d690:	60e0      	str	r0, [r4, #12]
 800d692:	4630      	mov	r0, r6
 800d694:	f7ff fe36 	bl	800d304 <uxr_common_create_entity>
 800d698:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800d69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6a0:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800d6a4:	f04f 0c12 	mov.w	ip, #18
 800d6a8:	250a      	movs	r5, #10
 800d6aa:	2220      	movs	r2, #32
 800d6ac:	2110      	movs	r1, #16
 800d6ae:	2008      	movs	r0, #8
 800d6b0:	2702      	movs	r7, #2
 800d6b2:	e7cd      	b.n	800d650 <uxr_buffer_create_datareader_bin+0x7c>
 800d6b4:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800d6b8:	e7d9      	b.n	800d66e <uxr_buffer_create_datareader_bin+0x9a>
 800d6ba:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800d6be:	e7d6      	b.n	800d66e <uxr_buffer_create_datareader_bin+0x9a>
 800d6c0:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800d6c4:	e7d3      	b.n	800d66e <uxr_buffer_create_datareader_bin+0x9a>
 800d6c6:	bf00      	nop

0800d6c8 <uxr_object_id>:
 800d6c8:	b082      	sub	sp, #8
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	f88d 1006 	strb.w	r1, [sp, #6]
 800d6d0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d6d4:	f360 030f 	bfi	r3, r0, #0, #16
 800d6d8:	f362 431f 	bfi	r3, r2, #16, #16
 800d6dc:	4618      	mov	r0, r3
 800d6de:	b002      	add	sp, #8
 800d6e0:	4770      	bx	lr
 800d6e2:	bf00      	nop

0800d6e4 <uxr_object_id_from_raw>:
 800d6e4:	7843      	ldrb	r3, [r0, #1]
 800d6e6:	7801      	ldrb	r1, [r0, #0]
 800d6e8:	b082      	sub	sp, #8
 800d6ea:	f003 000f 	and.w	r0, r3, #15
 800d6ee:	f88d 0006 	strb.w	r0, [sp, #6]
 800d6f2:	091b      	lsrs	r3, r3, #4
 800d6f4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800d6fe:	f363 020f 	bfi	r2, r3, #0, #16
 800d702:	f361 421f 	bfi	r2, r1, #16, #16
 800d706:	4610      	mov	r0, r2
 800d708:	b002      	add	sp, #8
 800d70a:	4770      	bx	lr

0800d70c <uxr_object_id_to_raw>:
 800d70c:	4602      	mov	r2, r0
 800d70e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800d712:	b082      	sub	sp, #8
 800d714:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800d718:	f3c2 120b 	ubfx	r2, r2, #4, #12
 800d71c:	700a      	strb	r2, [r1, #0]
 800d71e:	704b      	strb	r3, [r1, #1]
 800d720:	b002      	add	sp, #8
 800d722:	4770      	bx	lr

0800d724 <uxr_buffer_request_data>:
 800d724:	b530      	push	{r4, r5, lr}
 800d726:	b095      	sub	sp, #84	; 0x54
 800d728:	4604      	mov	r4, r0
 800d72a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800d72c:	9105      	str	r1, [sp, #20]
 800d72e:	2d00      	cmp	r5, #0
 800d730:	bf14      	ite	ne
 800d732:	2101      	movne	r1, #1
 800d734:	2100      	moveq	r1, #0
 800d736:	9204      	str	r2, [sp, #16]
 800d738:	f04f 0200 	mov.w	r2, #0
 800d73c:	9303      	str	r3, [sp, #12]
 800d73e:	f88d 301c 	strb.w	r3, [sp, #28]
 800d742:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800d746:	f88d 201d 	strb.w	r2, [sp, #29]
 800d74a:	f88d 201e 	strb.w	r2, [sp, #30]
 800d74e:	d021      	beq.n	800d794 <uxr_buffer_request_data+0x70>
 800d750:	686a      	ldr	r2, [r5, #4]
 800d752:	682b      	ldr	r3, [r5, #0]
 800d754:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 800d758:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 800d75c:	2210      	movs	r2, #16
 800d75e:	2000      	movs	r0, #0
 800d760:	2108      	movs	r1, #8
 800d762:	e9cd 1000 	strd	r1, r0, [sp]
 800d766:	ab0c      	add	r3, sp, #48	; 0x30
 800d768:	9905      	ldr	r1, [sp, #20]
 800d76a:	4620      	mov	r0, r4
 800d76c:	f001 f83c 	bl	800e7e8 <uxr_prepare_stream_to_write_submessage>
 800d770:	b918      	cbnz	r0, 800d77a <uxr_buffer_request_data+0x56>
 800d772:	4604      	mov	r4, r0
 800d774:	4620      	mov	r0, r4
 800d776:	b015      	add	sp, #84	; 0x54
 800d778:	bd30      	pop	{r4, r5, pc}
 800d77a:	9904      	ldr	r1, [sp, #16]
 800d77c:	aa06      	add	r2, sp, #24
 800d77e:	4620      	mov	r0, r4
 800d780:	f001 f96c 	bl	800ea5c <uxr_init_base_object_request>
 800d784:	a906      	add	r1, sp, #24
 800d786:	4604      	mov	r4, r0
 800d788:	a80c      	add	r0, sp, #48	; 0x30
 800d78a:	f002 fc51 	bl	8010030 <uxr_serialize_READ_DATA_Payload>
 800d78e:	4620      	mov	r0, r4
 800d790:	b015      	add	sp, #84	; 0x54
 800d792:	bd30      	pop	{r4, r5, pc}
 800d794:	2208      	movs	r2, #8
 800d796:	e7e2      	b.n	800d75e <uxr_buffer_request_data+0x3a>

0800d798 <uxr_buffer_cancel_data>:
 800d798:	b530      	push	{r4, r5, lr}
 800d79a:	b095      	sub	sp, #84	; 0x54
 800d79c:	2400      	movs	r4, #0
 800d79e:	2308      	movs	r3, #8
 800d7a0:	e9cd 4201 	strd	r4, r2, [sp, #4]
 800d7a4:	9300      	str	r3, [sp, #0]
 800d7a6:	9205      	str	r2, [sp, #20]
 800d7a8:	2501      	movs	r5, #1
 800d7aa:	ab0c      	add	r3, sp, #48	; 0x30
 800d7ac:	2210      	movs	r2, #16
 800d7ae:	f8ad 401c 	strh.w	r4, [sp, #28]
 800d7b2:	f88d 401e 	strb.w	r4, [sp, #30]
 800d7b6:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 800d7ba:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 800d7be:	9103      	str	r1, [sp, #12]
 800d7c0:	4604      	mov	r4, r0
 800d7c2:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 800d7c6:	f001 f80f 	bl	800e7e8 <uxr_prepare_stream_to_write_submessage>
 800d7ca:	b918      	cbnz	r0, 800d7d4 <uxr_buffer_cancel_data+0x3c>
 800d7cc:	4604      	mov	r4, r0
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	b015      	add	sp, #84	; 0x54
 800d7d2:	bd30      	pop	{r4, r5, pc}
 800d7d4:	9905      	ldr	r1, [sp, #20]
 800d7d6:	aa06      	add	r2, sp, #24
 800d7d8:	4620      	mov	r0, r4
 800d7da:	f001 f93f 	bl	800ea5c <uxr_init_base_object_request>
 800d7de:	a906      	add	r1, sp, #24
 800d7e0:	4604      	mov	r4, r0
 800d7e2:	a80c      	add	r0, sp, #48	; 0x30
 800d7e4:	f002 fc24 	bl	8010030 <uxr_serialize_READ_DATA_Payload>
 800d7e8:	4620      	mov	r0, r4
 800d7ea:	b015      	add	sp, #84	; 0x54
 800d7ec:	bd30      	pop	{r4, r5, pc}
 800d7ee:	bf00      	nop

0800d7f0 <read_submessage_format>:
 800d7f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d7f4:	b095      	sub	sp, #84	; 0x54
 800d7f6:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 800d7fa:	b113      	cbz	r3, 800d802 <read_submessage_format+0x12>
 800d7fc:	b015      	add	sp, #84	; 0x54
 800d7fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d802:	460c      	mov	r4, r1
 800d804:	4616      	mov	r6, r2
 800d806:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800d80a:	461d      	mov	r5, r3
 800d80c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d80e:	9304      	str	r3, [sp, #16]
 800d810:	1a52      	subs	r2, r2, r1
 800d812:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d814:	9305      	str	r3, [sp, #20]
 800d816:	4607      	mov	r7, r0
 800d818:	a80c      	add	r0, sp, #48	; 0x30
 800d81a:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 800d81e:	f7fc feaf 	bl	800a580 <ucdr_init_buffer>
 800d822:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d826:	a80c      	add	r0, sp, #48	; 0x30
 800d828:	f7fc fe80 	bl	800a52c <ucdr_set_on_full_buffer_callback>
 800d82c:	69e3      	ldr	r3, [r4, #28]
 800d82e:	b193      	cbz	r3, 800d856 <read_submessage_format+0x66>
 800d830:	f1b8 0f07 	cmp.w	r8, #7
 800d834:	751d      	strb	r5, [r3, #20]
 800d836:	d03e      	beq.n	800d8b6 <read_submessage_format+0xc6>
 800d838:	f1b8 0f08 	cmp.w	r8, #8
 800d83c:	d02c      	beq.n	800d898 <read_submessage_format+0xa8>
 800d83e:	f1b8 0f06 	cmp.w	r8, #6
 800d842:	d011      	beq.n	800d868 <read_submessage_format+0x78>
 800d844:	2201      	movs	r2, #1
 800d846:	751a      	strb	r2, [r3, #20]
 800d848:	4631      	mov	r1, r6
 800d84a:	4620      	mov	r0, r4
 800d84c:	f7fc fee8 	bl	800a620 <ucdr_advance_buffer>
 800d850:	b015      	add	sp, #84	; 0x54
 800d852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d856:	f1b8 0f07 	cmp.w	r8, #7
 800d85a:	d02c      	beq.n	800d8b6 <read_submessage_format+0xc6>
 800d85c:	f1b8 0f08 	cmp.w	r8, #8
 800d860:	d01a      	beq.n	800d898 <read_submessage_format+0xa8>
 800d862:	f1b8 0f06 	cmp.w	r8, #6
 800d866:	d1ef      	bne.n	800d848 <read_submessage_format+0x58>
 800d868:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 800d86c:	b18d      	cbz	r5, 800d892 <read_submessage_format+0xa2>
 800d86e:	2306      	movs	r3, #6
 800d870:	f88d 3016 	strb.w	r3, [sp, #22]
 800d874:	aa0c      	add	r2, sp, #48	; 0x30
 800d876:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d87a:	9302      	str	r3, [sp, #8]
 800d87c:	9200      	str	r2, [sp, #0]
 800d87e:	9b04      	ldr	r3, [sp, #16]
 800d880:	9905      	ldr	r1, [sp, #20]
 800d882:	9601      	str	r6, [sp, #4]
 800d884:	464a      	mov	r2, r9
 800d886:	4638      	mov	r0, r7
 800d888:	47a8      	blx	r5
 800d88a:	2301      	movs	r3, #1
 800d88c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800d890:	69e3      	ldr	r3, [r4, #28]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d1d6      	bne.n	800d844 <read_submessage_format+0x54>
 800d896:	e7d7      	b.n	800d848 <read_submessage_format+0x58>
 800d898:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d89c:	2a00      	cmp	r2, #0
 800d89e:	d0f8      	beq.n	800d892 <read_submessage_format+0xa2>
 800d8a0:	a906      	add	r1, sp, #24
 800d8a2:	a80c      	add	r0, sp, #48	; 0x30
 800d8a4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d8a6:	f002 fc89 	bl	80101bc <uxr_deserialize_SampleIdentity>
 800d8aa:	2800      	cmp	r0, #0
 800d8ac:	d13c      	bne.n	800d928 <read_submessage_format+0x138>
 800d8ae:	69e3      	ldr	r3, [r4, #28]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d1c7      	bne.n	800d844 <read_submessage_format+0x54>
 800d8b4:	e7c8      	b.n	800d848 <read_submessage_format+0x58>
 800d8b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d8ba:	b132      	cbz	r2, 800d8ca <read_submessage_format+0xda>
 800d8bc:	a906      	add	r1, sp, #24
 800d8be:	a80c      	add	r0, sp, #48	; 0x30
 800d8c0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d8c2:	f002 f939 	bl	800fb38 <uxr_deserialize_BaseObjectRequest>
 800d8c6:	b930      	cbnz	r0, 800d8d6 <read_submessage_format+0xe6>
 800d8c8:	69e3      	ldr	r3, [r4, #28]
 800d8ca:	68a2      	ldr	r2, [r4, #8]
 800d8cc:	4432      	add	r2, r6
 800d8ce:	60a2      	str	r2, [r4, #8]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d1b7      	bne.n	800d844 <read_submessage_format+0x54>
 800d8d4:	e7b8      	b.n	800d848 <read_submessage_format+0x58>
 800d8d6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800d8da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d8dc:	1a52      	subs	r2, r2, r1
 800d8de:	a80c      	add	r0, sp, #48	; 0x30
 800d8e0:	1aed      	subs	r5, r5, r3
 800d8e2:	f7fc fe4d 	bl	800a580 <ucdr_init_buffer>
 800d8e6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d8ea:	a80c      	add	r0, sp, #48	; 0x30
 800d8ec:	f7fc fe1e 	bl	800a52c <ucdr_set_on_full_buffer_callback>
 800d8f0:	4435      	add	r5, r6
 800d8f2:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800d8f6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d8fa:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800d8fe:	9002      	str	r0, [sp, #8]
 800d900:	2207      	movs	r2, #7
 800d902:	f88d 2016 	strb.w	r2, [sp, #22]
 800d906:	b2ad      	uxth	r5, r5
 800d908:	aa0c      	add	r2, sp, #48	; 0x30
 800d90a:	9200      	str	r2, [sp, #0]
 800d90c:	9501      	str	r5, [sp, #4]
 800d90e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800d912:	b29b      	uxth	r3, r3
 800d914:	9905      	ldr	r1, [sp, #20]
 800d916:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 800d91a:	464a      	mov	r2, r9
 800d91c:	4638      	mov	r0, r7
 800d91e:	47a8      	blx	r5
 800d920:	2301      	movs	r3, #1
 800d922:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800d926:	e7cf      	b.n	800d8c8 <read_submessage_format+0xd8>
 800d928:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800d92c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d92e:	1a52      	subs	r2, r2, r1
 800d930:	a80c      	add	r0, sp, #48	; 0x30
 800d932:	1aed      	subs	r5, r5, r3
 800d934:	f7fc fe24 	bl	800a580 <ucdr_init_buffer>
 800d938:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d93c:	a80c      	add	r0, sp, #48	; 0x30
 800d93e:	f7fc fdf5 	bl	800a52c <ucdr_set_on_full_buffer_callback>
 800d942:	4435      	add	r5, r6
 800d944:	2308      	movs	r3, #8
 800d946:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800d94a:	f88d 3016 	strb.w	r3, [sp, #22]
 800d94e:	b2ad      	uxth	r5, r5
 800d950:	ab0c      	add	r3, sp, #48	; 0x30
 800d952:	9300      	str	r3, [sp, #0]
 800d954:	9002      	str	r0, [sp, #8]
 800d956:	9501      	str	r5, [sp, #4]
 800d958:	ab06      	add	r3, sp, #24
 800d95a:	9905      	ldr	r1, [sp, #20]
 800d95c:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 800d960:	464a      	mov	r2, r9
 800d962:	4638      	mov	r0, r7
 800d964:	47a8      	blx	r5
 800d966:	2301      	movs	r3, #1
 800d968:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800d96c:	e79f      	b.n	800d8ae <read_submessage_format+0xbe>
 800d96e:	bf00      	nop

0800d970 <on_get_fragmentation_info>:
 800d970:	b500      	push	{lr}
 800d972:	b08b      	sub	sp, #44	; 0x2c
 800d974:	4601      	mov	r1, r0
 800d976:	2204      	movs	r2, #4
 800d978:	a802      	add	r0, sp, #8
 800d97a:	f7fc fe01 	bl	800a580 <ucdr_init_buffer>
 800d97e:	f10d 0305 	add.w	r3, sp, #5
 800d982:	a802      	add	r0, sp, #8
 800d984:	f10d 0206 	add.w	r2, sp, #6
 800d988:	a901      	add	r1, sp, #4
 800d98a:	f001 f9eb 	bl	800ed64 <uxr_read_submessage_header>
 800d98e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d992:	2b0d      	cmp	r3, #13
 800d994:	d003      	beq.n	800d99e <on_get_fragmentation_info+0x2e>
 800d996:	2000      	movs	r0, #0
 800d998:	b00b      	add	sp, #44	; 0x2c
 800d99a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d99e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d9a2:	f013 0f02 	tst.w	r3, #2
 800d9a6:	bf14      	ite	ne
 800d9a8:	2002      	movne	r0, #2
 800d9aa:	2001      	moveq	r0, #1
 800d9ac:	b00b      	add	sp, #44	; 0x2c
 800d9ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800d9b2:	bf00      	nop

0800d9b4 <read_submessage_get_info>:
 800d9b4:	b570      	push	{r4, r5, r6, lr}
 800d9b6:	2500      	movs	r5, #0
 800d9b8:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800d9bc:	4604      	mov	r4, r0
 800d9be:	f44f 7224 	mov.w	r2, #656	; 0x290
 800d9c2:	460e      	mov	r6, r1
 800d9c4:	a810      	add	r0, sp, #64	; 0x40
 800d9c6:	4629      	mov	r1, r5
 800d9c8:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800d9cc:	f007 fb00 	bl	8014fd0 <memset>
 800d9d0:	a903      	add	r1, sp, #12
 800d9d2:	4630      	mov	r0, r6
 800d9d4:	f002 fa6e 	bl	800feb4 <uxr_deserialize_GET_INFO_Payload>
 800d9d8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d9dc:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800d9e0:	4620      	mov	r0, r4
 800d9e2:	f001 f833 	bl	800ea4c <uxr_session_header_offset>
 800d9e6:	462b      	mov	r3, r5
 800d9e8:	9000      	str	r0, [sp, #0]
 800d9ea:	a905      	add	r1, sp, #20
 800d9ec:	a808      	add	r0, sp, #32
 800d9ee:	220c      	movs	r2, #12
 800d9f0:	f7fc fdb4 	bl	800a55c <ucdr_init_buffer_origin_offset>
 800d9f4:	a910      	add	r1, sp, #64	; 0x40
 800d9f6:	a808      	add	r0, sp, #32
 800d9f8:	f002 face 	bl	800ff98 <uxr_serialize_INFO_Payload>
 800d9fc:	9b08      	ldr	r3, [sp, #32]
 800d9fe:	462a      	mov	r2, r5
 800da00:	4629      	mov	r1, r5
 800da02:	4620      	mov	r0, r4
 800da04:	f000 ffca 	bl	800e99c <uxr_stamp_session_header>
 800da08:	a808      	add	r0, sp, #32
 800da0a:	f7fc fde5 	bl	800a5d8 <ucdr_buffer_length>
 800da0e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800da10:	4602      	mov	r2, r0
 800da12:	a905      	add	r1, sp, #20
 800da14:	e9d3 0400 	ldrd	r0, r4, [r3]
 800da18:	47a0      	blx	r4
 800da1a:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800da1e:	bd70      	pop	{r4, r5, r6, pc}

0800da20 <write_submessage_acknack.isra.0>:
 800da20:	b570      	push	{r4, r5, r6, lr}
 800da22:	b092      	sub	sp, #72	; 0x48
 800da24:	4605      	mov	r5, r0
 800da26:	460e      	mov	r6, r1
 800da28:	4614      	mov	r4, r2
 800da2a:	f001 f80f 	bl	800ea4c <uxr_session_header_offset>
 800da2e:	a905      	add	r1, sp, #20
 800da30:	9000      	str	r0, [sp, #0]
 800da32:	2300      	movs	r3, #0
 800da34:	a80a      	add	r0, sp, #40	; 0x28
 800da36:	2211      	movs	r2, #17
 800da38:	f7fc fd90 	bl	800a55c <ucdr_init_buffer_origin_offset>
 800da3c:	2218      	movs	r2, #24
 800da3e:	fb02 5404 	mla	r4, r2, r4, r5
 800da42:	2300      	movs	r3, #0
 800da44:	2205      	movs	r2, #5
 800da46:	3450      	adds	r4, #80	; 0x50
 800da48:	a80a      	add	r0, sp, #40	; 0x28
 800da4a:	210a      	movs	r1, #10
 800da4c:	f001 f970 	bl	800ed30 <uxr_buffer_submessage_header>
 800da50:	a903      	add	r1, sp, #12
 800da52:	4620      	mov	r0, r4
 800da54:	f006 f8f8 	bl	8013c48 <uxr_compute_acknack>
 800da58:	a903      	add	r1, sp, #12
 800da5a:	ba43      	rev16	r3, r0
 800da5c:	a80a      	add	r0, sp, #40	; 0x28
 800da5e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800da62:	f88d 6010 	strb.w	r6, [sp, #16]
 800da66:	f002 fb07 	bl	8010078 <uxr_serialize_ACKNACK_Payload>
 800da6a:	2200      	movs	r2, #0
 800da6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da6e:	4611      	mov	r1, r2
 800da70:	4628      	mov	r0, r5
 800da72:	f000 ff93 	bl	800e99c <uxr_stamp_session_header>
 800da76:	a80a      	add	r0, sp, #40	; 0x28
 800da78:	f7fc fdae 	bl	800a5d8 <ucdr_buffer_length>
 800da7c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800da7e:	4602      	mov	r2, r0
 800da80:	a905      	add	r1, sp, #20
 800da82:	e9d3 0400 	ldrd	r0, r4, [r3]
 800da86:	47a0      	blx	r4
 800da88:	b012      	add	sp, #72	; 0x48
 800da8a:	bd70      	pop	{r4, r5, r6, pc}

0800da8c <uxr_init_session>:
 800da8c:	b5d0      	push	{r4, r6, r7, lr}
 800da8e:	2300      	movs	r3, #0
 800da90:	2600      	movs	r6, #0
 800da92:	2700      	movs	r7, #0
 800da94:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 800da98:	4604      	mov	r4, r0
 800da9a:	6701      	str	r1, [r0, #112]	; 0x70
 800da9c:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 800daa0:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 800daa4:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 800daa8:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 800daac:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 800dab0:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800dab4:	2181      	movs	r1, #129	; 0x81
 800dab6:	f000 fedb 	bl	800e870 <uxr_init_session_info>
 800daba:	f104 0008 	add.w	r0, r4, #8
 800dabe:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 800dac2:	f001 b851 	b.w	800eb68 <uxr_init_stream_storage>
 800dac6:	bf00      	nop

0800dac8 <uxr_set_status_callback>:
 800dac8:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800dacc:	4770      	bx	lr
 800dace:	bf00      	nop

0800dad0 <uxr_set_topic_callback>:
 800dad0:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800dad4:	4770      	bx	lr
 800dad6:	bf00      	nop

0800dad8 <uxr_set_request_callback>:
 800dad8:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800dadc:	4770      	bx	lr
 800dade:	bf00      	nop

0800dae0 <uxr_set_reply_callback>:
 800dae0:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800dae4:	4770      	bx	lr
 800dae6:	bf00      	nop

0800dae8 <uxr_create_output_best_effort_stream>:
 800dae8:	b510      	push	{r4, lr}
 800daea:	b084      	sub	sp, #16
 800daec:	e9cd 2100 	strd	r2, r1, [sp]
 800daf0:	4604      	mov	r4, r0
 800daf2:	f000 ffab 	bl	800ea4c <uxr_session_header_offset>
 800daf6:	e9dd 2100 	ldrd	r2, r1, [sp]
 800dafa:	4603      	mov	r3, r0
 800dafc:	f104 0008 	add.w	r0, r4, #8
 800db00:	b004      	add	sp, #16
 800db02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db06:	f001 b879 	b.w	800ebfc <uxr_add_output_best_effort_buffer>
 800db0a:	bf00      	nop

0800db0c <uxr_create_output_reliable_stream>:
 800db0c:	b530      	push	{r4, r5, lr}
 800db0e:	b089      	sub	sp, #36	; 0x24
 800db10:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800db14:	9303      	str	r3, [sp, #12]
 800db16:	4604      	mov	r4, r0
 800db18:	f000 ff98 	bl	800ea4c <uxr_session_header_offset>
 800db1c:	4605      	mov	r5, r0
 800db1e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800db22:	9905      	ldr	r1, [sp, #20]
 800db24:	9500      	str	r5, [sp, #0]
 800db26:	f104 0008 	add.w	r0, r4, #8
 800db2a:	f001 f879 	bl	800ec20 <uxr_add_output_reliable_buffer>
 800db2e:	2200      	movs	r2, #0
 800db30:	b2c3      	uxtb	r3, r0
 800db32:	f363 0207 	bfi	r2, r3, #0, #8
 800db36:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800db3a:	f363 220f 	bfi	r2, r3, #8, #8
 800db3e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800db42:	f363 4217 	bfi	r2, r3, #16, #8
 800db46:	0e03      	lsrs	r3, r0, #24
 800db48:	f363 621f 	bfi	r2, r3, #24, #8
 800db4c:	4610      	mov	r0, r2
 800db4e:	b009      	add	sp, #36	; 0x24
 800db50:	bd30      	pop	{r4, r5, pc}
 800db52:	bf00      	nop

0800db54 <uxr_create_input_best_effort_stream>:
 800db54:	b082      	sub	sp, #8
 800db56:	3008      	adds	r0, #8
 800db58:	b002      	add	sp, #8
 800db5a:	f001 b87b 	b.w	800ec54 <uxr_add_input_best_effort_buffer>
 800db5e:	bf00      	nop

0800db60 <uxr_create_input_reliable_stream>:
 800db60:	b510      	push	{r4, lr}
 800db62:	b084      	sub	sp, #16
 800db64:	4c0b      	ldr	r4, [pc, #44]	; (800db94 <uxr_create_input_reliable_stream+0x34>)
 800db66:	9400      	str	r4, [sp, #0]
 800db68:	3008      	adds	r0, #8
 800db6a:	f001 f889 	bl	800ec80 <uxr_add_input_reliable_buffer>
 800db6e:	2200      	movs	r2, #0
 800db70:	b2c3      	uxtb	r3, r0
 800db72:	f363 0207 	bfi	r2, r3, #0, #8
 800db76:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800db7a:	f363 220f 	bfi	r2, r3, #8, #8
 800db7e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800db82:	f363 4217 	bfi	r2, r3, #16, #8
 800db86:	0e03      	lsrs	r3, r0, #24
 800db88:	f363 621f 	bfi	r2, r3, #24, #8
 800db8c:	4610      	mov	r0, r2
 800db8e:	b004      	add	sp, #16
 800db90:	bd10      	pop	{r4, pc}
 800db92:	bf00      	nop
 800db94:	0800d971 	.word	0x0800d971

0800db98 <uxr_epoch_nanos>:
 800db98:	b510      	push	{r4, lr}
 800db9a:	4604      	mov	r4, r0
 800db9c:	f001 f92a 	bl	800edf4 <uxr_nanos>
 800dba0:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800dba4:	1ac0      	subs	r0, r0, r3
 800dba6:	eb61 0102 	sbc.w	r1, r1, r2
 800dbaa:	bd10      	pop	{r4, pc}

0800dbac <uxr_flash_output_streams>:
 800dbac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbb0:	7e03      	ldrb	r3, [r0, #24]
 800dbb2:	b084      	sub	sp, #16
 800dbb4:	4604      	mov	r4, r0
 800dbb6:	b1fb      	cbz	r3, 800dbf8 <uxr_flash_output_streams+0x4c>
 800dbb8:	f04f 0900 	mov.w	r9, #0
 800dbbc:	4648      	mov	r0, r9
 800dbbe:	f10d 0802 	add.w	r8, sp, #2
 800dbc2:	af03      	add	r7, sp, #12
 800dbc4:	ae02      	add	r6, sp, #8
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	4611      	mov	r1, r2
 800dbca:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800dbce:	f000 ff75 	bl	800eabc <uxr_stream_id>
 800dbd2:	3508      	adds	r5, #8
 800dbd4:	4684      	mov	ip, r0
 800dbd6:	4643      	mov	r3, r8
 800dbd8:	4628      	mov	r0, r5
 800dbda:	463a      	mov	r2, r7
 800dbdc:	4631      	mov	r1, r6
 800dbde:	f8cd c004 	str.w	ip, [sp, #4]
 800dbe2:	f006 f8b9 	bl	8013d58 <uxr_prepare_best_effort_buffer_to_send>
 800dbe6:	2800      	cmp	r0, #0
 800dbe8:	d13d      	bne.n	800dc66 <uxr_flash_output_streams+0xba>
 800dbea:	7e23      	ldrb	r3, [r4, #24]
 800dbec:	f109 0901 	add.w	r9, r9, #1
 800dbf0:	fa5f f089 	uxtb.w	r0, r9
 800dbf4:	4283      	cmp	r3, r0
 800dbf6:	d8e6      	bhi.n	800dbc6 <uxr_flash_output_streams+0x1a>
 800dbf8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800dbfc:	b383      	cbz	r3, 800dc60 <uxr_flash_output_streams+0xb4>
 800dbfe:	f04f 0900 	mov.w	r9, #0
 800dc02:	4648      	mov	r0, r9
 800dc04:	f10d 0802 	add.w	r8, sp, #2
 800dc08:	af03      	add	r7, sp, #12
 800dc0a:	ae02      	add	r6, sp, #8
 800dc0c:	2201      	movs	r2, #1
 800dc0e:	2102      	movs	r1, #2
 800dc10:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800dc14:	f000 ff52 	bl	800eabc <uxr_stream_id>
 800dc18:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800dc1c:	3520      	adds	r5, #32
 800dc1e:	9001      	str	r0, [sp, #4]
 800dc20:	e00c      	b.n	800dc3c <uxr_flash_output_streams+0x90>
 800dc22:	9b02      	ldr	r3, [sp, #8]
 800dc24:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800dc28:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800dc2c:	f000 feb6 	bl	800e99c <uxr_stamp_session_header>
 800dc30:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800dc32:	9a03      	ldr	r2, [sp, #12]
 800dc34:	9902      	ldr	r1, [sp, #8]
 800dc36:	e9d3 0a00 	ldrd	r0, sl, [r3]
 800dc3a:	47d0      	blx	sl
 800dc3c:	4643      	mov	r3, r8
 800dc3e:	463a      	mov	r2, r7
 800dc40:	4631      	mov	r1, r6
 800dc42:	4628      	mov	r0, r5
 800dc44:	f006 fa90 	bl	8014168 <uxr_prepare_next_reliable_buffer_to_send>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	4620      	mov	r0, r4
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d1e8      	bne.n	800dc22 <uxr_flash_output_streams+0x76>
 800dc50:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800dc54:	f109 0901 	add.w	r9, r9, #1
 800dc58:	fa5f f089 	uxtb.w	r0, r9
 800dc5c:	4283      	cmp	r3, r0
 800dc5e:	d8d5      	bhi.n	800dc0c <uxr_flash_output_streams+0x60>
 800dc60:	b004      	add	sp, #16
 800dc62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc66:	9b02      	ldr	r3, [sp, #8]
 800dc68:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800dc6c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800dc70:	4620      	mov	r0, r4
 800dc72:	f000 fe93 	bl	800e99c <uxr_stamp_session_header>
 800dc76:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800dc78:	9a03      	ldr	r2, [sp, #12]
 800dc7a:	9902      	ldr	r1, [sp, #8]
 800dc7c:	e9d3 0500 	ldrd	r0, r5, [r3]
 800dc80:	47a8      	blx	r5
 800dc82:	f109 0901 	add.w	r9, r9, #1
 800dc86:	7e23      	ldrb	r3, [r4, #24]
 800dc88:	fa5f f089 	uxtb.w	r0, r9
 800dc8c:	4283      	cmp	r3, r0
 800dc8e:	d89a      	bhi.n	800dbc6 <uxr_flash_output_streams+0x1a>
 800dc90:	e7b2      	b.n	800dbf8 <uxr_flash_output_streams+0x4c>
 800dc92:	bf00      	nop

0800dc94 <read_submessage_info>:
 800dc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc98:	460d      	mov	r5, r1
 800dc9a:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800dc9e:	4669      	mov	r1, sp
 800dca0:	4607      	mov	r7, r0
 800dca2:	4628      	mov	r0, r5
 800dca4:	f002 f80c 	bl	800fcc0 <uxr_deserialize_BaseObjectReply>
 800dca8:	a902      	add	r1, sp, #8
 800dcaa:	4604      	mov	r4, r0
 800dcac:	4628      	mov	r0, r5
 800dcae:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800dcb2:	f7fb fb0b 	bl	80092cc <ucdr_deserialize_bool>
 800dcb6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800dcba:	4004      	ands	r4, r0
 800dcbc:	b2e4      	uxtb	r4, r4
 800dcbe:	b95b      	cbnz	r3, 800dcd8 <read_submessage_info+0x44>
 800dcc0:	a987      	add	r1, sp, #540	; 0x21c
 800dcc2:	4628      	mov	r0, r5
 800dcc4:	f7fb fb02 	bl	80092cc <ucdr_deserialize_bool>
 800dcc8:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800dccc:	4606      	mov	r6, r0
 800dcce:	b94b      	cbnz	r3, 800dce4 <read_submessage_info+0x50>
 800dcd0:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800dcd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcd8:	a903      	add	r1, sp, #12
 800dcda:	4628      	mov	r0, r5
 800dcdc:	f001 fe7e 	bl	800f9dc <uxr_deserialize_ObjectVariant>
 800dce0:	4004      	ands	r4, r0
 800dce2:	e7ed      	b.n	800dcc0 <read_submessage_info+0x2c>
 800dce4:	a988      	add	r1, sp, #544	; 0x220
 800dce6:	4628      	mov	r0, r5
 800dce8:	f7fb fb20 	bl	800932c <ucdr_deserialize_uint8_t>
 800dcec:	4234      	tst	r4, r6
 800dcee:	d0ef      	beq.n	800dcd0 <read_submessage_info+0x3c>
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	d0ed      	beq.n	800dcd0 <read_submessage_info+0x3c>
 800dcf4:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800dcf8:	2b0d      	cmp	r3, #13
 800dcfa:	d1e9      	bne.n	800dcd0 <read_submessage_info+0x3c>
 800dcfc:	4628      	mov	r0, r5
 800dcfe:	a98a      	add	r1, sp, #552	; 0x228
 800dd00:	f7fc f8ba 	bl	8009e78 <ucdr_deserialize_int16_t>
 800dd04:	b140      	cbz	r0, 800dd18 <read_submessage_info+0x84>
 800dd06:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	dd07      	ble.n	800dd1e <read_submessage_info+0x8a>
 800dd0e:	f1b8 0f00 	cmp.w	r8, #0
 800dd12:	bf14      	ite	ne
 800dd14:	2001      	movne	r0, #1
 800dd16:	2002      	moveq	r0, #2
 800dd18:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 800dd1c:	e7d8      	b.n	800dcd0 <read_submessage_info+0x3c>
 800dd1e:	2000      	movs	r0, #0
 800dd20:	e7fa      	b.n	800dd18 <read_submessage_info+0x84>
 800dd22:	bf00      	nop

0800dd24 <read_submessage_list>:
 800dd24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd28:	b098      	sub	sp, #96	; 0x60
 800dd2a:	f8df 9304 	ldr.w	r9, [pc, #772]	; 800e030 <read_submessage_list+0x30c>
 800dd2e:	920b      	str	r2, [sp, #44]	; 0x2c
 800dd30:	4604      	mov	r4, r0
 800dd32:	4688      	mov	r8, r1
 800dd34:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 800dd38:	aa0e      	add	r2, sp, #56	; 0x38
 800dd3a:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 800dd3e:	4640      	mov	r0, r8
 800dd40:	f001 f810 	bl	800ed64 <uxr_read_submessage_header>
 800dd44:	2800      	cmp	r0, #0
 800dd46:	f000 813d 	beq.w	800dfc4 <read_submessage_list+0x2a0>
 800dd4a:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800dd4e:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 800dd52:	3b02      	subs	r3, #2
 800dd54:	2b0d      	cmp	r3, #13
 800dd56:	d8ed      	bhi.n	800dd34 <read_submessage_list+0x10>
 800dd58:	a101      	add	r1, pc, #4	; (adr r1, 800dd60 <read_submessage_list+0x3c>)
 800dd5a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dd5e:	bf00      	nop
 800dd60:	0800dfbb 	.word	0x0800dfbb
 800dd64:	0800dd35 	.word	0x0800dd35
 800dd68:	0800dfab 	.word	0x0800dfab
 800dd6c:	0800df4f 	.word	0x0800df4f
 800dd70:	0800df45 	.word	0x0800df45
 800dd74:	0800dd35 	.word	0x0800dd35
 800dd78:	0800dd35 	.word	0x0800dd35
 800dd7c:	0800dea7 	.word	0x0800dea7
 800dd80:	0800de39 	.word	0x0800de39
 800dd84:	0800ddf7 	.word	0x0800ddf7
 800dd88:	0800dd35 	.word	0x0800dd35
 800dd8c:	0800dd35 	.word	0x0800dd35
 800dd90:	0800dd35 	.word	0x0800dd35
 800dd94:	0800dd99 	.word	0x0800dd99
 800dd98:	a912      	add	r1, sp, #72	; 0x48
 800dd9a:	4640      	mov	r0, r8
 800dd9c:	f002 f9bc 	bl	8010118 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800dda0:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 800dda4:	2d00      	cmp	r5, #0
 800dda6:	f000 8115 	beq.w	800dfd4 <read_submessage_list+0x2b0>
 800ddaa:	f001 f823 	bl	800edf4 <uxr_nanos>
 800ddae:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ddb0:	460b      	mov	r3, r1
 800ddb2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ddb4:	2700      	movs	r7, #0
 800ddb6:	fbc9 6701 	smlal	r6, r7, r9, r1
 800ddba:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ddbe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ddc0:	4602      	mov	r2, r0
 800ddc2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ddc4:	460e      	mov	r6, r1
 800ddc6:	2700      	movs	r7, #0
 800ddc8:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800ddcc:	9106      	str	r1, [sp, #24]
 800ddce:	fbc9 6700 	smlal	r6, r7, r9, r0
 800ddd2:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ddd4:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ddd8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800ddda:	2700      	movs	r7, #0
 800dddc:	4608      	mov	r0, r1
 800ddde:	4639      	mov	r1, r7
 800dde0:	fbc9 0106 	smlal	r0, r1, r9, r6
 800dde4:	e9cd 0100 	strd	r0, r1, [sp]
 800dde8:	4620      	mov	r0, r4
 800ddea:	47a8      	blx	r5
 800ddec:	f04f 0301 	mov.w	r3, #1
 800ddf0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 800ddf4:	e79e      	b.n	800dd34 <read_submessage_list+0x10>
 800ddf6:	a912      	add	r1, sp, #72	; 0x48
 800ddf8:	4640      	mov	r0, r8
 800ddfa:	f002 f97b 	bl	80100f4 <uxr_deserialize_HEARTBEAT_Payload>
 800ddfe:	2100      	movs	r1, #0
 800de00:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 800de04:	f000 fe84 	bl	800eb10 <uxr_stream_id_from_raw>
 800de08:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800de0c:	4603      	mov	r3, r0
 800de0e:	4629      	mov	r1, r5
 800de10:	f104 0008 	add.w	r0, r4, #8
 800de14:	9311      	str	r3, [sp, #68]	; 0x44
 800de16:	f000 ff69 	bl	800ecec <uxr_get_input_reliable_stream>
 800de1a:	2800      	cmp	r0, #0
 800de1c:	d08a      	beq.n	800dd34 <read_submessage_list+0x10>
 800de1e:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 800de22:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 800de26:	f005 ff03 	bl	8013c30 <uxr_process_heartbeat>
 800de2a:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800de2e:	462a      	mov	r2, r5
 800de30:	4620      	mov	r0, r4
 800de32:	f7ff fdf5 	bl	800da20 <write_submessage_acknack.isra.0>
 800de36:	e77d      	b.n	800dd34 <read_submessage_list+0x10>
 800de38:	a912      	add	r1, sp, #72	; 0x48
 800de3a:	4640      	mov	r0, r8
 800de3c:	f002 f932 	bl	80100a4 <uxr_deserialize_ACKNACK_Payload>
 800de40:	2100      	movs	r1, #0
 800de42:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 800de46:	f000 fe63 	bl	800eb10 <uxr_stream_id_from_raw>
 800de4a:	4603      	mov	r3, r0
 800de4c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800de50:	f104 0008 	add.w	r0, r4, #8
 800de54:	930f      	str	r3, [sp, #60]	; 0x3c
 800de56:	f000 ff33 	bl	800ecc0 <uxr_get_output_reliable_stream>
 800de5a:	4605      	mov	r5, r0
 800de5c:	2800      	cmp	r0, #0
 800de5e:	f43f af69 	beq.w	800dd34 <read_submessage_list+0x10>
 800de62:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 800de66:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 800de6a:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800de6e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800de72:	b289      	uxth	r1, r1
 800de74:	f006 fa20 	bl	80142b8 <uxr_process_acknack>
 800de78:	4628      	mov	r0, r5
 800de7a:	f006 f9e3 	bl	8014244 <uxr_begin_output_nack_buffer_it>
 800de7e:	af10      	add	r7, sp, #64	; 0x40
 800de80:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 800de84:	e005      	b.n	800de92 <read_submessage_list+0x16e>
 800de86:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800de88:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800de8a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800de8c:	e9d3 0600 	ldrd	r0, r6, [r3]
 800de90:	47b0      	blx	r6
 800de92:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 800de96:	aa11      	add	r2, sp, #68	; 0x44
 800de98:	4639      	mov	r1, r7
 800de9a:	4628      	mov	r0, r5
 800de9c:	f006 f9d4 	bl	8014248 <uxr_next_reliable_nack_buffer_to_send>
 800dea0:	2800      	cmp	r0, #0
 800dea2:	d1f0      	bne.n	800de86 <read_submessage_list+0x162>
 800dea4:	e746      	b.n	800dd34 <read_submessage_list+0x10>
 800dea6:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 800deaa:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 800deae:	af10      	add	r7, sp, #64	; 0x40
 800deb0:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 800deb4:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 800deb8:	4639      	mov	r1, r7
 800deba:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800debe:	f89d 6037 	ldrb.w	r6, [sp, #55]	; 0x37
 800dec2:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800dec6:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
 800deca:	4640      	mov	r0, r8
 800decc:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 800ded0:	f001 fe32 	bl	800fb38 <uxr_deserialize_BaseObjectRequest>
 800ded4:	4638      	mov	r0, r7
 800ded6:	a911      	add	r1, sp, #68	; 0x44
 800ded8:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800dedc:	f000 fddc 	bl	800ea98 <uxr_parse_base_object_request>
 800dee0:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800dee4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dee6:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
 800deea:	9112      	str	r1, [sp, #72]	; 0x48
 800deec:	3d04      	subs	r5, #4
 800deee:	f006 060e 	and.w	r6, r6, #14
 800def2:	b2ad      	uxth	r5, r5
 800def4:	f1ba 0f00 	cmp.w	sl, #0
 800def8:	d006      	beq.n	800df08 <read_submessage_list+0x1e4>
 800defa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800defe:	9300      	str	r3, [sp, #0]
 800df00:	463a      	mov	r2, r7
 800df02:	2300      	movs	r3, #0
 800df04:	4620      	mov	r0, r4
 800df06:	47d0      	blx	sl
 800df08:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800df0a:	b168      	cbz	r0, 800df28 <read_submessage_list+0x204>
 800df0c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800df0e:	2300      	movs	r3, #0
 800df10:	3902      	subs	r1, #2
 800df12:	e002      	b.n	800df1a <read_submessage_list+0x1f6>
 800df14:	3301      	adds	r3, #1
 800df16:	4283      	cmp	r3, r0
 800df18:	d006      	beq.n	800df28 <read_submessage_list+0x204>
 800df1a:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 800df1e:	42ba      	cmp	r2, r7
 800df20:	d1f8      	bne.n	800df14 <read_submessage_list+0x1f0>
 800df22:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800df24:	2100      	movs	r1, #0
 800df26:	54d1      	strb	r1, [r2, r3]
 800df28:	9811      	ldr	r0, [sp, #68]	; 0x44
 800df2a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800df2c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800df30:	9302      	str	r3, [sp, #8]
 800df32:	e9cd 1000 	strd	r1, r0, [sp]
 800df36:	4633      	mov	r3, r6
 800df38:	462a      	mov	r2, r5
 800df3a:	4641      	mov	r1, r8
 800df3c:	4620      	mov	r0, r4
 800df3e:	f7ff fc57 	bl	800d7f0 <read_submessage_format>
 800df42:	e6f7      	b.n	800dd34 <read_submessage_list+0x10>
 800df44:	4641      	mov	r1, r8
 800df46:	4620      	mov	r0, r4
 800df48:	f7ff fea4 	bl	800dc94 <read_submessage_info>
 800df4c:	e6f2      	b.n	800dd34 <read_submessage_list+0x10>
 800df4e:	2a00      	cmp	r2, #0
 800df50:	d03b      	beq.n	800dfca <read_submessage_list+0x2a6>
 800df52:	a912      	add	r1, sp, #72	; 0x48
 800df54:	4640      	mov	r0, r8
 800df56:	f002 f801 	bl	800ff5c <uxr_deserialize_STATUS_Payload>
 800df5a:	a910      	add	r1, sp, #64	; 0x40
 800df5c:	aa0f      	add	r2, sp, #60	; 0x3c
 800df5e:	a812      	add	r0, sp, #72	; 0x48
 800df60:	f000 fd9a 	bl	800ea98 <uxr_parse_base_object_request>
 800df64:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 800df68:	9910      	ldr	r1, [sp, #64]	; 0x40
 800df6a:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 800df6e:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 800df72:	9111      	str	r1, [sp, #68]	; 0x44
 800df74:	b135      	cbz	r5, 800df84 <read_submessage_list+0x260>
 800df76:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800df7a:	9300      	str	r3, [sp, #0]
 800df7c:	4632      	mov	r2, r6
 800df7e:	463b      	mov	r3, r7
 800df80:	4620      	mov	r0, r4
 800df82:	47a8      	blx	r5
 800df84:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800df86:	2b00      	cmp	r3, #0
 800df88:	f43f aed4 	beq.w	800dd34 <read_submessage_list+0x10>
 800df8c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800df8e:	2100      	movs	r1, #0
 800df90:	3802      	subs	r0, #2
 800df92:	e003      	b.n	800df9c <read_submessage_list+0x278>
 800df94:	3101      	adds	r1, #1
 800df96:	4299      	cmp	r1, r3
 800df98:	f43f aecc 	beq.w	800dd34 <read_submessage_list+0x10>
 800df9c:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 800dfa0:	42b2      	cmp	r2, r6
 800dfa2:	d1f7      	bne.n	800df94 <read_submessage_list+0x270>
 800dfa4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800dfa6:	545f      	strb	r7, [r3, r1]
 800dfa8:	e6c4      	b.n	800dd34 <read_submessage_list+0x10>
 800dfaa:	2a00      	cmp	r2, #0
 800dfac:	f47f aec2 	bne.w	800dd34 <read_submessage_list+0x10>
 800dfb0:	4641      	mov	r1, r8
 800dfb2:	4620      	mov	r0, r4
 800dfb4:	f000 fcb4 	bl	800e920 <uxr_read_create_session_status>
 800dfb8:	e6bc      	b.n	800dd34 <read_submessage_list+0x10>
 800dfba:	4641      	mov	r1, r8
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	f7ff fcf9 	bl	800d9b4 <read_submessage_get_info>
 800dfc2:	e6b7      	b.n	800dd34 <read_submessage_list+0x10>
 800dfc4:	b018      	add	sp, #96	; 0x60
 800dfc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfca:	4641      	mov	r1, r8
 800dfcc:	4620      	mov	r0, r4
 800dfce:	f000 fcb3 	bl	800e938 <uxr_read_delete_session_status>
 800dfd2:	e6af      	b.n	800dd34 <read_submessage_list+0x10>
 800dfd4:	f000 ff0e 	bl	800edf4 <uxr_nanos>
 800dfd8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dfda:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800dfdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dfde:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800dfe0:	2700      	movs	r7, #0
 800dfe2:	fbc9 6703 	smlal	r6, r7, r9, r3
 800dfe6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dfe8:	eb16 0c00 	adds.w	ip, r6, r0
 800dfec:	4618      	mov	r0, r3
 800dfee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dff0:	eb47 0e01 	adc.w	lr, r7, r1
 800dff4:	461e      	mov	r6, r3
 800dff6:	2100      	movs	r1, #0
 800dff8:	2700      	movs	r7, #0
 800dffa:	fbc9 0105 	smlal	r0, r1, r9, r5
 800dffe:	fbc9 6702 	smlal	r6, r7, r9, r2
 800e002:	1983      	adds	r3, r0, r6
 800e004:	eb41 0207 	adc.w	r2, r1, r7
 800e008:	ebbc 0303 	subs.w	r3, ip, r3
 800e00c:	9308      	str	r3, [sp, #32]
 800e00e:	eb6e 0302 	sbc.w	r3, lr, r2
 800e012:	9309      	str	r3, [sp, #36]	; 0x24
 800e014:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800e018:	0fd3      	lsrs	r3, r2, #31
 800e01a:	18c9      	adds	r1, r1, r3
 800e01c:	f142 0200 	adc.w	r2, r2, #0
 800e020:	084b      	lsrs	r3, r1, #1
 800e022:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 800e026:	1052      	asrs	r2, r2, #1
 800e028:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 800e02c:	e6de      	b.n	800ddec <read_submessage_list+0xc8>
 800e02e:	bf00      	nop
 800e030:	3b9aca00 	.word	0x3b9aca00

0800e034 <listen_message_reliably>:
 800e034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e038:	1e0b      	subs	r3, r1, #0
 800e03a:	b09d      	sub	sp, #116	; 0x74
 800e03c:	bfb8      	it	lt
 800e03e:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800e042:	9305      	str	r3, [sp, #20]
 800e044:	4607      	mov	r7, r0
 800e046:	f000 feb9 	bl	800edbc <uxr_millis>
 800e04a:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800e04e:	4681      	mov	r9, r0
 800e050:	2a00      	cmp	r2, #0
 800e052:	f000 8095 	beq.w	800e180 <listen_message_reliably+0x14c>
 800e056:	2600      	movs	r6, #0
 800e058:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e05c:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800e060:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e064:	4630      	mov	r0, r6
 800e066:	4688      	mov	r8, r1
 800e068:	46ca      	mov	sl, r9
 800e06a:	e00f      	b.n	800e08c <listen_message_reliably+0x58>
 800e06c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e070:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e074:	42a2      	cmp	r2, r4
 800e076:	eb73 0105 	sbcs.w	r1, r3, r5
 800e07a:	bfb8      	it	lt
 800e07c:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 800e080:	3601      	adds	r6, #1
 800e082:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800e086:	b2f0      	uxtb	r0, r6
 800e088:	4283      	cmp	r3, r0
 800e08a:	d951      	bls.n	800e130 <listen_message_reliably+0xfc>
 800e08c:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800e090:	2201      	movs	r2, #1
 800e092:	2102      	movs	r1, #2
 800e094:	f000 fd12 	bl	800eabc <uxr_stream_id>
 800e098:	00e4      	lsls	r4, r4, #3
 800e09a:	f104 0520 	add.w	r5, r4, #32
 800e09e:	443d      	add	r5, r7
 800e0a0:	4601      	mov	r1, r0
 800e0a2:	4643      	mov	r3, r8
 800e0a4:	4652      	mov	r2, sl
 800e0a6:	4628      	mov	r0, r5
 800e0a8:	9109      	str	r1, [sp, #36]	; 0x24
 800e0aa:	f006 f89f 	bl	80141ec <uxr_update_output_stream_heartbeat_timestamp>
 800e0ae:	193b      	adds	r3, r7, r4
 800e0b0:	2800      	cmp	r0, #0
 800e0b2:	d0db      	beq.n	800e06c <listen_message_reliably+0x38>
 800e0b4:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800e0b8:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800e0bc:	4638      	mov	r0, r7
 800e0be:	f000 fcc5 	bl	800ea4c <uxr_session_header_offset>
 800e0c2:	3501      	adds	r5, #1
 800e0c4:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 800e0c8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800e0cc:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 800e0d0:	9000      	str	r0, [sp, #0]
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	4658      	mov	r0, fp
 800e0d6:	2211      	movs	r2, #17
 800e0d8:	a90c      	add	r1, sp, #48	; 0x30
 800e0da:	f7fc fa3f 	bl	800a55c <ucdr_init_buffer_origin_offset>
 800e0de:	2300      	movs	r3, #0
 800e0e0:	2205      	movs	r2, #5
 800e0e2:	210b      	movs	r1, #11
 800e0e4:	4658      	mov	r0, fp
 800e0e6:	f000 fe23 	bl	800ed30 <uxr_buffer_submessage_header>
 800e0ea:	8968      	ldrh	r0, [r5, #10]
 800e0ec:	2101      	movs	r1, #1
 800e0ee:	f006 f93b 	bl	8014368 <uxr_seq_num_add>
 800e0f2:	892a      	ldrh	r2, [r5, #8]
 800e0f4:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	a90a      	add	r1, sp, #40	; 0x28
 800e0fc:	4658      	mov	r0, fp
 800e0fe:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 800e102:	f88d 902c 	strb.w	r9, [sp, #44]	; 0x2c
 800e106:	f001 ffe1 	bl	80100cc <uxr_serialize_HEARTBEAT_Payload>
 800e10a:	2200      	movs	r2, #0
 800e10c:	4611      	mov	r1, r2
 800e10e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e110:	4638      	mov	r0, r7
 800e112:	f000 fc43 	bl	800e99c <uxr_stamp_session_header>
 800e116:	4658      	mov	r0, fp
 800e118:	f7fc fa5e 	bl	800a5d8 <ucdr_buffer_length>
 800e11c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e11e:	4602      	mov	r2, r0
 800e120:	a90c      	add	r1, sp, #48	; 0x30
 800e122:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e126:	443c      	add	r4, r7
 800e128:	47a8      	blx	r5
 800e12a:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800e12e:	e79f      	b.n	800e070 <listen_message_reliably+0x3c>
 800e130:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 800e134:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800e138:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e13c:	4294      	cmp	r4, r2
 800e13e:	bf08      	it	eq
 800e140:	428b      	cmpeq	r3, r1
 800e142:	d01d      	beq.n	800e180 <listen_message_reliably+0x14c>
 800e144:	eba3 030a 	sub.w	r3, r3, sl
 800e148:	9905      	ldr	r1, [sp, #20]
 800e14a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	bf08      	it	eq
 800e150:	2301      	moveq	r3, #1
 800e152:	4299      	cmp	r1, r3
 800e154:	bfa8      	it	ge
 800e156:	4619      	movge	r1, r3
 800e158:	6894      	ldr	r4, [r2, #8]
 800e15a:	6810      	ldr	r0, [r2, #0]
 800e15c:	4689      	mov	r9, r1
 800e15e:	460b      	mov	r3, r1
 800e160:	aa08      	add	r2, sp, #32
 800e162:	a907      	add	r1, sp, #28
 800e164:	47a0      	blx	r4
 800e166:	b968      	cbnz	r0, 800e184 <listen_message_reliably+0x150>
 800e168:	9b05      	ldr	r3, [sp, #20]
 800e16a:	eba3 0309 	sub.w	r3, r3, r9
 800e16e:	2b00      	cmp	r3, #0
 800e170:	9305      	str	r3, [sp, #20]
 800e172:	f73f af68 	bgt.w	800e046 <listen_message_reliably+0x12>
 800e176:	4604      	mov	r4, r0
 800e178:	4620      	mov	r0, r4
 800e17a:	b01d      	add	sp, #116	; 0x74
 800e17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e180:	9b05      	ldr	r3, [sp, #20]
 800e182:	e7e1      	b.n	800e148 <listen_message_reliably+0x114>
 800e184:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e188:	4604      	mov	r4, r0
 800e18a:	a80c      	add	r0, sp, #48	; 0x30
 800e18c:	f7fc f9f8 	bl	800a580 <ucdr_init_buffer>
 800e190:	2500      	movs	r5, #0
 800e192:	a90c      	add	r1, sp, #48	; 0x30
 800e194:	f10d 031a 	add.w	r3, sp, #26
 800e198:	aa06      	add	r2, sp, #24
 800e19a:	4638      	mov	r0, r7
 800e19c:	f88d 5018 	strb.w	r5, [sp, #24]
 800e1a0:	f000 fc12 	bl	800e9c8 <uxr_read_session_header>
 800e1a4:	b918      	cbnz	r0, 800e1ae <listen_message_reliably+0x17a>
 800e1a6:	4620      	mov	r0, r4
 800e1a8:	b01d      	add	sp, #116	; 0x74
 800e1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ae:	4629      	mov	r1, r5
 800e1b0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e1b4:	f000 fcac 	bl	800eb10 <uxr_stream_id_from_raw>
 800e1b8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800e1bc:	2e01      	cmp	r6, #1
 800e1be:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800e1c2:	900a      	str	r0, [sp, #40]	; 0x28
 800e1c4:	fa5f fa80 	uxtb.w	sl, r0
 800e1c8:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800e1cc:	d04b      	beq.n	800e266 <listen_message_reliably+0x232>
 800e1ce:	2e02      	cmp	r6, #2
 800e1d0:	d00f      	beq.n	800e1f2 <listen_message_reliably+0x1be>
 800e1d2:	2e00      	cmp	r6, #0
 800e1d4:	d1e7      	bne.n	800e1a6 <listen_message_reliably+0x172>
 800e1d6:	4631      	mov	r1, r6
 800e1d8:	4630      	mov	r0, r6
 800e1da:	f000 fc99 	bl	800eb10 <uxr_stream_id_from_raw>
 800e1de:	a90c      	add	r1, sp, #48	; 0x30
 800e1e0:	4602      	mov	r2, r0
 800e1e2:	4638      	mov	r0, r7
 800e1e4:	920a      	str	r2, [sp, #40]	; 0x28
 800e1e6:	f7ff fd9d 	bl	800dd24 <read_submessage_list>
 800e1ea:	4620      	mov	r0, r4
 800e1ec:	b01d      	add	sp, #116	; 0x74
 800e1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1f2:	4629      	mov	r1, r5
 800e1f4:	f107 0008 	add.w	r0, r7, #8
 800e1f8:	f000 fd78 	bl	800ecec <uxr_get_input_reliable_stream>
 800e1fc:	4680      	mov	r8, r0
 800e1fe:	b348      	cbz	r0, 800e254 <listen_message_reliably+0x220>
 800e200:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e202:	9202      	str	r2, [sp, #8]
 800e204:	a80c      	add	r0, sp, #48	; 0x30
 800e206:	f7fc f9eb 	bl	800a5e0 <ucdr_buffer_remaining>
 800e20a:	4603      	mov	r3, r0
 800e20c:	f10d 0019 	add.w	r0, sp, #25
 800e210:	9000      	str	r0, [sp, #0]
 800e212:	9a02      	ldr	r2, [sp, #8]
 800e214:	4649      	mov	r1, r9
 800e216:	4640      	mov	r0, r8
 800e218:	f005 fc0c 	bl	8013a34 <uxr_receive_reliable_message>
 800e21c:	b1d0      	cbz	r0, 800e254 <listen_message_reliably+0x220>
 800e21e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d037      	beq.n	800e296 <listen_message_reliably+0x262>
 800e226:	ae14      	add	r6, sp, #80	; 0x50
 800e228:	f04f 0902 	mov.w	r9, #2
 800e22c:	e008      	b.n	800e240 <listen_message_reliably+0x20c>
 800e22e:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 800e232:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800e236:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 800e23a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e23c:	f7ff fd72 	bl	800dd24 <read_submessage_list>
 800e240:	4631      	mov	r1, r6
 800e242:	2204      	movs	r2, #4
 800e244:	4640      	mov	r0, r8
 800e246:	f005 fc75 	bl	8013b34 <uxr_next_input_reliable_buffer_available>
 800e24a:	4603      	mov	r3, r0
 800e24c:	4631      	mov	r1, r6
 800e24e:	4638      	mov	r0, r7
 800e250:	2b00      	cmp	r3, #0
 800e252:	d1ec      	bne.n	800e22e <listen_message_reliably+0x1fa>
 800e254:	4638      	mov	r0, r7
 800e256:	462a      	mov	r2, r5
 800e258:	4651      	mov	r1, sl
 800e25a:	f7ff fbe1 	bl	800da20 <write_submessage_acknack.isra.0>
 800e25e:	4620      	mov	r0, r4
 800e260:	b01d      	add	sp, #116	; 0x74
 800e262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e266:	4629      	mov	r1, r5
 800e268:	f107 0008 	add.w	r0, r7, #8
 800e26c:	f000 fd34 	bl	800ecd8 <uxr_get_input_best_effort_stream>
 800e270:	2800      	cmp	r0, #0
 800e272:	d098      	beq.n	800e1a6 <listen_message_reliably+0x172>
 800e274:	4649      	mov	r1, r9
 800e276:	f005 fb59 	bl	801392c <uxr_receive_best_effort_message>
 800e27a:	2800      	cmp	r0, #0
 800e27c:	d093      	beq.n	800e1a6 <listen_message_reliably+0x172>
 800e27e:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 800e282:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800e286:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800e28a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e28c:	a90c      	add	r1, sp, #48	; 0x30
 800e28e:	4638      	mov	r0, r7
 800e290:	f7ff fd48 	bl	800dd24 <read_submessage_list>
 800e294:	e787      	b.n	800e1a6 <listen_message_reliably+0x172>
 800e296:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 800e29a:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800e29e:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800e2a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e2a4:	a90c      	add	r1, sp, #48	; 0x30
 800e2a6:	4638      	mov	r0, r7
 800e2a8:	f7ff fd3c 	bl	800dd24 <read_submessage_list>
 800e2ac:	e7bb      	b.n	800e226 <listen_message_reliably+0x1f2>
 800e2ae:	bf00      	nop

0800e2b0 <uxr_run_session_timeout>:
 800e2b0:	b570      	push	{r4, r5, r6, lr}
 800e2b2:	4604      	mov	r4, r0
 800e2b4:	460d      	mov	r5, r1
 800e2b6:	f000 fd81 	bl	800edbc <uxr_millis>
 800e2ba:	4606      	mov	r6, r0
 800e2bc:	4620      	mov	r0, r4
 800e2be:	f7ff fc75 	bl	800dbac <uxr_flash_output_streams>
 800e2c2:	4629      	mov	r1, r5
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	f7ff feb5 	bl	800e034 <listen_message_reliably>
 800e2ca:	f000 fd77 	bl	800edbc <uxr_millis>
 800e2ce:	1b83      	subs	r3, r0, r6
 800e2d0:	1ae9      	subs	r1, r5, r3
 800e2d2:	2900      	cmp	r1, #0
 800e2d4:	dcf6      	bgt.n	800e2c4 <uxr_run_session_timeout+0x14>
 800e2d6:	f104 0008 	add.w	r0, r4, #8
 800e2da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e2de:	f000 bd11 	b.w	800ed04 <uxr_output_streams_confirmed>
 800e2e2:	bf00      	nop

0800e2e4 <uxr_run_session_until_data>:
 800e2e4:	b570      	push	{r4, r5, r6, lr}
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	460d      	mov	r5, r1
 800e2ea:	f000 fd67 	bl	800edbc <uxr_millis>
 800e2ee:	4606      	mov	r6, r0
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	f7ff fc5b 	bl	800dbac <uxr_flash_output_streams>
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 800e2fc:	4629      	mov	r1, r5
 800e2fe:	e005      	b.n	800e30c <uxr_run_session_until_data+0x28>
 800e300:	f000 fd5c 	bl	800edbc <uxr_millis>
 800e304:	1b83      	subs	r3, r0, r6
 800e306:	1ae9      	subs	r1, r5, r3
 800e308:	2900      	cmp	r1, #0
 800e30a:	dd07      	ble.n	800e31c <uxr_run_session_until_data+0x38>
 800e30c:	4620      	mov	r0, r4
 800e30e:	f7ff fe91 	bl	800e034 <listen_message_reliably>
 800e312:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800e316:	2800      	cmp	r0, #0
 800e318:	d0f2      	beq.n	800e300 <uxr_run_session_until_data+0x1c>
 800e31a:	bd70      	pop	{r4, r5, r6, pc}
 800e31c:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800e320:	bd70      	pop	{r4, r5, r6, pc}
 800e322:	bf00      	nop

0800e324 <uxr_run_session_until_confirm_delivery>:
 800e324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e328:	4606      	mov	r6, r0
 800e32a:	460d      	mov	r5, r1
 800e32c:	f000 fd46 	bl	800edbc <uxr_millis>
 800e330:	4607      	mov	r7, r0
 800e332:	4630      	mov	r0, r6
 800e334:	f7ff fc3a 	bl	800dbac <uxr_flash_output_streams>
 800e338:	2d00      	cmp	r5, #0
 800e33a:	f106 0808 	add.w	r8, r6, #8
 800e33e:	bfa8      	it	ge
 800e340:	462c      	movge	r4, r5
 800e342:	da07      	bge.n	800e354 <uxr_run_session_until_confirm_delivery+0x30>
 800e344:	e00e      	b.n	800e364 <uxr_run_session_until_confirm_delivery+0x40>
 800e346:	f7ff fe75 	bl	800e034 <listen_message_reliably>
 800e34a:	f000 fd37 	bl	800edbc <uxr_millis>
 800e34e:	1bc3      	subs	r3, r0, r7
 800e350:	1aec      	subs	r4, r5, r3
 800e352:	d407      	bmi.n	800e364 <uxr_run_session_until_confirm_delivery+0x40>
 800e354:	4640      	mov	r0, r8
 800e356:	f000 fcd5 	bl	800ed04 <uxr_output_streams_confirmed>
 800e35a:	4603      	mov	r3, r0
 800e35c:	4621      	mov	r1, r4
 800e35e:	4630      	mov	r0, r6
 800e360:	2b00      	cmp	r3, #0
 800e362:	d0f0      	beq.n	800e346 <uxr_run_session_until_confirm_delivery+0x22>
 800e364:	4640      	mov	r0, r8
 800e366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e36a:	f000 bccb 	b.w	800ed04 <uxr_output_streams_confirmed>
 800e36e:	bf00      	nop

0800e370 <uxr_run_session_until_all_status>:
 800e370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e374:	9d08      	ldr	r5, [sp, #32]
 800e376:	460f      	mov	r7, r1
 800e378:	4692      	mov	sl, r2
 800e37a:	461c      	mov	r4, r3
 800e37c:	4606      	mov	r6, r0
 800e37e:	f7ff fc15 	bl	800dbac <uxr_flash_output_streams>
 800e382:	b125      	cbz	r5, 800e38e <uxr_run_session_until_all_status+0x1e>
 800e384:	462a      	mov	r2, r5
 800e386:	21ff      	movs	r1, #255	; 0xff
 800e388:	4620      	mov	r0, r4
 800e38a:	f006 fe21 	bl	8014fd0 <memset>
 800e38e:	e9c6 a41d 	strd	sl, r4, [r6, #116]	; 0x74
 800e392:	67f5      	str	r5, [r6, #124]	; 0x7c
 800e394:	f000 fd12 	bl	800edbc <uxr_millis>
 800e398:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 800e39c:	f1aa 0a02 	sub.w	sl, sl, #2
 800e3a0:	4680      	mov	r8, r0
 800e3a2:	4639      	mov	r1, r7
 800e3a4:	4630      	mov	r0, r6
 800e3a6:	f7ff fe45 	bl	800e034 <listen_message_reliably>
 800e3aa:	f000 fd07 	bl	800edbc <uxr_millis>
 800e3ae:	eba0 0008 	sub.w	r0, r0, r8
 800e3b2:	1a39      	subs	r1, r7, r0
 800e3b4:	b33d      	cbz	r5, 800e406 <uxr_run_session_until_all_status+0x96>
 800e3b6:	46cc      	mov	ip, r9
 800e3b8:	464a      	mov	r2, r9
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	e002      	b.n	800e3c4 <uxr_run_session_until_all_status+0x54>
 800e3be:	42ab      	cmp	r3, r5
 800e3c0:	d20c      	bcs.n	800e3dc <uxr_run_session_until_all_status+0x6c>
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800e3c8:	2cff      	cmp	r4, #255	; 0xff
 800e3ca:	d1f8      	bne.n	800e3be <uxr_run_session_until_all_status+0x4e>
 800e3cc:	42ab      	cmp	r3, r5
 800e3ce:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 800e3d2:	d213      	bcs.n	800e3fc <uxr_run_session_until_all_status+0x8c>
 800e3d4:	2800      	cmp	r0, #0
 800e3d6:	d0f4      	beq.n	800e3c2 <uxr_run_session_until_all_status+0x52>
 800e3d8:	2900      	cmp	r1, #0
 800e3da:	dce3      	bgt.n	800e3a4 <uxr_run_session_until_all_status+0x34>
 800e3dc:	2300      	movs	r3, #0
 800e3de:	444d      	add	r5, r9
 800e3e0:	67f3      	str	r3, [r6, #124]	; 0x7c
 800e3e2:	e001      	b.n	800e3e8 <uxr_run_session_until_all_status+0x78>
 800e3e4:	2b01      	cmp	r3, #1
 800e3e6:	d812      	bhi.n	800e40e <uxr_run_session_until_all_status+0x9e>
 800e3e8:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800e3ec:	4565      	cmp	r5, ip
 800e3ee:	d1f9      	bne.n	800e3e4 <uxr_run_session_until_all_status+0x74>
 800e3f0:	2b01      	cmp	r3, #1
 800e3f2:	bf8c      	ite	hi
 800e3f4:	2000      	movhi	r0, #0
 800e3f6:	2001      	movls	r0, #1
 800e3f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3fc:	2900      	cmp	r1, #0
 800e3fe:	dded      	ble.n	800e3dc <uxr_run_session_until_all_status+0x6c>
 800e400:	2800      	cmp	r0, #0
 800e402:	d1cf      	bne.n	800e3a4 <uxr_run_session_until_all_status+0x34>
 800e404:	e7ea      	b.n	800e3dc <uxr_run_session_until_all_status+0x6c>
 800e406:	67f5      	str	r5, [r6, #124]	; 0x7c
 800e408:	2001      	movs	r0, #1
 800e40a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e40e:	2000      	movs	r0, #0
 800e410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e414 <uxr_create_session>:
 800e414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e418:	ed2d 8b02 	vpush	{d8}
 800e41c:	f100 0808 	add.w	r8, r0, #8
 800e420:	b0a9      	sub	sp, #164	; 0xa4
 800e422:	4604      	mov	r4, r0
 800e424:	4640      	mov	r0, r8
 800e426:	f000 fba9 	bl	800eb7c <uxr_reset_stream_storage>
 800e42a:	4620      	mov	r0, r4
 800e42c:	f000 fb0e 	bl	800ea4c <uxr_session_header_offset>
 800e430:	a909      	add	r1, sp, #36	; 0x24
 800e432:	9000      	str	r0, [sp, #0]
 800e434:	2300      	movs	r3, #0
 800e436:	a810      	add	r0, sp, #64	; 0x40
 800e438:	221c      	movs	r2, #28
 800e43a:	f7fc f88f 	bl	800a55c <ucdr_init_buffer_origin_offset>
 800e43e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e440:	8a1a      	ldrh	r2, [r3, #16]
 800e442:	3a04      	subs	r2, #4
 800e444:	b292      	uxth	r2, r2
 800e446:	4620      	mov	r0, r4
 800e448:	a910      	add	r1, sp, #64	; 0x40
 800e44a:	f000 fa23 	bl	800e894 <uxr_buffer_create_session>
 800e44e:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e450:	4620      	mov	r0, r4
 800e452:	f000 fa8f 	bl	800e974 <uxr_stamp_create_session_header>
 800e456:	a810      	add	r0, sp, #64	; 0x40
 800e458:	f7fc f8be 	bl	800a5d8 <ucdr_buffer_length>
 800e45c:	23ff      	movs	r3, #255	; 0xff
 800e45e:	ee08 0a10 	vmov	s16, r0
 800e462:	7163      	strb	r3, [r4, #5]
 800e464:	f04f 090a 	mov.w	r9, #10
 800e468:	46c2      	mov	sl, r8
 800e46a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e46c:	ee18 2a10 	vmov	r2, s16
 800e470:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e474:	a909      	add	r1, sp, #36	; 0x24
 800e476:	47a8      	blx	r5
 800e478:	f000 fca0 	bl	800edbc <uxr_millis>
 800e47c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e480:	9002      	str	r0, [sp, #8]
 800e482:	e00c      	b.n	800e49e <uxr_create_session+0x8a>
 800e484:	f000 fc9a 	bl	800edbc <uxr_millis>
 800e488:	9b02      	ldr	r3, [sp, #8]
 800e48a:	7962      	ldrb	r2, [r4, #5]
 800e48c:	1ac0      	subs	r0, r0, r3
 800e48e:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800e492:	2b00      	cmp	r3, #0
 800e494:	f340 8094 	ble.w	800e5c0 <uxr_create_session+0x1ac>
 800e498:	2aff      	cmp	r2, #255	; 0xff
 800e49a:	f040 8097 	bne.w	800e5cc <uxr_create_session+0x1b8>
 800e49e:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800e4a0:	a905      	add	r1, sp, #20
 800e4a2:	6895      	ldr	r5, [r2, #8]
 800e4a4:	6810      	ldr	r0, [r2, #0]
 800e4a6:	aa06      	add	r2, sp, #24
 800e4a8:	47a8      	blx	r5
 800e4aa:	2800      	cmp	r0, #0
 800e4ac:	d0ea      	beq.n	800e484 <uxr_create_session+0x70>
 800e4ae:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800e4b2:	a818      	add	r0, sp, #96	; 0x60
 800e4b4:	f7fc f864 	bl	800a580 <ucdr_init_buffer>
 800e4b8:	2500      	movs	r5, #0
 800e4ba:	f10d 0312 	add.w	r3, sp, #18
 800e4be:	aa04      	add	r2, sp, #16
 800e4c0:	a918      	add	r1, sp, #96	; 0x60
 800e4c2:	4620      	mov	r0, r4
 800e4c4:	f88d 5010 	strb.w	r5, [sp, #16]
 800e4c8:	f000 fa7e 	bl	800e9c8 <uxr_read_session_header>
 800e4cc:	2800      	cmp	r0, #0
 800e4ce:	d0d9      	beq.n	800e484 <uxr_create_session+0x70>
 800e4d0:	4629      	mov	r1, r5
 800e4d2:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800e4d6:	f000 fb1b 	bl	800eb10 <uxr_stream_id_from_raw>
 800e4da:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800e4de:	2f01      	cmp	r7, #1
 800e4e0:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800e4e4:	f8bd b012 	ldrh.w	fp, [sp, #18]
 800e4e8:	fa5f f880 	uxtb.w	r8, r0
 800e4ec:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800e4f0:	d04d      	beq.n	800e58e <uxr_create_session+0x17a>
 800e4f2:	2f02      	cmp	r7, #2
 800e4f4:	d00c      	beq.n	800e510 <uxr_create_session+0xfc>
 800e4f6:	2f00      	cmp	r7, #0
 800e4f8:	d1c4      	bne.n	800e484 <uxr_create_session+0x70>
 800e4fa:	4639      	mov	r1, r7
 800e4fc:	4638      	mov	r0, r7
 800e4fe:	f000 fb07 	bl	800eb10 <uxr_stream_id_from_raw>
 800e502:	a918      	add	r1, sp, #96	; 0x60
 800e504:	4602      	mov	r2, r0
 800e506:	4620      	mov	r0, r4
 800e508:	9208      	str	r2, [sp, #32]
 800e50a:	f7ff fc0b 	bl	800dd24 <read_submessage_list>
 800e50e:	e7b9      	b.n	800e484 <uxr_create_session+0x70>
 800e510:	4629      	mov	r1, r5
 800e512:	4650      	mov	r0, sl
 800e514:	f000 fbea 	bl	800ecec <uxr_get_input_reliable_stream>
 800e518:	4606      	mov	r6, r0
 800e51a:	b390      	cbz	r0, 800e582 <uxr_create_session+0x16e>
 800e51c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e51e:	9203      	str	r2, [sp, #12]
 800e520:	a818      	add	r0, sp, #96	; 0x60
 800e522:	f7fc f85d 	bl	800a5e0 <ucdr_buffer_remaining>
 800e526:	4603      	mov	r3, r0
 800e528:	f10d 0011 	add.w	r0, sp, #17
 800e52c:	9000      	str	r0, [sp, #0]
 800e52e:	9a03      	ldr	r2, [sp, #12]
 800e530:	4659      	mov	r1, fp
 800e532:	4630      	mov	r0, r6
 800e534:	f005 fa7e 	bl	8013a34 <uxr_receive_reliable_message>
 800e538:	b318      	cbz	r0, 800e582 <uxr_create_session+0x16e>
 800e53a:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800e53e:	b9b3      	cbnz	r3, 800e56e <uxr_create_session+0x15a>
 800e540:	f88d 8020 	strb.w	r8, [sp, #32]
 800e544:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800e548:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 800e54c:	9a08      	ldr	r2, [sp, #32]
 800e54e:	a918      	add	r1, sp, #96	; 0x60
 800e550:	4620      	mov	r0, r4
 800e552:	f7ff fbe7 	bl	800dd24 <read_submessage_list>
 800e556:	e00a      	b.n	800e56e <uxr_create_session+0x15a>
 800e558:	f04f 0302 	mov.w	r3, #2
 800e55c:	f88d 8020 	strb.w	r8, [sp, #32]
 800e560:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800e564:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 800e568:	9a08      	ldr	r2, [sp, #32]
 800e56a:	f7ff fbdb 	bl	800dd24 <read_submessage_list>
 800e56e:	a920      	add	r1, sp, #128	; 0x80
 800e570:	2204      	movs	r2, #4
 800e572:	4630      	mov	r0, r6
 800e574:	f005 fade 	bl	8013b34 <uxr_next_input_reliable_buffer_available>
 800e578:	4603      	mov	r3, r0
 800e57a:	a920      	add	r1, sp, #128	; 0x80
 800e57c:	4620      	mov	r0, r4
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d1ea      	bne.n	800e558 <uxr_create_session+0x144>
 800e582:	462a      	mov	r2, r5
 800e584:	4641      	mov	r1, r8
 800e586:	4620      	mov	r0, r4
 800e588:	f7ff fa4a 	bl	800da20 <write_submessage_acknack.isra.0>
 800e58c:	e77a      	b.n	800e484 <uxr_create_session+0x70>
 800e58e:	4629      	mov	r1, r5
 800e590:	4650      	mov	r0, sl
 800e592:	f000 fba1 	bl	800ecd8 <uxr_get_input_best_effort_stream>
 800e596:	2800      	cmp	r0, #0
 800e598:	f43f af74 	beq.w	800e484 <uxr_create_session+0x70>
 800e59c:	4659      	mov	r1, fp
 800e59e:	f005 f9c5 	bl	801392c <uxr_receive_best_effort_message>
 800e5a2:	2800      	cmp	r0, #0
 800e5a4:	f43f af6e 	beq.w	800e484 <uxr_create_session+0x70>
 800e5a8:	f88d 8020 	strb.w	r8, [sp, #32]
 800e5ac:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800e5b0:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 800e5b4:	9a08      	ldr	r2, [sp, #32]
 800e5b6:	a918      	add	r1, sp, #96	; 0x60
 800e5b8:	4620      	mov	r0, r4
 800e5ba:	f7ff fbb3 	bl	800dd24 <read_submessage_list>
 800e5be:	e761      	b.n	800e484 <uxr_create_session+0x70>
 800e5c0:	f1b9 0901 	subs.w	r9, r9, #1
 800e5c4:	d002      	beq.n	800e5cc <uxr_create_session+0x1b8>
 800e5c6:	2aff      	cmp	r2, #255	; 0xff
 800e5c8:	f43f af4f 	beq.w	800e46a <uxr_create_session+0x56>
 800e5cc:	b12a      	cbz	r2, 800e5da <uxr_create_session+0x1c6>
 800e5ce:	2000      	movs	r0, #0
 800e5d0:	b029      	add	sp, #164	; 0xa4
 800e5d2:	ecbd 8b02 	vpop	{d8}
 800e5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5da:	4650      	mov	r0, sl
 800e5dc:	f000 face 	bl	800eb7c <uxr_reset_stream_storage>
 800e5e0:	2001      	movs	r0, #1
 800e5e2:	b029      	add	sp, #164	; 0xa4
 800e5e4:	ecbd 8b02 	vpop	{d8}
 800e5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e5ec <wait_session_status>:
 800e5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f0:	4604      	mov	r4, r0
 800e5f2:	b09d      	sub	sp, #116	; 0x74
 800e5f4:	20ff      	movs	r0, #255	; 0xff
 800e5f6:	7160      	strb	r0, [r4, #5]
 800e5f8:	9304      	str	r3, [sp, #16]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	f000 80b8 	beq.w	800e770 <wait_session_status+0x184>
 800e600:	2300      	movs	r3, #0
 800e602:	468b      	mov	fp, r1
 800e604:	4692      	mov	sl, r2
 800e606:	9303      	str	r3, [sp, #12]
 800e608:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e60a:	4652      	mov	r2, sl
 800e60c:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e610:	4659      	mov	r1, fp
 800e612:	47a8      	blx	r5
 800e614:	f000 fbd2 	bl	800edbc <uxr_millis>
 800e618:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e61c:	4605      	mov	r5, r0
 800e61e:	e009      	b.n	800e634 <wait_session_status+0x48>
 800e620:	f000 fbcc 	bl	800edbc <uxr_millis>
 800e624:	1b40      	subs	r0, r0, r5
 800e626:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	dd42      	ble.n	800e6b4 <wait_session_status+0xc8>
 800e62e:	7960      	ldrb	r0, [r4, #5]
 800e630:	28ff      	cmp	r0, #255	; 0xff
 800e632:	d148      	bne.n	800e6c6 <wait_session_status+0xda>
 800e634:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800e636:	a908      	add	r1, sp, #32
 800e638:	6896      	ldr	r6, [r2, #8]
 800e63a:	6810      	ldr	r0, [r2, #0]
 800e63c:	aa09      	add	r2, sp, #36	; 0x24
 800e63e:	47b0      	blx	r6
 800e640:	2800      	cmp	r0, #0
 800e642:	d0ed      	beq.n	800e620 <wait_session_status+0x34>
 800e644:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800e648:	a80c      	add	r0, sp, #48	; 0x30
 800e64a:	f7fb ff99 	bl	800a580 <ucdr_init_buffer>
 800e64e:	2600      	movs	r6, #0
 800e650:	f10d 031e 	add.w	r3, sp, #30
 800e654:	aa07      	add	r2, sp, #28
 800e656:	a90c      	add	r1, sp, #48	; 0x30
 800e658:	4620      	mov	r0, r4
 800e65a:	f88d 601c 	strb.w	r6, [sp, #28]
 800e65e:	f000 f9b3 	bl	800e9c8 <uxr_read_session_header>
 800e662:	2800      	cmp	r0, #0
 800e664:	d0dc      	beq.n	800e620 <wait_session_status+0x34>
 800e666:	4631      	mov	r1, r6
 800e668:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800e66c:	f000 fa50 	bl	800eb10 <uxr_stream_id_from_raw>
 800e670:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800e674:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800e678:	9302      	str	r3, [sp, #8]
 800e67a:	2f01      	cmp	r7, #1
 800e67c:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800e680:	fa5f f880 	uxtb.w	r8, r0
 800e684:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e688:	d058      	beq.n	800e73c <wait_session_status+0x150>
 800e68a:	2f02      	cmp	r7, #2
 800e68c:	d021      	beq.n	800e6d2 <wait_session_status+0xe6>
 800e68e:	2f00      	cmp	r7, #0
 800e690:	d1c6      	bne.n	800e620 <wait_session_status+0x34>
 800e692:	4639      	mov	r1, r7
 800e694:	4638      	mov	r0, r7
 800e696:	f000 fa3b 	bl	800eb10 <uxr_stream_id_from_raw>
 800e69a:	a90c      	add	r1, sp, #48	; 0x30
 800e69c:	4602      	mov	r2, r0
 800e69e:	4620      	mov	r0, r4
 800e6a0:	920b      	str	r2, [sp, #44]	; 0x2c
 800e6a2:	f7ff fb3f 	bl	800dd24 <read_submessage_list>
 800e6a6:	f000 fb89 	bl	800edbc <uxr_millis>
 800e6aa:	1b40      	subs	r0, r0, r5
 800e6ac:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	dcbc      	bgt.n	800e62e <wait_session_status+0x42>
 800e6b4:	9b03      	ldr	r3, [sp, #12]
 800e6b6:	9a04      	ldr	r2, [sp, #16]
 800e6b8:	7960      	ldrb	r0, [r4, #5]
 800e6ba:	3301      	adds	r3, #1
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	9303      	str	r3, [sp, #12]
 800e6c0:	d001      	beq.n	800e6c6 <wait_session_status+0xda>
 800e6c2:	28ff      	cmp	r0, #255	; 0xff
 800e6c4:	d0a0      	beq.n	800e608 <wait_session_status+0x1c>
 800e6c6:	38ff      	subs	r0, #255	; 0xff
 800e6c8:	bf18      	it	ne
 800e6ca:	2001      	movne	r0, #1
 800e6cc:	b01d      	add	sp, #116	; 0x74
 800e6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6d2:	4631      	mov	r1, r6
 800e6d4:	f104 0008 	add.w	r0, r4, #8
 800e6d8:	f000 fb08 	bl	800ecec <uxr_get_input_reliable_stream>
 800e6dc:	4681      	mov	r9, r0
 800e6de:	b338      	cbz	r0, 800e730 <wait_session_status+0x144>
 800e6e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e6e2:	9205      	str	r2, [sp, #20]
 800e6e4:	a80c      	add	r0, sp, #48	; 0x30
 800e6e6:	f7fb ff7b 	bl	800a5e0 <ucdr_buffer_remaining>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	f10d 001d 	add.w	r0, sp, #29
 800e6f0:	9000      	str	r0, [sp, #0]
 800e6f2:	9a05      	ldr	r2, [sp, #20]
 800e6f4:	9902      	ldr	r1, [sp, #8]
 800e6f6:	4648      	mov	r0, r9
 800e6f8:	f005 f99c 	bl	8013a34 <uxr_receive_reliable_message>
 800e6fc:	b1c0      	cbz	r0, 800e730 <wait_session_status+0x144>
 800e6fe:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800e702:	b95b      	cbnz	r3, 800e71c <wait_session_status+0x130>
 800e704:	e03c      	b.n	800e780 <wait_session_status+0x194>
 800e706:	f04f 0302 	mov.w	r3, #2
 800e70a:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 800e70e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800e712:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800e716:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e718:	f7ff fb04 	bl	800dd24 <read_submessage_list>
 800e71c:	a914      	add	r1, sp, #80	; 0x50
 800e71e:	2204      	movs	r2, #4
 800e720:	4648      	mov	r0, r9
 800e722:	f005 fa07 	bl	8013b34 <uxr_next_input_reliable_buffer_available>
 800e726:	4603      	mov	r3, r0
 800e728:	a914      	add	r1, sp, #80	; 0x50
 800e72a:	4620      	mov	r0, r4
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d1ea      	bne.n	800e706 <wait_session_status+0x11a>
 800e730:	4632      	mov	r2, r6
 800e732:	4641      	mov	r1, r8
 800e734:	4620      	mov	r0, r4
 800e736:	f7ff f973 	bl	800da20 <write_submessage_acknack.isra.0>
 800e73a:	e771      	b.n	800e620 <wait_session_status+0x34>
 800e73c:	4631      	mov	r1, r6
 800e73e:	f104 0008 	add.w	r0, r4, #8
 800e742:	f000 fac9 	bl	800ecd8 <uxr_get_input_best_effort_stream>
 800e746:	2800      	cmp	r0, #0
 800e748:	f43f af6a 	beq.w	800e620 <wait_session_status+0x34>
 800e74c:	9902      	ldr	r1, [sp, #8]
 800e74e:	f005 f8ed 	bl	801392c <uxr_receive_best_effort_message>
 800e752:	2800      	cmp	r0, #0
 800e754:	f43f af64 	beq.w	800e620 <wait_session_status+0x34>
 800e758:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 800e75c:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800e760:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800e764:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e766:	a90c      	add	r1, sp, #48	; 0x30
 800e768:	4620      	mov	r0, r4
 800e76a:	f7ff fadb 	bl	800dd24 <read_submessage_list>
 800e76e:	e757      	b.n	800e620 <wait_session_status+0x34>
 800e770:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e772:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e776:	47a0      	blx	r4
 800e778:	2001      	movs	r0, #1
 800e77a:	b01d      	add	sp, #116	; 0x74
 800e77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e780:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 800e784:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800e788:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800e78c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e78e:	a90c      	add	r1, sp, #48	; 0x30
 800e790:	4620      	mov	r0, r4
 800e792:	f7ff fac7 	bl	800dd24 <read_submessage_list>
 800e796:	e7c1      	b.n	800e71c <wait_session_status+0x130>

0800e798 <uxr_delete_session_retries>:
 800e798:	b530      	push	{r4, r5, lr}
 800e79a:	b08f      	sub	sp, #60	; 0x3c
 800e79c:	4604      	mov	r4, r0
 800e79e:	460d      	mov	r5, r1
 800e7a0:	f000 f954 	bl	800ea4c <uxr_session_header_offset>
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	2210      	movs	r2, #16
 800e7a8:	9000      	str	r0, [sp, #0]
 800e7aa:	a902      	add	r1, sp, #8
 800e7ac:	a806      	add	r0, sp, #24
 800e7ae:	f7fb fed5 	bl	800a55c <ucdr_init_buffer_origin_offset>
 800e7b2:	a906      	add	r1, sp, #24
 800e7b4:	4620      	mov	r0, r4
 800e7b6:	f000 f897 	bl	800e8e8 <uxr_buffer_delete_session>
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	4611      	mov	r1, r2
 800e7be:	9b06      	ldr	r3, [sp, #24]
 800e7c0:	4620      	mov	r0, r4
 800e7c2:	f000 f8eb 	bl	800e99c <uxr_stamp_session_header>
 800e7c6:	a806      	add	r0, sp, #24
 800e7c8:	f7fb ff06 	bl	800a5d8 <ucdr_buffer_length>
 800e7cc:	462b      	mov	r3, r5
 800e7ce:	4602      	mov	r2, r0
 800e7d0:	a902      	add	r1, sp, #8
 800e7d2:	4620      	mov	r0, r4
 800e7d4:	f7ff ff0a 	bl	800e5ec <wait_session_status>
 800e7d8:	b118      	cbz	r0, 800e7e2 <uxr_delete_session_retries+0x4a>
 800e7da:	7960      	ldrb	r0, [r4, #5]
 800e7dc:	fab0 f080 	clz	r0, r0
 800e7e0:	0940      	lsrs	r0, r0, #5
 800e7e2:	b00f      	add	sp, #60	; 0x3c
 800e7e4:	bd30      	pop	{r4, r5, pc}
 800e7e6:	bf00      	nop

0800e7e8 <uxr_prepare_stream_to_write_submessage>:
 800e7e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7ec:	b082      	sub	sp, #8
 800e7ee:	4682      	mov	sl, r0
 800e7f0:	4610      	mov	r0, r2
 800e7f2:	4615      	mov	r5, r2
 800e7f4:	461e      	mov	r6, r3
 800e7f6:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800e7fa:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800e7fe:	9101      	str	r1, [sp, #4]
 800e800:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800e804:	f000 fad4 	bl	800edb0 <uxr_submessage_padding>
 800e808:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e80c:	f105 0904 	add.w	r9, r5, #4
 800e810:	2b01      	cmp	r3, #1
 800e812:	4481      	add	r9, r0
 800e814:	d01d      	beq.n	800e852 <uxr_prepare_stream_to_write_submessage+0x6a>
 800e816:	2b02      	cmp	r3, #2
 800e818:	d116      	bne.n	800e848 <uxr_prepare_stream_to_write_submessage+0x60>
 800e81a:	4621      	mov	r1, r4
 800e81c:	f10a 0008 	add.w	r0, sl, #8
 800e820:	f000 fa4e 	bl	800ecc0 <uxr_get_output_reliable_stream>
 800e824:	4604      	mov	r4, r0
 800e826:	b158      	cbz	r0, 800e840 <uxr_prepare_stream_to_write_submessage+0x58>
 800e828:	4649      	mov	r1, r9
 800e82a:	4632      	mov	r2, r6
 800e82c:	f005 fb38 	bl	8013ea0 <uxr_prepare_reliable_buffer_to_write>
 800e830:	4604      	mov	r4, r0
 800e832:	b12c      	cbz	r4, 800e840 <uxr_prepare_stream_to_write_submessage+0x58>
 800e834:	4643      	mov	r3, r8
 800e836:	b2aa      	uxth	r2, r5
 800e838:	4639      	mov	r1, r7
 800e83a:	4630      	mov	r0, r6
 800e83c:	f000 fa78 	bl	800ed30 <uxr_buffer_submessage_header>
 800e840:	4620      	mov	r0, r4
 800e842:	b002      	add	sp, #8
 800e844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e848:	2400      	movs	r4, #0
 800e84a:	4620      	mov	r0, r4
 800e84c:	b002      	add	sp, #8
 800e84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e852:	4621      	mov	r1, r4
 800e854:	f10a 0008 	add.w	r0, sl, #8
 800e858:	f000 fa2a 	bl	800ecb0 <uxr_get_output_best_effort_stream>
 800e85c:	4604      	mov	r4, r0
 800e85e:	2800      	cmp	r0, #0
 800e860:	d0ee      	beq.n	800e840 <uxr_prepare_stream_to_write_submessage+0x58>
 800e862:	4649      	mov	r1, r9
 800e864:	4632      	mov	r2, r6
 800e866:	f005 fa57 	bl	8013d18 <uxr_prepare_best_effort_buffer_to_write>
 800e86a:	4604      	mov	r4, r0
 800e86c:	e7e1      	b.n	800e832 <uxr_prepare_stream_to_write_submessage+0x4a>
 800e86e:	bf00      	nop

0800e870 <uxr_init_session_info>:
 800e870:	b470      	push	{r4, r5, r6}
 800e872:	7102      	strb	r2, [r0, #4]
 800e874:	0e16      	lsrs	r6, r2, #24
 800e876:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800e87a:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800e87e:	23ff      	movs	r3, #255	; 0xff
 800e880:	2209      	movs	r2, #9
 800e882:	7046      	strb	r6, [r0, #1]
 800e884:	7085      	strb	r5, [r0, #2]
 800e886:	70c4      	strb	r4, [r0, #3]
 800e888:	7001      	strb	r1, [r0, #0]
 800e88a:	bc70      	pop	{r4, r5, r6}
 800e88c:	80c2      	strh	r2, [r0, #6]
 800e88e:	7143      	strb	r3, [r0, #5]
 800e890:	4770      	bx	lr
 800e892:	bf00      	nop

0800e894 <uxr_buffer_create_session>:
 800e894:	b570      	push	{r4, r5, r6, lr}
 800e896:	b088      	sub	sp, #32
 800e898:	2300      	movs	r3, #0
 800e89a:	4d12      	ldr	r5, [pc, #72]	; (800e8e4 <uxr_buffer_create_session+0x50>)
 800e89c:	9307      	str	r3, [sp, #28]
 800e89e:	f8ad 201c 	strh.w	r2, [sp, #28]
 800e8a2:	7802      	ldrb	r2, [r0, #0]
 800e8a4:	9303      	str	r3, [sp, #12]
 800e8a6:	460c      	mov	r4, r1
 800e8a8:	f88d 200c 	strb.w	r2, [sp, #12]
 800e8ac:	2101      	movs	r1, #1
 800e8ae:	682a      	ldr	r2, [r5, #0]
 800e8b0:	f8d0 6001 	ldr.w	r6, [r0, #1]
 800e8b4:	88ad      	ldrh	r5, [r5, #4]
 800e8b6:	80c1      	strh	r1, [r0, #6]
 800e8b8:	f8ad 1004 	strh.w	r1, [sp, #4]
 800e8bc:	9200      	str	r2, [sp, #0]
 800e8be:	4619      	mov	r1, r3
 800e8c0:	2210      	movs	r2, #16
 800e8c2:	4620      	mov	r0, r4
 800e8c4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800e8c8:	9306      	str	r3, [sp, #24]
 800e8ca:	f88d 300d 	strb.w	r3, [sp, #13]
 800e8ce:	9602      	str	r6, [sp, #8]
 800e8d0:	f8ad 5006 	strh.w	r5, [sp, #6]
 800e8d4:	f000 fa2c 	bl	800ed30 <uxr_buffer_submessage_header>
 800e8d8:	4620      	mov	r0, r4
 800e8da:	4669      	mov	r1, sp
 800e8dc:	f001 fa50 	bl	800fd80 <uxr_serialize_CREATE_CLIENT_Payload>
 800e8e0:	b008      	add	sp, #32
 800e8e2:	bd70      	pop	{r4, r5, r6, pc}
 800e8e4:	08016780 	.word	0x08016780

0800e8e8 <uxr_buffer_delete_session>:
 800e8e8:	b530      	push	{r4, r5, lr}
 800e8ea:	4b0c      	ldr	r3, [pc, #48]	; (800e91c <uxr_buffer_delete_session+0x34>)
 800e8ec:	b083      	sub	sp, #12
 800e8ee:	891b      	ldrh	r3, [r3, #8]
 800e8f0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e8f4:	2202      	movs	r2, #2
 800e8f6:	460c      	mov	r4, r1
 800e8f8:	80c2      	strh	r2, [r0, #6]
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	2204      	movs	r2, #4
 800e8fe:	4608      	mov	r0, r1
 800e900:	f44f 7500 	mov.w	r5, #512	; 0x200
 800e904:	2103      	movs	r1, #3
 800e906:	f8ad 5004 	strh.w	r5, [sp, #4]
 800e90a:	f000 fa11 	bl	800ed30 <uxr_buffer_submessage_header>
 800e90e:	4620      	mov	r0, r4
 800e910:	a901      	add	r1, sp, #4
 800e912:	f001 fae3 	bl	800fedc <uxr_serialize_DELETE_Payload>
 800e916:	b003      	add	sp, #12
 800e918:	bd30      	pop	{r4, r5, pc}
 800e91a:	bf00      	nop
 800e91c:	08016780 	.word	0x08016780

0800e920 <uxr_read_create_session_status>:
 800e920:	b510      	push	{r4, lr}
 800e922:	b088      	sub	sp, #32
 800e924:	4604      	mov	r4, r0
 800e926:	4608      	mov	r0, r1
 800e928:	a901      	add	r1, sp, #4
 800e92a:	f001 fae7 	bl	800fefc <uxr_deserialize_STATUS_AGENT_Payload>
 800e92e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e932:	7163      	strb	r3, [r4, #5]
 800e934:	b008      	add	sp, #32
 800e936:	bd10      	pop	{r4, pc}

0800e938 <uxr_read_delete_session_status>:
 800e938:	b510      	push	{r4, lr}
 800e93a:	4604      	mov	r4, r0
 800e93c:	b084      	sub	sp, #16
 800e93e:	4608      	mov	r0, r1
 800e940:	a902      	add	r1, sp, #8
 800e942:	f001 fb0b 	bl	800ff5c <uxr_deserialize_STATUS_Payload>
 800e946:	88e3      	ldrh	r3, [r4, #6]
 800e948:	2b02      	cmp	r3, #2
 800e94a:	d001      	beq.n	800e950 <uxr_read_delete_session_status+0x18>
 800e94c:	b004      	add	sp, #16
 800e94e:	bd10      	pop	{r4, pc}
 800e950:	f10d 000a 	add.w	r0, sp, #10
 800e954:	f7fe fec6 	bl	800d6e4 <uxr_object_id_from_raw>
 800e958:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800e95c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800e960:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e964:	b29b      	uxth	r3, r3
 800e966:	2b02      	cmp	r3, #2
 800e968:	bf04      	itt	eq
 800e96a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800e96e:	7163      	strbeq	r3, [r4, #5]
 800e970:	b004      	add	sp, #16
 800e972:	bd10      	pop	{r4, pc}

0800e974 <uxr_stamp_create_session_header>:
 800e974:	b510      	push	{r4, lr}
 800e976:	4604      	mov	r4, r0
 800e978:	b08a      	sub	sp, #40	; 0x28
 800e97a:	a802      	add	r0, sp, #8
 800e97c:	2208      	movs	r2, #8
 800e97e:	f7fb fdff 	bl	800a580 <ucdr_init_buffer>
 800e982:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e986:	9400      	str	r4, [sp, #0]
 800e988:	2300      	movs	r3, #0
 800e98a:	a802      	add	r0, sp, #8
 800e98c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800e990:	461a      	mov	r2, r3
 800e992:	f000 fbcb 	bl	800f12c <uxr_serialize_message_header>
 800e996:	b00a      	add	sp, #40	; 0x28
 800e998:	bd10      	pop	{r4, pc}
 800e99a:	bf00      	nop

0800e99c <uxr_stamp_session_header>:
 800e99c:	b570      	push	{r4, r5, r6, lr}
 800e99e:	4604      	mov	r4, r0
 800e9a0:	b08c      	sub	sp, #48	; 0x30
 800e9a2:	460d      	mov	r5, r1
 800e9a4:	4616      	mov	r6, r2
 800e9a6:	4619      	mov	r1, r3
 800e9a8:	a804      	add	r0, sp, #16
 800e9aa:	2208      	movs	r2, #8
 800e9ac:	9603      	str	r6, [sp, #12]
 800e9ae:	f7fb fde7 	bl	800a580 <ucdr_init_buffer>
 800e9b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9b6:	9b03      	ldr	r3, [sp, #12]
 800e9b8:	9400      	str	r4, [sp, #0]
 800e9ba:	462a      	mov	r2, r5
 800e9bc:	a804      	add	r0, sp, #16
 800e9be:	f000 fbb5 	bl	800f12c <uxr_serialize_message_header>
 800e9c2:	b00c      	add	sp, #48	; 0x30
 800e9c4:	bd70      	pop	{r4, r5, r6, pc}
 800e9c6:	bf00      	nop

0800e9c8 <uxr_read_session_header>:
 800e9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9cc:	4607      	mov	r7, r0
 800e9ce:	b084      	sub	sp, #16
 800e9d0:	4608      	mov	r0, r1
 800e9d2:	460c      	mov	r4, r1
 800e9d4:	4615      	mov	r5, r2
 800e9d6:	461e      	mov	r6, r3
 800e9d8:	f7fb fe02 	bl	800a5e0 <ucdr_buffer_remaining>
 800e9dc:	2808      	cmp	r0, #8
 800e9de:	d803      	bhi.n	800e9e8 <uxr_read_session_header+0x20>
 800e9e0:	2000      	movs	r0, #0
 800e9e2:	b004      	add	sp, #16
 800e9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9e8:	f10d 080c 	add.w	r8, sp, #12
 800e9ec:	4633      	mov	r3, r6
 800e9ee:	462a      	mov	r2, r5
 800e9f0:	4620      	mov	r0, r4
 800e9f2:	f8cd 8000 	str.w	r8, [sp]
 800e9f6:	f10d 010b 	add.w	r1, sp, #11
 800e9fa:	f000 fbb5 	bl	800f168 <uxr_deserialize_message_header>
 800e9fe:	783a      	ldrb	r2, [r7, #0]
 800ea00:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800ea04:	4293      	cmp	r3, r2
 800ea06:	d1eb      	bne.n	800e9e0 <uxr_read_session_header+0x18>
 800ea08:	061b      	lsls	r3, r3, #24
 800ea0a:	d41c      	bmi.n	800ea46 <uxr_read_session_header+0x7e>
 800ea0c:	f898 2000 	ldrb.w	r2, [r8]
 800ea10:	787b      	ldrb	r3, [r7, #1]
 800ea12:	429a      	cmp	r2, r3
 800ea14:	d003      	beq.n	800ea1e <uxr_read_session_header+0x56>
 800ea16:	2001      	movs	r0, #1
 800ea18:	f080 0001 	eor.w	r0, r0, #1
 800ea1c:	e7e1      	b.n	800e9e2 <uxr_read_session_header+0x1a>
 800ea1e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800ea22:	78bb      	ldrb	r3, [r7, #2]
 800ea24:	429a      	cmp	r2, r3
 800ea26:	f107 0102 	add.w	r1, r7, #2
 800ea2a:	d1f4      	bne.n	800ea16 <uxr_read_session_header+0x4e>
 800ea2c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800ea30:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ea34:	429a      	cmp	r2, r3
 800ea36:	d1ee      	bne.n	800ea16 <uxr_read_session_header+0x4e>
 800ea38:	784b      	ldrb	r3, [r1, #1]
 800ea3a:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	d1e9      	bne.n	800ea16 <uxr_read_session_header+0x4e>
 800ea42:	2000      	movs	r0, #0
 800ea44:	e7e8      	b.n	800ea18 <uxr_read_session_header+0x50>
 800ea46:	2001      	movs	r0, #1
 800ea48:	e7cb      	b.n	800e9e2 <uxr_read_session_header+0x1a>
 800ea4a:	bf00      	nop

0800ea4c <uxr_session_header_offset>:
 800ea4c:	f990 3000 	ldrsb.w	r3, [r0]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	bfac      	ite	ge
 800ea54:	2008      	movge	r0, #8
 800ea56:	2004      	movlt	r0, #4
 800ea58:	4770      	bx	lr
 800ea5a:	bf00      	nop

0800ea5c <uxr_init_base_object_request>:
 800ea5c:	b530      	push	{r4, r5, lr}
 800ea5e:	88c3      	ldrh	r3, [r0, #6]
 800ea60:	b083      	sub	sp, #12
 800ea62:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800ea66:	9101      	str	r1, [sp, #4]
 800ea68:	f1a3 010a 	sub.w	r1, r3, #10
 800ea6c:	b289      	uxth	r1, r1
 800ea6e:	42a1      	cmp	r1, r4
 800ea70:	d80e      	bhi.n	800ea90 <uxr_init_base_object_request+0x34>
 800ea72:	3301      	adds	r3, #1
 800ea74:	b29c      	uxth	r4, r3
 800ea76:	f3c3 2507 	ubfx	r5, r3, #8, #8
 800ea7a:	b2db      	uxtb	r3, r3
 800ea7c:	80c4      	strh	r4, [r0, #6]
 800ea7e:	1c91      	adds	r1, r2, #2
 800ea80:	9801      	ldr	r0, [sp, #4]
 800ea82:	7015      	strb	r5, [r2, #0]
 800ea84:	7053      	strb	r3, [r2, #1]
 800ea86:	f7fe fe41 	bl	800d70c <uxr_object_id_to_raw>
 800ea8a:	4620      	mov	r0, r4
 800ea8c:	b003      	add	sp, #12
 800ea8e:	bd30      	pop	{r4, r5, pc}
 800ea90:	230a      	movs	r3, #10
 800ea92:	461c      	mov	r4, r3
 800ea94:	2500      	movs	r5, #0
 800ea96:	e7f1      	b.n	800ea7c <uxr_init_base_object_request+0x20>

0800ea98 <uxr_parse_base_object_request>:
 800ea98:	b570      	push	{r4, r5, r6, lr}
 800ea9a:	4604      	mov	r4, r0
 800ea9c:	3002      	adds	r0, #2
 800ea9e:	460d      	mov	r5, r1
 800eaa0:	4616      	mov	r6, r2
 800eaa2:	f7fe fe1f 	bl	800d6e4 <uxr_object_id_from_raw>
 800eaa6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800eaaa:	8028      	strh	r0, [r5, #0]
 800eaac:	806b      	strh	r3, [r5, #2]
 800eaae:	7822      	ldrb	r2, [r4, #0]
 800eab0:	7863      	ldrb	r3, [r4, #1]
 800eab2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800eab6:	8033      	strh	r3, [r6, #0]
 800eab8:	bd70      	pop	{r4, r5, r6, pc}
 800eaba:	bf00      	nop

0800eabc <uxr_stream_id>:
 800eabc:	b410      	push	{r4}
 800eabe:	2901      	cmp	r1, #1
 800eac0:	b083      	sub	sp, #12
 800eac2:	d01f      	beq.n	800eb04 <uxr_stream_id+0x48>
 800eac4:	2902      	cmp	r1, #2
 800eac6:	f04f 0400 	mov.w	r4, #0
 800eaca:	d01e      	beq.n	800eb0a <uxr_stream_id+0x4e>
 800eacc:	2300      	movs	r3, #0
 800eace:	f364 0307 	bfi	r3, r4, #0, #8
 800ead2:	f360 230f 	bfi	r3, r0, #8, #8
 800ead6:	f361 4317 	bfi	r3, r1, #16, #8
 800eada:	f362 631f 	bfi	r3, r2, #24, #8
 800eade:	b2da      	uxtb	r2, r3
 800eae0:	2000      	movs	r0, #0
 800eae2:	f362 0007 	bfi	r0, r2, #0, #8
 800eae6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800eaea:	f362 200f 	bfi	r0, r2, #8, #8
 800eaee:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800eaf2:	f362 4017 	bfi	r0, r2, #16, #8
 800eaf6:	0e1b      	lsrs	r3, r3, #24
 800eaf8:	f363 601f 	bfi	r0, r3, #24, #8
 800eafc:	b003      	add	sp, #12
 800eafe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb02:	4770      	bx	lr
 800eb04:	1c44      	adds	r4, r0, #1
 800eb06:	b2e4      	uxtb	r4, r4
 800eb08:	e7e0      	b.n	800eacc <uxr_stream_id+0x10>
 800eb0a:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 800eb0e:	e7dd      	b.n	800eacc <uxr_stream_id+0x10>

0800eb10 <uxr_stream_id_from_raw>:
 800eb10:	b410      	push	{r4}
 800eb12:	b083      	sub	sp, #12
 800eb14:	b128      	cbz	r0, 800eb22 <uxr_stream_id_from_raw+0x12>
 800eb16:	0603      	lsls	r3, r0, #24
 800eb18:	d421      	bmi.n	800eb5e <uxr_stream_id_from_raw+0x4e>
 800eb1a:	1e42      	subs	r2, r0, #1
 800eb1c:	b2d2      	uxtb	r2, r2
 800eb1e:	2401      	movs	r4, #1
 800eb20:	e001      	b.n	800eb26 <uxr_stream_id_from_raw+0x16>
 800eb22:	4604      	mov	r4, r0
 800eb24:	4602      	mov	r2, r0
 800eb26:	2300      	movs	r3, #0
 800eb28:	f360 0307 	bfi	r3, r0, #0, #8
 800eb2c:	f362 230f 	bfi	r3, r2, #8, #8
 800eb30:	f364 4317 	bfi	r3, r4, #16, #8
 800eb34:	f361 631f 	bfi	r3, r1, #24, #8
 800eb38:	b2da      	uxtb	r2, r3
 800eb3a:	2000      	movs	r0, #0
 800eb3c:	f362 0007 	bfi	r0, r2, #0, #8
 800eb40:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800eb44:	f362 200f 	bfi	r0, r2, #8, #8
 800eb48:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800eb4c:	f362 4017 	bfi	r0, r2, #16, #8
 800eb50:	0e1b      	lsrs	r3, r3, #24
 800eb52:	f363 601f 	bfi	r0, r3, #24, #8
 800eb56:	b003      	add	sp, #12
 800eb58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb5c:	4770      	bx	lr
 800eb5e:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800eb62:	2402      	movs	r4, #2
 800eb64:	e7df      	b.n	800eb26 <uxr_stream_id_from_raw+0x16>
 800eb66:	bf00      	nop

0800eb68 <uxr_init_stream_storage>:
 800eb68:	2300      	movs	r3, #0
 800eb6a:	7403      	strb	r3, [r0, #16]
 800eb6c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800eb70:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800eb74:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800eb78:	4770      	bx	lr
 800eb7a:	bf00      	nop

0800eb7c <uxr_reset_stream_storage>:
 800eb7c:	b570      	push	{r4, r5, r6, lr}
 800eb7e:	7c03      	ldrb	r3, [r0, #16]
 800eb80:	4604      	mov	r4, r0
 800eb82:	b153      	cbz	r3, 800eb9a <uxr_reset_stream_storage+0x1e>
 800eb84:	4606      	mov	r6, r0
 800eb86:	2500      	movs	r5, #0
 800eb88:	4630      	mov	r0, r6
 800eb8a:	f005 f8bf 	bl	8013d0c <uxr_reset_output_best_effort_stream>
 800eb8e:	7c23      	ldrb	r3, [r4, #16]
 800eb90:	3501      	adds	r5, #1
 800eb92:	42ab      	cmp	r3, r5
 800eb94:	f106 0610 	add.w	r6, r6, #16
 800eb98:	d8f6      	bhi.n	800eb88 <uxr_reset_stream_storage+0xc>
 800eb9a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800eb9e:	b163      	cbz	r3, 800ebba <uxr_reset_stream_storage+0x3e>
 800eba0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800eba4:	2500      	movs	r5, #0
 800eba6:	4630      	mov	r0, r6
 800eba8:	f004 febc 	bl	8013924 <uxr_reset_input_best_effort_stream>
 800ebac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ebb0:	3501      	adds	r5, #1
 800ebb2:	42ab      	cmp	r3, r5
 800ebb4:	f106 0602 	add.w	r6, r6, #2
 800ebb8:	d8f5      	bhi.n	800eba6 <uxr_reset_stream_storage+0x2a>
 800ebba:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800ebbe:	b163      	cbz	r3, 800ebda <uxr_reset_stream_storage+0x5e>
 800ebc0:	f104 0618 	add.w	r6, r4, #24
 800ebc4:	2500      	movs	r5, #0
 800ebc6:	4630      	mov	r0, r6
 800ebc8:	f005 f940 	bl	8013e4c <uxr_reset_output_reliable_stream>
 800ebcc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800ebd0:	3501      	adds	r5, #1
 800ebd2:	42ab      	cmp	r3, r5
 800ebd4:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800ebd8:	d8f5      	bhi.n	800ebc6 <uxr_reset_stream_storage+0x4a>
 800ebda:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800ebde:	b163      	cbz	r3, 800ebfa <uxr_reset_stream_storage+0x7e>
 800ebe0:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800ebe4:	2500      	movs	r5, #0
 800ebe6:	4630      	mov	r0, r6
 800ebe8:	f004 ff04 	bl	80139f4 <uxr_reset_input_reliable_stream>
 800ebec:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800ebf0:	3501      	adds	r5, #1
 800ebf2:	42ab      	cmp	r3, r5
 800ebf4:	f106 0618 	add.w	r6, r6, #24
 800ebf8:	d8f5      	bhi.n	800ebe6 <uxr_reset_stream_storage+0x6a>
 800ebfa:	bd70      	pop	{r4, r5, r6, pc}

0800ebfc <uxr_add_output_best_effort_buffer>:
 800ebfc:	b530      	push	{r4, r5, lr}
 800ebfe:	7c04      	ldrb	r4, [r0, #16]
 800ec00:	1c65      	adds	r5, r4, #1
 800ec02:	b083      	sub	sp, #12
 800ec04:	7405      	strb	r5, [r0, #16]
 800ec06:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800ec0a:	f005 f873 	bl	8013cf4 <uxr_init_output_best_effort_stream>
 800ec0e:	2201      	movs	r2, #1
 800ec10:	4620      	mov	r0, r4
 800ec12:	4611      	mov	r1, r2
 800ec14:	b003      	add	sp, #12
 800ec16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec1a:	f7ff bf4f 	b.w	800eabc <uxr_stream_id>
 800ec1e:	bf00      	nop

0800ec20 <uxr_add_output_reliable_buffer>:
 800ec20:	b570      	push	{r4, r5, r6, lr}
 800ec22:	b084      	sub	sp, #16
 800ec24:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800ec28:	f89d 6020 	ldrb.w	r6, [sp, #32]
 800ec2c:	9600      	str	r6, [sp, #0]
 800ec2e:	2528      	movs	r5, #40	; 0x28
 800ec30:	1c66      	adds	r6, r4, #1
 800ec32:	fb05 0504 	mla	r5, r5, r4, r0
 800ec36:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 800ec3a:	f105 0018 	add.w	r0, r5, #24
 800ec3e:	f005 f8d3 	bl	8013de8 <uxr_init_output_reliable_stream>
 800ec42:	4620      	mov	r0, r4
 800ec44:	2201      	movs	r2, #1
 800ec46:	2102      	movs	r1, #2
 800ec48:	b004      	add	sp, #16
 800ec4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec4e:	f7ff bf35 	b.w	800eabc <uxr_stream_id>
 800ec52:	bf00      	nop

0800ec54 <uxr_add_input_best_effort_buffer>:
 800ec54:	b510      	push	{r4, lr}
 800ec56:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800ec5a:	1c62      	adds	r2, r4, #1
 800ec5c:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800ec60:	b082      	sub	sp, #8
 800ec62:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 800ec66:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800ec6a:	f004 fe57 	bl	801391c <uxr_init_input_best_effort_stream>
 800ec6e:	4620      	mov	r0, r4
 800ec70:	2200      	movs	r2, #0
 800ec72:	2101      	movs	r1, #1
 800ec74:	b002      	add	sp, #8
 800ec76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec7a:	f7ff bf1f 	b.w	800eabc <uxr_stream_id>
 800ec7e:	bf00      	nop

0800ec80 <uxr_add_input_reliable_buffer>:
 800ec80:	b570      	push	{r4, r5, r6, lr}
 800ec82:	b084      	sub	sp, #16
 800ec84:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 800ec88:	9e08      	ldr	r6, [sp, #32]
 800ec8a:	9600      	str	r6, [sp, #0]
 800ec8c:	2518      	movs	r5, #24
 800ec8e:	1c66      	adds	r6, r4, #1
 800ec90:	fb05 0504 	mla	r5, r5, r4, r0
 800ec94:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 800ec98:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800ec9c:	f004 fe86 	bl	80139ac <uxr_init_input_reliable_stream>
 800eca0:	4620      	mov	r0, r4
 800eca2:	2200      	movs	r2, #0
 800eca4:	2102      	movs	r1, #2
 800eca6:	b004      	add	sp, #16
 800eca8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ecac:	f7ff bf06 	b.w	800eabc <uxr_stream_id>

0800ecb0 <uxr_get_output_best_effort_stream>:
 800ecb0:	7c03      	ldrb	r3, [r0, #16]
 800ecb2:	428b      	cmp	r3, r1
 800ecb4:	bf8c      	ite	hi
 800ecb6:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800ecba:	2000      	movls	r0, #0
 800ecbc:	4770      	bx	lr
 800ecbe:	bf00      	nop

0800ecc0 <uxr_get_output_reliable_stream>:
 800ecc0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800ecc4:	428b      	cmp	r3, r1
 800ecc6:	bf83      	ittte	hi
 800ecc8:	2328      	movhi	r3, #40	; 0x28
 800ecca:	fb03 0101 	mlahi	r1, r3, r1, r0
 800ecce:	f101 0018 	addhi.w	r0, r1, #24
 800ecd2:	2000      	movls	r0, #0
 800ecd4:	4770      	bx	lr
 800ecd6:	bf00      	nop

0800ecd8 <uxr_get_input_best_effort_stream>:
 800ecd8:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800ecdc:	428b      	cmp	r3, r1
 800ecde:	bf86      	itte	hi
 800ece0:	3121      	addhi	r1, #33	; 0x21
 800ece2:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800ece6:	2000      	movls	r0, #0
 800ece8:	4770      	bx	lr
 800ecea:	bf00      	nop

0800ecec <uxr_get_input_reliable_stream>:
 800ecec:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800ecf0:	428b      	cmp	r3, r1
 800ecf2:	bf83      	ittte	hi
 800ecf4:	2318      	movhi	r3, #24
 800ecf6:	fb03 0101 	mlahi	r1, r3, r1, r0
 800ecfa:	f101 0048 	addhi.w	r0, r1, #72	; 0x48
 800ecfe:	2000      	movls	r0, #0
 800ed00:	4770      	bx	lr
 800ed02:	bf00      	nop

0800ed04 <uxr_output_streams_confirmed>:
 800ed04:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800ed08:	b183      	cbz	r3, 800ed2c <uxr_output_streams_confirmed+0x28>
 800ed0a:	b570      	push	{r4, r5, r6, lr}
 800ed0c:	4606      	mov	r6, r0
 800ed0e:	f100 0518 	add.w	r5, r0, #24
 800ed12:	2400      	movs	r4, #0
 800ed14:	e001      	b.n	800ed1a <uxr_output_streams_confirmed+0x16>
 800ed16:	3528      	adds	r5, #40	; 0x28
 800ed18:	b138      	cbz	r0, 800ed2a <uxr_output_streams_confirmed+0x26>
 800ed1a:	4628      	mov	r0, r5
 800ed1c:	f005 fafa 	bl	8014314 <uxr_is_output_up_to_date>
 800ed20:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800ed24:	3401      	adds	r4, #1
 800ed26:	42a3      	cmp	r3, r4
 800ed28:	d8f5      	bhi.n	800ed16 <uxr_output_streams_confirmed+0x12>
 800ed2a:	bd70      	pop	{r4, r5, r6, pc}
 800ed2c:	2001      	movs	r0, #1
 800ed2e:	4770      	bx	lr

0800ed30 <uxr_buffer_submessage_header>:
 800ed30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed32:	4604      	mov	r4, r0
 800ed34:	460e      	mov	r6, r1
 800ed36:	2104      	movs	r1, #4
 800ed38:	4615      	mov	r5, r2
 800ed3a:	461f      	mov	r7, r3
 800ed3c:	f7fb fc3a 	bl	800a5b4 <ucdr_align_to>
 800ed40:	2301      	movs	r3, #1
 800ed42:	ea47 0203 	orr.w	r2, r7, r3
 800ed46:	4631      	mov	r1, r6
 800ed48:	7523      	strb	r3, [r4, #20]
 800ed4a:	4620      	mov	r0, r4
 800ed4c:	462b      	mov	r3, r5
 800ed4e:	f000 fa2b 	bl	800f1a8 <uxr_serialize_submessage_header>
 800ed52:	4620      	mov	r0, r4
 800ed54:	f7fb fc44 	bl	800a5e0 <ucdr_buffer_remaining>
 800ed58:	42a8      	cmp	r0, r5
 800ed5a:	bf34      	ite	cc
 800ed5c:	2000      	movcc	r0, #0
 800ed5e:	2001      	movcs	r0, #1
 800ed60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed62:	bf00      	nop

0800ed64 <uxr_read_submessage_header>:
 800ed64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed68:	4604      	mov	r4, r0
 800ed6a:	460d      	mov	r5, r1
 800ed6c:	2104      	movs	r1, #4
 800ed6e:	4616      	mov	r6, r2
 800ed70:	4698      	mov	r8, r3
 800ed72:	f7fb fc1f 	bl	800a5b4 <ucdr_align_to>
 800ed76:	4620      	mov	r0, r4
 800ed78:	f7fb fc32 	bl	800a5e0 <ucdr_buffer_remaining>
 800ed7c:	2803      	cmp	r0, #3
 800ed7e:	bf8c      	ite	hi
 800ed80:	2701      	movhi	r7, #1
 800ed82:	2700      	movls	r7, #0
 800ed84:	d802      	bhi.n	800ed8c <uxr_read_submessage_header+0x28>
 800ed86:	4638      	mov	r0, r7
 800ed88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed8c:	4633      	mov	r3, r6
 800ed8e:	4642      	mov	r2, r8
 800ed90:	4620      	mov	r0, r4
 800ed92:	4629      	mov	r1, r5
 800ed94:	f000 fa1c 	bl	800f1d0 <uxr_deserialize_submessage_header>
 800ed98:	f898 3000 	ldrb.w	r3, [r8]
 800ed9c:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 800eda0:	f003 0301 	and.w	r3, r3, #1
 800eda4:	f888 2000 	strb.w	r2, [r8]
 800eda8:	7523      	strb	r3, [r4, #20]
 800edaa:	4638      	mov	r0, r7
 800edac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800edb0 <uxr_submessage_padding>:
 800edb0:	f010 0003 	ands.w	r0, r0, #3
 800edb4:	bf18      	it	ne
 800edb6:	f1c0 0004 	rsbne	r0, r0, #4
 800edba:	4770      	bx	lr

0800edbc <uxr_millis>:
 800edbc:	b510      	push	{r4, lr}
 800edbe:	b084      	sub	sp, #16
 800edc0:	4669      	mov	r1, sp
 800edc2:	2001      	movs	r0, #1
 800edc4:	f7f3 f964 	bl	8002090 <clock_gettime>
 800edc8:	e9dd 2400 	ldrd	r2, r4, [sp]
 800edcc:	4907      	ldr	r1, [pc, #28]	; (800edec <uxr_millis+0x30>)
 800edce:	9802      	ldr	r0, [sp, #8]
 800edd0:	fba2 2301 	umull	r2, r3, r2, r1
 800edd4:	fb01 3304 	mla	r3, r1, r4, r3
 800edd8:	4604      	mov	r4, r0
 800edda:	1810      	adds	r0, r2, r0
 800eddc:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 800ede0:	4a03      	ldr	r2, [pc, #12]	; (800edf0 <uxr_millis+0x34>)
 800ede2:	2300      	movs	r3, #0
 800ede4:	f7f1 feba 	bl	8000b5c <__aeabi_ldivmod>
 800ede8:	b004      	add	sp, #16
 800edea:	bd10      	pop	{r4, pc}
 800edec:	3b9aca00 	.word	0x3b9aca00
 800edf0:	000f4240 	.word	0x000f4240

0800edf4 <uxr_nanos>:
 800edf4:	b510      	push	{r4, lr}
 800edf6:	b084      	sub	sp, #16
 800edf8:	4669      	mov	r1, sp
 800edfa:	2001      	movs	r0, #1
 800edfc:	f7f3 f948 	bl	8002090 <clock_gettime>
 800ee00:	e9dd 2400 	ldrd	r2, r4, [sp]
 800ee04:	4905      	ldr	r1, [pc, #20]	; (800ee1c <uxr_nanos+0x28>)
 800ee06:	9802      	ldr	r0, [sp, #8]
 800ee08:	fba2 2301 	umull	r2, r3, r2, r1
 800ee0c:	fb01 3304 	mla	r3, r1, r4, r3
 800ee10:	4604      	mov	r4, r0
 800ee12:	1810      	adds	r0, r2, r0
 800ee14:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 800ee18:	b004      	add	sp, #16
 800ee1a:	bd10      	pop	{r4, pc}
 800ee1c:	3b9aca00 	.word	0x3b9aca00

0800ee20 <on_full_output_buffer_fragmented>:
 800ee20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee24:	460c      	mov	r4, r1
 800ee26:	b08a      	sub	sp, #40	; 0x28
 800ee28:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 800ee2c:	4606      	mov	r6, r0
 800ee2e:	f104 0008 	add.w	r0, r4, #8
 800ee32:	f7ff ff45 	bl	800ecc0 <uxr_get_output_reliable_stream>
 800ee36:	4605      	mov	r5, r0
 800ee38:	f005 fa76 	bl	8014328 <get_available_free_slots>
 800ee3c:	b968      	cbnz	r0, 800ee5a <on_full_output_buffer_fragmented+0x3a>
 800ee3e:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 800ee42:	4620      	mov	r0, r4
 800ee44:	4798      	blx	r3
 800ee46:	b918      	cbnz	r0, 800ee50 <on_full_output_buffer_fragmented+0x30>
 800ee48:	2001      	movs	r0, #1
 800ee4a:	b00a      	add	sp, #40	; 0x28
 800ee4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee50:	4628      	mov	r0, r5
 800ee52:	f005 fa69 	bl	8014328 <get_available_free_slots>
 800ee56:	2800      	cmp	r0, #0
 800ee58:	d0f6      	beq.n	800ee48 <on_full_output_buffer_fragmented+0x28>
 800ee5a:	8928      	ldrh	r0, [r5, #8]
 800ee5c:	89eb      	ldrh	r3, [r5, #14]
 800ee5e:	7b2a      	ldrb	r2, [r5, #12]
 800ee60:	fbb3 f1f0 	udiv	r1, r3, r0
 800ee64:	f5c2 427f 	rsb	r2, r2, #65280	; 0xff00
 800ee68:	fb00 3111 	mls	r1, r0, r1, r3
 800ee6c:	b28b      	uxth	r3, r1
 800ee6e:	32fc      	adds	r2, #252	; 0xfc
 800ee70:	6869      	ldr	r1, [r5, #4]
 800ee72:	fbb1 f1f0 	udiv	r1, r1, r0
 800ee76:	1f0f      	subs	r7, r1, #4
 800ee78:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 800ee7c:	fb01 f103 	mul.w	r1, r1, r3
 800ee80:	443a      	add	r2, r7
 800ee82:	682b      	ldr	r3, [r5, #0]
 800ee84:	fa1f f882 	uxth.w	r8, r2
 800ee88:	3104      	adds	r1, #4
 800ee8a:	4419      	add	r1, r3
 800ee8c:	eba0 0008 	sub.w	r0, r0, r8
 800ee90:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 800ee94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee98:	9300      	str	r3, [sp, #0]
 800ee9a:	463a      	mov	r2, r7
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	a802      	add	r0, sp, #8
 800eea0:	f7fb fb5c 	bl	800a55c <ucdr_init_buffer_origin_offset>
 800eea4:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800eea8:	f102 0308 	add.w	r3, r2, #8
 800eeac:	42bb      	cmp	r3, r7
 800eeae:	d927      	bls.n	800ef00 <on_full_output_buffer_fragmented+0xe0>
 800eeb0:	4642      	mov	r2, r8
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	210d      	movs	r1, #13
 800eeb6:	a802      	add	r0, sp, #8
 800eeb8:	f7ff ff3a 	bl	800ed30 <uxr_buffer_submessage_header>
 800eebc:	8928      	ldrh	r0, [r5, #8]
 800eebe:	89eb      	ldrh	r3, [r5, #14]
 800eec0:	fbb3 f1f0 	udiv	r1, r3, r0
 800eec4:	fb00 3111 	mls	r1, r0, r1, r3
 800eec8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eecc:	b289      	uxth	r1, r1
 800eece:	fbb3 f3f0 	udiv	r3, r3, r0
 800eed2:	fb03 f301 	mul.w	r3, r3, r1
 800eed6:	50d7      	str	r7, [r2, r3]
 800eed8:	89e8      	ldrh	r0, [r5, #14]
 800eeda:	2101      	movs	r1, #1
 800eedc:	f005 fa44 	bl	8014368 <uxr_seq_num_add>
 800eee0:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800eee4:	81e8      	strh	r0, [r5, #14]
 800eee6:	1a52      	subs	r2, r2, r1
 800eee8:	4630      	mov	r0, r6
 800eeea:	f7fb fb49 	bl	800a580 <ucdr_init_buffer>
 800eeee:	4630      	mov	r0, r6
 800eef0:	490f      	ldr	r1, [pc, #60]	; (800ef30 <on_full_output_buffer_fragmented+0x110>)
 800eef2:	4622      	mov	r2, r4
 800eef4:	f7fb fb1a 	bl	800a52c <ucdr_set_on_full_buffer_callback>
 800eef8:	2000      	movs	r0, #0
 800eefa:	b00a      	add	sp, #40	; 0x28
 800eefc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef00:	b292      	uxth	r2, r2
 800ef02:	2302      	movs	r3, #2
 800ef04:	210d      	movs	r1, #13
 800ef06:	a802      	add	r0, sp, #8
 800ef08:	f7ff ff12 	bl	800ed30 <uxr_buffer_submessage_header>
 800ef0c:	8928      	ldrh	r0, [r5, #8]
 800ef0e:	89eb      	ldrh	r3, [r5, #14]
 800ef10:	fbb3 f2f0 	udiv	r2, r3, r0
 800ef14:	fb00 3212 	mls	r2, r0, r2, r3
 800ef18:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 800ef1c:	686b      	ldr	r3, [r5, #4]
 800ef1e:	fbb3 f3f0 	udiv	r3, r3, r0
 800ef22:	b292      	uxth	r2, r2
 800ef24:	6828      	ldr	r0, [r5, #0]
 800ef26:	fb03 f302 	mul.w	r3, r3, r2
 800ef2a:	3108      	adds	r1, #8
 800ef2c:	50c1      	str	r1, [r0, r3]
 800ef2e:	e7d3      	b.n	800eed8 <on_full_output_buffer_fragmented+0xb8>
 800ef30:	0800ee21 	.word	0x0800ee21

0800ef34 <uxr_prepare_output_stream>:
 800ef34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef36:	b087      	sub	sp, #28
 800ef38:	2407      	movs	r4, #7
 800ef3a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ef3c:	9202      	str	r2, [sp, #8]
 800ef3e:	2500      	movs	r5, #0
 800ef40:	1d32      	adds	r2, r6, #4
 800ef42:	e9cd 4500 	strd	r4, r5, [sp]
 800ef46:	9103      	str	r1, [sp, #12]
 800ef48:	461c      	mov	r4, r3
 800ef4a:	4606      	mov	r6, r0
 800ef4c:	f7ff fc4c 	bl	800e7e8 <uxr_prepare_stream_to_write_submessage>
 800ef50:	f080 0201 	eor.w	r2, r0, #1
 800ef54:	b2d2      	uxtb	r2, r2
 800ef56:	75a2      	strb	r2, [r4, #22]
 800ef58:	b112      	cbz	r2, 800ef60 <uxr_prepare_output_stream+0x2c>
 800ef5a:	4628      	mov	r0, r5
 800ef5c:	b007      	add	sp, #28
 800ef5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef60:	aa05      	add	r2, sp, #20
 800ef62:	9902      	ldr	r1, [sp, #8]
 800ef64:	4630      	mov	r0, r6
 800ef66:	f7ff fd79 	bl	800ea5c <uxr_init_base_object_request>
 800ef6a:	a905      	add	r1, sp, #20
 800ef6c:	4605      	mov	r5, r0
 800ef6e:	4620      	mov	r0, r4
 800ef70:	f001 f872 	bl	8010058 <uxr_serialize_WRITE_DATA_Payload_Data>
 800ef74:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800ef78:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 800ef7c:	1a52      	subs	r2, r2, r1
 800ef7e:	4620      	mov	r0, r4
 800ef80:	f7fb fafe 	bl	800a580 <ucdr_init_buffer>
 800ef84:	4620      	mov	r0, r4
 800ef86:	463a      	mov	r2, r7
 800ef88:	4631      	mov	r1, r6
 800ef8a:	f7fb facf 	bl	800a52c <ucdr_set_on_full_buffer_callback>
 800ef8e:	4628      	mov	r0, r5
 800ef90:	b007      	add	sp, #28
 800ef92:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ef94 <uxr_prepare_output_stream_fragmented>:
 800ef94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef98:	b093      	sub	sp, #76	; 0x4c
 800ef9a:	4605      	mov	r5, r0
 800ef9c:	9107      	str	r1, [sp, #28]
 800ef9e:	3008      	adds	r0, #8
 800efa0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800efa4:	9303      	str	r3, [sp, #12]
 800efa6:	9206      	str	r2, [sp, #24]
 800efa8:	f7ff fe8a 	bl	800ecc0 <uxr_get_output_reliable_stream>
 800efac:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800efb0:	2b01      	cmp	r3, #1
 800efb2:	f000 8094 	beq.w	800f0de <uxr_prepare_output_stream_fragmented+0x14a>
 800efb6:	4604      	mov	r4, r0
 800efb8:	2800      	cmp	r0, #0
 800efba:	f000 8090 	beq.w	800f0de <uxr_prepare_output_stream_fragmented+0x14a>
 800efbe:	f005 f9b3 	bl	8014328 <get_available_free_slots>
 800efc2:	2800      	cmp	r0, #0
 800efc4:	f000 8086 	beq.w	800f0d4 <uxr_prepare_output_stream_fragmented+0x140>
 800efc8:	8922      	ldrh	r2, [r4, #8]
 800efca:	89e7      	ldrh	r7, [r4, #14]
 800efcc:	fbb7 f8f2 	udiv	r8, r7, r2
 800efd0:	e9d4 3100 	ldrd	r3, r1, [r4]
 800efd4:	fb02 7818 	mls	r8, r2, r8, r7
 800efd8:	fa1f f888 	uxth.w	r8, r8
 800efdc:	fbb1 f2f2 	udiv	r2, r1, r2
 800efe0:	fb02 f808 	mul.w	r8, r2, r8
 800efe4:	f108 0804 	add.w	r8, r8, #4
 800efe8:	4498      	add	r8, r3
 800efea:	7b23      	ldrb	r3, [r4, #12]
 800efec:	f858 ac04 	ldr.w	sl, [r8, #-4]
 800eff0:	9204      	str	r2, [sp, #16]
 800eff2:	4553      	cmp	r3, sl
 800eff4:	f1a2 0b04 	sub.w	fp, r2, #4
 800eff8:	d37d      	bcc.n	800f0f6 <uxr_prepare_output_stream_fragmented+0x162>
 800effa:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800effc:	f8cd a000 	str.w	sl, [sp]
 800f000:	f1ab 0904 	sub.w	r9, fp, #4
 800f004:	eba9 0903 	sub.w	r9, r9, r3
 800f008:	3608      	adds	r6, #8
 800f00a:	a80a      	add	r0, sp, #40	; 0x28
 800f00c:	2300      	movs	r3, #0
 800f00e:	465a      	mov	r2, fp
 800f010:	4641      	mov	r1, r8
 800f012:	fa1f f989 	uxth.w	r9, r9
 800f016:	9605      	str	r6, [sp, #20]
 800f018:	f7fb faa0 	bl	800a55c <ucdr_init_buffer_origin_offset>
 800f01c:	455e      	cmp	r6, fp
 800f01e:	bf34      	ite	cc
 800f020:	2302      	movcc	r3, #2
 800f022:	2300      	movcs	r3, #0
 800f024:	464a      	mov	r2, r9
 800f026:	210d      	movs	r1, #13
 800f028:	a80a      	add	r0, sp, #40	; 0x28
 800f02a:	f7ff fe81 	bl	800ed30 <uxr_buffer_submessage_header>
 800f02e:	8920      	ldrh	r0, [r4, #8]
 800f030:	fbb7 f3f0 	udiv	r3, r7, r0
 800f034:	e9d4 2100 	ldrd	r2, r1, [r4]
 800f038:	fb00 7313 	mls	r3, r0, r3, r7
 800f03c:	b29b      	uxth	r3, r3
 800f03e:	fbb1 f1f0 	udiv	r1, r1, r0
 800f042:	fb03 f301 	mul.w	r3, r3, r1
 800f046:	4638      	mov	r0, r7
 800f048:	f842 b003 	str.w	fp, [r2, r3]
 800f04c:	2101      	movs	r1, #1
 800f04e:	f005 f98b 	bl	8014368 <uxr_seq_num_add>
 800f052:	9b04      	ldr	r3, [sp, #16]
 800f054:	9e03      	ldr	r6, [sp, #12]
 800f056:	f1a3 0208 	sub.w	r2, r3, #8
 800f05a:	f10a 0104 	add.w	r1, sl, #4
 800f05e:	4607      	mov	r7, r0
 800f060:	eba2 020a 	sub.w	r2, r2, sl
 800f064:	4441      	add	r1, r8
 800f066:	4630      	mov	r0, r6
 800f068:	f7fb fa8a 	bl	800a580 <ucdr_init_buffer>
 800f06c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f06e:	81e7      	strh	r7, [r4, #14]
 800f070:	1d1a      	adds	r2, r3, #4
 800f072:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800f076:	bf28      	it	cs
 800f078:	2200      	movcs	r2, #0
 800f07a:	b292      	uxth	r2, r2
 800f07c:	2300      	movs	r3, #0
 800f07e:	2107      	movs	r1, #7
 800f080:	4630      	mov	r0, r6
 800f082:	f7ff fe55 	bl	800ed30 <uxr_buffer_submessage_header>
 800f086:	9906      	ldr	r1, [sp, #24]
 800f088:	aa09      	add	r2, sp, #36	; 0x24
 800f08a:	4628      	mov	r0, r5
 800f08c:	f7ff fce6 	bl	800ea5c <uxr_init_base_object_request>
 800f090:	4604      	mov	r4, r0
 800f092:	b328      	cbz	r0, 800f0e0 <uxr_prepare_output_stream_fragmented+0x14c>
 800f094:	9e03      	ldr	r6, [sp, #12]
 800f096:	a909      	add	r1, sp, #36	; 0x24
 800f098:	4630      	mov	r0, r6
 800f09a:	f000 ffdd 	bl	8010058 <uxr_serialize_WRITE_DATA_Payload_Data>
 800f09e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800f0a2:	4630      	mov	r0, r6
 800f0a4:	1a52      	subs	r2, r2, r1
 800f0a6:	f7fb fa6b 	bl	800a580 <ucdr_init_buffer>
 800f0aa:	9a05      	ldr	r2, [sp, #20]
 800f0ac:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 800f0b0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f0b2:	9b07      	ldr	r3, [sp, #28]
 800f0b4:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 800f0b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f0ba:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
 800f0be:	4630      	mov	r0, r6
 800f0c0:	4919      	ldr	r1, [pc, #100]	; (800f128 <uxr_prepare_output_stream_fragmented+0x194>)
 800f0c2:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800f0c6:	462a      	mov	r2, r5
 800f0c8:	f7fb fa30 	bl	800a52c <ucdr_set_on_full_buffer_callback>
 800f0cc:	4620      	mov	r0, r4
 800f0ce:	b013      	add	sp, #76	; 0x4c
 800f0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0d4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f0d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f0d8:	4628      	mov	r0, r5
 800f0da:	4798      	blx	r3
 800f0dc:	b920      	cbnz	r0, 800f0e8 <uxr_prepare_output_stream_fragmented+0x154>
 800f0de:	2400      	movs	r4, #0
 800f0e0:	4620      	mov	r0, r4
 800f0e2:	b013      	add	sp, #76	; 0x4c
 800f0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0e8:	4620      	mov	r0, r4
 800f0ea:	f005 f91d 	bl	8014328 <get_available_free_slots>
 800f0ee:	2800      	cmp	r0, #0
 800f0f0:	f47f af6a 	bne.w	800efc8 <uxr_prepare_output_stream_fragmented+0x34>
 800f0f4:	e7f3      	b.n	800f0de <uxr_prepare_output_stream_fragmented+0x14a>
 800f0f6:	4638      	mov	r0, r7
 800f0f8:	2101      	movs	r1, #1
 800f0fa:	f005 f935 	bl	8014368 <uxr_seq_num_add>
 800f0fe:	8922      	ldrh	r2, [r4, #8]
 800f100:	fbb0 f8f2 	udiv	r8, r0, r2
 800f104:	fb02 0818 	mls	r8, r2, r8, r0
 800f108:	fa1f f888 	uxth.w	r8, r8
 800f10c:	6863      	ldr	r3, [r4, #4]
 800f10e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f112:	6822      	ldr	r2, [r4, #0]
 800f114:	fb08 f803 	mul.w	r8, r8, r3
 800f118:	f108 0804 	add.w	r8, r8, #4
 800f11c:	4490      	add	r8, r2
 800f11e:	7b23      	ldrb	r3, [r4, #12]
 800f120:	f858 ac04 	ldr.w	sl, [r8, #-4]
 800f124:	4607      	mov	r7, r0
 800f126:	e768      	b.n	800effa <uxr_prepare_output_stream_fragmented+0x66>
 800f128:	0800ee21 	.word	0x0800ee21

0800f12c <uxr_serialize_message_header>:
 800f12c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f12e:	b083      	sub	sp, #12
 800f130:	4616      	mov	r6, r2
 800f132:	4604      	mov	r4, r0
 800f134:	9301      	str	r3, [sp, #4]
 800f136:	460d      	mov	r5, r1
 800f138:	9f08      	ldr	r7, [sp, #32]
 800f13a:	f7fa f8e1 	bl	8009300 <ucdr_serialize_uint8_t>
 800f13e:	4631      	mov	r1, r6
 800f140:	4620      	mov	r0, r4
 800f142:	f7fa f8dd 	bl	8009300 <ucdr_serialize_uint8_t>
 800f146:	9a01      	ldr	r2, [sp, #4]
 800f148:	4620      	mov	r0, r4
 800f14a:	2101      	movs	r1, #1
 800f14c:	f7fa f984 	bl	8009458 <ucdr_serialize_endian_uint16_t>
 800f150:	062b      	lsls	r3, r5, #24
 800f152:	d501      	bpl.n	800f158 <uxr_serialize_message_header+0x2c>
 800f154:	b003      	add	sp, #12
 800f156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f158:	4639      	mov	r1, r7
 800f15a:	4620      	mov	r0, r4
 800f15c:	2204      	movs	r2, #4
 800f15e:	b003      	add	sp, #12
 800f160:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f164:	f004 b9e2 	b.w	801352c <ucdr_serialize_array_uint8_t>

0800f168 <uxr_deserialize_message_header>:
 800f168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f16a:	b083      	sub	sp, #12
 800f16c:	4616      	mov	r6, r2
 800f16e:	4604      	mov	r4, r0
 800f170:	9301      	str	r3, [sp, #4]
 800f172:	460d      	mov	r5, r1
 800f174:	9f08      	ldr	r7, [sp, #32]
 800f176:	f7fa f8d9 	bl	800932c <ucdr_deserialize_uint8_t>
 800f17a:	4631      	mov	r1, r6
 800f17c:	4620      	mov	r0, r4
 800f17e:	f7fa f8d5 	bl	800932c <ucdr_deserialize_uint8_t>
 800f182:	9a01      	ldr	r2, [sp, #4]
 800f184:	4620      	mov	r0, r4
 800f186:	2101      	movs	r1, #1
 800f188:	f7fa fa5a 	bl	8009640 <ucdr_deserialize_endian_uint16_t>
 800f18c:	f995 3000 	ldrsb.w	r3, [r5]
 800f190:	2b00      	cmp	r3, #0
 800f192:	da01      	bge.n	800f198 <uxr_deserialize_message_header+0x30>
 800f194:	b003      	add	sp, #12
 800f196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f198:	4639      	mov	r1, r7
 800f19a:	4620      	mov	r0, r4
 800f19c:	2204      	movs	r2, #4
 800f19e:	b003      	add	sp, #12
 800f1a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f1a4:	f004 ba26 	b.w	80135f4 <ucdr_deserialize_array_uint8_t>

0800f1a8 <uxr_serialize_submessage_header>:
 800f1a8:	b530      	push	{r4, r5, lr}
 800f1aa:	b083      	sub	sp, #12
 800f1ac:	4615      	mov	r5, r2
 800f1ae:	4604      	mov	r4, r0
 800f1b0:	9301      	str	r3, [sp, #4]
 800f1b2:	f7fa f8a5 	bl	8009300 <ucdr_serialize_uint8_t>
 800f1b6:	4629      	mov	r1, r5
 800f1b8:	4620      	mov	r0, r4
 800f1ba:	f7fa f8a1 	bl	8009300 <ucdr_serialize_uint8_t>
 800f1be:	9a01      	ldr	r2, [sp, #4]
 800f1c0:	4620      	mov	r0, r4
 800f1c2:	2101      	movs	r1, #1
 800f1c4:	b003      	add	sp, #12
 800f1c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1ca:	f7fa b945 	b.w	8009458 <ucdr_serialize_endian_uint16_t>
 800f1ce:	bf00      	nop

0800f1d0 <uxr_deserialize_submessage_header>:
 800f1d0:	b530      	push	{r4, r5, lr}
 800f1d2:	b083      	sub	sp, #12
 800f1d4:	4615      	mov	r5, r2
 800f1d6:	4604      	mov	r4, r0
 800f1d8:	9301      	str	r3, [sp, #4]
 800f1da:	f7fa f8a7 	bl	800932c <ucdr_deserialize_uint8_t>
 800f1de:	4629      	mov	r1, r5
 800f1e0:	4620      	mov	r0, r4
 800f1e2:	f7fa f8a3 	bl	800932c <ucdr_deserialize_uint8_t>
 800f1e6:	9a01      	ldr	r2, [sp, #4]
 800f1e8:	4620      	mov	r0, r4
 800f1ea:	2101      	movs	r1, #1
 800f1ec:	b003      	add	sp, #12
 800f1ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1f2:	f7fa ba25 	b.w	8009640 <ucdr_deserialize_endian_uint16_t>
 800f1f6:	bf00      	nop

0800f1f8 <uxr_serialize_CLIENT_Representation>:
 800f1f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1fc:	2204      	movs	r2, #4
 800f1fe:	460c      	mov	r4, r1
 800f200:	4605      	mov	r5, r0
 800f202:	f004 f993 	bl	801352c <ucdr_serialize_array_uint8_t>
 800f206:	1d21      	adds	r1, r4, #4
 800f208:	4607      	mov	r7, r0
 800f20a:	2202      	movs	r2, #2
 800f20c:	4628      	mov	r0, r5
 800f20e:	f004 f98d 	bl	801352c <ucdr_serialize_array_uint8_t>
 800f212:	1da1      	adds	r1, r4, #6
 800f214:	4007      	ands	r7, r0
 800f216:	2202      	movs	r2, #2
 800f218:	4628      	mov	r0, r5
 800f21a:	f004 f987 	bl	801352c <ucdr_serialize_array_uint8_t>
 800f21e:	fa5f f887 	uxtb.w	r8, r7
 800f222:	2204      	movs	r2, #4
 800f224:	4607      	mov	r7, r0
 800f226:	f104 0108 	add.w	r1, r4, #8
 800f22a:	4628      	mov	r0, r5
 800f22c:	f004 f97e 	bl	801352c <ucdr_serialize_array_uint8_t>
 800f230:	ea08 0707 	and.w	r7, r8, r7
 800f234:	7b21      	ldrb	r1, [r4, #12]
 800f236:	4680      	mov	r8, r0
 800f238:	4628      	mov	r0, r5
 800f23a:	f7fa f861 	bl	8009300 <ucdr_serialize_uint8_t>
 800f23e:	ea08 0807 	and.w	r8, r8, r7
 800f242:	7b61      	ldrb	r1, [r4, #13]
 800f244:	4607      	mov	r7, r0
 800f246:	4628      	mov	r0, r5
 800f248:	f7fa f82a 	bl	80092a0 <ucdr_serialize_bool>
 800f24c:	7b63      	ldrb	r3, [r4, #13]
 800f24e:	ea08 0707 	and.w	r7, r8, r7
 800f252:	ea07 0600 	and.w	r6, r7, r0
 800f256:	b933      	cbnz	r3, 800f266 <uxr_serialize_CLIENT_Representation+0x6e>
 800f258:	8ba1      	ldrh	r1, [r4, #28]
 800f25a:	4628      	mov	r0, r5
 800f25c:	f7fa f87c 	bl	8009358 <ucdr_serialize_uint16_t>
 800f260:	4030      	ands	r0, r6
 800f262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f266:	6921      	ldr	r1, [r4, #16]
 800f268:	4628      	mov	r0, r5
 800f26a:	f7fa fa5f 	bl	800972c <ucdr_serialize_uint32_t>
 800f26e:	6923      	ldr	r3, [r4, #16]
 800f270:	b1cb      	cbz	r3, 800f2a6 <uxr_serialize_CLIENT_Representation+0xae>
 800f272:	b1d0      	cbz	r0, 800f2aa <uxr_serialize_CLIENT_Representation+0xb2>
 800f274:	46a0      	mov	r8, r4
 800f276:	f04f 0900 	mov.w	r9, #0
 800f27a:	e002      	b.n	800f282 <uxr_serialize_CLIENT_Representation+0x8a>
 800f27c:	f108 0808 	add.w	r8, r8, #8
 800f280:	b198      	cbz	r0, 800f2aa <uxr_serialize_CLIENT_Representation+0xb2>
 800f282:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800f286:	4628      	mov	r0, r5
 800f288:	f004 fa70 	bl	801376c <ucdr_serialize_string>
 800f28c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800f290:	4607      	mov	r7, r0
 800f292:	4628      	mov	r0, r5
 800f294:	f004 fa6a 	bl	801376c <ucdr_serialize_string>
 800f298:	6923      	ldr	r3, [r4, #16]
 800f29a:	f109 0901 	add.w	r9, r9, #1
 800f29e:	4038      	ands	r0, r7
 800f2a0:	4599      	cmp	r9, r3
 800f2a2:	b2c0      	uxtb	r0, r0
 800f2a4:	d3ea      	bcc.n	800f27c <uxr_serialize_CLIENT_Representation+0x84>
 800f2a6:	4006      	ands	r6, r0
 800f2a8:	e7d6      	b.n	800f258 <uxr_serialize_CLIENT_Representation+0x60>
 800f2aa:	2600      	movs	r6, #0
 800f2ac:	e7d4      	b.n	800f258 <uxr_serialize_CLIENT_Representation+0x60>
 800f2ae:	bf00      	nop

0800f2b0 <uxr_deserialize_CLIENT_Representation>:
 800f2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2b4:	2204      	movs	r2, #4
 800f2b6:	460c      	mov	r4, r1
 800f2b8:	4605      	mov	r5, r0
 800f2ba:	f004 f99b 	bl	80135f4 <ucdr_deserialize_array_uint8_t>
 800f2be:	1d21      	adds	r1, r4, #4
 800f2c0:	4607      	mov	r7, r0
 800f2c2:	2202      	movs	r2, #2
 800f2c4:	4628      	mov	r0, r5
 800f2c6:	f004 f995 	bl	80135f4 <ucdr_deserialize_array_uint8_t>
 800f2ca:	1da1      	adds	r1, r4, #6
 800f2cc:	4007      	ands	r7, r0
 800f2ce:	2202      	movs	r2, #2
 800f2d0:	4628      	mov	r0, r5
 800f2d2:	f004 f98f 	bl	80135f4 <ucdr_deserialize_array_uint8_t>
 800f2d6:	fa5f f887 	uxtb.w	r8, r7
 800f2da:	2204      	movs	r2, #4
 800f2dc:	4607      	mov	r7, r0
 800f2de:	f104 0108 	add.w	r1, r4, #8
 800f2e2:	4628      	mov	r0, r5
 800f2e4:	f004 f986 	bl	80135f4 <ucdr_deserialize_array_uint8_t>
 800f2e8:	ea08 0707 	and.w	r7, r8, r7
 800f2ec:	f104 010c 	add.w	r1, r4, #12
 800f2f0:	4680      	mov	r8, r0
 800f2f2:	4628      	mov	r0, r5
 800f2f4:	f7fa f81a 	bl	800932c <ucdr_deserialize_uint8_t>
 800f2f8:	ea08 0807 	and.w	r8, r8, r7
 800f2fc:	f104 010d 	add.w	r1, r4, #13
 800f300:	4607      	mov	r7, r0
 800f302:	4628      	mov	r0, r5
 800f304:	f7f9 ffe2 	bl	80092cc <ucdr_deserialize_bool>
 800f308:	7b63      	ldrb	r3, [r4, #13]
 800f30a:	ea08 0707 	and.w	r7, r8, r7
 800f30e:	ea07 0600 	and.w	r6, r7, r0
 800f312:	b93b      	cbnz	r3, 800f324 <uxr_deserialize_CLIENT_Representation+0x74>
 800f314:	f104 011c 	add.w	r1, r4, #28
 800f318:	4628      	mov	r0, r5
 800f31a:	f7fa f91d 	bl	8009558 <ucdr_deserialize_uint16_t>
 800f31e:	4030      	ands	r0, r6
 800f320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f324:	f104 0110 	add.w	r1, r4, #16
 800f328:	4628      	mov	r0, r5
 800f32a:	f7fa fb2f 	bl	800998c <ucdr_deserialize_uint32_t>
 800f32e:	6923      	ldr	r3, [r4, #16]
 800f330:	2b01      	cmp	r3, #1
 800f332:	d903      	bls.n	800f33c <uxr_deserialize_CLIENT_Representation+0x8c>
 800f334:	2301      	movs	r3, #1
 800f336:	75ab      	strb	r3, [r5, #22]
 800f338:	2600      	movs	r6, #0
 800f33a:	e7eb      	b.n	800f314 <uxr_deserialize_CLIENT_Representation+0x64>
 800f33c:	b1fb      	cbz	r3, 800f37e <uxr_deserialize_CLIENT_Representation+0xce>
 800f33e:	2800      	cmp	r0, #0
 800f340:	d0fa      	beq.n	800f338 <uxr_deserialize_CLIENT_Representation+0x88>
 800f342:	46a0      	mov	r8, r4
 800f344:	f04f 0900 	mov.w	r9, #0
 800f348:	e003      	b.n	800f352 <uxr_deserialize_CLIENT_Representation+0xa2>
 800f34a:	f108 0808 	add.w	r8, r8, #8
 800f34e:	2800      	cmp	r0, #0
 800f350:	d0f2      	beq.n	800f338 <uxr_deserialize_CLIENT_Representation+0x88>
 800f352:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800f356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f35a:	4628      	mov	r0, r5
 800f35c:	f004 fa16 	bl	801378c <ucdr_deserialize_string>
 800f360:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800f364:	4607      	mov	r7, r0
 800f366:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f36a:	4628      	mov	r0, r5
 800f36c:	f004 fa0e 	bl	801378c <ucdr_deserialize_string>
 800f370:	6923      	ldr	r3, [r4, #16]
 800f372:	f109 0901 	add.w	r9, r9, #1
 800f376:	4038      	ands	r0, r7
 800f378:	4599      	cmp	r9, r3
 800f37a:	b2c0      	uxtb	r0, r0
 800f37c:	d3e5      	bcc.n	800f34a <uxr_deserialize_CLIENT_Representation+0x9a>
 800f37e:	4006      	ands	r6, r0
 800f380:	e7c8      	b.n	800f314 <uxr_deserialize_CLIENT_Representation+0x64>
 800f382:	bf00      	nop

0800f384 <uxr_serialize_AGENT_Representation>:
 800f384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f388:	2204      	movs	r2, #4
 800f38a:	460c      	mov	r4, r1
 800f38c:	4605      	mov	r5, r0
 800f38e:	f004 f8cd 	bl	801352c <ucdr_serialize_array_uint8_t>
 800f392:	1d21      	adds	r1, r4, #4
 800f394:	4606      	mov	r6, r0
 800f396:	2202      	movs	r2, #2
 800f398:	4628      	mov	r0, r5
 800f39a:	f004 f8c7 	bl	801352c <ucdr_serialize_array_uint8_t>
 800f39e:	1da1      	adds	r1, r4, #6
 800f3a0:	4006      	ands	r6, r0
 800f3a2:	2202      	movs	r2, #2
 800f3a4:	4628      	mov	r0, r5
 800f3a6:	f004 f8c1 	bl	801352c <ucdr_serialize_array_uint8_t>
 800f3aa:	b2f6      	uxtb	r6, r6
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	7a21      	ldrb	r1, [r4, #8]
 800f3b0:	4628      	mov	r0, r5
 800f3b2:	401e      	ands	r6, r3
 800f3b4:	f7f9 ff74 	bl	80092a0 <ucdr_serialize_bool>
 800f3b8:	7a23      	ldrb	r3, [r4, #8]
 800f3ba:	ea00 0706 	and.w	r7, r0, r6
 800f3be:	b913      	cbnz	r3, 800f3c6 <uxr_serialize_AGENT_Representation+0x42>
 800f3c0:	4638      	mov	r0, r7
 800f3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3c6:	68e1      	ldr	r1, [r4, #12]
 800f3c8:	4628      	mov	r0, r5
 800f3ca:	f7fa f9af 	bl	800972c <ucdr_serialize_uint32_t>
 800f3ce:	68e3      	ldr	r3, [r4, #12]
 800f3d0:	b313      	cbz	r3, 800f418 <uxr_serialize_AGENT_Representation+0x94>
 800f3d2:	b1e8      	cbz	r0, 800f410 <uxr_serialize_AGENT_Representation+0x8c>
 800f3d4:	46a0      	mov	r8, r4
 800f3d6:	f04f 0900 	mov.w	r9, #0
 800f3da:	e002      	b.n	800f3e2 <uxr_serialize_AGENT_Representation+0x5e>
 800f3dc:	f108 0808 	add.w	r8, r8, #8
 800f3e0:	b1b3      	cbz	r3, 800f410 <uxr_serialize_AGENT_Representation+0x8c>
 800f3e2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f3e6:	4628      	mov	r0, r5
 800f3e8:	f004 f9c0 	bl	801376c <ucdr_serialize_string>
 800f3ec:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800f3f0:	4606      	mov	r6, r0
 800f3f2:	4628      	mov	r0, r5
 800f3f4:	f004 f9ba 	bl	801376c <ucdr_serialize_string>
 800f3f8:	68e2      	ldr	r2, [r4, #12]
 800f3fa:	f109 0901 	add.w	r9, r9, #1
 800f3fe:	ea06 0300 	and.w	r3, r6, r0
 800f402:	4591      	cmp	r9, r2
 800f404:	b2db      	uxtb	r3, r3
 800f406:	d3e9      	bcc.n	800f3dc <uxr_serialize_AGENT_Representation+0x58>
 800f408:	401f      	ands	r7, r3
 800f40a:	4638      	mov	r0, r7
 800f40c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f410:	2700      	movs	r7, #0
 800f412:	4638      	mov	r0, r7
 800f414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f418:	4007      	ands	r7, r0
 800f41a:	e7d1      	b.n	800f3c0 <uxr_serialize_AGENT_Representation+0x3c>

0800f41c <uxr_serialize_ObjectVariant.part.0>:
 800f41c:	b570      	push	{r4, r5, r6, lr}
 800f41e:	780b      	ldrb	r3, [r1, #0]
 800f420:	3b01      	subs	r3, #1
 800f422:	460c      	mov	r4, r1
 800f424:	4605      	mov	r5, r0
 800f426:	2b0d      	cmp	r3, #13
 800f428:	d869      	bhi.n	800f4fe <uxr_serialize_ObjectVariant.part.0+0xe2>
 800f42a:	e8df f003 	tbb	[pc, r3]
 800f42e:	074a      	.short	0x074a
 800f430:	07073030 	.word	0x07073030
 800f434:	21680707 	.word	0x21680707
 800f438:	45632121 	.word	0x45632121
 800f43c:	7909      	ldrb	r1, [r1, #4]
 800f43e:	f7f9 ff5f 	bl	8009300 <ucdr_serialize_uint8_t>
 800f442:	4606      	mov	r6, r0
 800f444:	b158      	cbz	r0, 800f45e <uxr_serialize_ObjectVariant.part.0+0x42>
 800f446:	7923      	ldrb	r3, [r4, #4]
 800f448:	2b02      	cmp	r3, #2
 800f44a:	d003      	beq.n	800f454 <uxr_serialize_ObjectVariant.part.0+0x38>
 800f44c:	2b03      	cmp	r3, #3
 800f44e:	d029      	beq.n	800f4a4 <uxr_serialize_ObjectVariant.part.0+0x88>
 800f450:	2b01      	cmp	r3, #1
 800f452:	d104      	bne.n	800f45e <uxr_serialize_ObjectVariant.part.0+0x42>
 800f454:	68a1      	ldr	r1, [r4, #8]
 800f456:	4628      	mov	r0, r5
 800f458:	f004 f988 	bl	801376c <ucdr_serialize_string>
 800f45c:	4606      	mov	r6, r0
 800f45e:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800f462:	4628      	mov	r0, r5
 800f464:	2202      	movs	r2, #2
 800f466:	f004 f861 	bl	801352c <ucdr_serialize_array_uint8_t>
 800f46a:	4030      	ands	r0, r6
 800f46c:	b2c0      	uxtb	r0, r0
 800f46e:	bd70      	pop	{r4, r5, r6, pc}
 800f470:	7909      	ldrb	r1, [r1, #4]
 800f472:	f7f9 ff45 	bl	8009300 <ucdr_serialize_uint8_t>
 800f476:	b1e8      	cbz	r0, 800f4b4 <uxr_serialize_ObjectVariant.part.0+0x98>
 800f478:	7923      	ldrb	r3, [r4, #4]
 800f47a:	2b01      	cmp	r3, #1
 800f47c:	d001      	beq.n	800f482 <uxr_serialize_ObjectVariant.part.0+0x66>
 800f47e:	2b02      	cmp	r3, #2
 800f480:	d13d      	bne.n	800f4fe <uxr_serialize_ObjectVariant.part.0+0xe2>
 800f482:	68a1      	ldr	r1, [r4, #8]
 800f484:	4628      	mov	r0, r5
 800f486:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f48a:	f004 b96f 	b.w	801376c <ucdr_serialize_string>
 800f48e:	7909      	ldrb	r1, [r1, #4]
 800f490:	f7f9 ff36 	bl	8009300 <ucdr_serialize_uint8_t>
 800f494:	4606      	mov	r6, r0
 800f496:	2800      	cmp	r0, #0
 800f498:	d0e1      	beq.n	800f45e <uxr_serialize_ObjectVariant.part.0+0x42>
 800f49a:	7923      	ldrb	r3, [r4, #4]
 800f49c:	2b02      	cmp	r3, #2
 800f49e:	d0d9      	beq.n	800f454 <uxr_serialize_ObjectVariant.part.0+0x38>
 800f4a0:	2b03      	cmp	r3, #3
 800f4a2:	d1dc      	bne.n	800f45e <uxr_serialize_ObjectVariant.part.0+0x42>
 800f4a4:	68a2      	ldr	r2, [r4, #8]
 800f4a6:	f104 010c 	add.w	r1, r4, #12
 800f4aa:	4628      	mov	r0, r5
 800f4ac:	f004 f932 	bl	8013714 <ucdr_serialize_sequence_uint8_t>
 800f4b0:	4606      	mov	r6, r0
 800f4b2:	e7d4      	b.n	800f45e <uxr_serialize_ObjectVariant.part.0+0x42>
 800f4b4:	2000      	movs	r0, #0
 800f4b6:	bd70      	pop	{r4, r5, r6, pc}
 800f4b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f4bc:	3104      	adds	r1, #4
 800f4be:	f7ff be9b 	b.w	800f1f8 <uxr_serialize_CLIENT_Representation>
 800f4c2:	7909      	ldrb	r1, [r1, #4]
 800f4c4:	f7f9 ff1c 	bl	8009300 <ucdr_serialize_uint8_t>
 800f4c8:	4606      	mov	r6, r0
 800f4ca:	b158      	cbz	r0, 800f4e4 <uxr_serialize_ObjectVariant.part.0+0xc8>
 800f4cc:	7923      	ldrb	r3, [r4, #4]
 800f4ce:	2b02      	cmp	r3, #2
 800f4d0:	d003      	beq.n	800f4da <uxr_serialize_ObjectVariant.part.0+0xbe>
 800f4d2:	2b03      	cmp	r3, #3
 800f4d4:	d015      	beq.n	800f502 <uxr_serialize_ObjectVariant.part.0+0xe6>
 800f4d6:	2b01      	cmp	r3, #1
 800f4d8:	d104      	bne.n	800f4e4 <uxr_serialize_ObjectVariant.part.0+0xc8>
 800f4da:	68a1      	ldr	r1, [r4, #8]
 800f4dc:	4628      	mov	r0, r5
 800f4de:	f004 f945 	bl	801376c <ucdr_serialize_string>
 800f4e2:	4606      	mov	r6, r0
 800f4e4:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800f4e8:	4628      	mov	r0, r5
 800f4ea:	f7fa fc45 	bl	8009d78 <ucdr_serialize_int16_t>
 800f4ee:	4030      	ands	r0, r6
 800f4f0:	b2c0      	uxtb	r0, r0
 800f4f2:	bd70      	pop	{r4, r5, r6, pc}
 800f4f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f4f8:	3104      	adds	r1, #4
 800f4fa:	f7ff bf43 	b.w	800f384 <uxr_serialize_AGENT_Representation>
 800f4fe:	2001      	movs	r0, #1
 800f500:	bd70      	pop	{r4, r5, r6, pc}
 800f502:	68a2      	ldr	r2, [r4, #8]
 800f504:	f104 010c 	add.w	r1, r4, #12
 800f508:	4628      	mov	r0, r5
 800f50a:	f004 f903 	bl	8013714 <ucdr_serialize_sequence_uint8_t>
 800f50e:	4606      	mov	r6, r0
 800f510:	e7e8      	b.n	800f4e4 <uxr_serialize_ObjectVariant.part.0+0xc8>
 800f512:	bf00      	nop

0800f514 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800f514:	b570      	push	{r4, r5, r6, lr}
 800f516:	460d      	mov	r5, r1
 800f518:	7809      	ldrb	r1, [r1, #0]
 800f51a:	4606      	mov	r6, r0
 800f51c:	f7f9 fec0 	bl	80092a0 <ucdr_serialize_bool>
 800f520:	782b      	ldrb	r3, [r5, #0]
 800f522:	4604      	mov	r4, r0
 800f524:	b94b      	cbnz	r3, 800f53a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800f526:	7a29      	ldrb	r1, [r5, #8]
 800f528:	4630      	mov	r0, r6
 800f52a:	f7f9 feb9 	bl	80092a0 <ucdr_serialize_bool>
 800f52e:	7a2b      	ldrb	r3, [r5, #8]
 800f530:	4004      	ands	r4, r0
 800f532:	b2e4      	uxtb	r4, r4
 800f534:	b943      	cbnz	r3, 800f548 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800f536:	4620      	mov	r0, r4
 800f538:	bd70      	pop	{r4, r5, r6, pc}
 800f53a:	6869      	ldr	r1, [r5, #4]
 800f53c:	4630      	mov	r0, r6
 800f53e:	f004 f915 	bl	801376c <ucdr_serialize_string>
 800f542:	4004      	ands	r4, r0
 800f544:	b2e4      	uxtb	r4, r4
 800f546:	e7ee      	b.n	800f526 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800f548:	68e9      	ldr	r1, [r5, #12]
 800f54a:	4630      	mov	r0, r6
 800f54c:	f004 f90e 	bl	801376c <ucdr_serialize_string>
 800f550:	4004      	ands	r4, r0
 800f552:	4620      	mov	r0, r4
 800f554:	bd70      	pop	{r4, r5, r6, pc}
 800f556:	bf00      	nop

0800f558 <uxr_serialize_OBJK_Topic_Binary>:
 800f558:	b570      	push	{r4, r5, r6, lr}
 800f55a:	460d      	mov	r5, r1
 800f55c:	6809      	ldr	r1, [r1, #0]
 800f55e:	4606      	mov	r6, r0
 800f560:	f004 f904 	bl	801376c <ucdr_serialize_string>
 800f564:	7929      	ldrb	r1, [r5, #4]
 800f566:	4604      	mov	r4, r0
 800f568:	4630      	mov	r0, r6
 800f56a:	f7f9 fe99 	bl	80092a0 <ucdr_serialize_bool>
 800f56e:	792b      	ldrb	r3, [r5, #4]
 800f570:	4004      	ands	r4, r0
 800f572:	b2e4      	uxtb	r4, r4
 800f574:	b943      	cbnz	r3, 800f588 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800f576:	7b29      	ldrb	r1, [r5, #12]
 800f578:	4630      	mov	r0, r6
 800f57a:	f7f9 fe91 	bl	80092a0 <ucdr_serialize_bool>
 800f57e:	7b2b      	ldrb	r3, [r5, #12]
 800f580:	4004      	ands	r4, r0
 800f582:	b93b      	cbnz	r3, 800f594 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800f584:	4620      	mov	r0, r4
 800f586:	bd70      	pop	{r4, r5, r6, pc}
 800f588:	68a9      	ldr	r1, [r5, #8]
 800f58a:	4630      	mov	r0, r6
 800f58c:	f004 f8ee 	bl	801376c <ucdr_serialize_string>
 800f590:	4004      	ands	r4, r0
 800f592:	e7f0      	b.n	800f576 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800f594:	6929      	ldr	r1, [r5, #16]
 800f596:	4630      	mov	r0, r6
 800f598:	f004 f8e8 	bl	801376c <ucdr_serialize_string>
 800f59c:	4004      	ands	r4, r0
 800f59e:	b2e4      	uxtb	r4, r4
 800f5a0:	4620      	mov	r0, r4
 800f5a2:	bd70      	pop	{r4, r5, r6, pc}

0800f5a4 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800f5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5a8:	460c      	mov	r4, r1
 800f5aa:	7809      	ldrb	r1, [r1, #0]
 800f5ac:	4606      	mov	r6, r0
 800f5ae:	f7f9 fe77 	bl	80092a0 <ucdr_serialize_bool>
 800f5b2:	7823      	ldrb	r3, [r4, #0]
 800f5b4:	4605      	mov	r5, r0
 800f5b6:	b96b      	cbnz	r3, 800f5d4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800f5b8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800f5bc:	4630      	mov	r0, r6
 800f5be:	f7f9 fe6f 	bl	80092a0 <ucdr_serialize_bool>
 800f5c2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f5c6:	4005      	ands	r5, r0
 800f5c8:	b2ed      	uxtb	r5, r5
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d169      	bne.n	800f6a2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800f5ce:	4628      	mov	r0, r5
 800f5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5d4:	6861      	ldr	r1, [r4, #4]
 800f5d6:	4630      	mov	r0, r6
 800f5d8:	f7fa f8a8 	bl	800972c <ucdr_serialize_uint32_t>
 800f5dc:	6863      	ldr	r3, [r4, #4]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d06b      	beq.n	800f6ba <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800f5e2:	2800      	cmp	r0, #0
 800f5e4:	d067      	beq.n	800f6b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f5e6:	68a1      	ldr	r1, [r4, #8]
 800f5e8:	4630      	mov	r0, r6
 800f5ea:	f004 f8bf 	bl	801376c <ucdr_serialize_string>
 800f5ee:	6863      	ldr	r3, [r4, #4]
 800f5f0:	2b01      	cmp	r3, #1
 800f5f2:	d953      	bls.n	800f69c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f5f4:	2800      	cmp	r0, #0
 800f5f6:	d05e      	beq.n	800f6b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f5f8:	68e1      	ldr	r1, [r4, #12]
 800f5fa:	4630      	mov	r0, r6
 800f5fc:	f004 f8b6 	bl	801376c <ucdr_serialize_string>
 800f600:	6863      	ldr	r3, [r4, #4]
 800f602:	2b02      	cmp	r3, #2
 800f604:	d94a      	bls.n	800f69c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f606:	2800      	cmp	r0, #0
 800f608:	d055      	beq.n	800f6b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f60a:	6921      	ldr	r1, [r4, #16]
 800f60c:	4630      	mov	r0, r6
 800f60e:	f004 f8ad 	bl	801376c <ucdr_serialize_string>
 800f612:	6863      	ldr	r3, [r4, #4]
 800f614:	2b03      	cmp	r3, #3
 800f616:	d941      	bls.n	800f69c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f618:	2800      	cmp	r0, #0
 800f61a:	d04c      	beq.n	800f6b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f61c:	6961      	ldr	r1, [r4, #20]
 800f61e:	4630      	mov	r0, r6
 800f620:	f004 f8a4 	bl	801376c <ucdr_serialize_string>
 800f624:	6863      	ldr	r3, [r4, #4]
 800f626:	2b04      	cmp	r3, #4
 800f628:	d938      	bls.n	800f69c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f62a:	2800      	cmp	r0, #0
 800f62c:	d043      	beq.n	800f6b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f62e:	69a1      	ldr	r1, [r4, #24]
 800f630:	4630      	mov	r0, r6
 800f632:	f004 f89b 	bl	801376c <ucdr_serialize_string>
 800f636:	6863      	ldr	r3, [r4, #4]
 800f638:	2b05      	cmp	r3, #5
 800f63a:	d92f      	bls.n	800f69c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f63c:	2800      	cmp	r0, #0
 800f63e:	d03a      	beq.n	800f6b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f640:	69e1      	ldr	r1, [r4, #28]
 800f642:	4630      	mov	r0, r6
 800f644:	f004 f892 	bl	801376c <ucdr_serialize_string>
 800f648:	6863      	ldr	r3, [r4, #4]
 800f64a:	2b06      	cmp	r3, #6
 800f64c:	d926      	bls.n	800f69c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f64e:	b390      	cbz	r0, 800f6b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f650:	6a21      	ldr	r1, [r4, #32]
 800f652:	4630      	mov	r0, r6
 800f654:	f004 f88a 	bl	801376c <ucdr_serialize_string>
 800f658:	6863      	ldr	r3, [r4, #4]
 800f65a:	2b07      	cmp	r3, #7
 800f65c:	d91e      	bls.n	800f69c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f65e:	b350      	cbz	r0, 800f6b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f660:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f662:	4630      	mov	r0, r6
 800f664:	f004 f882 	bl	801376c <ucdr_serialize_string>
 800f668:	6863      	ldr	r3, [r4, #4]
 800f66a:	2b08      	cmp	r3, #8
 800f66c:	d916      	bls.n	800f69c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f66e:	b310      	cbz	r0, 800f6b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f670:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800f672:	4630      	mov	r0, r6
 800f674:	f004 f87a 	bl	801376c <ucdr_serialize_string>
 800f678:	6863      	ldr	r3, [r4, #4]
 800f67a:	2b09      	cmp	r3, #9
 800f67c:	d90e      	bls.n	800f69c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f67e:	b1d0      	cbz	r0, 800f6b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f680:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800f684:	2709      	movs	r7, #9
 800f686:	e000      	b.n	800f68a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800f688:	b1a8      	cbz	r0, 800f6b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f68a:	f858 1b04 	ldr.w	r1, [r8], #4
 800f68e:	4630      	mov	r0, r6
 800f690:	f004 f86c 	bl	801376c <ucdr_serialize_string>
 800f694:	6862      	ldr	r2, [r4, #4]
 800f696:	3701      	adds	r7, #1
 800f698:	4297      	cmp	r7, r2
 800f69a:	d3f5      	bcc.n	800f688 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800f69c:	4005      	ands	r5, r0
 800f69e:	b2ed      	uxtb	r5, r5
 800f6a0:	e78a      	b.n	800f5b8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800f6a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f6a4:	4630      	mov	r0, r6
 800f6a6:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800f6aa:	f004 f833 	bl	8013714 <ucdr_serialize_sequence_uint8_t>
 800f6ae:	4005      	ands	r5, r0
 800f6b0:	4628      	mov	r0, r5
 800f6b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6b6:	2500      	movs	r5, #0
 800f6b8:	e77e      	b.n	800f5b8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800f6ba:	4028      	ands	r0, r5
 800f6bc:	b2c5      	uxtb	r5, r0
 800f6be:	e77b      	b.n	800f5b8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800f6c0 <uxr_serialize_OBJK_Publisher_Binary>:
 800f6c0:	b570      	push	{r4, r5, r6, lr}
 800f6c2:	460d      	mov	r5, r1
 800f6c4:	7809      	ldrb	r1, [r1, #0]
 800f6c6:	4606      	mov	r6, r0
 800f6c8:	f7f9 fdea 	bl	80092a0 <ucdr_serialize_bool>
 800f6cc:	782b      	ldrb	r3, [r5, #0]
 800f6ce:	4604      	mov	r4, r0
 800f6d0:	b94b      	cbnz	r3, 800f6e6 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800f6d2:	7a29      	ldrb	r1, [r5, #8]
 800f6d4:	4630      	mov	r0, r6
 800f6d6:	f7f9 fde3 	bl	80092a0 <ucdr_serialize_bool>
 800f6da:	7a2b      	ldrb	r3, [r5, #8]
 800f6dc:	4004      	ands	r4, r0
 800f6de:	b2e4      	uxtb	r4, r4
 800f6e0:	b943      	cbnz	r3, 800f6f4 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800f6e2:	4620      	mov	r0, r4
 800f6e4:	bd70      	pop	{r4, r5, r6, pc}
 800f6e6:	6869      	ldr	r1, [r5, #4]
 800f6e8:	4630      	mov	r0, r6
 800f6ea:	f004 f83f 	bl	801376c <ucdr_serialize_string>
 800f6ee:	4004      	ands	r4, r0
 800f6f0:	b2e4      	uxtb	r4, r4
 800f6f2:	e7ee      	b.n	800f6d2 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800f6f4:	f105 010c 	add.w	r1, r5, #12
 800f6f8:	4630      	mov	r0, r6
 800f6fa:	f7ff ff53 	bl	800f5a4 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800f6fe:	4004      	ands	r4, r0
 800f700:	4620      	mov	r0, r4
 800f702:	bd70      	pop	{r4, r5, r6, pc}

0800f704 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800f704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f708:	460c      	mov	r4, r1
 800f70a:	7809      	ldrb	r1, [r1, #0]
 800f70c:	4606      	mov	r6, r0
 800f70e:	f7f9 fdc7 	bl	80092a0 <ucdr_serialize_bool>
 800f712:	7823      	ldrb	r3, [r4, #0]
 800f714:	4605      	mov	r5, r0
 800f716:	b96b      	cbnz	r3, 800f734 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800f718:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800f71c:	4630      	mov	r0, r6
 800f71e:	f7f9 fdbf 	bl	80092a0 <ucdr_serialize_bool>
 800f722:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f726:	4005      	ands	r5, r0
 800f728:	b2ed      	uxtb	r5, r5
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d169      	bne.n	800f802 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800f72e:	4628      	mov	r0, r5
 800f730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f734:	6861      	ldr	r1, [r4, #4]
 800f736:	4630      	mov	r0, r6
 800f738:	f7f9 fff8 	bl	800972c <ucdr_serialize_uint32_t>
 800f73c:	6863      	ldr	r3, [r4, #4]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d06b      	beq.n	800f81a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800f742:	2800      	cmp	r0, #0
 800f744:	d067      	beq.n	800f816 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f746:	68a1      	ldr	r1, [r4, #8]
 800f748:	4630      	mov	r0, r6
 800f74a:	f004 f80f 	bl	801376c <ucdr_serialize_string>
 800f74e:	6863      	ldr	r3, [r4, #4]
 800f750:	2b01      	cmp	r3, #1
 800f752:	d953      	bls.n	800f7fc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f754:	2800      	cmp	r0, #0
 800f756:	d05e      	beq.n	800f816 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f758:	68e1      	ldr	r1, [r4, #12]
 800f75a:	4630      	mov	r0, r6
 800f75c:	f004 f806 	bl	801376c <ucdr_serialize_string>
 800f760:	6863      	ldr	r3, [r4, #4]
 800f762:	2b02      	cmp	r3, #2
 800f764:	d94a      	bls.n	800f7fc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f766:	2800      	cmp	r0, #0
 800f768:	d055      	beq.n	800f816 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f76a:	6921      	ldr	r1, [r4, #16]
 800f76c:	4630      	mov	r0, r6
 800f76e:	f003 fffd 	bl	801376c <ucdr_serialize_string>
 800f772:	6863      	ldr	r3, [r4, #4]
 800f774:	2b03      	cmp	r3, #3
 800f776:	d941      	bls.n	800f7fc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f778:	2800      	cmp	r0, #0
 800f77a:	d04c      	beq.n	800f816 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f77c:	6961      	ldr	r1, [r4, #20]
 800f77e:	4630      	mov	r0, r6
 800f780:	f003 fff4 	bl	801376c <ucdr_serialize_string>
 800f784:	6863      	ldr	r3, [r4, #4]
 800f786:	2b04      	cmp	r3, #4
 800f788:	d938      	bls.n	800f7fc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f78a:	2800      	cmp	r0, #0
 800f78c:	d043      	beq.n	800f816 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f78e:	69a1      	ldr	r1, [r4, #24]
 800f790:	4630      	mov	r0, r6
 800f792:	f003 ffeb 	bl	801376c <ucdr_serialize_string>
 800f796:	6863      	ldr	r3, [r4, #4]
 800f798:	2b05      	cmp	r3, #5
 800f79a:	d92f      	bls.n	800f7fc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f79c:	2800      	cmp	r0, #0
 800f79e:	d03a      	beq.n	800f816 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f7a0:	69e1      	ldr	r1, [r4, #28]
 800f7a2:	4630      	mov	r0, r6
 800f7a4:	f003 ffe2 	bl	801376c <ucdr_serialize_string>
 800f7a8:	6863      	ldr	r3, [r4, #4]
 800f7aa:	2b06      	cmp	r3, #6
 800f7ac:	d926      	bls.n	800f7fc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f7ae:	b390      	cbz	r0, 800f816 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f7b0:	6a21      	ldr	r1, [r4, #32]
 800f7b2:	4630      	mov	r0, r6
 800f7b4:	f003 ffda 	bl	801376c <ucdr_serialize_string>
 800f7b8:	6863      	ldr	r3, [r4, #4]
 800f7ba:	2b07      	cmp	r3, #7
 800f7bc:	d91e      	bls.n	800f7fc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f7be:	b350      	cbz	r0, 800f816 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f7c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f7c2:	4630      	mov	r0, r6
 800f7c4:	f003 ffd2 	bl	801376c <ucdr_serialize_string>
 800f7c8:	6863      	ldr	r3, [r4, #4]
 800f7ca:	2b08      	cmp	r3, #8
 800f7cc:	d916      	bls.n	800f7fc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f7ce:	b310      	cbz	r0, 800f816 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f7d0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800f7d2:	4630      	mov	r0, r6
 800f7d4:	f003 ffca 	bl	801376c <ucdr_serialize_string>
 800f7d8:	6863      	ldr	r3, [r4, #4]
 800f7da:	2b09      	cmp	r3, #9
 800f7dc:	d90e      	bls.n	800f7fc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f7de:	b1d0      	cbz	r0, 800f816 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f7e0:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800f7e4:	2709      	movs	r7, #9
 800f7e6:	e000      	b.n	800f7ea <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800f7e8:	b1a8      	cbz	r0, 800f816 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f7ea:	f858 1b04 	ldr.w	r1, [r8], #4
 800f7ee:	4630      	mov	r0, r6
 800f7f0:	f003 ffbc 	bl	801376c <ucdr_serialize_string>
 800f7f4:	6862      	ldr	r2, [r4, #4]
 800f7f6:	3701      	adds	r7, #1
 800f7f8:	4297      	cmp	r7, r2
 800f7fa:	d3f5      	bcc.n	800f7e8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800f7fc:	4005      	ands	r5, r0
 800f7fe:	b2ed      	uxtb	r5, r5
 800f800:	e78a      	b.n	800f718 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800f802:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f804:	4630      	mov	r0, r6
 800f806:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800f80a:	f003 ff83 	bl	8013714 <ucdr_serialize_sequence_uint8_t>
 800f80e:	4005      	ands	r5, r0
 800f810:	4628      	mov	r0, r5
 800f812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f816:	2500      	movs	r5, #0
 800f818:	e77e      	b.n	800f718 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800f81a:	4028      	ands	r0, r5
 800f81c:	b2c5      	uxtb	r5, r0
 800f81e:	e77b      	b.n	800f718 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800f820 <uxr_serialize_OBJK_Subscriber_Binary>:
 800f820:	b570      	push	{r4, r5, r6, lr}
 800f822:	460d      	mov	r5, r1
 800f824:	7809      	ldrb	r1, [r1, #0]
 800f826:	4606      	mov	r6, r0
 800f828:	f7f9 fd3a 	bl	80092a0 <ucdr_serialize_bool>
 800f82c:	782b      	ldrb	r3, [r5, #0]
 800f82e:	4604      	mov	r4, r0
 800f830:	b94b      	cbnz	r3, 800f846 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800f832:	7a29      	ldrb	r1, [r5, #8]
 800f834:	4630      	mov	r0, r6
 800f836:	f7f9 fd33 	bl	80092a0 <ucdr_serialize_bool>
 800f83a:	7a2b      	ldrb	r3, [r5, #8]
 800f83c:	4004      	ands	r4, r0
 800f83e:	b2e4      	uxtb	r4, r4
 800f840:	b943      	cbnz	r3, 800f854 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800f842:	4620      	mov	r0, r4
 800f844:	bd70      	pop	{r4, r5, r6, pc}
 800f846:	6869      	ldr	r1, [r5, #4]
 800f848:	4630      	mov	r0, r6
 800f84a:	f003 ff8f 	bl	801376c <ucdr_serialize_string>
 800f84e:	4004      	ands	r4, r0
 800f850:	b2e4      	uxtb	r4, r4
 800f852:	e7ee      	b.n	800f832 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800f854:	f105 010c 	add.w	r1, r5, #12
 800f858:	4630      	mov	r0, r6
 800f85a:	f7ff ff53 	bl	800f704 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800f85e:	4004      	ands	r4, r0
 800f860:	4620      	mov	r0, r4
 800f862:	bd70      	pop	{r4, r5, r6, pc}

0800f864 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800f864:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800f868:	4688      	mov	r8, r1
 800f86a:	8809      	ldrh	r1, [r1, #0]
 800f86c:	4681      	mov	r9, r0
 800f86e:	f7f9 fd73 	bl	8009358 <ucdr_serialize_uint16_t>
 800f872:	f898 1002 	ldrb.w	r1, [r8, #2]
 800f876:	4606      	mov	r6, r0
 800f878:	4648      	mov	r0, r9
 800f87a:	f7f9 fd11 	bl	80092a0 <ucdr_serialize_bool>
 800f87e:	f898 3002 	ldrb.w	r3, [r8, #2]
 800f882:	4030      	ands	r0, r6
 800f884:	b2c5      	uxtb	r5, r0
 800f886:	b9eb      	cbnz	r3, 800f8c4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800f888:	f898 1006 	ldrb.w	r1, [r8, #6]
 800f88c:	4648      	mov	r0, r9
 800f88e:	f7f9 fd07 	bl	80092a0 <ucdr_serialize_bool>
 800f892:	f898 3006 	ldrb.w	r3, [r8, #6]
 800f896:	4005      	ands	r5, r0
 800f898:	bb7b      	cbnz	r3, 800f8fa <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800f89a:	f898 100c 	ldrb.w	r1, [r8, #12]
 800f89e:	4648      	mov	r0, r9
 800f8a0:	f7f9 fcfe 	bl	80092a0 <ucdr_serialize_bool>
 800f8a4:	f898 300c 	ldrb.w	r3, [r8, #12]
 800f8a8:	4005      	ands	r5, r0
 800f8aa:	b9f3      	cbnz	r3, 800f8ea <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800f8ac:	f898 1014 	ldrb.w	r1, [r8, #20]
 800f8b0:	4648      	mov	r0, r9
 800f8b2:	f7f9 fcf5 	bl	80092a0 <ucdr_serialize_bool>
 800f8b6:	f898 3014 	ldrb.w	r3, [r8, #20]
 800f8ba:	4005      	ands	r5, r0
 800f8bc:	b94b      	cbnz	r3, 800f8d2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800f8be:	4628      	mov	r0, r5
 800f8c0:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800f8c4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800f8c8:	4648      	mov	r0, r9
 800f8ca:	f7f9 fd45 	bl	8009358 <ucdr_serialize_uint16_t>
 800f8ce:	4005      	ands	r5, r0
 800f8d0:	e7da      	b.n	800f888 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800f8d2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800f8d6:	4648      	mov	r0, r9
 800f8d8:	f108 011c 	add.w	r1, r8, #28
 800f8dc:	f003 ff1a 	bl	8013714 <ucdr_serialize_sequence_uint8_t>
 800f8e0:	4028      	ands	r0, r5
 800f8e2:	b2c5      	uxtb	r5, r0
 800f8e4:	4628      	mov	r0, r5
 800f8e6:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800f8ea:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f8ee:	4648      	mov	r0, r9
 800f8f0:	f7f9 ff1c 	bl	800972c <ucdr_serialize_uint32_t>
 800f8f4:	4028      	ands	r0, r5
 800f8f6:	b2c5      	uxtb	r5, r0
 800f8f8:	e7d8      	b.n	800f8ac <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800f8fa:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800f8fe:	4648      	mov	r0, r9
 800f900:	f7f9 ff14 	bl	800972c <ucdr_serialize_uint32_t>
 800f904:	4028      	ands	r0, r5
 800f906:	b2c5      	uxtb	r5, r0
 800f908:	e7c7      	b.n	800f89a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800f90a:	bf00      	nop

0800f90c <uxr_serialize_OBJK_DataReader_Binary>:
 800f90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f90e:	2202      	movs	r2, #2
 800f910:	460c      	mov	r4, r1
 800f912:	4606      	mov	r6, r0
 800f914:	f003 fe0a 	bl	801352c <ucdr_serialize_array_uint8_t>
 800f918:	78a1      	ldrb	r1, [r4, #2]
 800f91a:	4605      	mov	r5, r0
 800f91c:	4630      	mov	r0, r6
 800f91e:	f7f9 fcbf 	bl	80092a0 <ucdr_serialize_bool>
 800f922:	78a3      	ldrb	r3, [r4, #2]
 800f924:	4005      	ands	r5, r0
 800f926:	b2ed      	uxtb	r5, r5
 800f928:	b90b      	cbnz	r3, 800f92e <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800f92a:	4628      	mov	r0, r5
 800f92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f92e:	f104 0108 	add.w	r1, r4, #8
 800f932:	4630      	mov	r0, r6
 800f934:	f7ff ff96 	bl	800f864 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800f938:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800f93c:	4607      	mov	r7, r0
 800f93e:	4630      	mov	r0, r6
 800f940:	f7f9 fcae 	bl	80092a0 <ucdr_serialize_bool>
 800f944:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800f948:	4038      	ands	r0, r7
 800f94a:	b2c7      	uxtb	r7, r0
 800f94c:	b95b      	cbnz	r3, 800f966 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800f94e:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 800f952:	4630      	mov	r0, r6
 800f954:	f7f9 fca4 	bl	80092a0 <ucdr_serialize_bool>
 800f958:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800f95c:	4007      	ands	r7, r0
 800f95e:	b94b      	cbnz	r3, 800f974 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800f960:	403d      	ands	r5, r7
 800f962:	4628      	mov	r0, r5
 800f964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f966:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 800f96a:	4630      	mov	r0, r6
 800f96c:	f7fa f934 	bl	8009bd8 <ucdr_serialize_uint64_t>
 800f970:	4007      	ands	r7, r0
 800f972:	e7ec      	b.n	800f94e <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800f974:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f976:	4630      	mov	r0, r6
 800f978:	f003 fef8 	bl	801376c <ucdr_serialize_string>
 800f97c:	4007      	ands	r7, r0
 800f97e:	b2ff      	uxtb	r7, r7
 800f980:	e7ee      	b.n	800f960 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800f982:	bf00      	nop

0800f984 <uxr_serialize_OBJK_DataWriter_Binary>:
 800f984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f986:	2202      	movs	r2, #2
 800f988:	460d      	mov	r5, r1
 800f98a:	4606      	mov	r6, r0
 800f98c:	f003 fdce 	bl	801352c <ucdr_serialize_array_uint8_t>
 800f990:	78a9      	ldrb	r1, [r5, #2]
 800f992:	4604      	mov	r4, r0
 800f994:	4630      	mov	r0, r6
 800f996:	f7f9 fc83 	bl	80092a0 <ucdr_serialize_bool>
 800f99a:	78ab      	ldrb	r3, [r5, #2]
 800f99c:	4004      	ands	r4, r0
 800f99e:	b2e4      	uxtb	r4, r4
 800f9a0:	b90b      	cbnz	r3, 800f9a6 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800f9a2:	4620      	mov	r0, r4
 800f9a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9a6:	f105 0108 	add.w	r1, r5, #8
 800f9aa:	4630      	mov	r0, r6
 800f9ac:	f7ff ff5a 	bl	800f864 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800f9b0:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 800f9b4:	4607      	mov	r7, r0
 800f9b6:	4630      	mov	r0, r6
 800f9b8:	f7f9 fc72 	bl	80092a0 <ucdr_serialize_bool>
 800f9bc:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800f9c0:	4007      	ands	r7, r0
 800f9c2:	b2ff      	uxtb	r7, r7
 800f9c4:	b913      	cbnz	r3, 800f9cc <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800f9c6:	403c      	ands	r4, r7
 800f9c8:	4620      	mov	r0, r4
 800f9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9cc:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 800f9d0:	4630      	mov	r0, r6
 800f9d2:	f7fa f901 	bl	8009bd8 <ucdr_serialize_uint64_t>
 800f9d6:	4007      	ands	r7, r0
 800f9d8:	e7f5      	b.n	800f9c6 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800f9da:	bf00      	nop

0800f9dc <uxr_deserialize_ObjectVariant>:
 800f9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9de:	4605      	mov	r5, r0
 800f9e0:	460e      	mov	r6, r1
 800f9e2:	f7f9 fca3 	bl	800932c <ucdr_deserialize_uint8_t>
 800f9e6:	b320      	cbz	r0, 800fa32 <uxr_deserialize_ObjectVariant+0x56>
 800f9e8:	7833      	ldrb	r3, [r6, #0]
 800f9ea:	3b01      	subs	r3, #1
 800f9ec:	4604      	mov	r4, r0
 800f9ee:	2b0d      	cmp	r3, #13
 800f9f0:	d81d      	bhi.n	800fa2e <uxr_deserialize_ObjectVariant+0x52>
 800f9f2:	e8df f003 	tbb	[pc, r3]
 800f9f6:	2107      	.short	0x2107
 800f9f8:	21214b4b 	.word	0x21214b4b
 800f9fc:	381c2121 	.word	0x381c2121
 800fa00:	876a3838 	.word	0x876a3838
 800fa04:	1d31      	adds	r1, r6, #4
 800fa06:	4628      	mov	r0, r5
 800fa08:	f7f9 fc90 	bl	800932c <ucdr_deserialize_uint8_t>
 800fa0c:	4607      	mov	r7, r0
 800fa0e:	b138      	cbz	r0, 800fa20 <uxr_deserialize_ObjectVariant+0x44>
 800fa10:	7933      	ldrb	r3, [r6, #4]
 800fa12:	2b02      	cmp	r3, #2
 800fa14:	d07c      	beq.n	800fb10 <uxr_deserialize_ObjectVariant+0x134>
 800fa16:	2b03      	cmp	r3, #3
 800fa18:	f000 8082 	beq.w	800fb20 <uxr_deserialize_ObjectVariant+0x144>
 800fa1c:	2b01      	cmp	r3, #1
 800fa1e:	d077      	beq.n	800fb10 <uxr_deserialize_ObjectVariant+0x134>
 800fa20:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800fa24:	4628      	mov	r0, r5
 800fa26:	f7fa fa27 	bl	8009e78 <ucdr_deserialize_int16_t>
 800fa2a:	4038      	ands	r0, r7
 800fa2c:	b2c4      	uxtb	r4, r0
 800fa2e:	4620      	mov	r0, r4
 800fa30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa32:	2400      	movs	r4, #0
 800fa34:	4620      	mov	r0, r4
 800fa36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa38:	1d31      	adds	r1, r6, #4
 800fa3a:	4628      	mov	r0, r5
 800fa3c:	f7f9 fc76 	bl	800932c <ucdr_deserialize_uint8_t>
 800fa40:	4607      	mov	r7, r0
 800fa42:	b130      	cbz	r0, 800fa52 <uxr_deserialize_ObjectVariant+0x76>
 800fa44:	7933      	ldrb	r3, [r6, #4]
 800fa46:	2b02      	cmp	r3, #2
 800fa48:	d037      	beq.n	800faba <uxr_deserialize_ObjectVariant+0xde>
 800fa4a:	2b03      	cmp	r3, #3
 800fa4c:	d02a      	beq.n	800faa4 <uxr_deserialize_ObjectVariant+0xc8>
 800fa4e:	2b01      	cmp	r3, #1
 800fa50:	d033      	beq.n	800faba <uxr_deserialize_ObjectVariant+0xde>
 800fa52:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800fa56:	4628      	mov	r0, r5
 800fa58:	2202      	movs	r2, #2
 800fa5a:	f003 fdcb 	bl	80135f4 <ucdr_deserialize_array_uint8_t>
 800fa5e:	4038      	ands	r0, r7
 800fa60:	b2c4      	uxtb	r4, r0
 800fa62:	4620      	mov	r0, r4
 800fa64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa66:	1d31      	adds	r1, r6, #4
 800fa68:	4628      	mov	r0, r5
 800fa6a:	f7f9 fc5f 	bl	800932c <ucdr_deserialize_uint8_t>
 800fa6e:	2800      	cmp	r0, #0
 800fa70:	d0df      	beq.n	800fa32 <uxr_deserialize_ObjectVariant+0x56>
 800fa72:	7933      	ldrb	r3, [r6, #4]
 800fa74:	2b01      	cmp	r3, #1
 800fa76:	d001      	beq.n	800fa7c <uxr_deserialize_ObjectVariant+0xa0>
 800fa78:	2b02      	cmp	r3, #2
 800fa7a:	d1d8      	bne.n	800fa2e <uxr_deserialize_ObjectVariant+0x52>
 800fa7c:	68b1      	ldr	r1, [r6, #8]
 800fa7e:	4628      	mov	r0, r5
 800fa80:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fa84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fa88:	f003 be80 	b.w	801378c <ucdr_deserialize_string>
 800fa8c:	1d31      	adds	r1, r6, #4
 800fa8e:	4628      	mov	r0, r5
 800fa90:	f7f9 fc4c 	bl	800932c <ucdr_deserialize_uint8_t>
 800fa94:	4607      	mov	r7, r0
 800fa96:	2800      	cmp	r0, #0
 800fa98:	d0db      	beq.n	800fa52 <uxr_deserialize_ObjectVariant+0x76>
 800fa9a:	7933      	ldrb	r3, [r6, #4]
 800fa9c:	2b02      	cmp	r3, #2
 800fa9e:	d00c      	beq.n	800faba <uxr_deserialize_ObjectVariant+0xde>
 800faa0:	2b03      	cmp	r3, #3
 800faa2:	d1d6      	bne.n	800fa52 <uxr_deserialize_ObjectVariant+0x76>
 800faa4:	f106 0308 	add.w	r3, r6, #8
 800faa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800faac:	f106 010c 	add.w	r1, r6, #12
 800fab0:	4628      	mov	r0, r5
 800fab2:	f003 fe41 	bl	8013738 <ucdr_deserialize_sequence_uint8_t>
 800fab6:	4607      	mov	r7, r0
 800fab8:	e7cb      	b.n	800fa52 <uxr_deserialize_ObjectVariant+0x76>
 800faba:	68b1      	ldr	r1, [r6, #8]
 800fabc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fac0:	4628      	mov	r0, r5
 800fac2:	f003 fe63 	bl	801378c <ucdr_deserialize_string>
 800fac6:	4607      	mov	r7, r0
 800fac8:	e7c3      	b.n	800fa52 <uxr_deserialize_ObjectVariant+0x76>
 800faca:	2204      	movs	r2, #4
 800facc:	18b1      	adds	r1, r6, r2
 800face:	4628      	mov	r0, r5
 800fad0:	f003 fd90 	bl	80135f4 <ucdr_deserialize_array_uint8_t>
 800fad4:	2202      	movs	r2, #2
 800fad6:	4604      	mov	r4, r0
 800fad8:	f106 0108 	add.w	r1, r6, #8
 800fadc:	4628      	mov	r0, r5
 800fade:	f003 fd89 	bl	80135f4 <ucdr_deserialize_array_uint8_t>
 800fae2:	2202      	movs	r2, #2
 800fae4:	4004      	ands	r4, r0
 800fae6:	f106 010a 	add.w	r1, r6, #10
 800faea:	4628      	mov	r0, r5
 800faec:	f003 fd82 	bl	80135f4 <ucdr_deserialize_array_uint8_t>
 800faf0:	b2e4      	uxtb	r4, r4
 800faf2:	4603      	mov	r3, r0
 800faf4:	f106 010c 	add.w	r1, r6, #12
 800faf8:	4628      	mov	r0, r5
 800fafa:	401c      	ands	r4, r3
 800fafc:	f7f9 fbe6 	bl	80092cc <ucdr_deserialize_bool>
 800fb00:	4004      	ands	r4, r0
 800fb02:	e794      	b.n	800fa2e <uxr_deserialize_ObjectVariant+0x52>
 800fb04:	1d31      	adds	r1, r6, #4
 800fb06:	4628      	mov	r0, r5
 800fb08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fb0c:	f7ff bbd0 	b.w	800f2b0 <uxr_deserialize_CLIENT_Representation>
 800fb10:	68b1      	ldr	r1, [r6, #8]
 800fb12:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fb16:	4628      	mov	r0, r5
 800fb18:	f003 fe38 	bl	801378c <ucdr_deserialize_string>
 800fb1c:	4607      	mov	r7, r0
 800fb1e:	e77f      	b.n	800fa20 <uxr_deserialize_ObjectVariant+0x44>
 800fb20:	f106 0308 	add.w	r3, r6, #8
 800fb24:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fb28:	f106 010c 	add.w	r1, r6, #12
 800fb2c:	4628      	mov	r0, r5
 800fb2e:	f003 fe03 	bl	8013738 <ucdr_deserialize_sequence_uint8_t>
 800fb32:	4607      	mov	r7, r0
 800fb34:	e774      	b.n	800fa20 <uxr_deserialize_ObjectVariant+0x44>
 800fb36:	bf00      	nop

0800fb38 <uxr_deserialize_BaseObjectRequest>:
 800fb38:	b570      	push	{r4, r5, r6, lr}
 800fb3a:	2202      	movs	r2, #2
 800fb3c:	4605      	mov	r5, r0
 800fb3e:	460e      	mov	r6, r1
 800fb40:	f003 fd58 	bl	80135f4 <ucdr_deserialize_array_uint8_t>
 800fb44:	1cb1      	adds	r1, r6, #2
 800fb46:	4604      	mov	r4, r0
 800fb48:	2202      	movs	r2, #2
 800fb4a:	4628      	mov	r0, r5
 800fb4c:	f003 fd52 	bl	80135f4 <ucdr_deserialize_array_uint8_t>
 800fb50:	4020      	ands	r0, r4
 800fb52:	b2c0      	uxtb	r0, r0
 800fb54:	bd70      	pop	{r4, r5, r6, pc}
 800fb56:	bf00      	nop

0800fb58 <uxr_serialize_AGENT_ActivityInfo>:
 800fb58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb5c:	460e      	mov	r6, r1
 800fb5e:	f9b1 1000 	ldrsh.w	r1, [r1]
 800fb62:	4607      	mov	r7, r0
 800fb64:	f7fa f908 	bl	8009d78 <ucdr_serialize_int16_t>
 800fb68:	6871      	ldr	r1, [r6, #4]
 800fb6a:	4680      	mov	r8, r0
 800fb6c:	4638      	mov	r0, r7
 800fb6e:	f7f9 fddd 	bl	800972c <ucdr_serialize_uint32_t>
 800fb72:	6873      	ldr	r3, [r6, #4]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d06a      	beq.n	800fc4e <uxr_serialize_AGENT_ActivityInfo+0xf6>
 800fb78:	b318      	cbz	r0, 800fbc2 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 800fb7a:	f106 0904 	add.w	r9, r6, #4
 800fb7e:	2500      	movs	r5, #0
 800fb80:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 800fb84:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 800fb88:	7a21      	ldrb	r1, [r4, #8]
 800fb8a:	4638      	mov	r0, r7
 800fb8c:	f7f9 fbb8 	bl	8009300 <ucdr_serialize_uint8_t>
 800fb90:	2800      	cmp	r0, #0
 800fb92:	d051      	beq.n	800fc38 <uxr_serialize_AGENT_ActivityInfo+0xe0>
 800fb94:	7a23      	ldrb	r3, [r4, #8]
 800fb96:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800fb9a:	00c9      	lsls	r1, r1, #3
 800fb9c:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 800fba0:	2b03      	cmp	r3, #3
 800fba2:	d859      	bhi.n	800fc58 <uxr_serialize_AGENT_ActivityInfo+0x100>
 800fba4:	e8df f003 	tbb	[pc, r3]
 800fba8:	02122436 	.word	0x02122436
 800fbac:	4449      	add	r1, r9
 800fbae:	4638      	mov	r0, r7
 800fbb0:	6889      	ldr	r1, [r1, #8]
 800fbb2:	f003 fddb 	bl	801376c <ucdr_serialize_string>
 800fbb6:	6873      	ldr	r3, [r6, #4]
 800fbb8:	3501      	adds	r5, #1
 800fbba:	429d      	cmp	r5, r3
 800fbbc:	d240      	bcs.n	800fc40 <uxr_serialize_AGENT_ActivityInfo+0xe8>
 800fbbe:	2800      	cmp	r0, #0
 800fbc0:	d1de      	bne.n	800fb80 <uxr_serialize_AGENT_ActivityInfo+0x28>
 800fbc2:	f04f 0800 	mov.w	r8, #0
 800fbc6:	4640      	mov	r0, r8
 800fbc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbcc:	3108      	adds	r1, #8
 800fbce:	4449      	add	r1, r9
 800fbd0:	2210      	movs	r2, #16
 800fbd2:	4638      	mov	r0, r7
 800fbd4:	f003 fcaa 	bl	801352c <ucdr_serialize_array_uint8_t>
 800fbd8:	44aa      	add	sl, r5
 800fbda:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800fbde:	4604      	mov	r4, r0
 800fbe0:	f8da 101c 	ldr.w	r1, [sl, #28]
 800fbe4:	4638      	mov	r0, r7
 800fbe6:	f7f9 fda1 	bl	800972c <ucdr_serialize_uint32_t>
 800fbea:	4020      	ands	r0, r4
 800fbec:	b2c0      	uxtb	r0, r0
 800fbee:	e7e2      	b.n	800fbb6 <uxr_serialize_AGENT_ActivityInfo+0x5e>
 800fbf0:	3108      	adds	r1, #8
 800fbf2:	4449      	add	r1, r9
 800fbf4:	2204      	movs	r2, #4
 800fbf6:	4638      	mov	r0, r7
 800fbf8:	f003 fc98 	bl	801352c <ucdr_serialize_array_uint8_t>
 800fbfc:	44aa      	add	sl, r5
 800fbfe:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800fc02:	4604      	mov	r4, r0
 800fc04:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 800fc08:	4638      	mov	r0, r7
 800fc0a:	f7f9 fba5 	bl	8009358 <ucdr_serialize_uint16_t>
 800fc0e:	4020      	ands	r0, r4
 800fc10:	b2c0      	uxtb	r0, r0
 800fc12:	e7d0      	b.n	800fbb6 <uxr_serialize_AGENT_ActivityInfo+0x5e>
 800fc14:	3108      	adds	r1, #8
 800fc16:	4449      	add	r1, r9
 800fc18:	2202      	movs	r2, #2
 800fc1a:	4638      	mov	r0, r7
 800fc1c:	f003 fc86 	bl	801352c <ucdr_serialize_array_uint8_t>
 800fc20:	44aa      	add	sl, r5
 800fc22:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800fc26:	4604      	mov	r4, r0
 800fc28:	f89a 100e 	ldrb.w	r1, [sl, #14]
 800fc2c:	4638      	mov	r0, r7
 800fc2e:	f7f9 fb67 	bl	8009300 <ucdr_serialize_uint8_t>
 800fc32:	4020      	ands	r0, r4
 800fc34:	b2c0      	uxtb	r0, r0
 800fc36:	e7be      	b.n	800fbb6 <uxr_serialize_AGENT_ActivityInfo+0x5e>
 800fc38:	6873      	ldr	r3, [r6, #4]
 800fc3a:	3501      	adds	r5, #1
 800fc3c:	429d      	cmp	r5, r3
 800fc3e:	d3c0      	bcc.n	800fbc2 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 800fc40:	ea08 0000 	and.w	r0, r8, r0
 800fc44:	fa5f f880 	uxtb.w	r8, r0
 800fc48:	4640      	mov	r0, r8
 800fc4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc4e:	ea08 0800 	and.w	r8, r8, r0
 800fc52:	fa5f f888 	uxtb.w	r8, r8
 800fc56:	e7b6      	b.n	800fbc6 <uxr_serialize_AGENT_ActivityInfo+0x6e>
 800fc58:	6873      	ldr	r3, [r6, #4]
 800fc5a:	3501      	adds	r5, #1
 800fc5c:	42ab      	cmp	r3, r5
 800fc5e:	f104 0418 	add.w	r4, r4, #24
 800fc62:	d891      	bhi.n	800fb88 <uxr_serialize_AGENT_ActivityInfo+0x30>
 800fc64:	e7af      	b.n	800fbc6 <uxr_serialize_AGENT_ActivityInfo+0x6e>
 800fc66:	bf00      	nop

0800fc68 <uxr_serialize_ActivityInfoVariant>:
 800fc68:	b570      	push	{r4, r5, r6, lr}
 800fc6a:	460d      	mov	r5, r1
 800fc6c:	7809      	ldrb	r1, [r1, #0]
 800fc6e:	4606      	mov	r6, r0
 800fc70:	f7f9 fb46 	bl	8009300 <ucdr_serialize_uint8_t>
 800fc74:	b130      	cbz	r0, 800fc84 <uxr_serialize_ActivityInfoVariant+0x1c>
 800fc76:	782b      	ldrb	r3, [r5, #0]
 800fc78:	2b06      	cmp	r3, #6
 800fc7a:	d019      	beq.n	800fcb0 <uxr_serialize_ActivityInfoVariant+0x48>
 800fc7c:	2b0d      	cmp	r3, #13
 800fc7e:	d010      	beq.n	800fca2 <uxr_serialize_ActivityInfoVariant+0x3a>
 800fc80:	2b05      	cmp	r3, #5
 800fc82:	d000      	beq.n	800fc86 <uxr_serialize_ActivityInfoVariant+0x1e>
 800fc84:	bd70      	pop	{r4, r5, r6, pc}
 800fc86:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800fc8a:	4630      	mov	r0, r6
 800fc8c:	f7fa f874 	bl	8009d78 <ucdr_serialize_int16_t>
 800fc90:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800fc94:	4604      	mov	r4, r0
 800fc96:	4630      	mov	r0, r6
 800fc98:	f7f9 ff9e 	bl	8009bd8 <ucdr_serialize_uint64_t>
 800fc9c:	4020      	ands	r0, r4
 800fc9e:	b2c0      	uxtb	r0, r0
 800fca0:	bd70      	pop	{r4, r5, r6, pc}
 800fca2:	f105 0108 	add.w	r1, r5, #8
 800fca6:	4630      	mov	r0, r6
 800fca8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fcac:	f7ff bf54 	b.w	800fb58 <uxr_serialize_AGENT_ActivityInfo>
 800fcb0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800fcb4:	4630      	mov	r0, r6
 800fcb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fcba:	f7fa b85d 	b.w	8009d78 <ucdr_serialize_int16_t>
 800fcbe:	bf00      	nop

0800fcc0 <uxr_deserialize_BaseObjectReply>:
 800fcc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcc4:	2202      	movs	r2, #2
 800fcc6:	4606      	mov	r6, r0
 800fcc8:	460f      	mov	r7, r1
 800fcca:	f003 fc93 	bl	80135f4 <ucdr_deserialize_array_uint8_t>
 800fcce:	2202      	movs	r2, #2
 800fcd0:	1cb9      	adds	r1, r7, #2
 800fcd2:	4605      	mov	r5, r0
 800fcd4:	4630      	mov	r0, r6
 800fcd6:	f003 fc8d 	bl	80135f4 <ucdr_deserialize_array_uint8_t>
 800fcda:	1d39      	adds	r1, r7, #4
 800fcdc:	4680      	mov	r8, r0
 800fcde:	4630      	mov	r0, r6
 800fce0:	f7f9 fb24 	bl	800932c <ucdr_deserialize_uint8_t>
 800fce4:	1d79      	adds	r1, r7, #5
 800fce6:	4604      	mov	r4, r0
 800fce8:	4630      	mov	r0, r6
 800fcea:	f7f9 fb1f 	bl	800932c <ucdr_deserialize_uint8_t>
 800fcee:	ea05 0508 	and.w	r5, r5, r8
 800fcf2:	402c      	ands	r4, r5
 800fcf4:	4020      	ands	r0, r4
 800fcf6:	b2c0      	uxtb	r0, r0
 800fcf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fcfc <uxr_serialize_ReadSpecification>:
 800fcfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd00:	460e      	mov	r6, r1
 800fd02:	7809      	ldrb	r1, [r1, #0]
 800fd04:	4607      	mov	r7, r0
 800fd06:	f7f9 fafb 	bl	8009300 <ucdr_serialize_uint8_t>
 800fd0a:	7871      	ldrb	r1, [r6, #1]
 800fd0c:	4604      	mov	r4, r0
 800fd0e:	4638      	mov	r0, r7
 800fd10:	f7f9 faf6 	bl	8009300 <ucdr_serialize_uint8_t>
 800fd14:	78b1      	ldrb	r1, [r6, #2]
 800fd16:	4004      	ands	r4, r0
 800fd18:	4638      	mov	r0, r7
 800fd1a:	f7f9 fac1 	bl	80092a0 <ucdr_serialize_bool>
 800fd1e:	78b3      	ldrb	r3, [r6, #2]
 800fd20:	b2e4      	uxtb	r4, r4
 800fd22:	4004      	ands	r4, r0
 800fd24:	b94b      	cbnz	r3, 800fd3a <uxr_serialize_ReadSpecification+0x3e>
 800fd26:	7a31      	ldrb	r1, [r6, #8]
 800fd28:	4638      	mov	r0, r7
 800fd2a:	f7f9 fab9 	bl	80092a0 <ucdr_serialize_bool>
 800fd2e:	7a33      	ldrb	r3, [r6, #8]
 800fd30:	4004      	ands	r4, r0
 800fd32:	b943      	cbnz	r3, 800fd46 <uxr_serialize_ReadSpecification+0x4a>
 800fd34:	4620      	mov	r0, r4
 800fd36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd3a:	6871      	ldr	r1, [r6, #4]
 800fd3c:	4638      	mov	r0, r7
 800fd3e:	f003 fd15 	bl	801376c <ucdr_serialize_string>
 800fd42:	4004      	ands	r4, r0
 800fd44:	e7ef      	b.n	800fd26 <uxr_serialize_ReadSpecification+0x2a>
 800fd46:	8971      	ldrh	r1, [r6, #10]
 800fd48:	4638      	mov	r0, r7
 800fd4a:	f7f9 fb05 	bl	8009358 <ucdr_serialize_uint16_t>
 800fd4e:	89b1      	ldrh	r1, [r6, #12]
 800fd50:	4605      	mov	r5, r0
 800fd52:	4638      	mov	r0, r7
 800fd54:	f7f9 fb00 	bl	8009358 <ucdr_serialize_uint16_t>
 800fd58:	89f1      	ldrh	r1, [r6, #14]
 800fd5a:	4005      	ands	r5, r0
 800fd5c:	4638      	mov	r0, r7
 800fd5e:	f7f9 fafb 	bl	8009358 <ucdr_serialize_uint16_t>
 800fd62:	8a31      	ldrh	r1, [r6, #16]
 800fd64:	4680      	mov	r8, r0
 800fd66:	4638      	mov	r0, r7
 800fd68:	f7f9 faf6 	bl	8009358 <ucdr_serialize_uint16_t>
 800fd6c:	b2ed      	uxtb	r5, r5
 800fd6e:	4025      	ands	r5, r4
 800fd70:	ea08 0505 	and.w	r5, r8, r5
 800fd74:	ea00 0405 	and.w	r4, r0, r5
 800fd78:	4620      	mov	r0, r4
 800fd7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd7e:	bf00      	nop

0800fd80 <uxr_serialize_CREATE_CLIENT_Payload>:
 800fd80:	f7ff ba3a 	b.w	800f1f8 <uxr_serialize_CLIENT_Representation>

0800fd84 <uxr_serialize_CREATE_Payload>:
 800fd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd86:	2202      	movs	r2, #2
 800fd88:	4606      	mov	r6, r0
 800fd8a:	460d      	mov	r5, r1
 800fd8c:	f003 fbce 	bl	801352c <ucdr_serialize_array_uint8_t>
 800fd90:	1ca9      	adds	r1, r5, #2
 800fd92:	4604      	mov	r4, r0
 800fd94:	2202      	movs	r2, #2
 800fd96:	4630      	mov	r0, r6
 800fd98:	f003 fbc8 	bl	801352c <ucdr_serialize_array_uint8_t>
 800fd9c:	7929      	ldrb	r1, [r5, #4]
 800fd9e:	4607      	mov	r7, r0
 800fda0:	4630      	mov	r0, r6
 800fda2:	f7f9 faad 	bl	8009300 <ucdr_serialize_uint8_t>
 800fda6:	b328      	cbz	r0, 800fdf4 <uxr_serialize_CREATE_Payload+0x70>
 800fda8:	792b      	ldrb	r3, [r5, #4]
 800fdaa:	403c      	ands	r4, r7
 800fdac:	3b01      	subs	r3, #1
 800fdae:	b2e4      	uxtb	r4, r4
 800fdb0:	2b0d      	cmp	r3, #13
 800fdb2:	d81d      	bhi.n	800fdf0 <uxr_serialize_CREATE_Payload+0x6c>
 800fdb4:	e8df f003 	tbb	[pc, r3]
 800fdb8:	32320753 	.word	0x32320753
 800fdbc:	07070707 	.word	0x07070707
 800fdc0:	2121211c 	.word	0x2121211c
 800fdc4:	684c      	.short	0x684c
 800fdc6:	7a29      	ldrb	r1, [r5, #8]
 800fdc8:	4630      	mov	r0, r6
 800fdca:	f7f9 fa99 	bl	8009300 <ucdr_serialize_uint8_t>
 800fdce:	4607      	mov	r7, r0
 800fdd0:	b130      	cbz	r0, 800fde0 <uxr_serialize_CREATE_Payload+0x5c>
 800fdd2:	7a2b      	ldrb	r3, [r5, #8]
 800fdd4:	2b02      	cmp	r3, #2
 800fdd6:	d035      	beq.n	800fe44 <uxr_serialize_CREATE_Payload+0xc0>
 800fdd8:	2b03      	cmp	r3, #3
 800fdda:	d02b      	beq.n	800fe34 <uxr_serialize_CREATE_Payload+0xb0>
 800fddc:	2b01      	cmp	r3, #1
 800fdde:	d031      	beq.n	800fe44 <uxr_serialize_CREATE_Payload+0xc0>
 800fde0:	f505 7104 	add.w	r1, r5, #528	; 0x210
 800fde4:	4630      	mov	r0, r6
 800fde6:	2202      	movs	r2, #2
 800fde8:	f003 fba0 	bl	801352c <ucdr_serialize_array_uint8_t>
 800fdec:	4038      	ands	r0, r7
 800fdee:	4004      	ands	r4, r0
 800fdf0:	4620      	mov	r0, r4
 800fdf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdf4:	2400      	movs	r4, #0
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdfa:	7a29      	ldrb	r1, [r5, #8]
 800fdfc:	4630      	mov	r0, r6
 800fdfe:	f7f9 fa7f 	bl	8009300 <ucdr_serialize_uint8_t>
 800fe02:	2800      	cmp	r0, #0
 800fe04:	d0f6      	beq.n	800fdf4 <uxr_serialize_CREATE_Payload+0x70>
 800fe06:	7a2b      	ldrb	r3, [r5, #8]
 800fe08:	2b01      	cmp	r3, #1
 800fe0a:	d001      	beq.n	800fe10 <uxr_serialize_CREATE_Payload+0x8c>
 800fe0c:	2b02      	cmp	r3, #2
 800fe0e:	d1ef      	bne.n	800fdf0 <uxr_serialize_CREATE_Payload+0x6c>
 800fe10:	68e9      	ldr	r1, [r5, #12]
 800fe12:	4630      	mov	r0, r6
 800fe14:	f003 fcaa 	bl	801376c <ucdr_serialize_string>
 800fe18:	4004      	ands	r4, r0
 800fe1a:	e7e9      	b.n	800fdf0 <uxr_serialize_CREATE_Payload+0x6c>
 800fe1c:	7a29      	ldrb	r1, [r5, #8]
 800fe1e:	4630      	mov	r0, r6
 800fe20:	f7f9 fa6e 	bl	8009300 <ucdr_serialize_uint8_t>
 800fe24:	4607      	mov	r7, r0
 800fe26:	2800      	cmp	r0, #0
 800fe28:	d0da      	beq.n	800fde0 <uxr_serialize_CREATE_Payload+0x5c>
 800fe2a:	7a2b      	ldrb	r3, [r5, #8]
 800fe2c:	2b02      	cmp	r3, #2
 800fe2e:	d009      	beq.n	800fe44 <uxr_serialize_CREATE_Payload+0xc0>
 800fe30:	2b03      	cmp	r3, #3
 800fe32:	d1d5      	bne.n	800fde0 <uxr_serialize_CREATE_Payload+0x5c>
 800fe34:	68ea      	ldr	r2, [r5, #12]
 800fe36:	f105 0110 	add.w	r1, r5, #16
 800fe3a:	4630      	mov	r0, r6
 800fe3c:	f003 fc6a 	bl	8013714 <ucdr_serialize_sequence_uint8_t>
 800fe40:	4607      	mov	r7, r0
 800fe42:	e7cd      	b.n	800fde0 <uxr_serialize_CREATE_Payload+0x5c>
 800fe44:	68e9      	ldr	r1, [r5, #12]
 800fe46:	4630      	mov	r0, r6
 800fe48:	f003 fc90 	bl	801376c <ucdr_serialize_string>
 800fe4c:	4607      	mov	r7, r0
 800fe4e:	e7c7      	b.n	800fde0 <uxr_serialize_CREATE_Payload+0x5c>
 800fe50:	f105 0108 	add.w	r1, r5, #8
 800fe54:	4630      	mov	r0, r6
 800fe56:	f7ff fa95 	bl	800f384 <uxr_serialize_AGENT_Representation>
 800fe5a:	4004      	ands	r4, r0
 800fe5c:	e7c8      	b.n	800fdf0 <uxr_serialize_CREATE_Payload+0x6c>
 800fe5e:	7a29      	ldrb	r1, [r5, #8]
 800fe60:	4630      	mov	r0, r6
 800fe62:	f7f9 fa4d 	bl	8009300 <ucdr_serialize_uint8_t>
 800fe66:	4607      	mov	r7, r0
 800fe68:	b130      	cbz	r0, 800fe78 <uxr_serialize_CREATE_Payload+0xf4>
 800fe6a:	7a2b      	ldrb	r3, [r5, #8]
 800fe6c:	2b02      	cmp	r3, #2
 800fe6e:	d012      	beq.n	800fe96 <uxr_serialize_CREATE_Payload+0x112>
 800fe70:	2b03      	cmp	r3, #3
 800fe72:	d016      	beq.n	800fea2 <uxr_serialize_CREATE_Payload+0x11e>
 800fe74:	2b01      	cmp	r3, #1
 800fe76:	d00e      	beq.n	800fe96 <uxr_serialize_CREATE_Payload+0x112>
 800fe78:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 800fe7c:	4630      	mov	r0, r6
 800fe7e:	f7f9 ff7b 	bl	8009d78 <ucdr_serialize_int16_t>
 800fe82:	4038      	ands	r0, r7
 800fe84:	4004      	ands	r4, r0
 800fe86:	e7b3      	b.n	800fdf0 <uxr_serialize_CREATE_Payload+0x6c>
 800fe88:	f105 0108 	add.w	r1, r5, #8
 800fe8c:	4630      	mov	r0, r6
 800fe8e:	f7ff f9b3 	bl	800f1f8 <uxr_serialize_CLIENT_Representation>
 800fe92:	4004      	ands	r4, r0
 800fe94:	e7ac      	b.n	800fdf0 <uxr_serialize_CREATE_Payload+0x6c>
 800fe96:	68e9      	ldr	r1, [r5, #12]
 800fe98:	4630      	mov	r0, r6
 800fe9a:	f003 fc67 	bl	801376c <ucdr_serialize_string>
 800fe9e:	4607      	mov	r7, r0
 800fea0:	e7ea      	b.n	800fe78 <uxr_serialize_CREATE_Payload+0xf4>
 800fea2:	68ea      	ldr	r2, [r5, #12]
 800fea4:	f105 0110 	add.w	r1, r5, #16
 800fea8:	4630      	mov	r0, r6
 800feaa:	f003 fc33 	bl	8013714 <ucdr_serialize_sequence_uint8_t>
 800feae:	4607      	mov	r7, r0
 800feb0:	e7e2      	b.n	800fe78 <uxr_serialize_CREATE_Payload+0xf4>
 800feb2:	bf00      	nop

0800feb4 <uxr_deserialize_GET_INFO_Payload>:
 800feb4:	b570      	push	{r4, r5, r6, lr}
 800feb6:	2202      	movs	r2, #2
 800feb8:	4605      	mov	r5, r0
 800feba:	460e      	mov	r6, r1
 800febc:	f003 fb9a 	bl	80135f4 <ucdr_deserialize_array_uint8_t>
 800fec0:	1cb1      	adds	r1, r6, #2
 800fec2:	2202      	movs	r2, #2
 800fec4:	4604      	mov	r4, r0
 800fec6:	4628      	mov	r0, r5
 800fec8:	f003 fb94 	bl	80135f4 <ucdr_deserialize_array_uint8_t>
 800fecc:	1d31      	adds	r1, r6, #4
 800fece:	4004      	ands	r4, r0
 800fed0:	4628      	mov	r0, r5
 800fed2:	f7f9 fd5b 	bl	800998c <ucdr_deserialize_uint32_t>
 800fed6:	b2e4      	uxtb	r4, r4
 800fed8:	4020      	ands	r0, r4
 800feda:	bd70      	pop	{r4, r5, r6, pc}

0800fedc <uxr_serialize_DELETE_Payload>:
 800fedc:	b570      	push	{r4, r5, r6, lr}
 800fede:	2202      	movs	r2, #2
 800fee0:	4605      	mov	r5, r0
 800fee2:	460e      	mov	r6, r1
 800fee4:	f003 fb22 	bl	801352c <ucdr_serialize_array_uint8_t>
 800fee8:	1cb1      	adds	r1, r6, #2
 800feea:	4604      	mov	r4, r0
 800feec:	2202      	movs	r2, #2
 800feee:	4628      	mov	r0, r5
 800fef0:	f003 fb1c 	bl	801352c <ucdr_serialize_array_uint8_t>
 800fef4:	4020      	ands	r0, r4
 800fef6:	b2c0      	uxtb	r0, r0
 800fef8:	bd70      	pop	{r4, r5, r6, pc}
 800fefa:	bf00      	nop

0800fefc <uxr_deserialize_STATUS_AGENT_Payload>:
 800fefc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff00:	4606      	mov	r6, r0
 800ff02:	460f      	mov	r7, r1
 800ff04:	f7f9 fa12 	bl	800932c <ucdr_deserialize_uint8_t>
 800ff08:	1c79      	adds	r1, r7, #1
 800ff0a:	4605      	mov	r5, r0
 800ff0c:	4630      	mov	r0, r6
 800ff0e:	f7f9 fa0d 	bl	800932c <ucdr_deserialize_uint8_t>
 800ff12:	1d39      	adds	r1, r7, #4
 800ff14:	4681      	mov	r9, r0
 800ff16:	2204      	movs	r2, #4
 800ff18:	4630      	mov	r0, r6
 800ff1a:	f003 fb6b 	bl	80135f4 <ucdr_deserialize_array_uint8_t>
 800ff1e:	f107 0108 	add.w	r1, r7, #8
 800ff22:	4604      	mov	r4, r0
 800ff24:	2202      	movs	r2, #2
 800ff26:	4630      	mov	r0, r6
 800ff28:	f003 fb64 	bl	80135f4 <ucdr_deserialize_array_uint8_t>
 800ff2c:	f107 010a 	add.w	r1, r7, #10
 800ff30:	4680      	mov	r8, r0
 800ff32:	2202      	movs	r2, #2
 800ff34:	4630      	mov	r0, r6
 800ff36:	f003 fb5d 	bl	80135f4 <ucdr_deserialize_array_uint8_t>
 800ff3a:	ea05 0509 	and.w	r5, r5, r9
 800ff3e:	b2ed      	uxtb	r5, r5
 800ff40:	402c      	ands	r4, r5
 800ff42:	f107 010c 	add.w	r1, r7, #12
 800ff46:	4605      	mov	r5, r0
 800ff48:	4630      	mov	r0, r6
 800ff4a:	f7f9 f9bf 	bl	80092cc <ucdr_deserialize_bool>
 800ff4e:	ea08 0404 	and.w	r4, r8, r4
 800ff52:	4025      	ands	r5, r4
 800ff54:	4028      	ands	r0, r5
 800ff56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff5a:	bf00      	nop

0800ff5c <uxr_deserialize_STATUS_Payload>:
 800ff5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff60:	2202      	movs	r2, #2
 800ff62:	4606      	mov	r6, r0
 800ff64:	460f      	mov	r7, r1
 800ff66:	f003 fb45 	bl	80135f4 <ucdr_deserialize_array_uint8_t>
 800ff6a:	2202      	movs	r2, #2
 800ff6c:	1cb9      	adds	r1, r7, #2
 800ff6e:	4605      	mov	r5, r0
 800ff70:	4630      	mov	r0, r6
 800ff72:	f003 fb3f 	bl	80135f4 <ucdr_deserialize_array_uint8_t>
 800ff76:	1d39      	adds	r1, r7, #4
 800ff78:	4680      	mov	r8, r0
 800ff7a:	4630      	mov	r0, r6
 800ff7c:	f7f9 f9d6 	bl	800932c <ucdr_deserialize_uint8_t>
 800ff80:	1d79      	adds	r1, r7, #5
 800ff82:	4604      	mov	r4, r0
 800ff84:	4630      	mov	r0, r6
 800ff86:	f7f9 f9d1 	bl	800932c <ucdr_deserialize_uint8_t>
 800ff8a:	ea05 0508 	and.w	r5, r5, r8
 800ff8e:	402c      	ands	r4, r5
 800ff90:	4020      	ands	r0, r4
 800ff92:	b2c0      	uxtb	r0, r0
 800ff94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ff98 <uxr_serialize_INFO_Payload>:
 800ff98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff9c:	2202      	movs	r2, #2
 800ff9e:	460c      	mov	r4, r1
 800ffa0:	4605      	mov	r5, r0
 800ffa2:	f003 fac3 	bl	801352c <ucdr_serialize_array_uint8_t>
 800ffa6:	2202      	movs	r2, #2
 800ffa8:	4680      	mov	r8, r0
 800ffaa:	1ca1      	adds	r1, r4, #2
 800ffac:	4628      	mov	r0, r5
 800ffae:	f003 fabd 	bl	801352c <ucdr_serialize_array_uint8_t>
 800ffb2:	7921      	ldrb	r1, [r4, #4]
 800ffb4:	4607      	mov	r7, r0
 800ffb6:	4628      	mov	r0, r5
 800ffb8:	f7f9 f9a2 	bl	8009300 <ucdr_serialize_uint8_t>
 800ffbc:	7961      	ldrb	r1, [r4, #5]
 800ffbe:	4606      	mov	r6, r0
 800ffc0:	4628      	mov	r0, r5
 800ffc2:	f7f9 f99d 	bl	8009300 <ucdr_serialize_uint8_t>
 800ffc6:	ea08 0807 	and.w	r8, r8, r7
 800ffca:	ea06 0608 	and.w	r6, r6, r8
 800ffce:	4006      	ands	r6, r0
 800ffd0:	7a21      	ldrb	r1, [r4, #8]
 800ffd2:	4628      	mov	r0, r5
 800ffd4:	f7f9 f964 	bl	80092a0 <ucdr_serialize_bool>
 800ffd8:	7a23      	ldrb	r3, [r4, #8]
 800ffda:	b2f7      	uxtb	r7, r6
 800ffdc:	4606      	mov	r6, r0
 800ffde:	b96b      	cbnz	r3, 800fffc <uxr_serialize_INFO_Payload+0x64>
 800ffe0:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 800ffe4:	4628      	mov	r0, r5
 800ffe6:	f7f9 f95b 	bl	80092a0 <ucdr_serialize_bool>
 800ffea:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 800ffee:	4030      	ands	r0, r6
 800fff0:	b2c6      	uxtb	r6, r0
 800fff2:	b983      	cbnz	r3, 8010016 <uxr_serialize_INFO_Payload+0x7e>
 800fff4:	ea06 0007 	and.w	r0, r6, r7
 800fff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fffc:	7b21      	ldrb	r1, [r4, #12]
 800fffe:	4628      	mov	r0, r5
 8010000:	f7f9 f97e 	bl	8009300 <ucdr_serialize_uint8_t>
 8010004:	b188      	cbz	r0, 801002a <uxr_serialize_INFO_Payload+0x92>
 8010006:	f104 010c 	add.w	r1, r4, #12
 801000a:	4628      	mov	r0, r5
 801000c:	f7ff fa06 	bl	800f41c <uxr_serialize_ObjectVariant.part.0>
 8010010:	4030      	ands	r0, r6
 8010012:	b2c6      	uxtb	r6, r0
 8010014:	e7e4      	b.n	800ffe0 <uxr_serialize_INFO_Payload+0x48>
 8010016:	f504 7108 	add.w	r1, r4, #544	; 0x220
 801001a:	4628      	mov	r0, r5
 801001c:	f7ff fe24 	bl	800fc68 <uxr_serialize_ActivityInfoVariant>
 8010020:	4006      	ands	r6, r0
 8010022:	ea06 0007 	and.w	r0, r6, r7
 8010026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801002a:	4606      	mov	r6, r0
 801002c:	e7d8      	b.n	800ffe0 <uxr_serialize_INFO_Payload+0x48>
 801002e:	bf00      	nop

08010030 <uxr_serialize_READ_DATA_Payload>:
 8010030:	b570      	push	{r4, r5, r6, lr}
 8010032:	2202      	movs	r2, #2
 8010034:	4605      	mov	r5, r0
 8010036:	460e      	mov	r6, r1
 8010038:	f003 fa78 	bl	801352c <ucdr_serialize_array_uint8_t>
 801003c:	1cb1      	adds	r1, r6, #2
 801003e:	2202      	movs	r2, #2
 8010040:	4604      	mov	r4, r0
 8010042:	4628      	mov	r0, r5
 8010044:	f003 fa72 	bl	801352c <ucdr_serialize_array_uint8_t>
 8010048:	1d31      	adds	r1, r6, #4
 801004a:	4004      	ands	r4, r0
 801004c:	4628      	mov	r0, r5
 801004e:	f7ff fe55 	bl	800fcfc <uxr_serialize_ReadSpecification>
 8010052:	b2e4      	uxtb	r4, r4
 8010054:	4020      	ands	r0, r4
 8010056:	bd70      	pop	{r4, r5, r6, pc}

08010058 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8010058:	b570      	push	{r4, r5, r6, lr}
 801005a:	2202      	movs	r2, #2
 801005c:	4605      	mov	r5, r0
 801005e:	460e      	mov	r6, r1
 8010060:	f003 fa64 	bl	801352c <ucdr_serialize_array_uint8_t>
 8010064:	1cb1      	adds	r1, r6, #2
 8010066:	4604      	mov	r4, r0
 8010068:	2202      	movs	r2, #2
 801006a:	4628      	mov	r0, r5
 801006c:	f003 fa5e 	bl	801352c <ucdr_serialize_array_uint8_t>
 8010070:	4020      	ands	r0, r4
 8010072:	b2c0      	uxtb	r0, r0
 8010074:	bd70      	pop	{r4, r5, r6, pc}
 8010076:	bf00      	nop

08010078 <uxr_serialize_ACKNACK_Payload>:
 8010078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801007a:	460f      	mov	r7, r1
 801007c:	460e      	mov	r6, r1
 801007e:	f837 1b02 	ldrh.w	r1, [r7], #2
 8010082:	4605      	mov	r5, r0
 8010084:	f7f9 f968 	bl	8009358 <ucdr_serialize_uint16_t>
 8010088:	4639      	mov	r1, r7
 801008a:	2202      	movs	r2, #2
 801008c:	4604      	mov	r4, r0
 801008e:	4628      	mov	r0, r5
 8010090:	f003 fa4c 	bl	801352c <ucdr_serialize_array_uint8_t>
 8010094:	7931      	ldrb	r1, [r6, #4]
 8010096:	4004      	ands	r4, r0
 8010098:	4628      	mov	r0, r5
 801009a:	f7f9 f931 	bl	8009300 <ucdr_serialize_uint8_t>
 801009e:	b2e4      	uxtb	r4, r4
 80100a0:	4020      	ands	r0, r4
 80100a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080100a4 <uxr_deserialize_ACKNACK_Payload>:
 80100a4:	b570      	push	{r4, r5, r6, lr}
 80100a6:	4605      	mov	r5, r0
 80100a8:	460e      	mov	r6, r1
 80100aa:	f7f9 fa55 	bl	8009558 <ucdr_deserialize_uint16_t>
 80100ae:	1cb1      	adds	r1, r6, #2
 80100b0:	2202      	movs	r2, #2
 80100b2:	4604      	mov	r4, r0
 80100b4:	4628      	mov	r0, r5
 80100b6:	f003 fa9d 	bl	80135f4 <ucdr_deserialize_array_uint8_t>
 80100ba:	1d31      	adds	r1, r6, #4
 80100bc:	4004      	ands	r4, r0
 80100be:	4628      	mov	r0, r5
 80100c0:	f7f9 f934 	bl	800932c <ucdr_deserialize_uint8_t>
 80100c4:	b2e4      	uxtb	r4, r4
 80100c6:	4020      	ands	r0, r4
 80100c8:	bd70      	pop	{r4, r5, r6, pc}
 80100ca:	bf00      	nop

080100cc <uxr_serialize_HEARTBEAT_Payload>:
 80100cc:	b570      	push	{r4, r5, r6, lr}
 80100ce:	460d      	mov	r5, r1
 80100d0:	8809      	ldrh	r1, [r1, #0]
 80100d2:	4606      	mov	r6, r0
 80100d4:	f7f9 f940 	bl	8009358 <ucdr_serialize_uint16_t>
 80100d8:	8869      	ldrh	r1, [r5, #2]
 80100da:	4604      	mov	r4, r0
 80100dc:	4630      	mov	r0, r6
 80100de:	f7f9 f93b 	bl	8009358 <ucdr_serialize_uint16_t>
 80100e2:	7929      	ldrb	r1, [r5, #4]
 80100e4:	4004      	ands	r4, r0
 80100e6:	4630      	mov	r0, r6
 80100e8:	f7f9 f90a 	bl	8009300 <ucdr_serialize_uint8_t>
 80100ec:	b2e4      	uxtb	r4, r4
 80100ee:	4020      	ands	r0, r4
 80100f0:	bd70      	pop	{r4, r5, r6, pc}
 80100f2:	bf00      	nop

080100f4 <uxr_deserialize_HEARTBEAT_Payload>:
 80100f4:	b570      	push	{r4, r5, r6, lr}
 80100f6:	4605      	mov	r5, r0
 80100f8:	460e      	mov	r6, r1
 80100fa:	f7f9 fa2d 	bl	8009558 <ucdr_deserialize_uint16_t>
 80100fe:	1cb1      	adds	r1, r6, #2
 8010100:	4604      	mov	r4, r0
 8010102:	4628      	mov	r0, r5
 8010104:	f7f9 fa28 	bl	8009558 <ucdr_deserialize_uint16_t>
 8010108:	1d31      	adds	r1, r6, #4
 801010a:	4004      	ands	r4, r0
 801010c:	4628      	mov	r0, r5
 801010e:	f7f9 f90d 	bl	800932c <ucdr_deserialize_uint8_t>
 8010112:	b2e4      	uxtb	r4, r4
 8010114:	4020      	ands	r0, r4
 8010116:	bd70      	pop	{r4, r5, r6, pc}

08010118 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8010118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801011c:	4605      	mov	r5, r0
 801011e:	460e      	mov	r6, r1
 8010120:	f7f9 ffb6 	bl	800a090 <ucdr_deserialize_int32_t>
 8010124:	1d31      	adds	r1, r6, #4
 8010126:	4607      	mov	r7, r0
 8010128:	4628      	mov	r0, r5
 801012a:	f7f9 fc2f 	bl	800998c <ucdr_deserialize_uint32_t>
 801012e:	f106 0108 	add.w	r1, r6, #8
 8010132:	4680      	mov	r8, r0
 8010134:	4628      	mov	r0, r5
 8010136:	f7f9 ffab 	bl	800a090 <ucdr_deserialize_int32_t>
 801013a:	f106 010c 	add.w	r1, r6, #12
 801013e:	4604      	mov	r4, r0
 8010140:	4628      	mov	r0, r5
 8010142:	f7f9 fc23 	bl	800998c <ucdr_deserialize_uint32_t>
 8010146:	ea07 0708 	and.w	r7, r7, r8
 801014a:	403c      	ands	r4, r7
 801014c:	f106 0110 	add.w	r1, r6, #16
 8010150:	4004      	ands	r4, r0
 8010152:	4628      	mov	r0, r5
 8010154:	f7f9 ff9c 	bl	800a090 <ucdr_deserialize_int32_t>
 8010158:	f106 0114 	add.w	r1, r6, #20
 801015c:	4603      	mov	r3, r0
 801015e:	4628      	mov	r0, r5
 8010160:	461d      	mov	r5, r3
 8010162:	f7f9 fc13 	bl	800998c <ucdr_deserialize_uint32_t>
 8010166:	b2e4      	uxtb	r4, r4
 8010168:	402c      	ands	r4, r5
 801016a:	4020      	ands	r0, r4
 801016c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010170 <uxr_serialize_SampleIdentity>:
 8010170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010174:	220c      	movs	r2, #12
 8010176:	4604      	mov	r4, r0
 8010178:	460d      	mov	r5, r1
 801017a:	f003 f9d7 	bl	801352c <ucdr_serialize_array_uint8_t>
 801017e:	2203      	movs	r2, #3
 8010180:	f105 010c 	add.w	r1, r5, #12
 8010184:	4607      	mov	r7, r0
 8010186:	4620      	mov	r0, r4
 8010188:	f003 f9d0 	bl	801352c <ucdr_serialize_array_uint8_t>
 801018c:	7be9      	ldrb	r1, [r5, #15]
 801018e:	4680      	mov	r8, r0
 8010190:	4620      	mov	r0, r4
 8010192:	f7f9 f8b5 	bl	8009300 <ucdr_serialize_uint8_t>
 8010196:	6929      	ldr	r1, [r5, #16]
 8010198:	4606      	mov	r6, r0
 801019a:	4620      	mov	r0, r4
 801019c:	f7f9 fee0 	bl	8009f60 <ucdr_serialize_int32_t>
 80101a0:	6969      	ldr	r1, [r5, #20]
 80101a2:	4603      	mov	r3, r0
 80101a4:	4620      	mov	r0, r4
 80101a6:	ea07 0708 	and.w	r7, r7, r8
 80101aa:	461c      	mov	r4, r3
 80101ac:	f7f9 fabe 	bl	800972c <ucdr_serialize_uint32_t>
 80101b0:	403e      	ands	r6, r7
 80101b2:	4034      	ands	r4, r6
 80101b4:	4020      	ands	r0, r4
 80101b6:	b2c0      	uxtb	r0, r0
 80101b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080101bc <uxr_deserialize_SampleIdentity>:
 80101bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101c0:	220c      	movs	r2, #12
 80101c2:	4604      	mov	r4, r0
 80101c4:	460d      	mov	r5, r1
 80101c6:	f003 fa15 	bl	80135f4 <ucdr_deserialize_array_uint8_t>
 80101ca:	2203      	movs	r2, #3
 80101cc:	f105 010c 	add.w	r1, r5, #12
 80101d0:	4607      	mov	r7, r0
 80101d2:	4620      	mov	r0, r4
 80101d4:	f003 fa0e 	bl	80135f4 <ucdr_deserialize_array_uint8_t>
 80101d8:	f105 010f 	add.w	r1, r5, #15
 80101dc:	4680      	mov	r8, r0
 80101de:	4620      	mov	r0, r4
 80101e0:	f7f9 f8a4 	bl	800932c <ucdr_deserialize_uint8_t>
 80101e4:	f105 0110 	add.w	r1, r5, #16
 80101e8:	4606      	mov	r6, r0
 80101ea:	4620      	mov	r0, r4
 80101ec:	f7f9 ff50 	bl	800a090 <ucdr_deserialize_int32_t>
 80101f0:	f105 0114 	add.w	r1, r5, #20
 80101f4:	4603      	mov	r3, r0
 80101f6:	4620      	mov	r0, r4
 80101f8:	ea07 0708 	and.w	r7, r7, r8
 80101fc:	461c      	mov	r4, r3
 80101fe:	f7f9 fbc5 	bl	800998c <ucdr_deserialize_uint32_t>
 8010202:	403e      	ands	r6, r7
 8010204:	4034      	ands	r4, r6
 8010206:	4020      	ands	r0, r4
 8010208:	b2c0      	uxtb	r0, r0
 801020a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801020e:	bf00      	nop

08010210 <rcl_client_get_rmw_handle>:
 8010210:	b110      	cbz	r0, 8010218 <rcl_client_get_rmw_handle+0x8>
 8010212:	6800      	ldr	r0, [r0, #0]
 8010214:	b100      	cbz	r0, 8010218 <rcl_client_get_rmw_handle+0x8>
 8010216:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8010218:	4770      	bx	lr
 801021a:	bf00      	nop

0801021c <rcl_take_response>:
 801021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801021e:	460e      	mov	r6, r1
 8010220:	460c      	mov	r4, r1
 8010222:	4607      	mov	r7, r0
 8010224:	4694      	mov	ip, r2
 8010226:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010228:	b08d      	sub	sp, #52	; 0x34
 801022a:	ad06      	add	r5, sp, #24
 801022c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801022e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8010232:	e885 0003 	stmia.w	r5, {r0, r1}
 8010236:	b337      	cbz	r7, 8010286 <rcl_take_response+0x6a>
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	b323      	cbz	r3, 8010286 <rcl_take_response+0x6a>
 801023c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801023e:	b310      	cbz	r0, 8010286 <rcl_take_response+0x6a>
 8010240:	4662      	mov	r2, ip
 8010242:	b31a      	cbz	r2, 801028c <rcl_take_response+0x70>
 8010244:	2300      	movs	r3, #0
 8010246:	2600      	movs	r6, #0
 8010248:	2700      	movs	r7, #0
 801024a:	f88d 3007 	strb.w	r3, [sp, #7]
 801024e:	a902      	add	r1, sp, #8
 8010250:	f10d 0307 	add.w	r3, sp, #7
 8010254:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8010258:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801025c:	f002 fee2 	bl	8013024 <rmw_take_response>
 8010260:	4606      	mov	r6, r0
 8010262:	b9a8      	cbnz	r0, 8010290 <rcl_take_response+0x74>
 8010264:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010268:	f240 13f5 	movw	r3, #501	; 0x1f5
 801026c:	2a00      	cmp	r2, #0
 801026e:	bf08      	it	eq
 8010270:	461e      	moveq	r6, r3
 8010272:	ad06      	add	r5, sp, #24
 8010274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010278:	e895 0003 	ldmia.w	r5, {r0, r1}
 801027c:	e884 0003 	stmia.w	r4, {r0, r1}
 8010280:	4630      	mov	r0, r6
 8010282:	b00d      	add	sp, #52	; 0x34
 8010284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010286:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 801028a:	e7f2      	b.n	8010272 <rcl_take_response+0x56>
 801028c:	260b      	movs	r6, #11
 801028e:	e7f0      	b.n	8010272 <rcl_take_response+0x56>
 8010290:	2601      	movs	r6, #1
 8010292:	e7ee      	b.n	8010272 <rcl_take_response+0x56>

08010294 <rcl_convert_rmw_ret_to_rcl_ret>:
 8010294:	280b      	cmp	r0, #11
 8010296:	dc0d      	bgt.n	80102b4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8010298:	2800      	cmp	r0, #0
 801029a:	db09      	blt.n	80102b0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801029c:	280b      	cmp	r0, #11
 801029e:	d807      	bhi.n	80102b0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80102a0:	e8df f000 	tbb	[pc, r0]
 80102a4:	07060607 	.word	0x07060607
 80102a8:	06060606 	.word	0x06060606
 80102ac:	07070606 	.word	0x07070606
 80102b0:	2001      	movs	r0, #1
 80102b2:	4770      	bx	lr
 80102b4:	28cb      	cmp	r0, #203	; 0xcb
 80102b6:	bf18      	it	ne
 80102b8:	2001      	movne	r0, #1
 80102ba:	4770      	bx	lr

080102bc <rcl_get_zero_initialized_context>:
 80102bc:	4a03      	ldr	r2, [pc, #12]	; (80102cc <rcl_get_zero_initialized_context+0x10>)
 80102be:	4603      	mov	r3, r0
 80102c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80102c4:	e883 0003 	stmia.w	r3, {r0, r1}
 80102c8:	4618      	mov	r0, r3
 80102ca:	4770      	bx	lr
 80102cc:	08016d98 	.word	0x08016d98

080102d0 <rcl_context_is_valid>:
 80102d0:	b118      	cbz	r0, 80102da <rcl_context_is_valid+0xa>
 80102d2:	6840      	ldr	r0, [r0, #4]
 80102d4:	3800      	subs	r0, #0
 80102d6:	bf18      	it	ne
 80102d8:	2001      	movne	r0, #1
 80102da:	4770      	bx	lr

080102dc <__cleanup_context>:
 80102dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102e0:	4606      	mov	r6, r0
 80102e2:	6800      	ldr	r0, [r0, #0]
 80102e4:	2300      	movs	r3, #0
 80102e6:	6073      	str	r3, [r6, #4]
 80102e8:	2800      	cmp	r0, #0
 80102ea:	d04d      	beq.n	8010388 <__cleanup_context+0xac>
 80102ec:	6947      	ldr	r7, [r0, #20]
 80102ee:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80102f2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80102f6:	b137      	cbz	r7, 8010306 <__cleanup_context+0x2a>
 80102f8:	3014      	adds	r0, #20
 80102fa:	f000 fc63 	bl	8010bc4 <rcl_init_options_fini>
 80102fe:	4607      	mov	r7, r0
 8010300:	2800      	cmp	r0, #0
 8010302:	d148      	bne.n	8010396 <__cleanup_context+0xba>
 8010304:	6830      	ldr	r0, [r6, #0]
 8010306:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010308:	b143      	cbz	r3, 801031c <__cleanup_context+0x40>
 801030a:	3028      	adds	r0, #40	; 0x28
 801030c:	f002 fd2a 	bl	8012d64 <rmw_context_fini>
 8010310:	b118      	cbz	r0, 801031a <__cleanup_context+0x3e>
 8010312:	2f00      	cmp	r7, #0
 8010314:	d042      	beq.n	801039c <__cleanup_context+0xc0>
 8010316:	f7fb fbad 	bl	800ba74 <rcutils_reset_error>
 801031a:	6830      	ldr	r0, [r6, #0]
 801031c:	f8d0 c020 	ldr.w	ip, [r0, #32]
 8010320:	f1bc 0f00 	cmp.w	ip, #0
 8010324:	d01c      	beq.n	8010360 <__cleanup_context+0x84>
 8010326:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 801032a:	2a01      	cmp	r2, #1
 801032c:	f173 0100 	sbcs.w	r1, r3, #0
 8010330:	db12      	blt.n	8010358 <__cleanup_context+0x7c>
 8010332:	2400      	movs	r4, #0
 8010334:	2500      	movs	r5, #0
 8010336:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 801033a:	4649      	mov	r1, r9
 801033c:	b1c0      	cbz	r0, 8010370 <__cleanup_context+0x94>
 801033e:	47c0      	blx	r8
 8010340:	6831      	ldr	r1, [r6, #0]
 8010342:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8010346:	3401      	adds	r4, #1
 8010348:	f145 0500 	adc.w	r5, r5, #0
 801034c:	4294      	cmp	r4, r2
 801034e:	f8d1 c020 	ldr.w	ip, [r1, #32]
 8010352:	eb75 0103 	sbcs.w	r1, r5, r3
 8010356:	dbee      	blt.n	8010336 <__cleanup_context+0x5a>
 8010358:	4660      	mov	r0, ip
 801035a:	4649      	mov	r1, r9
 801035c:	47c0      	blx	r8
 801035e:	6830      	ldr	r0, [r6, #0]
 8010360:	4649      	mov	r1, r9
 8010362:	47c0      	blx	r8
 8010364:	2300      	movs	r3, #0
 8010366:	e9c6 3300 	strd	r3, r3, [r6]
 801036a:	4638      	mov	r0, r7
 801036c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010370:	3401      	adds	r4, #1
 8010372:	f145 0500 	adc.w	r5, r5, #0
 8010376:	4294      	cmp	r4, r2
 8010378:	eb75 0103 	sbcs.w	r1, r5, r3
 801037c:	dbdb      	blt.n	8010336 <__cleanup_context+0x5a>
 801037e:	4660      	mov	r0, ip
 8010380:	4649      	mov	r1, r9
 8010382:	47c0      	blx	r8
 8010384:	6830      	ldr	r0, [r6, #0]
 8010386:	e7eb      	b.n	8010360 <__cleanup_context+0x84>
 8010388:	4607      	mov	r7, r0
 801038a:	2300      	movs	r3, #0
 801038c:	e9c6 3300 	strd	r3, r3, [r6]
 8010390:	4638      	mov	r0, r7
 8010392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010396:	f7fb fb6d 	bl	800ba74 <rcutils_reset_error>
 801039a:	e7b3      	b.n	8010304 <__cleanup_context+0x28>
 801039c:	f7ff ff7a 	bl	8010294 <rcl_convert_rmw_ret_to_rcl_ret>
 80103a0:	4607      	mov	r7, r0
 80103a2:	e7b8      	b.n	8010316 <__cleanup_context+0x3a>

080103a4 <rcl_get_default_domain_id>:
 80103a4:	b530      	push	{r4, r5, lr}
 80103a6:	b083      	sub	sp, #12
 80103a8:	2300      	movs	r3, #0
 80103aa:	9300      	str	r3, [sp, #0]
 80103ac:	b1d0      	cbz	r0, 80103e4 <rcl_get_default_domain_id+0x40>
 80103ae:	4604      	mov	r4, r0
 80103b0:	4669      	mov	r1, sp
 80103b2:	4815      	ldr	r0, [pc, #84]	; (8010408 <rcl_get_default_domain_id+0x64>)
 80103b4:	f002 f9fa 	bl	80127ac <rcutils_get_env>
 80103b8:	4602      	mov	r2, r0
 80103ba:	b110      	cbz	r0, 80103c2 <rcl_get_default_domain_id+0x1e>
 80103bc:	2001      	movs	r0, #1
 80103be:	b003      	add	sp, #12
 80103c0:	bd30      	pop	{r4, r5, pc}
 80103c2:	9b00      	ldr	r3, [sp, #0]
 80103c4:	b18b      	cbz	r3, 80103ea <rcl_get_default_domain_id+0x46>
 80103c6:	7818      	ldrb	r0, [r3, #0]
 80103c8:	2800      	cmp	r0, #0
 80103ca:	d0f8      	beq.n	80103be <rcl_get_default_domain_id+0x1a>
 80103cc:	4618      	mov	r0, r3
 80103ce:	a901      	add	r1, sp, #4
 80103d0:	9201      	str	r2, [sp, #4]
 80103d2:	f005 f87d 	bl	80154d0 <strtoul>
 80103d6:	4605      	mov	r5, r0
 80103d8:	b150      	cbz	r0, 80103f0 <rcl_get_default_domain_id+0x4c>
 80103da:	1c43      	adds	r3, r0, #1
 80103dc:	d00d      	beq.n	80103fa <rcl_get_default_domain_id+0x56>
 80103de:	6025      	str	r5, [r4, #0]
 80103e0:	2000      	movs	r0, #0
 80103e2:	e7ec      	b.n	80103be <rcl_get_default_domain_id+0x1a>
 80103e4:	200b      	movs	r0, #11
 80103e6:	b003      	add	sp, #12
 80103e8:	bd30      	pop	{r4, r5, pc}
 80103ea:	4618      	mov	r0, r3
 80103ec:	b003      	add	sp, #12
 80103ee:	bd30      	pop	{r4, r5, pc}
 80103f0:	9b01      	ldr	r3, [sp, #4]
 80103f2:	781b      	ldrb	r3, [r3, #0]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d0f2      	beq.n	80103de <rcl_get_default_domain_id+0x3a>
 80103f8:	e7e0      	b.n	80103bc <rcl_get_default_domain_id+0x18>
 80103fa:	f004 fd3f 	bl	8014e7c <__errno>
 80103fe:	6803      	ldr	r3, [r0, #0]
 8010400:	2b22      	cmp	r3, #34	; 0x22
 8010402:	d1ec      	bne.n	80103de <rcl_get_default_domain_id+0x3a>
 8010404:	e7da      	b.n	80103bc <rcl_get_default_domain_id+0x18>
 8010406:	bf00      	nop
 8010408:	08016da0 	.word	0x08016da0

0801040c <rcl_expand_topic_name>:
 801040c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010410:	b08b      	sub	sp, #44	; 0x2c
 8010412:	9306      	str	r3, [sp, #24]
 8010414:	2800      	cmp	r0, #0
 8010416:	f000 80d2 	beq.w	80105be <rcl_expand_topic_name+0x1b2>
 801041a:	460e      	mov	r6, r1
 801041c:	2900      	cmp	r1, #0
 801041e:	f000 80ce 	beq.w	80105be <rcl_expand_topic_name+0x1b2>
 8010422:	4617      	mov	r7, r2
 8010424:	2a00      	cmp	r2, #0
 8010426:	f000 80ca 	beq.w	80105be <rcl_expand_topic_name+0x1b2>
 801042a:	2b00      	cmp	r3, #0
 801042c:	f000 80c7 	beq.w	80105be <rcl_expand_topic_name+0x1b2>
 8010430:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010432:	2b00      	cmp	r3, #0
 8010434:	f000 80c3 	beq.w	80105be <rcl_expand_topic_name+0x1b2>
 8010438:	a909      	add	r1, sp, #36	; 0x24
 801043a:	2200      	movs	r2, #0
 801043c:	4680      	mov	r8, r0
 801043e:	f001 fa23 	bl	8011888 <rcl_validate_topic_name>
 8010442:	4604      	mov	r4, r0
 8010444:	2800      	cmp	r0, #0
 8010446:	f040 80b6 	bne.w	80105b6 <rcl_expand_topic_name+0x1aa>
 801044a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801044c:	2b00      	cmp	r3, #0
 801044e:	f040 80bf 	bne.w	80105d0 <rcl_expand_topic_name+0x1c4>
 8010452:	4602      	mov	r2, r0
 8010454:	a909      	add	r1, sp, #36	; 0x24
 8010456:	4630      	mov	r0, r6
 8010458:	f7fb fefe 	bl	800c258 <rmw_validate_node_name>
 801045c:	2800      	cmp	r0, #0
 801045e:	f040 80b3 	bne.w	80105c8 <rcl_expand_topic_name+0x1bc>
 8010462:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010464:	2a00      	cmp	r2, #0
 8010466:	f040 80b8 	bne.w	80105da <rcl_expand_topic_name+0x1ce>
 801046a:	a909      	add	r1, sp, #36	; 0x24
 801046c:	4638      	mov	r0, r7
 801046e:	f7fb fed5 	bl	800c21c <rmw_validate_namespace>
 8010472:	2800      	cmp	r0, #0
 8010474:	f040 80a8 	bne.w	80105c8 <rcl_expand_topic_name+0x1bc>
 8010478:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801047a:	2c00      	cmp	r4, #0
 801047c:	f040 80f6 	bne.w	801066c <rcl_expand_topic_name+0x260>
 8010480:	217b      	movs	r1, #123	; 0x7b
 8010482:	4640      	mov	r0, r8
 8010484:	f004 ff72 	bl	801536c <strchr>
 8010488:	f898 3000 	ldrb.w	r3, [r8]
 801048c:	2b2f      	cmp	r3, #47	; 0x2f
 801048e:	4605      	mov	r5, r0
 8010490:	f000 80c4 	beq.w	801061c <rcl_expand_topic_name+0x210>
 8010494:	2b7e      	cmp	r3, #126	; 0x7e
 8010496:	d16f      	bne.n	8010578 <rcl_expand_topic_name+0x16c>
 8010498:	4638      	mov	r0, r7
 801049a:	f7ef fec3 	bl	8000224 <strlen>
 801049e:	4b87      	ldr	r3, [pc, #540]	; (80106bc <rcl_expand_topic_name+0x2b0>)
 80104a0:	4987      	ldr	r1, [pc, #540]	; (80106c0 <rcl_expand_topic_name+0x2b4>)
 80104a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80104a4:	9604      	str	r6, [sp, #16]
 80104a6:	2801      	cmp	r0, #1
 80104a8:	bf0c      	ite	eq
 80104aa:	4618      	moveq	r0, r3
 80104ac:	4608      	movne	r0, r1
 80104ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80104b2:	e9cd 2300 	strd	r2, r3, [sp]
 80104b6:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80104ba:	f108 0101 	add.w	r1, r8, #1
 80104be:	9105      	str	r1, [sp, #20]
 80104c0:	ab14      	add	r3, sp, #80	; 0x50
 80104c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80104c4:	f7fb faee 	bl	800baa4 <rcutils_format_string_limit>
 80104c8:	4682      	mov	sl, r0
 80104ca:	2800      	cmp	r0, #0
 80104cc:	f000 80d0 	beq.w	8010670 <rcl_expand_topic_name+0x264>
 80104d0:	2d00      	cmp	r5, #0
 80104d2:	f000 80aa 	beq.w	801062a <rcl_expand_topic_name+0x21e>
 80104d6:	217b      	movs	r1, #123	; 0x7b
 80104d8:	f004 ff48 	bl	801536c <strchr>
 80104dc:	46d1      	mov	r9, sl
 80104de:	4605      	mov	r5, r0
 80104e0:	9407      	str	r4, [sp, #28]
 80104e2:	46d3      	mov	fp, sl
 80104e4:	464c      	mov	r4, r9
 80104e6:	2d00      	cmp	r5, #0
 80104e8:	f000 80c7 	beq.w	801067a <rcl_expand_topic_name+0x26e>
 80104ec:	217d      	movs	r1, #125	; 0x7d
 80104ee:	4620      	mov	r0, r4
 80104f0:	f004 ff3c 	bl	801536c <strchr>
 80104f4:	eba0 0905 	sub.w	r9, r0, r5
 80104f8:	f109 0a01 	add.w	sl, r9, #1
 80104fc:	4871      	ldr	r0, [pc, #452]	; (80106c4 <rcl_expand_topic_name+0x2b8>)
 80104fe:	4652      	mov	r2, sl
 8010500:	4629      	mov	r1, r5
 8010502:	f004 ff48 	bl	8015396 <strncmp>
 8010506:	2800      	cmp	r0, #0
 8010508:	f000 808d 	beq.w	8010626 <rcl_expand_topic_name+0x21a>
 801050c:	486e      	ldr	r0, [pc, #440]	; (80106c8 <rcl_expand_topic_name+0x2bc>)
 801050e:	4652      	mov	r2, sl
 8010510:	4629      	mov	r1, r5
 8010512:	f004 ff40 	bl	8015396 <strncmp>
 8010516:	b130      	cbz	r0, 8010526 <rcl_expand_topic_name+0x11a>
 8010518:	486c      	ldr	r0, [pc, #432]	; (80106cc <rcl_expand_topic_name+0x2c0>)
 801051a:	4652      	mov	r2, sl
 801051c:	4629      	mov	r1, r5
 801051e:	f004 ff3a 	bl	8015396 <strncmp>
 8010522:	2800      	cmp	r0, #0
 8010524:	d15b      	bne.n	80105de <rcl_expand_topic_name+0x1d2>
 8010526:	46b9      	mov	r9, r7
 8010528:	ab16      	add	r3, sp, #88	; 0x58
 801052a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801052e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010532:	ab14      	add	r3, sp, #80	; 0x50
 8010534:	4628      	mov	r0, r5
 8010536:	cb0c      	ldmia	r3, {r2, r3}
 8010538:	4651      	mov	r1, sl
 801053a:	f7fb fbe7 	bl	800bd0c <rcutils_strndup>
 801053e:	4605      	mov	r5, r0
 8010540:	2800      	cmp	r0, #0
 8010542:	f000 80a4 	beq.w	801068e <rcl_expand_topic_name+0x282>
 8010546:	464a      	mov	r2, r9
 8010548:	4620      	mov	r0, r4
 801054a:	ab14      	add	r3, sp, #80	; 0x50
 801054c:	4629      	mov	r1, r5
 801054e:	f7fb fae3 	bl	800bb18 <rcutils_repl_str>
 8010552:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010554:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010556:	4604      	mov	r4, r0
 8010558:	4628      	mov	r0, r5
 801055a:	4798      	blx	r3
 801055c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801055e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010560:	4658      	mov	r0, fp
 8010562:	4798      	blx	r3
 8010564:	2c00      	cmp	r4, #0
 8010566:	f000 8083 	beq.w	8010670 <rcl_expand_topic_name+0x264>
 801056a:	217b      	movs	r1, #123	; 0x7b
 801056c:	4620      	mov	r0, r4
 801056e:	f004 fefd 	bl	801536c <strchr>
 8010572:	46a3      	mov	fp, r4
 8010574:	4605      	mov	r5, r0
 8010576:	e7b6      	b.n	80104e6 <rcl_expand_topic_name+0xda>
 8010578:	2800      	cmp	r0, #0
 801057a:	d151      	bne.n	8010620 <rcl_expand_topic_name+0x214>
 801057c:	4638      	mov	r0, r7
 801057e:	f7ef fe51 	bl	8000224 <strlen>
 8010582:	4b53      	ldr	r3, [pc, #332]	; (80106d0 <rcl_expand_topic_name+0x2c4>)
 8010584:	4a53      	ldr	r2, [pc, #332]	; (80106d4 <rcl_expand_topic_name+0x2c8>)
 8010586:	f8cd 8010 	str.w	r8, [sp, #16]
 801058a:	2801      	cmp	r0, #1
 801058c:	bf0c      	ite	eq
 801058e:	4618      	moveq	r0, r3
 8010590:	4610      	movne	r0, r2
 8010592:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010594:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010598:	e9cd 3200 	strd	r3, r2, [sp]
 801059c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80105a0:	ab14      	add	r3, sp, #80	; 0x50
 80105a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80105a4:	f7fb fa7e 	bl	800baa4 <rcutils_format_string_limit>
 80105a8:	4682      	mov	sl, r0
 80105aa:	4653      	mov	r3, sl
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d05f      	beq.n	8010670 <rcl_expand_topic_name+0x264>
 80105b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80105b2:	f8c3 a000 	str.w	sl, [r3]
 80105b6:	4620      	mov	r0, r4
 80105b8:	b00b      	add	sp, #44	; 0x2c
 80105ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105be:	240b      	movs	r4, #11
 80105c0:	4620      	mov	r0, r4
 80105c2:	b00b      	add	sp, #44	; 0x2c
 80105c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105c8:	f7ff fe64 	bl	8010294 <rcl_convert_rmw_ret_to_rcl_ret>
 80105cc:	4604      	mov	r4, r0
 80105ce:	e7f2      	b.n	80105b6 <rcl_expand_topic_name+0x1aa>
 80105d0:	2467      	movs	r4, #103	; 0x67
 80105d2:	4620      	mov	r0, r4
 80105d4:	b00b      	add	sp, #44	; 0x2c
 80105d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105da:	24c9      	movs	r4, #201	; 0xc9
 80105dc:	e7eb      	b.n	80105b6 <rcl_expand_topic_name+0x1aa>
 80105de:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 80105e2:	9806      	ldr	r0, [sp, #24]
 80105e4:	1c69      	adds	r1, r5, #1
 80105e6:	f7fb fcab 	bl	800bf40 <rcutils_string_map_getn>
 80105ea:	4681      	mov	r9, r0
 80105ec:	2800      	cmp	r0, #0
 80105ee:	d19b      	bne.n	8010528 <rcl_expand_topic_name+0x11c>
 80105f0:	aa16      	add	r2, sp, #88	; 0x58
 80105f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80105f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80105f6:	f8c3 9000 	str.w	r9, [r3]
 80105fa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80105fe:	ab14      	add	r3, sp, #80	; 0x50
 8010600:	cb0c      	ldmia	r3, {r2, r3}
 8010602:	4651      	mov	r1, sl
 8010604:	4628      	mov	r0, r5
 8010606:	f7fb fb81 	bl	800bd0c <rcutils_strndup>
 801060a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801060c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801060e:	4798      	blx	r3
 8010610:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010612:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010614:	4658      	mov	r0, fp
 8010616:	4798      	blx	r3
 8010618:	2469      	movs	r4, #105	; 0x69
 801061a:	e7cc      	b.n	80105b6 <rcl_expand_topic_name+0x1aa>
 801061c:	2800      	cmp	r0, #0
 801061e:	d03e      	beq.n	801069e <rcl_expand_topic_name+0x292>
 8010620:	46c1      	mov	r9, r8
 8010622:	46a2      	mov	sl, r4
 8010624:	e75c      	b.n	80104e0 <rcl_expand_topic_name+0xd4>
 8010626:	46b1      	mov	r9, r6
 8010628:	e77e      	b.n	8010528 <rcl_expand_topic_name+0x11c>
 801062a:	f89a 3000 	ldrb.w	r3, [sl]
 801062e:	2b2f      	cmp	r3, #47	; 0x2f
 8010630:	d0be      	beq.n	80105b0 <rcl_expand_topic_name+0x1a4>
 8010632:	4638      	mov	r0, r7
 8010634:	f7ef fdf6 	bl	8000224 <strlen>
 8010638:	4b25      	ldr	r3, [pc, #148]	; (80106d0 <rcl_expand_topic_name+0x2c4>)
 801063a:	4926      	ldr	r1, [pc, #152]	; (80106d4 <rcl_expand_topic_name+0x2c8>)
 801063c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801063e:	f8cd a010 	str.w	sl, [sp, #16]
 8010642:	2801      	cmp	r0, #1
 8010644:	bf0c      	ite	eq
 8010646:	4618      	moveq	r0, r3
 8010648:	4608      	movne	r0, r1
 801064a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801064e:	e9cd 2300 	strd	r2, r3, [sp]
 8010652:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8010656:	ab14      	add	r3, sp, #80	; 0x50
 8010658:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801065a:	f7fb fa23 	bl	800baa4 <rcutils_format_string_limit>
 801065e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010660:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010662:	4603      	mov	r3, r0
 8010664:	4650      	mov	r0, sl
 8010666:	469a      	mov	sl, r3
 8010668:	4790      	blx	r2
 801066a:	e79e      	b.n	80105aa <rcl_expand_topic_name+0x19e>
 801066c:	24ca      	movs	r4, #202	; 0xca
 801066e:	e7a2      	b.n	80105b6 <rcl_expand_topic_name+0x1aa>
 8010670:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010672:	2300      	movs	r3, #0
 8010674:	6013      	str	r3, [r2, #0]
 8010676:	240a      	movs	r4, #10
 8010678:	e79d      	b.n	80105b6 <rcl_expand_topic_name+0x1aa>
 801067a:	465b      	mov	r3, fp
 801067c:	9c07      	ldr	r4, [sp, #28]
 801067e:	46da      	mov	sl, fp
 8010680:	2b00      	cmp	r3, #0
 8010682:	d1d2      	bne.n	801062a <rcl_expand_topic_name+0x21e>
 8010684:	f898 3000 	ldrb.w	r3, [r8]
 8010688:	2b2f      	cmp	r3, #47	; 0x2f
 801068a:	d091      	beq.n	80105b0 <rcl_expand_topic_name+0x1a4>
 801068c:	e776      	b.n	801057c <rcl_expand_topic_name+0x170>
 801068e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010690:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010692:	601d      	str	r5, [r3, #0]
 8010694:	4658      	mov	r0, fp
 8010696:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010698:	4798      	blx	r3
 801069a:	240a      	movs	r4, #10
 801069c:	e78b      	b.n	80105b6 <rcl_expand_topic_name+0x1aa>
 801069e:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 80106a2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80106a6:	ab14      	add	r3, sp, #80	; 0x50
 80106a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80106aa:	4640      	mov	r0, r8
 80106ac:	f7fb fb0c 	bl	800bcc8 <rcutils_strdup>
 80106b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80106b2:	2800      	cmp	r0, #0
 80106b4:	bf08      	it	eq
 80106b6:	240a      	moveq	r4, #10
 80106b8:	6018      	str	r0, [r3, #0]
 80106ba:	e77c      	b.n	80105b6 <rcl_expand_topic_name+0x1aa>
 80106bc:	08016d84 	.word	0x08016d84
 80106c0:	08016db0 	.word	0x08016db0
 80106c4:	08016db8 	.word	0x08016db8
 80106c8:	08016dc0 	.word	0x08016dc0
 80106cc:	08016dc8 	.word	0x08016dc8
 80106d0:	08016860 	.word	0x08016860
 80106d4:	08016868 	.word	0x08016868

080106d8 <rcl_get_default_topic_name_substitutions>:
 80106d8:	2800      	cmp	r0, #0
 80106da:	bf0c      	ite	eq
 80106dc:	200b      	moveq	r0, #11
 80106de:	2000      	movne	r0, #0
 80106e0:	4770      	bx	lr
 80106e2:	bf00      	nop

080106e4 <rcl_get_zero_initialized_guard_condition>:
 80106e4:	4a03      	ldr	r2, [pc, #12]	; (80106f4 <rcl_get_zero_initialized_guard_condition+0x10>)
 80106e6:	4603      	mov	r3, r0
 80106e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106ec:	e883 0003 	stmia.w	r3, {r0, r1}
 80106f0:	4618      	mov	r0, r3
 80106f2:	4770      	bx	lr
 80106f4:	08016dd4 	.word	0x08016dd4

080106f8 <rcl_guard_condition_init>:
 80106f8:	b082      	sub	sp, #8
 80106fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106fc:	b087      	sub	sp, #28
 80106fe:	ac0c      	add	r4, sp, #48	; 0x30
 8010700:	e884 000c 	stmia.w	r4, {r2, r3}
 8010704:	4625      	mov	r5, r4
 8010706:	4607      	mov	r7, r0
 8010708:	460e      	mov	r6, r1
 801070a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801070c:	ac01      	add	r4, sp, #4
 801070e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010710:	682b      	ldr	r3, [r5, #0]
 8010712:	6023      	str	r3, [r4, #0]
 8010714:	a801      	add	r0, sp, #4
 8010716:	f7fb f989 	bl	800ba2c <rcutils_allocator_is_valid>
 801071a:	2800      	cmp	r0, #0
 801071c:	d034      	beq.n	8010788 <rcl_guard_condition_init+0x90>
 801071e:	463c      	mov	r4, r7
 8010720:	2f00      	cmp	r7, #0
 8010722:	d031      	beq.n	8010788 <rcl_guard_condition_init+0x90>
 8010724:	4635      	mov	r5, r6
 8010726:	687e      	ldr	r6, [r7, #4]
 8010728:	bb46      	cbnz	r6, 801077c <rcl_guard_condition_init+0x84>
 801072a:	2d00      	cmp	r5, #0
 801072c:	d02c      	beq.n	8010788 <rcl_guard_condition_init+0x90>
 801072e:	4628      	mov	r0, r5
 8010730:	f7ff fdce 	bl	80102d0 <rcl_context_is_valid>
 8010734:	2800      	cmp	r0, #0
 8010736:	d02d      	beq.n	8010794 <rcl_guard_condition_init+0x9c>
 8010738:	9b01      	ldr	r3, [sp, #4]
 801073a:	9905      	ldr	r1, [sp, #20]
 801073c:	201c      	movs	r0, #28
 801073e:	4798      	blx	r3
 8010740:	4607      	mov	r7, r0
 8010742:	6060      	str	r0, [r4, #4]
 8010744:	2800      	cmp	r0, #0
 8010746:	d02e      	beq.n	80107a6 <rcl_guard_condition_init+0xae>
 8010748:	6828      	ldr	r0, [r5, #0]
 801074a:	3028      	adds	r0, #40	; 0x28
 801074c:	f002 f8d0 	bl	80128f0 <rmw_create_guard_condition>
 8010750:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8010754:	6038      	str	r0, [r7, #0]
 8010756:	f8dc 5000 	ldr.w	r5, [ip]
 801075a:	b1ed      	cbz	r5, 8010798 <rcl_guard_condition_init+0xa0>
 801075c:	ac01      	add	r4, sp, #4
 801075e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010760:	2701      	movs	r7, #1
 8010762:	f10c 0508 	add.w	r5, ip, #8
 8010766:	f88c 7004 	strb.w	r7, [ip, #4]
 801076a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801076c:	6823      	ldr	r3, [r4, #0]
 801076e:	602b      	str	r3, [r5, #0]
 8010770:	4630      	mov	r0, r6
 8010772:	b007      	add	sp, #28
 8010774:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010778:	b002      	add	sp, #8
 801077a:	4770      	bx	lr
 801077c:	2064      	movs	r0, #100	; 0x64
 801077e:	b007      	add	sp, #28
 8010780:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010784:	b002      	add	sp, #8
 8010786:	4770      	bx	lr
 8010788:	200b      	movs	r0, #11
 801078a:	b007      	add	sp, #28
 801078c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010790:	b002      	add	sp, #8
 8010792:	4770      	bx	lr
 8010794:	2065      	movs	r0, #101	; 0x65
 8010796:	e7f2      	b.n	801077e <rcl_guard_condition_init+0x86>
 8010798:	4660      	mov	r0, ip
 801079a:	9b02      	ldr	r3, [sp, #8]
 801079c:	9905      	ldr	r1, [sp, #20]
 801079e:	4798      	blx	r3
 80107a0:	6065      	str	r5, [r4, #4]
 80107a2:	2001      	movs	r0, #1
 80107a4:	e7eb      	b.n	801077e <rcl_guard_condition_init+0x86>
 80107a6:	200a      	movs	r0, #10
 80107a8:	e7e9      	b.n	801077e <rcl_guard_condition_init+0x86>
 80107aa:	bf00      	nop

080107ac <rcl_guard_condition_init_from_rmw>:
 80107ac:	b082      	sub	sp, #8
 80107ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107b2:	b086      	sub	sp, #24
 80107b4:	ac0c      	add	r4, sp, #48	; 0x30
 80107b6:	4684      	mov	ip, r0
 80107b8:	f844 3f04 	str.w	r3, [r4, #4]!
 80107bc:	460f      	mov	r7, r1
 80107be:	4690      	mov	r8, r2
 80107c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80107c2:	ad01      	add	r5, sp, #4
 80107c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80107c6:	6823      	ldr	r3, [r4, #0]
 80107c8:	602b      	str	r3, [r5, #0]
 80107ca:	a801      	add	r0, sp, #4
 80107cc:	4664      	mov	r4, ip
 80107ce:	f7fb f92d 	bl	800ba2c <rcutils_allocator_is_valid>
 80107d2:	b328      	cbz	r0, 8010820 <rcl_guard_condition_init_from_rmw+0x74>
 80107d4:	b324      	cbz	r4, 8010820 <rcl_guard_condition_init_from_rmw+0x74>
 80107d6:	6866      	ldr	r6, [r4, #4]
 80107d8:	b9e6      	cbnz	r6, 8010814 <rcl_guard_condition_init_from_rmw+0x68>
 80107da:	f1b8 0f00 	cmp.w	r8, #0
 80107de:	d01f      	beq.n	8010820 <rcl_guard_condition_init_from_rmw+0x74>
 80107e0:	4640      	mov	r0, r8
 80107e2:	f7ff fd75 	bl	80102d0 <rcl_context_is_valid>
 80107e6:	b308      	cbz	r0, 801082c <rcl_guard_condition_init_from_rmw+0x80>
 80107e8:	9b01      	ldr	r3, [sp, #4]
 80107ea:	9905      	ldr	r1, [sp, #20]
 80107ec:	201c      	movs	r0, #28
 80107ee:	4798      	blx	r3
 80107f0:	4605      	mov	r5, r0
 80107f2:	6060      	str	r0, [r4, #4]
 80107f4:	b340      	cbz	r0, 8010848 <rcl_guard_condition_init_from_rmw+0x9c>
 80107f6:	b1df      	cbz	r7, 8010830 <rcl_guard_condition_init_from_rmw+0x84>
 80107f8:	6007      	str	r7, [r0, #0]
 80107fa:	7106      	strb	r6, [r0, #4]
 80107fc:	ac01      	add	r4, sp, #4
 80107fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010800:	3508      	adds	r5, #8
 8010802:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010804:	6823      	ldr	r3, [r4, #0]
 8010806:	602b      	str	r3, [r5, #0]
 8010808:	2000      	movs	r0, #0
 801080a:	b006      	add	sp, #24
 801080c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010810:	b002      	add	sp, #8
 8010812:	4770      	bx	lr
 8010814:	2064      	movs	r0, #100	; 0x64
 8010816:	b006      	add	sp, #24
 8010818:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801081c:	b002      	add	sp, #8
 801081e:	4770      	bx	lr
 8010820:	200b      	movs	r0, #11
 8010822:	b006      	add	sp, #24
 8010824:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010828:	b002      	add	sp, #8
 801082a:	4770      	bx	lr
 801082c:	2065      	movs	r0, #101	; 0x65
 801082e:	e7f2      	b.n	8010816 <rcl_guard_condition_init_from_rmw+0x6a>
 8010830:	f8d8 0000 	ldr.w	r0, [r8]
 8010834:	3028      	adds	r0, #40	; 0x28
 8010836:	f002 f85b 	bl	80128f0 <rmw_create_guard_condition>
 801083a:	6028      	str	r0, [r5, #0]
 801083c:	6865      	ldr	r5, [r4, #4]
 801083e:	682e      	ldr	r6, [r5, #0]
 8010840:	b126      	cbz	r6, 801084c <rcl_guard_condition_init_from_rmw+0xa0>
 8010842:	2301      	movs	r3, #1
 8010844:	712b      	strb	r3, [r5, #4]
 8010846:	e7d9      	b.n	80107fc <rcl_guard_condition_init_from_rmw+0x50>
 8010848:	200a      	movs	r0, #10
 801084a:	e7e4      	b.n	8010816 <rcl_guard_condition_init_from_rmw+0x6a>
 801084c:	4628      	mov	r0, r5
 801084e:	9b02      	ldr	r3, [sp, #8]
 8010850:	9905      	ldr	r1, [sp, #20]
 8010852:	4798      	blx	r3
 8010854:	6066      	str	r6, [r4, #4]
 8010856:	2001      	movs	r0, #1
 8010858:	e7dd      	b.n	8010816 <rcl_guard_condition_init_from_rmw+0x6a>
 801085a:	bf00      	nop

0801085c <rcl_guard_condition_fini>:
 801085c:	b570      	push	{r4, r5, r6, lr}
 801085e:	b082      	sub	sp, #8
 8010860:	b1f0      	cbz	r0, 80108a0 <rcl_guard_condition_fini+0x44>
 8010862:	4604      	mov	r4, r0
 8010864:	6840      	ldr	r0, [r0, #4]
 8010866:	b158      	cbz	r0, 8010880 <rcl_guard_condition_fini+0x24>
 8010868:	6803      	ldr	r3, [r0, #0]
 801086a:	68c6      	ldr	r6, [r0, #12]
 801086c:	6981      	ldr	r1, [r0, #24]
 801086e:	b15b      	cbz	r3, 8010888 <rcl_guard_condition_fini+0x2c>
 8010870:	7905      	ldrb	r5, [r0, #4]
 8010872:	b95d      	cbnz	r5, 801088c <rcl_guard_condition_fini+0x30>
 8010874:	47b0      	blx	r6
 8010876:	2300      	movs	r3, #0
 8010878:	4628      	mov	r0, r5
 801087a:	6063      	str	r3, [r4, #4]
 801087c:	b002      	add	sp, #8
 801087e:	bd70      	pop	{r4, r5, r6, pc}
 8010880:	4605      	mov	r5, r0
 8010882:	4628      	mov	r0, r5
 8010884:	b002      	add	sp, #8
 8010886:	bd70      	pop	{r4, r5, r6, pc}
 8010888:	461d      	mov	r5, r3
 801088a:	e7f3      	b.n	8010874 <rcl_guard_condition_fini+0x18>
 801088c:	4618      	mov	r0, r3
 801088e:	9101      	str	r1, [sp, #4]
 8010890:	f002 f842 	bl	8012918 <rmw_destroy_guard_condition>
 8010894:	1e05      	subs	r5, r0, #0
 8010896:	9901      	ldr	r1, [sp, #4]
 8010898:	6860      	ldr	r0, [r4, #4]
 801089a:	bf18      	it	ne
 801089c:	2501      	movne	r5, #1
 801089e:	e7e9      	b.n	8010874 <rcl_guard_condition_fini+0x18>
 80108a0:	250b      	movs	r5, #11
 80108a2:	4628      	mov	r0, r5
 80108a4:	b002      	add	sp, #8
 80108a6:	bd70      	pop	{r4, r5, r6, pc}

080108a8 <rcl_guard_condition_get_default_options>:
 80108a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108aa:	b087      	sub	sp, #28
 80108ac:	4607      	mov	r7, r0
 80108ae:	466c      	mov	r4, sp
 80108b0:	4668      	mov	r0, sp
 80108b2:	f7fb f8ad 	bl	800ba10 <rcutils_get_default_allocator>
 80108b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80108b8:	4d07      	ldr	r5, [pc, #28]	; (80108d8 <rcl_guard_condition_get_default_options+0x30>)
 80108ba:	f8d4 c000 	ldr.w	ip, [r4]
 80108be:	462e      	mov	r6, r5
 80108c0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80108c2:	462c      	mov	r4, r5
 80108c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80108c6:	463c      	mov	r4, r7
 80108c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108ca:	4638      	mov	r0, r7
 80108cc:	f8c6 c000 	str.w	ip, [r6]
 80108d0:	f8c4 c000 	str.w	ip, [r4]
 80108d4:	b007      	add	sp, #28
 80108d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108d8:	2000c1bc 	.word	0x2000c1bc

080108dc <rcl_trigger_guard_condition>:
 80108dc:	b148      	cbz	r0, 80108f2 <rcl_trigger_guard_condition+0x16>
 80108de:	b508      	push	{r3, lr}
 80108e0:	6843      	ldr	r3, [r0, #4]
 80108e2:	b143      	cbz	r3, 80108f6 <rcl_trigger_guard_condition+0x1a>
 80108e4:	6818      	ldr	r0, [r3, #0]
 80108e6:	f002 fbe9 	bl	80130bc <rmw_trigger_guard_condition>
 80108ea:	3800      	subs	r0, #0
 80108ec:	bf18      	it	ne
 80108ee:	2001      	movne	r0, #1
 80108f0:	bd08      	pop	{r3, pc}
 80108f2:	200b      	movs	r0, #11
 80108f4:	4770      	bx	lr
 80108f6:	200b      	movs	r0, #11
 80108f8:	bd08      	pop	{r3, pc}
 80108fa:	bf00      	nop

080108fc <rcl_guard_condition_get_rmw_handle>:
 80108fc:	b110      	cbz	r0, 8010904 <rcl_guard_condition_get_rmw_handle+0x8>
 80108fe:	6840      	ldr	r0, [r0, #4]
 8010900:	b100      	cbz	r0, 8010904 <rcl_guard_condition_get_rmw_handle+0x8>
 8010902:	6800      	ldr	r0, [r0, #0]
 8010904:	4770      	bx	lr
 8010906:	bf00      	nop

08010908 <rcl_init>:
 8010908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801090c:	1e07      	subs	r7, r0, #0
 801090e:	b09f      	sub	sp, #124	; 0x7c
 8010910:	4688      	mov	r8, r1
 8010912:	4692      	mov	sl, r2
 8010914:	4699      	mov	r9, r3
 8010916:	f340 8097 	ble.w	8010a48 <rcl_init+0x140>
 801091a:	2900      	cmp	r1, #0
 801091c:	f000 8097 	beq.w	8010a4e <rcl_init+0x146>
 8010920:	1f0d      	subs	r5, r1, #4
 8010922:	2400      	movs	r4, #0
 8010924:	f855 6f04 	ldr.w	r6, [r5, #4]!
 8010928:	3401      	adds	r4, #1
 801092a:	2e00      	cmp	r6, #0
 801092c:	f000 808f 	beq.w	8010a4e <rcl_init+0x146>
 8010930:	42a7      	cmp	r7, r4
 8010932:	d1f7      	bne.n	8010924 <rcl_init+0x1c>
 8010934:	f1ba 0f00 	cmp.w	sl, #0
 8010938:	f000 8089 	beq.w	8010a4e <rcl_init+0x146>
 801093c:	f8da 4000 	ldr.w	r4, [sl]
 8010940:	2c00      	cmp	r4, #0
 8010942:	f000 8084 	beq.w	8010a4e <rcl_init+0x146>
 8010946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010948:	ad19      	add	r5, sp, #100	; 0x64
 801094a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801094c:	6823      	ldr	r3, [r4, #0]
 801094e:	602b      	str	r3, [r5, #0]
 8010950:	a819      	add	r0, sp, #100	; 0x64
 8010952:	f7fb f86b 	bl	800ba2c <rcutils_allocator_is_valid>
 8010956:	2800      	cmp	r0, #0
 8010958:	d079      	beq.n	8010a4e <rcl_init+0x146>
 801095a:	f1b9 0f00 	cmp.w	r9, #0
 801095e:	d076      	beq.n	8010a4e <rcl_init+0x146>
 8010960:	f8d9 3000 	ldr.w	r3, [r9]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d177      	bne.n	8010a58 <rcl_init+0x150>
 8010968:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801096c:	2178      	movs	r1, #120	; 0x78
 801096e:	2001      	movs	r0, #1
 8010970:	4798      	blx	r3
 8010972:	4604      	mov	r4, r0
 8010974:	f8c9 0000 	str.w	r0, [r9]
 8010978:	2800      	cmp	r0, #0
 801097a:	f000 80ba 	beq.w	8010af2 <rcl_init+0x1ea>
 801097e:	a802      	add	r0, sp, #8
 8010980:	f001 ff2c 	bl	80127dc <rmw_get_zero_initialized_context>
 8010984:	a902      	add	r1, sp, #8
 8010986:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801098a:	2250      	movs	r2, #80	; 0x50
 801098c:	ac19      	add	r4, sp, #100	; 0x64
 801098e:	f004 faf7 	bl	8014f80 <memcpy>
 8010992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010994:	f8d9 5000 	ldr.w	r5, [r9]
 8010998:	6826      	ldr	r6, [r4, #0]
 801099a:	462c      	mov	r4, r5
 801099c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801099e:	f105 0114 	add.w	r1, r5, #20
 80109a2:	6026      	str	r6, [r4, #0]
 80109a4:	4650      	mov	r0, sl
 80109a6:	f000 f931 	bl	8010c0c <rcl_init_options_copy>
 80109aa:	4606      	mov	r6, r0
 80109ac:	2800      	cmp	r0, #0
 80109ae:	d144      	bne.n	8010a3a <rcl_init+0x132>
 80109b0:	f8d9 a000 	ldr.w	sl, [r9]
 80109b4:	463c      	mov	r4, r7
 80109b6:	17fd      	asrs	r5, r7, #31
 80109b8:	e9ca 4506 	strd	r4, r5, [sl, #24]
 80109bc:	f8ca 0020 	str.w	r0, [sl, #32]
 80109c0:	2f00      	cmp	r7, #0
 80109c2:	d050      	beq.n	8010a66 <rcl_init+0x15e>
 80109c4:	f1b8 0f00 	cmp.w	r8, #0
 80109c8:	d04d      	beq.n	8010a66 <rcl_init+0x15e>
 80109ca:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 80109ce:	4638      	mov	r0, r7
 80109d0:	2104      	movs	r1, #4
 80109d2:	4798      	blx	r3
 80109d4:	f8ca 0020 	str.w	r0, [sl, #32]
 80109d8:	f8d9 a000 	ldr.w	sl, [r9]
 80109dc:	f8da 3020 	ldr.w	r3, [sl, #32]
 80109e0:	46d3      	mov	fp, sl
 80109e2:	b34b      	cbz	r3, 8010a38 <rcl_init+0x130>
 80109e4:	2f01      	cmp	r7, #1
 80109e6:	f175 0300 	sbcs.w	r3, r5, #0
 80109ea:	db3c      	blt.n	8010a66 <rcl_init+0x15e>
 80109ec:	f1a8 0804 	sub.w	r8, r8, #4
 80109f0:	2600      	movs	r6, #0
 80109f2:	2700      	movs	r7, #0
 80109f4:	e00c      	b.n	8010a10 <rcl_init+0x108>
 80109f6:	f8d8 1000 	ldr.w	r1, [r8]
 80109fa:	f004 fac1 	bl	8014f80 <memcpy>
 80109fe:	3601      	adds	r6, #1
 8010a00:	f147 0700 	adc.w	r7, r7, #0
 8010a04:	42bd      	cmp	r5, r7
 8010a06:	bf08      	it	eq
 8010a08:	42b4      	cmpeq	r4, r6
 8010a0a:	d02a      	beq.n	8010a62 <rcl_init+0x15a>
 8010a0c:	f8d9 b000 	ldr.w	fp, [r9]
 8010a10:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8010a14:	f7ef fc06 	bl	8000224 <strlen>
 8010a18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010a1a:	991d      	ldr	r1, [sp, #116]	; 0x74
 8010a1c:	f8db a020 	ldr.w	sl, [fp, #32]
 8010a20:	9001      	str	r0, [sp, #4]
 8010a22:	4798      	blx	r3
 8010a24:	f8d9 1000 	ldr.w	r1, [r9]
 8010a28:	9a01      	ldr	r2, [sp, #4]
 8010a2a:	6a09      	ldr	r1, [r1, #32]
 8010a2c:	00b3      	lsls	r3, r6, #2
 8010a2e:	f84a 0003 	str.w	r0, [sl, r3]
 8010a32:	58c8      	ldr	r0, [r1, r3]
 8010a34:	2800      	cmp	r0, #0
 8010a36:	d1de      	bne.n	80109f6 <rcl_init+0xee>
 8010a38:	260a      	movs	r6, #10
 8010a3a:	4648      	mov	r0, r9
 8010a3c:	f7ff fc4e 	bl	80102dc <__cleanup_context>
 8010a40:	4630      	mov	r0, r6
 8010a42:	b01f      	add	sp, #124	; 0x7c
 8010a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a48:	2900      	cmp	r1, #0
 8010a4a:	f43f af73 	beq.w	8010934 <rcl_init+0x2c>
 8010a4e:	260b      	movs	r6, #11
 8010a50:	4630      	mov	r0, r6
 8010a52:	b01f      	add	sp, #124	; 0x7c
 8010a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a58:	2664      	movs	r6, #100	; 0x64
 8010a5a:	4630      	mov	r0, r6
 8010a5c:	b01f      	add	sp, #124	; 0x7c
 8010a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a62:	f8d9 a000 	ldr.w	sl, [r9]
 8010a66:	4a2c      	ldr	r2, [pc, #176]	; (8010b18 <rcl_init+0x210>)
 8010a68:	6813      	ldr	r3, [r2, #0]
 8010a6a:	3301      	adds	r3, #1
 8010a6c:	d03b      	beq.n	8010ae6 <rcl_init+0x1de>
 8010a6e:	6013      	str	r3, [r2, #0]
 8010a70:	4619      	mov	r1, r3
 8010a72:	2000      	movs	r0, #0
 8010a74:	f8da 4014 	ldr.w	r4, [sl, #20]
 8010a78:	f8c9 3004 	str.w	r3, [r9, #4]
 8010a7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a7e:	3301      	adds	r3, #1
 8010a80:	e9c4 1006 	strd	r1, r0, [r4, #24]
 8010a84:	d039      	beq.n	8010afa <rcl_init+0x1f2>
 8010a86:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8010a8a:	b94b      	cbnz	r3, 8010aa0 <rcl_init+0x198>
 8010a8c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8010a90:	f000 f962 	bl	8010d58 <rcl_get_localhost_only>
 8010a94:	4606      	mov	r6, r0
 8010a96:	2800      	cmp	r0, #0
 8010a98:	d1cf      	bne.n	8010a3a <rcl_init+0x132>
 8010a9a:	f8d9 3000 	ldr.w	r3, [r9]
 8010a9e:	695c      	ldr	r4, [r3, #20]
 8010aa0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8010aa2:	aa18      	add	r2, sp, #96	; 0x60
 8010aa4:	a917      	add	r1, sp, #92	; 0x5c
 8010aa6:	f000 fedd 	bl	8011864 <rcl_validate_enclave_name>
 8010aaa:	4606      	mov	r6, r0
 8010aac:	2800      	cmp	r0, #0
 8010aae:	d1c4      	bne.n	8010a3a <rcl_init+0x132>
 8010ab0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010ab2:	bb03      	cbnz	r3, 8010af6 <rcl_init+0x1ee>
 8010ab4:	f8d9 1000 	ldr.w	r1, [r9]
 8010ab8:	694b      	ldr	r3, [r1, #20]
 8010aba:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8010abc:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8010ac0:	f000 fa16 	bl	8010ef0 <rcl_get_security_options_from_environment>
 8010ac4:	4606      	mov	r6, r0
 8010ac6:	2800      	cmp	r0, #0
 8010ac8:	d1b7      	bne.n	8010a3a <rcl_init+0x132>
 8010aca:	f8d9 1000 	ldr.w	r1, [r9]
 8010ace:	6948      	ldr	r0, [r1, #20]
 8010ad0:	3128      	adds	r1, #40	; 0x28
 8010ad2:	3018      	adds	r0, #24
 8010ad4:	f002 f80e 	bl	8012af4 <rmw_init>
 8010ad8:	4606      	mov	r6, r0
 8010ada:	2800      	cmp	r0, #0
 8010adc:	d0b8      	beq.n	8010a50 <rcl_init+0x148>
 8010ade:	f7ff fbd9 	bl	8010294 <rcl_convert_rmw_ret_to_rcl_ret>
 8010ae2:	4606      	mov	r6, r0
 8010ae4:	e7a9      	b.n	8010a3a <rcl_init+0x132>
 8010ae6:	2401      	movs	r4, #1
 8010ae8:	4618      	mov	r0, r3
 8010aea:	4621      	mov	r1, r4
 8010aec:	6014      	str	r4, [r2, #0]
 8010aee:	4623      	mov	r3, r4
 8010af0:	e7c0      	b.n	8010a74 <rcl_init+0x16c>
 8010af2:	260a      	movs	r6, #10
 8010af4:	e7ac      	b.n	8010a50 <rcl_init+0x148>
 8010af6:	2601      	movs	r6, #1
 8010af8:	e79f      	b.n	8010a3a <rcl_init+0x132>
 8010afa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010afe:	f7ff fc51 	bl	80103a4 <rcl_get_default_domain_id>
 8010b02:	4606      	mov	r6, r0
 8010b04:	2800      	cmp	r0, #0
 8010b06:	d198      	bne.n	8010a3a <rcl_init+0x132>
 8010b08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b0a:	3301      	adds	r3, #1
 8010b0c:	f8d9 3000 	ldr.w	r3, [r9]
 8010b10:	bf08      	it	eq
 8010b12:	6260      	streq	r0, [r4, #36]	; 0x24
 8010b14:	695c      	ldr	r4, [r3, #20]
 8010b16:	e7b6      	b.n	8010a86 <rcl_init+0x17e>
 8010b18:	2000c1d0 	.word	0x2000c1d0

08010b1c <rcl_get_zero_initialized_init_options>:
 8010b1c:	2000      	movs	r0, #0
 8010b1e:	4770      	bx	lr

08010b20 <rcl_init_options_init>:
 8010b20:	b084      	sub	sp, #16
 8010b22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b24:	b091      	sub	sp, #68	; 0x44
 8010b26:	af17      	add	r7, sp, #92	; 0x5c
 8010b28:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 8010b2c:	2800      	cmp	r0, #0
 8010b2e:	d044      	beq.n	8010bba <rcl_init_options_init+0x9a>
 8010b30:	6803      	ldr	r3, [r0, #0]
 8010b32:	4606      	mov	r6, r0
 8010b34:	b133      	cbz	r3, 8010b44 <rcl_init_options_init+0x24>
 8010b36:	2464      	movs	r4, #100	; 0x64
 8010b38:	4620      	mov	r0, r4
 8010b3a:	b011      	add	sp, #68	; 0x44
 8010b3c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010b40:	b004      	add	sp, #16
 8010b42:	4770      	bx	lr
 8010b44:	4638      	mov	r0, r7
 8010b46:	f7fa ff71 	bl	800ba2c <rcutils_allocator_is_valid>
 8010b4a:	2800      	cmp	r0, #0
 8010b4c:	d035      	beq.n	8010bba <rcl_init_options_init+0x9a>
 8010b4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010b50:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8010b52:	2050      	movs	r0, #80	; 0x50
 8010b54:	4798      	blx	r3
 8010b56:	4604      	mov	r4, r0
 8010b58:	6030      	str	r0, [r6, #0]
 8010b5a:	2800      	cmp	r0, #0
 8010b5c:	d02f      	beq.n	8010bbe <rcl_init_options_init+0x9e>
 8010b5e:	46bc      	mov	ip, r7
 8010b60:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010b64:	4625      	mov	r5, r4
 8010b66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010b68:	f8dc 3000 	ldr.w	r3, [ip]
 8010b6c:	602b      	str	r3, [r5, #0]
 8010b6e:	a802      	add	r0, sp, #8
 8010b70:	ad02      	add	r5, sp, #8
 8010b72:	f001 fe3b 	bl	80127ec <rmw_get_zero_initialized_init_options>
 8010b76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b78:	3418      	adds	r4, #24
 8010b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010b80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010b84:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010b88:	6833      	ldr	r3, [r6, #0]
 8010b8a:	e884 0003 	stmia.w	r4, {r0, r1}
 8010b8e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8010b92:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010b96:	f103 0018 	add.w	r0, r3, #24
 8010b9a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8010b9e:	f001 fecf 	bl	8012940 <rmw_init_options_init>
 8010ba2:	4604      	mov	r4, r0
 8010ba4:	2800      	cmp	r0, #0
 8010ba6:	d0c7      	beq.n	8010b38 <rcl_init_options_init+0x18>
 8010ba8:	6830      	ldr	r0, [r6, #0]
 8010baa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010bac:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8010bae:	4798      	blx	r3
 8010bb0:	4620      	mov	r0, r4
 8010bb2:	f7ff fb6f 	bl	8010294 <rcl_convert_rmw_ret_to_rcl_ret>
 8010bb6:	4604      	mov	r4, r0
 8010bb8:	e7be      	b.n	8010b38 <rcl_init_options_init+0x18>
 8010bba:	240b      	movs	r4, #11
 8010bbc:	e7bc      	b.n	8010b38 <rcl_init_options_init+0x18>
 8010bbe:	240a      	movs	r4, #10
 8010bc0:	e7ba      	b.n	8010b38 <rcl_init_options_init+0x18>
 8010bc2:	bf00      	nop

08010bc4 <rcl_init_options_fini>:
 8010bc4:	b570      	push	{r4, r5, r6, lr}
 8010bc6:	b086      	sub	sp, #24
 8010bc8:	b1c0      	cbz	r0, 8010bfc <rcl_init_options_fini+0x38>
 8010bca:	6804      	ldr	r4, [r0, #0]
 8010bcc:	4606      	mov	r6, r0
 8010bce:	b1ac      	cbz	r4, 8010bfc <rcl_init_options_fini+0x38>
 8010bd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010bd2:	ad01      	add	r5, sp, #4
 8010bd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010bd6:	6823      	ldr	r3, [r4, #0]
 8010bd8:	602b      	str	r3, [r5, #0]
 8010bda:	a801      	add	r0, sp, #4
 8010bdc:	f7fa ff26 	bl	800ba2c <rcutils_allocator_is_valid>
 8010be0:	b160      	cbz	r0, 8010bfc <rcl_init_options_fini+0x38>
 8010be2:	6830      	ldr	r0, [r6, #0]
 8010be4:	3018      	adds	r0, #24
 8010be6:	f001 ff45 	bl	8012a74 <rmw_init_options_fini>
 8010bea:	4604      	mov	r4, r0
 8010bec:	b950      	cbnz	r0, 8010c04 <rcl_init_options_fini+0x40>
 8010bee:	6830      	ldr	r0, [r6, #0]
 8010bf0:	9b02      	ldr	r3, [sp, #8]
 8010bf2:	9905      	ldr	r1, [sp, #20]
 8010bf4:	4798      	blx	r3
 8010bf6:	4620      	mov	r0, r4
 8010bf8:	b006      	add	sp, #24
 8010bfa:	bd70      	pop	{r4, r5, r6, pc}
 8010bfc:	240b      	movs	r4, #11
 8010bfe:	4620      	mov	r0, r4
 8010c00:	b006      	add	sp, #24
 8010c02:	bd70      	pop	{r4, r5, r6, pc}
 8010c04:	f7ff fb46 	bl	8010294 <rcl_convert_rmw_ret_to_rcl_ret>
 8010c08:	4604      	mov	r4, r0
 8010c0a:	e7f8      	b.n	8010bfe <rcl_init_options_fini+0x3a>

08010c0c <rcl_init_options_copy>:
 8010c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c10:	b096      	sub	sp, #88	; 0x58
 8010c12:	2800      	cmp	r0, #0
 8010c14:	d063      	beq.n	8010cde <rcl_init_options_copy+0xd2>
 8010c16:	6806      	ldr	r6, [r0, #0]
 8010c18:	4605      	mov	r5, r0
 8010c1a:	2e00      	cmp	r6, #0
 8010c1c:	d05f      	beq.n	8010cde <rcl_init_options_copy+0xd2>
 8010c1e:	460c      	mov	r4, r1
 8010c20:	2900      	cmp	r1, #0
 8010c22:	d05c      	beq.n	8010cde <rcl_init_options_copy+0xd2>
 8010c24:	680b      	ldr	r3, [r1, #0]
 8010c26:	b123      	cbz	r3, 8010c32 <rcl_init_options_copy+0x26>
 8010c28:	2664      	movs	r6, #100	; 0x64
 8010c2a:	4630      	mov	r0, r6
 8010c2c:	b016      	add	sp, #88	; 0x58
 8010c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c32:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010c34:	af11      	add	r7, sp, #68	; 0x44
 8010c36:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010c38:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 8010c3c:	6833      	ldr	r3, [r6, #0]
 8010c3e:	603b      	str	r3, [r7, #0]
 8010c40:	4640      	mov	r0, r8
 8010c42:	f7fa fef3 	bl	800ba2c <rcutils_allocator_is_valid>
 8010c46:	2800      	cmp	r0, #0
 8010c48:	d049      	beq.n	8010cde <rcl_init_options_copy+0xd2>
 8010c4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010c4c:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010c4e:	2050      	movs	r0, #80	; 0x50
 8010c50:	4798      	blx	r3
 8010c52:	4606      	mov	r6, r0
 8010c54:	6020      	str	r0, [r4, #0]
 8010c56:	2800      	cmp	r0, #0
 8010c58:	d077      	beq.n	8010d4a <rcl_init_options_copy+0x13e>
 8010c5a:	46c4      	mov	ip, r8
 8010c5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010c60:	4637      	mov	r7, r6
 8010c62:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010c64:	f8dc 3000 	ldr.w	r3, [ip]
 8010c68:	603b      	str	r3, [r7, #0]
 8010c6a:	a802      	add	r0, sp, #8
 8010c6c:	af02      	add	r7, sp, #8
 8010c6e:	f001 fdbd 	bl	80127ec <rmw_get_zero_initialized_init_options>
 8010c72:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010c74:	3618      	adds	r6, #24
 8010c76:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010c78:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010c7a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010c7c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010c7e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010c80:	e897 0003 	ldmia.w	r7, {r0, r1}
 8010c84:	ab16      	add	r3, sp, #88	; 0x58
 8010c86:	e886 0003 	stmia.w	r6, {r0, r1}
 8010c8a:	e913 0003 	ldmdb	r3, {r0, r1}
 8010c8e:	6823      	ldr	r3, [r4, #0]
 8010c90:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010c94:	f103 0018 	add.w	r0, r3, #24
 8010c98:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8010c9c:	f001 fe50 	bl	8012940 <rmw_init_options_init>
 8010ca0:	4606      	mov	r6, r0
 8010ca2:	bb08      	cbnz	r0, 8010ce8 <rcl_init_options_copy+0xdc>
 8010ca4:	682f      	ldr	r7, [r5, #0]
 8010ca6:	f8d4 c000 	ldr.w	ip, [r4]
 8010caa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010cac:	4666      	mov	r6, ip
 8010cae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	6033      	str	r3, [r6, #0]
 8010cb4:	f10c 0018 	add.w	r0, ip, #24
 8010cb8:	f001 fedc 	bl	8012a74 <rmw_init_options_fini>
 8010cbc:	4607      	mov	r7, r0
 8010cbe:	b1f0      	cbz	r0, 8010cfe <rcl_init_options_copy+0xf2>
 8010cc0:	f7fa fec2 	bl	800ba48 <rcutils_get_error_string>
 8010cc4:	f7fa fed6 	bl	800ba74 <rcutils_reset_error>
 8010cc8:	4620      	mov	r0, r4
 8010cca:	f7ff ff7b 	bl	8010bc4 <rcl_init_options_fini>
 8010cce:	4606      	mov	r6, r0
 8010cd0:	2800      	cmp	r0, #0
 8010cd2:	d1aa      	bne.n	8010c2a <rcl_init_options_copy+0x1e>
 8010cd4:	4638      	mov	r0, r7
 8010cd6:	f7ff fadd 	bl	8010294 <rcl_convert_rmw_ret_to_rcl_ret>
 8010cda:	4606      	mov	r6, r0
 8010cdc:	e7a5      	b.n	8010c2a <rcl_init_options_copy+0x1e>
 8010cde:	260b      	movs	r6, #11
 8010ce0:	4630      	mov	r0, r6
 8010ce2:	b016      	add	sp, #88	; 0x58
 8010ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ce8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010cea:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010cec:	6820      	ldr	r0, [r4, #0]
 8010cee:	4798      	blx	r3
 8010cf0:	4630      	mov	r0, r6
 8010cf2:	f7ff facf 	bl	8010294 <rcl_convert_rmw_ret_to_rcl_ret>
 8010cf6:	4606      	mov	r6, r0
 8010cf8:	2800      	cmp	r0, #0
 8010cfa:	d0d3      	beq.n	8010ca4 <rcl_init_options_copy+0x98>
 8010cfc:	e795      	b.n	8010c2a <rcl_init_options_copy+0x1e>
 8010cfe:	a802      	add	r0, sp, #8
 8010d00:	ae02      	add	r6, sp, #8
 8010d02:	6827      	ldr	r7, [r4, #0]
 8010d04:	f001 fd72 	bl	80127ec <rmw_get_zero_initialized_init_options>
 8010d08:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010d0a:	3718      	adds	r7, #24
 8010d0c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010d0e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010d10:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010d12:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010d14:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010d16:	e896 0003 	ldmia.w	r6, {r0, r1}
 8010d1a:	682a      	ldr	r2, [r5, #0]
 8010d1c:	6823      	ldr	r3, [r4, #0]
 8010d1e:	e887 0003 	stmia.w	r7, {r0, r1}
 8010d22:	f102 0018 	add.w	r0, r2, #24
 8010d26:	f103 0118 	add.w	r1, r3, #24
 8010d2a:	f001 fe61 	bl	80129f0 <rmw_init_options_copy>
 8010d2e:	4606      	mov	r6, r0
 8010d30:	2800      	cmp	r0, #0
 8010d32:	f43f af7a 	beq.w	8010c2a <rcl_init_options_copy+0x1e>
 8010d36:	f7fa fe87 	bl	800ba48 <rcutils_get_error_string>
 8010d3a:	f7fa fe9b 	bl	800ba74 <rcutils_reset_error>
 8010d3e:	4620      	mov	r0, r4
 8010d40:	f7ff ff40 	bl	8010bc4 <rcl_init_options_fini>
 8010d44:	b118      	cbz	r0, 8010d4e <rcl_init_options_copy+0x142>
 8010d46:	4606      	mov	r6, r0
 8010d48:	e76f      	b.n	8010c2a <rcl_init_options_copy+0x1e>
 8010d4a:	260a      	movs	r6, #10
 8010d4c:	e76d      	b.n	8010c2a <rcl_init_options_copy+0x1e>
 8010d4e:	4630      	mov	r0, r6
 8010d50:	f7ff faa0 	bl	8010294 <rcl_convert_rmw_ret_to_rcl_ret>
 8010d54:	4606      	mov	r6, r0
 8010d56:	e768      	b.n	8010c2a <rcl_init_options_copy+0x1e>

08010d58 <rcl_get_localhost_only>:
 8010d58:	b510      	push	{r4, lr}
 8010d5a:	b082      	sub	sp, #8
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	9301      	str	r3, [sp, #4]
 8010d60:	b1b8      	cbz	r0, 8010d92 <rcl_get_localhost_only+0x3a>
 8010d62:	4604      	mov	r4, r0
 8010d64:	a901      	add	r1, sp, #4
 8010d66:	480c      	ldr	r0, [pc, #48]	; (8010d98 <rcl_get_localhost_only+0x40>)
 8010d68:	f001 fd20 	bl	80127ac <rcutils_get_env>
 8010d6c:	b110      	cbz	r0, 8010d74 <rcl_get_localhost_only+0x1c>
 8010d6e:	2001      	movs	r0, #1
 8010d70:	b002      	add	sp, #8
 8010d72:	bd10      	pop	{r4, pc}
 8010d74:	9b01      	ldr	r3, [sp, #4]
 8010d76:	b113      	cbz	r3, 8010d7e <rcl_get_localhost_only+0x26>
 8010d78:	781a      	ldrb	r2, [r3, #0]
 8010d7a:	2a31      	cmp	r2, #49	; 0x31
 8010d7c:	d004      	beq.n	8010d88 <rcl_get_localhost_only+0x30>
 8010d7e:	2302      	movs	r3, #2
 8010d80:	2000      	movs	r0, #0
 8010d82:	7023      	strb	r3, [r4, #0]
 8010d84:	b002      	add	sp, #8
 8010d86:	bd10      	pop	{r4, pc}
 8010d88:	785b      	ldrb	r3, [r3, #1]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d1f7      	bne.n	8010d7e <rcl_get_localhost_only+0x26>
 8010d8e:	2301      	movs	r3, #1
 8010d90:	e7f6      	b.n	8010d80 <rcl_get_localhost_only+0x28>
 8010d92:	200b      	movs	r0, #11
 8010d94:	b002      	add	sp, #8
 8010d96:	bd10      	pop	{r4, pc}
 8010d98:	08016ddc 	.word	0x08016ddc

08010d9c <exact_match_lookup>:
 8010d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d9e:	f102 0708 	add.w	r7, r2, #8
 8010da2:	460b      	mov	r3, r1
 8010da4:	4614      	mov	r4, r2
 8010da6:	4606      	mov	r6, r0
 8010da8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8010dac:	b085      	sub	sp, #20
 8010dae:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010db2:	4618      	mov	r0, r3
 8010db4:	4918      	ldr	r1, [pc, #96]	; (8010e18 <exact_match_lookup+0x7c>)
 8010db6:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010dba:	f001 fce9 	bl	8012790 <rcutils_join_path>
 8010dbe:	7833      	ldrb	r3, [r6, #0]
 8010dc0:	2b2f      	cmp	r3, #47	; 0x2f
 8010dc2:	4605      	mov	r5, r0
 8010dc4:	d021      	beq.n	8010e0a <exact_match_lookup+0x6e>
 8010dc6:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8010dca:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010dce:	1c70      	adds	r0, r6, #1
 8010dd0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010dd4:	f001 fce2 	bl	801279c <rcutils_to_native_path>
 8010dd8:	4606      	mov	r6, r0
 8010dda:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8010dde:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010de2:	4631      	mov	r1, r6
 8010de4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010de8:	4628      	mov	r0, r5
 8010dea:	f001 fcd1 	bl	8012790 <rcutils_join_path>
 8010dee:	6862      	ldr	r2, [r4, #4]
 8010df0:	6921      	ldr	r1, [r4, #16]
 8010df2:	4603      	mov	r3, r0
 8010df4:	4630      	mov	r0, r6
 8010df6:	461e      	mov	r6, r3
 8010df8:	4790      	blx	r2
 8010dfa:	4628      	mov	r0, r5
 8010dfc:	6863      	ldr	r3, [r4, #4]
 8010dfe:	6921      	ldr	r1, [r4, #16]
 8010e00:	4798      	blx	r3
 8010e02:	4635      	mov	r5, r6
 8010e04:	4628      	mov	r0, r5
 8010e06:	b005      	add	sp, #20
 8010e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e0a:	7873      	ldrb	r3, [r6, #1]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d1da      	bne.n	8010dc6 <exact_match_lookup+0x2a>
 8010e10:	4628      	mov	r0, r5
 8010e12:	b005      	add	sp, #20
 8010e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e16:	bf00      	nop
 8010e18:	08016e2c 	.word	0x08016e2c

08010e1c <rcl_get_secure_root>:
 8010e1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e20:	b085      	sub	sp, #20
 8010e22:	b168      	cbz	r0, 8010e40 <rcl_get_secure_root+0x24>
 8010e24:	4607      	mov	r7, r0
 8010e26:	4608      	mov	r0, r1
 8010e28:	460c      	mov	r4, r1
 8010e2a:	f7fa fdff 	bl	800ba2c <rcutils_allocator_is_valid>
 8010e2e:	b138      	cbz	r0, 8010e40 <rcl_get_secure_root+0x24>
 8010e30:	2300      	movs	r3, #0
 8010e32:	482d      	ldr	r0, [pc, #180]	; (8010ee8 <rcl_get_secure_root+0xcc>)
 8010e34:	9303      	str	r3, [sp, #12]
 8010e36:	a903      	add	r1, sp, #12
 8010e38:	f001 fcb8 	bl	80127ac <rcutils_get_env>
 8010e3c:	4605      	mov	r5, r0
 8010e3e:	b120      	cbz	r0, 8010e4a <rcl_get_secure_root+0x2e>
 8010e40:	2500      	movs	r5, #0
 8010e42:	4628      	mov	r0, r5
 8010e44:	b005      	add	sp, #20
 8010e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e4a:	9b03      	ldr	r3, [sp, #12]
 8010e4c:	781a      	ldrb	r2, [r3, #0]
 8010e4e:	2a00      	cmp	r2, #0
 8010e50:	d0f6      	beq.n	8010e40 <rcl_get_secure_root+0x24>
 8010e52:	f104 090c 	add.w	r9, r4, #12
 8010e56:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010e5a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010e5e:	4618      	mov	r0, r3
 8010e60:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010e64:	f7fa ff30 	bl	800bcc8 <rcutils_strdup>
 8010e68:	4680      	mov	r8, r0
 8010e6a:	2800      	cmp	r0, #0
 8010e6c:	d0e8      	beq.n	8010e40 <rcl_get_secure_root+0x24>
 8010e6e:	481f      	ldr	r0, [pc, #124]	; (8010eec <rcl_get_secure_root+0xd0>)
 8010e70:	9503      	str	r5, [sp, #12]
 8010e72:	a903      	add	r1, sp, #12
 8010e74:	f001 fc9a 	bl	80127ac <rcutils_get_env>
 8010e78:	b160      	cbz	r0, 8010e94 <rcl_get_secure_root+0x78>
 8010e7a:	2600      	movs	r6, #0
 8010e7c:	6863      	ldr	r3, [r4, #4]
 8010e7e:	6921      	ldr	r1, [r4, #16]
 8010e80:	4630      	mov	r0, r6
 8010e82:	4798      	blx	r3
 8010e84:	4640      	mov	r0, r8
 8010e86:	6863      	ldr	r3, [r4, #4]
 8010e88:	6921      	ldr	r1, [r4, #16]
 8010e8a:	4798      	blx	r3
 8010e8c:	4628      	mov	r0, r5
 8010e8e:	b005      	add	sp, #20
 8010e90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e94:	9b03      	ldr	r3, [sp, #12]
 8010e96:	781e      	ldrb	r6, [r3, #0]
 8010e98:	b1f6      	cbz	r6, 8010ed8 <rcl_get_secure_root+0xbc>
 8010e9a:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010e9e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010ea8:	f7fa ff0e 	bl	800bcc8 <rcutils_strdup>
 8010eac:	4606      	mov	r6, r0
 8010eae:	2800      	cmp	r0, #0
 8010eb0:	d0e3      	beq.n	8010e7a <rcl_get_secure_root+0x5e>
 8010eb2:	4622      	mov	r2, r4
 8010eb4:	4641      	mov	r1, r8
 8010eb6:	f7ff ff71 	bl	8010d9c <exact_match_lookup>
 8010eba:	4605      	mov	r5, r0
 8010ebc:	2d00      	cmp	r5, #0
 8010ebe:	d0dd      	beq.n	8010e7c <rcl_get_secure_root+0x60>
 8010ec0:	4628      	mov	r0, r5
 8010ec2:	f001 fc63 	bl	801278c <rcutils_is_directory>
 8010ec6:	4607      	mov	r7, r0
 8010ec8:	2800      	cmp	r0, #0
 8010eca:	d1d7      	bne.n	8010e7c <rcl_get_secure_root+0x60>
 8010ecc:	4628      	mov	r0, r5
 8010ece:	6863      	ldr	r3, [r4, #4]
 8010ed0:	6921      	ldr	r1, [r4, #16]
 8010ed2:	4798      	blx	r3
 8010ed4:	463d      	mov	r5, r7
 8010ed6:	e7d1      	b.n	8010e7c <rcl_get_secure_root+0x60>
 8010ed8:	4638      	mov	r0, r7
 8010eda:	4622      	mov	r2, r4
 8010edc:	4641      	mov	r1, r8
 8010ede:	f7ff ff5d 	bl	8010d9c <exact_match_lookup>
 8010ee2:	4605      	mov	r5, r0
 8010ee4:	e7ea      	b.n	8010ebc <rcl_get_secure_root+0xa0>
 8010ee6:	bf00      	nop
 8010ee8:	08016e38 	.word	0x08016e38
 8010eec:	08016e50 	.word	0x08016e50

08010ef0 <rcl_get_security_options_from_environment>:
 8010ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ef4:	b082      	sub	sp, #8
 8010ef6:	4607      	mov	r7, r0
 8010ef8:	4688      	mov	r8, r1
 8010efa:	2400      	movs	r4, #0
 8010efc:	481d      	ldr	r0, [pc, #116]	; (8010f74 <rcl_get_security_options_from_environment+0x84>)
 8010efe:	9401      	str	r4, [sp, #4]
 8010f00:	a901      	add	r1, sp, #4
 8010f02:	4616      	mov	r6, r2
 8010f04:	f001 fc52 	bl	80127ac <rcutils_get_env>
 8010f08:	b120      	cbz	r0, 8010f14 <rcl_get_security_options_from_environment+0x24>
 8010f0a:	2501      	movs	r5, #1
 8010f0c:	4628      	mov	r0, r5
 8010f0e:	b002      	add	sp, #8
 8010f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f14:	4918      	ldr	r1, [pc, #96]	; (8010f78 <rcl_get_security_options_from_environment+0x88>)
 8010f16:	4604      	mov	r4, r0
 8010f18:	9801      	ldr	r0, [sp, #4]
 8010f1a:	f7ef f979 	bl	8000210 <strcmp>
 8010f1e:	4605      	mov	r5, r0
 8010f20:	b9c8      	cbnz	r0, 8010f56 <rcl_get_security_options_from_environment+0x66>
 8010f22:	9001      	str	r0, [sp, #4]
 8010f24:	b1ee      	cbz	r6, 8010f62 <rcl_get_security_options_from_environment+0x72>
 8010f26:	4815      	ldr	r0, [pc, #84]	; (8010f7c <rcl_get_security_options_from_environment+0x8c>)
 8010f28:	a901      	add	r1, sp, #4
 8010f2a:	f001 fc3f 	bl	80127ac <rcutils_get_env>
 8010f2e:	2800      	cmp	r0, #0
 8010f30:	d1eb      	bne.n	8010f0a <rcl_get_security_options_from_environment+0x1a>
 8010f32:	4913      	ldr	r1, [pc, #76]	; (8010f80 <rcl_get_security_options_from_environment+0x90>)
 8010f34:	9801      	ldr	r0, [sp, #4]
 8010f36:	f7ef f96b 	bl	8000210 <strcmp>
 8010f3a:	fab0 f080 	clz	r0, r0
 8010f3e:	0940      	lsrs	r0, r0, #5
 8010f40:	7030      	strb	r0, [r6, #0]
 8010f42:	4641      	mov	r1, r8
 8010f44:	4638      	mov	r0, r7
 8010f46:	f7ff ff69 	bl	8010e1c <rcl_get_secure_root>
 8010f4a:	b160      	cbz	r0, 8010f66 <rcl_get_security_options_from_environment+0x76>
 8010f4c:	6070      	str	r0, [r6, #4]
 8010f4e:	4628      	mov	r0, r5
 8010f50:	b002      	add	sp, #8
 8010f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f56:	4625      	mov	r5, r4
 8010f58:	4628      	mov	r0, r5
 8010f5a:	7034      	strb	r4, [r6, #0]
 8010f5c:	b002      	add	sp, #8
 8010f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f62:	250b      	movs	r5, #11
 8010f64:	e7d2      	b.n	8010f0c <rcl_get_security_options_from_environment+0x1c>
 8010f66:	7835      	ldrb	r5, [r6, #0]
 8010f68:	f1a5 0501 	sub.w	r5, r5, #1
 8010f6c:	fab5 f585 	clz	r5, r5
 8010f70:	096d      	lsrs	r5, r5, #5
 8010f72:	e7cb      	b.n	8010f0c <rcl_get_security_options_from_environment+0x1c>
 8010f74:	08016df0 	.word	0x08016df0
 8010f78:	08016e04 	.word	0x08016e04
 8010f7c:	08016e0c 	.word	0x08016e0c
 8010f80:	08016e24 	.word	0x08016e24

08010f84 <rcl_service_get_rmw_handle>:
 8010f84:	b110      	cbz	r0, 8010f8c <rcl_service_get_rmw_handle+0x8>
 8010f86:	6800      	ldr	r0, [r0, #0]
 8010f88:	b100      	cbz	r0, 8010f8c <rcl_service_get_rmw_handle+0x8>
 8010f8a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8010f8c:	4770      	bx	lr
 8010f8e:	bf00      	nop

08010f90 <rcl_take_request>:
 8010f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f92:	460e      	mov	r6, r1
 8010f94:	460c      	mov	r4, r1
 8010f96:	4607      	mov	r7, r0
 8010f98:	4694      	mov	ip, r2
 8010f9a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010f9c:	b08d      	sub	sp, #52	; 0x34
 8010f9e:	ad06      	add	r5, sp, #24
 8010fa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010fa2:	e896 0003 	ldmia.w	r6, {r0, r1}
 8010fa6:	e885 0003 	stmia.w	r5, {r0, r1}
 8010faa:	b1e7      	cbz	r7, 8010fe6 <rcl_take_request+0x56>
 8010fac:	683b      	ldr	r3, [r7, #0]
 8010fae:	b1d3      	cbz	r3, 8010fe6 <rcl_take_request+0x56>
 8010fb0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8010fb2:	b1c0      	cbz	r0, 8010fe6 <rcl_take_request+0x56>
 8010fb4:	4662      	mov	r2, ip
 8010fb6:	b30a      	cbz	r2, 8010ffc <rcl_take_request+0x6c>
 8010fb8:	2500      	movs	r5, #0
 8010fba:	f10d 0307 	add.w	r3, sp, #7
 8010fbe:	a902      	add	r1, sp, #8
 8010fc0:	f88d 5007 	strb.w	r5, [sp, #7]
 8010fc4:	f001 ff72 	bl	8012eac <rmw_take_request>
 8010fc8:	4606      	mov	r6, r0
 8010fca:	b178      	cbz	r0, 8010fec <rcl_take_request+0x5c>
 8010fcc:	280a      	cmp	r0, #10
 8010fce:	bf18      	it	ne
 8010fd0:	2601      	movne	r6, #1
 8010fd2:	ad06      	add	r5, sp, #24
 8010fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010fd8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010fdc:	e884 0003 	stmia.w	r4, {r0, r1}
 8010fe0:	4630      	mov	r0, r6
 8010fe2:	b00d      	add	sp, #52	; 0x34
 8010fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fe6:	f44f 7616 	mov.w	r6, #600	; 0x258
 8010fea:	e7f2      	b.n	8010fd2 <rcl_take_request+0x42>
 8010fec:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010ff0:	f240 2359 	movw	r3, #601	; 0x259
 8010ff4:	2a00      	cmp	r2, #0
 8010ff6:	bf08      	it	eq
 8010ff8:	461e      	moveq	r6, r3
 8010ffa:	e7ea      	b.n	8010fd2 <rcl_take_request+0x42>
 8010ffc:	260b      	movs	r6, #11
 8010ffe:	e7e8      	b.n	8010fd2 <rcl_take_request+0x42>

08011000 <rcl_send_response>:
 8011000:	b160      	cbz	r0, 801101c <rcl_send_response+0x1c>
 8011002:	6800      	ldr	r0, [r0, #0]
 8011004:	b150      	cbz	r0, 801101c <rcl_send_response+0x1c>
 8011006:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8011008:	b140      	cbz	r0, 801101c <rcl_send_response+0x1c>
 801100a:	b151      	cbz	r1, 8011022 <rcl_send_response+0x22>
 801100c:	b510      	push	{r4, lr}
 801100e:	b152      	cbz	r2, 8011026 <rcl_send_response+0x26>
 8011010:	f001 ffaa 	bl	8012f68 <rmw_send_response>
 8011014:	3800      	subs	r0, #0
 8011016:	bf18      	it	ne
 8011018:	2001      	movne	r0, #1
 801101a:	bd10      	pop	{r4, pc}
 801101c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8011020:	4770      	bx	lr
 8011022:	200b      	movs	r0, #11
 8011024:	4770      	bx	lr
 8011026:	200b      	movs	r0, #11
 8011028:	bd10      	pop	{r4, pc}
 801102a:	bf00      	nop

0801102c <rcl_get_system_time>:
 801102c:	4608      	mov	r0, r1
 801102e:	f7fa bfb9 	b.w	800bfa4 <rcutils_system_time_now>
 8011032:	bf00      	nop

08011034 <rcl_get_steady_time>:
 8011034:	4608      	mov	r0, r1
 8011036:	f7fa bfdd 	b.w	800bff4 <rcutils_steady_time_now>
 801103a:	bf00      	nop

0801103c <rcl_get_ros_time>:
 801103c:	7a03      	ldrb	r3, [r0, #8]
 801103e:	b510      	push	{r4, lr}
 8011040:	460c      	mov	r4, r1
 8011042:	b133      	cbz	r3, 8011052 <rcl_get_ros_time+0x16>
 8011044:	2105      	movs	r1, #5
 8011046:	f001 faff 	bl	8012648 <__atomic_load_8>
 801104a:	e9c4 0100 	strd	r0, r1, [r4]
 801104e:	2000      	movs	r0, #0
 8011050:	bd10      	pop	{r4, pc}
 8011052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011056:	4608      	mov	r0, r1
 8011058:	f7fa bfa4 	b.w	800bfa4 <rcutils_system_time_now>

0801105c <rcl_clock_init>:
 801105c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011060:	4606      	mov	r6, r0
 8011062:	4610      	mov	r0, r2
 8011064:	4614      	mov	r4, r2
 8011066:	460d      	mov	r5, r1
 8011068:	f7fa fce0 	bl	800ba2c <rcutils_allocator_is_valid>
 801106c:	b128      	cbz	r0, 801107a <rcl_clock_init+0x1e>
 801106e:	2e03      	cmp	r6, #3
 8011070:	d803      	bhi.n	801107a <rcl_clock_init+0x1e>
 8011072:	e8df f006 	tbb	[pc, r6]
 8011076:	2c1b      	.short	0x2c1b
 8011078:	0554      	.short	0x0554
 801107a:	200b      	movs	r0, #11
 801107c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011080:	2d00      	cmp	r5, #0
 8011082:	d0fa      	beq.n	801107a <rcl_clock_init+0x1e>
 8011084:	2c00      	cmp	r4, #0
 8011086:	d0f8      	beq.n	801107a <rcl_clock_init+0x1e>
 8011088:	2600      	movs	r6, #0
 801108a:	702e      	strb	r6, [r5, #0]
 801108c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801108e:	f105 0714 	add.w	r7, r5, #20
 8011092:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8011096:	612e      	str	r6, [r5, #16]
 8011098:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801109a:	6823      	ldr	r3, [r4, #0]
 801109c:	603b      	str	r3, [r7, #0]
 801109e:	2303      	movs	r3, #3
 80110a0:	4a2b      	ldr	r2, [pc, #172]	; (8011150 <rcl_clock_init+0xf4>)
 80110a2:	702b      	strb	r3, [r5, #0]
 80110a4:	4630      	mov	r0, r6
 80110a6:	60ea      	str	r2, [r5, #12]
 80110a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110ac:	2d00      	cmp	r5, #0
 80110ae:	d0e4      	beq.n	801107a <rcl_clock_init+0x1e>
 80110b0:	2600      	movs	r6, #0
 80110b2:	702e      	strb	r6, [r5, #0]
 80110b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80110b6:	f105 0714 	add.w	r7, r5, #20
 80110ba:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80110be:	e9c5 6603 	strd	r6, r6, [r5, #12]
 80110c2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80110c4:	6823      	ldr	r3, [r4, #0]
 80110c6:	603b      	str	r3, [r7, #0]
 80110c8:	4630      	mov	r0, r6
 80110ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110ce:	2d00      	cmp	r5, #0
 80110d0:	d0d3      	beq.n	801107a <rcl_clock_init+0x1e>
 80110d2:	2c00      	cmp	r4, #0
 80110d4:	d0d1      	beq.n	801107a <rcl_clock_init+0x1e>
 80110d6:	2600      	movs	r6, #0
 80110d8:	702e      	strb	r6, [r5, #0]
 80110da:	46a4      	mov	ip, r4
 80110dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80110e0:	f105 0714 	add.w	r7, r5, #20
 80110e4:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80110e8:	e9c5 6603 	strd	r6, r6, [r5, #12]
 80110ec:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80110ee:	f8dc 3000 	ldr.w	r3, [ip]
 80110f2:	603b      	str	r3, [r7, #0]
 80110f4:	6921      	ldr	r1, [r4, #16]
 80110f6:	6823      	ldr	r3, [r4, #0]
 80110f8:	2010      	movs	r0, #16
 80110fa:	4798      	blx	r3
 80110fc:	4603      	mov	r3, r0
 80110fe:	6128      	str	r0, [r5, #16]
 8011100:	b318      	cbz	r0, 801114a <rcl_clock_init+0xee>
 8011102:	f04f 0800 	mov.w	r8, #0
 8011106:	f04f 0900 	mov.w	r9, #0
 801110a:	7206      	strb	r6, [r0, #8]
 801110c:	e9c3 8900 	strd	r8, r9, [r3]
 8011110:	2301      	movs	r3, #1
 8011112:	4a10      	ldr	r2, [pc, #64]	; (8011154 <rcl_clock_init+0xf8>)
 8011114:	702b      	strb	r3, [r5, #0]
 8011116:	4630      	mov	r0, r6
 8011118:	60ea      	str	r2, [r5, #12]
 801111a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801111e:	2d00      	cmp	r5, #0
 8011120:	d0ab      	beq.n	801107a <rcl_clock_init+0x1e>
 8011122:	2c00      	cmp	r4, #0
 8011124:	d0a9      	beq.n	801107a <rcl_clock_init+0x1e>
 8011126:	2600      	movs	r6, #0
 8011128:	702e      	strb	r6, [r5, #0]
 801112a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801112c:	f105 0714 	add.w	r7, r5, #20
 8011130:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8011134:	612e      	str	r6, [r5, #16]
 8011136:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011138:	6823      	ldr	r3, [r4, #0]
 801113a:	603b      	str	r3, [r7, #0]
 801113c:	2302      	movs	r3, #2
 801113e:	4a06      	ldr	r2, [pc, #24]	; (8011158 <rcl_clock_init+0xfc>)
 8011140:	702b      	strb	r3, [r5, #0]
 8011142:	4630      	mov	r0, r6
 8011144:	60ea      	str	r2, [r5, #12]
 8011146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801114a:	200a      	movs	r0, #10
 801114c:	e796      	b.n	801107c <rcl_clock_init+0x20>
 801114e:	bf00      	nop
 8011150:	08011035 	.word	0x08011035
 8011154:	0801103d 	.word	0x0801103d
 8011158:	0801102d 	.word	0x0801102d

0801115c <rcl_clock_get_now>:
 801115c:	b140      	cbz	r0, 8011170 <rcl_clock_get_now+0x14>
 801115e:	b139      	cbz	r1, 8011170 <rcl_clock_get_now+0x14>
 8011160:	7803      	ldrb	r3, [r0, #0]
 8011162:	b11b      	cbz	r3, 801116c <rcl_clock_get_now+0x10>
 8011164:	68c3      	ldr	r3, [r0, #12]
 8011166:	b10b      	cbz	r3, 801116c <rcl_clock_get_now+0x10>
 8011168:	6900      	ldr	r0, [r0, #16]
 801116a:	4718      	bx	r3
 801116c:	2001      	movs	r0, #1
 801116e:	4770      	bx	lr
 8011170:	200b      	movs	r0, #11
 8011172:	4770      	bx	lr

08011174 <rcl_clock_add_jump_callback>:
 8011174:	b082      	sub	sp, #8
 8011176:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801117a:	a908      	add	r1, sp, #32
 801117c:	e881 000c 	stmia.w	r1, {r2, r3}
 8011180:	e9dd 560e 	ldrd	r5, r6, [sp, #56]	; 0x38
 8011184:	b340      	cbz	r0, 80111d8 <rcl_clock_add_jump_callback+0x64>
 8011186:	4604      	mov	r4, r0
 8011188:	3014      	adds	r0, #20
 801118a:	f7fa fc4f 	bl	800ba2c <rcutils_allocator_is_valid>
 801118e:	b318      	cbz	r0, 80111d8 <rcl_clock_add_jump_callback+0x64>
 8011190:	b315      	cbz	r5, 80111d8 <rcl_clock_add_jump_callback+0x64>
 8011192:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011196:	2a00      	cmp	r2, #0
 8011198:	f173 0300 	sbcs.w	r3, r3, #0
 801119c:	db1c      	blt.n	80111d8 <rcl_clock_add_jump_callback+0x64>
 801119e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80111a2:	2a01      	cmp	r2, #1
 80111a4:	f173 0300 	sbcs.w	r3, r3, #0
 80111a8:	da16      	bge.n	80111d8 <rcl_clock_add_jump_callback+0x64>
 80111aa:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 80111ae:	2f00      	cmp	r7, #0
 80111b0:	d03e      	beq.n	8011230 <rcl_clock_add_jump_callback+0xbc>
 80111b2:	2300      	movs	r3, #0
 80111b4:	f100 0220 	add.w	r2, r0, #32
 80111b8:	e003      	b.n	80111c2 <rcl_clock_add_jump_callback+0x4e>
 80111ba:	42bb      	cmp	r3, r7
 80111bc:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80111c0:	d00f      	beq.n	80111e2 <rcl_clock_add_jump_callback+0x6e>
 80111c2:	f852 1c20 	ldr.w	r1, [r2, #-32]
 80111c6:	42a9      	cmp	r1, r5
 80111c8:	f103 0301 	add.w	r3, r3, #1
 80111cc:	d1f5      	bne.n	80111ba <rcl_clock_add_jump_callback+0x46>
 80111ce:	6811      	ldr	r1, [r2, #0]
 80111d0:	42b1      	cmp	r1, r6
 80111d2:	d1f2      	bne.n	80111ba <rcl_clock_add_jump_callback+0x46>
 80111d4:	2001      	movs	r0, #1
 80111d6:	e000      	b.n	80111da <rcl_clock_add_jump_callback+0x66>
 80111d8:	200b      	movs	r0, #11
 80111da:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111de:	b002      	add	sp, #8
 80111e0:	4770      	bx	lr
 80111e2:	3301      	adds	r3, #1
 80111e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80111e8:	00d9      	lsls	r1, r3, #3
 80111ea:	69e3      	ldr	r3, [r4, #28]
 80111ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80111ee:	4798      	blx	r3
 80111f0:	4684      	mov	ip, r0
 80111f2:	b1d8      	cbz	r0, 801122c <rcl_clock_add_jump_callback+0xb8>
 80111f4:	af08      	add	r7, sp, #32
 80111f6:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80111fa:	6060      	str	r0, [r4, #4]
 80111fc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80111fe:	eb0e 098e 	add.w	r9, lr, lr, lsl #2
 8011202:	eb0c 08c9 	add.w	r8, ip, r9, lsl #3
 8011206:	f84c 5039 	str.w	r5, [ip, r9, lsl #3]
 801120a:	f108 0508 	add.w	r5, r8, #8
 801120e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011210:	e897 0003 	ldmia.w	r7, {r0, r1}
 8011214:	f10e 0301 	add.w	r3, lr, #1
 8011218:	e885 0003 	stmia.w	r5, {r0, r1}
 801121c:	f8c8 6020 	str.w	r6, [r8, #32]
 8011220:	60a3      	str	r3, [r4, #8]
 8011222:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011226:	2000      	movs	r0, #0
 8011228:	b002      	add	sp, #8
 801122a:	4770      	bx	lr
 801122c:	200a      	movs	r0, #10
 801122e:	e7d4      	b.n	80111da <rcl_clock_add_jump_callback+0x66>
 8011230:	2128      	movs	r1, #40	; 0x28
 8011232:	e7da      	b.n	80111ea <rcl_clock_add_jump_callback+0x76>

08011234 <rcl_clock_remove_jump_callback>:
 8011234:	2800      	cmp	r0, #0
 8011236:	d057      	beq.n	80112e8 <rcl_clock_remove_jump_callback+0xb4>
 8011238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801123c:	4607      	mov	r7, r0
 801123e:	3014      	adds	r0, #20
 8011240:	460c      	mov	r4, r1
 8011242:	4615      	mov	r5, r2
 8011244:	f7fa fbf2 	bl	800ba2c <rcutils_allocator_is_valid>
 8011248:	2800      	cmp	r0, #0
 801124a:	d03a      	beq.n	80112c2 <rcl_clock_remove_jump_callback+0x8e>
 801124c:	2c00      	cmp	r4, #0
 801124e:	d038      	beq.n	80112c2 <rcl_clock_remove_jump_callback+0x8e>
 8011250:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8011254:	f1b8 0f00 	cmp.w	r8, #0
 8011258:	d00c      	beq.n	8011274 <rcl_clock_remove_jump_callback+0x40>
 801125a:	f8d7 e004 	ldr.w	lr, [r7, #4]
 801125e:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
 8011262:	4676      	mov	r6, lr
 8011264:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
 8011268:	6833      	ldr	r3, [r6, #0]
 801126a:	42a3      	cmp	r3, r4
 801126c:	d005      	beq.n	801127a <rcl_clock_remove_jump_callback+0x46>
 801126e:	3628      	adds	r6, #40	; 0x28
 8011270:	45b4      	cmp	ip, r6
 8011272:	d1f9      	bne.n	8011268 <rcl_clock_remove_jump_callback+0x34>
 8011274:	2001      	movs	r0, #1
 8011276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801127a:	6a33      	ldr	r3, [r6, #32]
 801127c:	3628      	adds	r6, #40	; 0x28
 801127e:	4566      	cmp	r6, ip
 8011280:	d02a      	beq.n	80112d8 <rcl_clock_remove_jump_callback+0xa4>
 8011282:	42ab      	cmp	r3, r5
 8011284:	d1f0      	bne.n	8011268 <rcl_clock_remove_jump_callback+0x34>
 8011286:	4635      	mov	r5, r6
 8011288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801128a:	f1a6 0428 	sub.w	r4, r6, #40	; 0x28
 801128e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011294:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011298:	3628      	adds	r6, #40	; 0x28
 801129a:	4566      	cmp	r6, ip
 801129c:	e884 0003 	stmia.w	r4, {r0, r1}
 80112a0:	d1f1      	bne.n	8011286 <rcl_clock_remove_jump_callback+0x52>
 80112a2:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 80112a6:	60bc      	str	r4, [r7, #8]
 80112a8:	b174      	cbz	r4, 80112c8 <rcl_clock_remove_jump_callback+0x94>
 80112aa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80112ae:	69fb      	ldr	r3, [r7, #28]
 80112b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112b2:	00e1      	lsls	r1, r4, #3
 80112b4:	4670      	mov	r0, lr
 80112b6:	4798      	blx	r3
 80112b8:	b1c0      	cbz	r0, 80112ec <rcl_clock_remove_jump_callback+0xb8>
 80112ba:	6078      	str	r0, [r7, #4]
 80112bc:	2000      	movs	r0, #0
 80112be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112c2:	200b      	movs	r0, #11
 80112c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112c8:	4670      	mov	r0, lr
 80112ca:	69bb      	ldr	r3, [r7, #24]
 80112cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80112ce:	4798      	blx	r3
 80112d0:	607c      	str	r4, [r7, #4]
 80112d2:	4620      	mov	r0, r4
 80112d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112d8:	42ab      	cmp	r3, r5
 80112da:	d1cb      	bne.n	8011274 <rcl_clock_remove_jump_callback+0x40>
 80112dc:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 80112e0:	60bc      	str	r4, [r7, #8]
 80112e2:	2c00      	cmp	r4, #0
 80112e4:	d1e1      	bne.n	80112aa <rcl_clock_remove_jump_callback+0x76>
 80112e6:	e7ef      	b.n	80112c8 <rcl_clock_remove_jump_callback+0x94>
 80112e8:	200b      	movs	r0, #11
 80112ea:	4770      	bx	lr
 80112ec:	200a      	movs	r0, #10
 80112ee:	e7e9      	b.n	80112c4 <rcl_clock_remove_jump_callback+0x90>

080112f0 <_rcl_timer_time_jump>:
 80112f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112f4:	4682      	mov	sl, r0
 80112f6:	b087      	sub	sp, #28
 80112f8:	4614      	mov	r4, r2
 80112fa:	b131      	cbz	r1, 801130a <_rcl_timer_time_jump+0x1a>
 80112fc:	7803      	ldrb	r3, [r0, #0]
 80112fe:	3b02      	subs	r3, #2
 8011300:	2b01      	cmp	r3, #1
 8011302:	d944      	bls.n	801138e <_rcl_timer_time_jump+0x9e>
 8011304:	b007      	add	sp, #28
 8011306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801130a:	6813      	ldr	r3, [r2, #0]
 801130c:	a904      	add	r1, sp, #16
 801130e:	6818      	ldr	r0, [r3, #0]
 8011310:	f7ff ff24 	bl	801115c <rcl_clock_get_now>
 8011314:	2800      	cmp	r0, #0
 8011316:	d1f5      	bne.n	8011304 <_rcl_timer_time_jump+0x14>
 8011318:	6820      	ldr	r0, [r4, #0]
 801131a:	2105      	movs	r1, #5
 801131c:	3020      	adds	r0, #32
 801131e:	f001 f993 	bl	8012648 <__atomic_load_8>
 8011322:	4602      	mov	r2, r0
 8011324:	6820      	ldr	r0, [r4, #0]
 8011326:	460b      	mov	r3, r1
 8011328:	3028      	adds	r0, #40	; 0x28
 801132a:	2105      	movs	r1, #5
 801132c:	4690      	mov	r8, r2
 801132e:	4699      	mov	r9, r3
 8011330:	f001 f98a 	bl	8012648 <__atomic_load_8>
 8011334:	4602      	mov	r2, r0
 8011336:	6820      	ldr	r0, [r4, #0]
 8011338:	460b      	mov	r3, r1
 801133a:	3018      	adds	r0, #24
 801133c:	2105      	movs	r1, #5
 801133e:	461f      	mov	r7, r3
 8011340:	4616      	mov	r6, r2
 8011342:	f001 f981 	bl	8012648 <__atomic_load_8>
 8011346:	f89a 3000 	ldrb.w	r3, [sl]
 801134a:	9103      	str	r1, [sp, #12]
 801134c:	3b02      	subs	r3, #2
 801134e:	2b01      	cmp	r3, #1
 8011350:	4605      	mov	r5, r0
 8011352:	d93a      	bls.n	80113ca <_rcl_timer_time_jump+0xda>
 8011354:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8011358:	45b2      	cmp	sl, r6
 801135a:	eb7b 0307 	sbcs.w	r3, fp, r7
 801135e:	da64      	bge.n	801142a <_rcl_timer_time_jump+0x13a>
 8011360:	45c2      	cmp	sl, r8
 8011362:	eb7b 0309 	sbcs.w	r3, fp, r9
 8011366:	dacd      	bge.n	8011304 <_rcl_timer_time_jump+0x14>
 8011368:	6820      	ldr	r0, [r4, #0]
 801136a:	eb15 020a 	adds.w	r2, r5, sl
 801136e:	f04f 0505 	mov.w	r5, #5
 8011372:	eb41 030b 	adc.w	r3, r1, fp
 8011376:	3028      	adds	r0, #40	; 0x28
 8011378:	9500      	str	r5, [sp, #0]
 801137a:	f001 f999 	bl	80126b0 <__atomic_store_8>
 801137e:	6820      	ldr	r0, [r4, #0]
 8011380:	9500      	str	r5, [sp, #0]
 8011382:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011386:	3020      	adds	r0, #32
 8011388:	f001 f992 	bl	80126b0 <__atomic_store_8>
 801138c:	e7ba      	b.n	8011304 <_rcl_timer_time_jump+0x14>
 801138e:	6813      	ldr	r3, [r2, #0]
 8011390:	a904      	add	r1, sp, #16
 8011392:	6818      	ldr	r0, [r3, #0]
 8011394:	f7ff fee2 	bl	801115c <rcl_clock_get_now>
 8011398:	2800      	cmp	r0, #0
 801139a:	d1b3      	bne.n	8011304 <_rcl_timer_time_jump+0x14>
 801139c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80113a0:	4313      	orrs	r3, r2
 80113a2:	d0af      	beq.n	8011304 <_rcl_timer_time_jump+0x14>
 80113a4:	6820      	ldr	r0, [r4, #0]
 80113a6:	2105      	movs	r1, #5
 80113a8:	3028      	adds	r0, #40	; 0x28
 80113aa:	f001 f94d 	bl	8012648 <__atomic_load_8>
 80113ae:	9a04      	ldr	r2, [sp, #16]
 80113b0:	6823      	ldr	r3, [r4, #0]
 80113b2:	9e05      	ldr	r6, [sp, #20]
 80113b4:	1a82      	subs	r2, r0, r2
 80113b6:	f04f 0405 	mov.w	r4, #5
 80113ba:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80113be:	9400      	str	r4, [sp, #0]
 80113c0:	eb61 0306 	sbc.w	r3, r1, r6
 80113c4:	f001 f974 	bl	80126b0 <__atomic_store_8>
 80113c8:	e79c      	b.n	8011304 <_rcl_timer_time_jump+0x14>
 80113ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80113ce:	4313      	orrs	r3, r2
 80113d0:	d098      	beq.n	8011304 <_rcl_timer_time_jump+0x14>
 80113d2:	6820      	ldr	r0, [r4, #0]
 80113d4:	f04f 0805 	mov.w	r8, #5
 80113d8:	2300      	movs	r3, #0
 80113da:	3030      	adds	r0, #48	; 0x30
 80113dc:	f8cd 8000 	str.w	r8, [sp]
 80113e0:	2200      	movs	r2, #0
 80113e2:	f001 f999 	bl	8012718 <__atomic_exchange_8>
 80113e6:	4606      	mov	r6, r0
 80113e8:	460f      	mov	r7, r1
 80113ea:	ea56 0307 	orrs.w	r3, r6, r7
 80113ee:	d089      	beq.n	8011304 <_rcl_timer_time_jump+0x14>
 80113f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80113f4:	1b92      	subs	r2, r2, r6
 80113f6:	eb63 0301 	sbc.w	r3, r3, r1
 80113fa:	9903      	ldr	r1, [sp, #12]
 80113fc:	6820      	ldr	r0, [r4, #0]
 80113fe:	f8cd 8000 	str.w	r8, [sp]
 8011402:	1952      	adds	r2, r2, r5
 8011404:	eb43 0101 	adc.w	r1, r3, r1
 8011408:	460b      	mov	r3, r1
 801140a:	3028      	adds	r0, #40	; 0x28
 801140c:	f001 f950 	bl	80126b0 <__atomic_store_8>
 8011410:	9a04      	ldr	r2, [sp, #16]
 8011412:	6820      	ldr	r0, [r4, #0]
 8011414:	9b05      	ldr	r3, [sp, #20]
 8011416:	f8cd 8000 	str.w	r8, [sp]
 801141a:	1b92      	subs	r2, r2, r6
 801141c:	f100 0020 	add.w	r0, r0, #32
 8011420:	eb63 0307 	sbc.w	r3, r3, r7
 8011424:	f001 f944 	bl	80126b0 <__atomic_store_8>
 8011428:	e76c      	b.n	8011304 <_rcl_timer_time_jump+0x14>
 801142a:	6820      	ldr	r0, [r4, #0]
 801142c:	3008      	adds	r0, #8
 801142e:	f7ff fa55 	bl	80108dc <rcl_trigger_guard_condition>
 8011432:	e767      	b.n	8011304 <_rcl_timer_time_jump+0x14>

08011434 <rcl_get_zero_initialized_timer>:
 8011434:	4b01      	ldr	r3, [pc, #4]	; (801143c <rcl_get_zero_initialized_timer+0x8>)
 8011436:	6818      	ldr	r0, [r3, #0]
 8011438:	4770      	bx	lr
 801143a:	bf00      	nop
 801143c:	08016e70 	.word	0x08016e70

08011440 <rcl_timer_init>:
 8011440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011444:	b0ad      	sub	sp, #180	; 0xb4
 8011446:	4604      	mov	r4, r0
 8011448:	a839      	add	r0, sp, #228	; 0xe4
 801144a:	460d      	mov	r5, r1
 801144c:	4690      	mov	r8, r2
 801144e:	f7fa faed 	bl	800ba2c <rcutils_allocator_is_valid>
 8011452:	2800      	cmp	r0, #0
 8011454:	d072      	beq.n	801153c <rcl_timer_init+0xfc>
 8011456:	2c00      	cmp	r4, #0
 8011458:	d070      	beq.n	801153c <rcl_timer_init+0xfc>
 801145a:	2d00      	cmp	r5, #0
 801145c:	d06e      	beq.n	801153c <rcl_timer_init+0xfc>
 801145e:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8011462:	2a00      	cmp	r2, #0
 8011464:	f173 0300 	sbcs.w	r3, r3, #0
 8011468:	db68      	blt.n	801153c <rcl_timer_init+0xfc>
 801146a:	6823      	ldr	r3, [r4, #0]
 801146c:	b12b      	cbz	r3, 801147a <rcl_timer_init+0x3a>
 801146e:	f04f 0a64 	mov.w	sl, #100	; 0x64
 8011472:	4650      	mov	r0, sl
 8011474:	b02d      	add	sp, #180	; 0xb4
 8011476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801147a:	a90a      	add	r1, sp, #40	; 0x28
 801147c:	4628      	mov	r0, r5
 801147e:	f7ff fe6d 	bl	801115c <rcl_clock_get_now>
 8011482:	4682      	mov	sl, r0
 8011484:	2800      	cmp	r0, #0
 8011486:	d1f4      	bne.n	8011472 <rcl_timer_init+0x32>
 8011488:	f10d 0920 	add.w	r9, sp, #32
 801148c:	4648      	mov	r0, r9
 801148e:	e9cd 5818 	strd	r5, r8, [sp, #96]	; 0x60
 8011492:	f7ff f927 	bl	80106e4 <rcl_get_zero_initialized_guard_condition>
 8011496:	e899 0003 	ldmia.w	r9, {r0, r1}
 801149a:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 801149e:	f10d 0934 	add.w	r9, sp, #52	; 0x34
 80114a2:	e88b 0003 	stmia.w	fp, {r0, r1}
 80114a6:	4648      	mov	r0, r9
 80114a8:	f7ff f9fe 	bl	80108a8 <rcl_guard_condition_get_default_options>
 80114ac:	ab0f      	add	r3, sp, #60	; 0x3c
 80114ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80114b2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80114b6:	4641      	mov	r1, r8
 80114b8:	e899 000c 	ldmia.w	r9, {r2, r3}
 80114bc:	4658      	mov	r0, fp
 80114be:	f7ff f91b 	bl	80106f8 <rcl_guard_condition_init>
 80114c2:	4682      	mov	sl, r0
 80114c4:	2800      	cmp	r0, #0
 80114c6:	d1d4      	bne.n	8011472 <rcl_timer_init+0x32>
 80114c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80114ca:	f893 c000 	ldrb.w	ip, [r3]
 80114ce:	f1bc 0f01 	cmp.w	ip, #1
 80114d2:	d039      	beq.n	8011548 <rcl_timer_init+0x108>
 80114d4:	f10d 0ce4 	add.w	ip, sp, #228	; 0xe4
 80114d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80114dc:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 80114e0:	9e36      	ldr	r6, [sp, #216]	; 0xd8
 80114e2:	f10d 0e9c 	add.w	lr, sp, #156	; 0x9c
 80114e6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80114ea:	eb18 0606 	adds.w	r6, r8, r6
 80114ee:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80114f0:	9606      	str	r6, [sp, #24]
 80114f2:	e9dd 6736 	ldrd	r6, r7, [sp, #216]	; 0xd8
 80114f6:	eb49 0303 	adc.w	r3, r9, r3
 80114fa:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 80114fc:	9307      	str	r3, [sp, #28]
 80114fe:	921c      	str	r2, [sp, #112]	; 0x70
 8011500:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
 8011504:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8011508:	f8dc 3000 	ldr.w	r3, [ip]
 801150c:	f8ce 3000 	str.w	r3, [lr]
 8011510:	2000      	movs	r0, #0
 8011512:	2100      	movs	r1, #0
 8011514:	2200      	movs	r2, #0
 8011516:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90
 801151a:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 801151c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801151e:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80
 8011522:	2050      	movs	r0, #80	; 0x50
 8011524:	e9cd 6722 	strd	r6, r7, [sp, #136]	; 0x88
 8011528:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 801152c:	4798      	blx	r3
 801152e:	6020      	str	r0, [r4, #0]
 8011530:	b360      	cbz	r0, 801158c <rcl_timer_init+0x14c>
 8011532:	2250      	movs	r2, #80	; 0x50
 8011534:	a918      	add	r1, sp, #96	; 0x60
 8011536:	f003 fd23 	bl	8014f80 <memcpy>
 801153a:	e79a      	b.n	8011472 <rcl_timer_init+0x32>
 801153c:	f04f 0a0b 	mov.w	sl, #11
 8011540:	4650      	mov	r0, sl
 8011542:	b02d      	add	sp, #180	; 0xb4
 8011544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011548:	2201      	movs	r2, #1
 801154a:	2300      	movs	r3, #0
 801154c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011550:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011554:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8011558:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 801155c:	ab14      	add	r3, sp, #80	; 0x50
 801155e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011560:	f88d c048 	strb.w	ip, [sp, #72]	; 0x48
 8011564:	f8df c03c 	ldr.w	ip, [pc, #60]	; 80115a4 <rcl_timer_init+0x164>
 8011568:	9405      	str	r4, [sp, #20]
 801156a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801156e:	f8cd c010 	str.w	ip, [sp, #16]
 8011572:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8011576:	4628      	mov	r0, r5
 8011578:	f7ff fdfc 	bl	8011174 <rcl_clock_add_jump_callback>
 801157c:	4680      	mov	r8, r0
 801157e:	2800      	cmp	r0, #0
 8011580:	d0a8      	beq.n	80114d4 <rcl_timer_init+0x94>
 8011582:	4658      	mov	r0, fp
 8011584:	f7ff f96a 	bl	801085c <rcl_guard_condition_fini>
 8011588:	46c2      	mov	sl, r8
 801158a:	e772      	b.n	8011472 <rcl_timer_init+0x32>
 801158c:	4658      	mov	r0, fp
 801158e:	f7ff f965 	bl	801085c <rcl_guard_condition_fini>
 8011592:	4904      	ldr	r1, [pc, #16]	; (80115a4 <rcl_timer_init+0x164>)
 8011594:	4622      	mov	r2, r4
 8011596:	4628      	mov	r0, r5
 8011598:	f7ff fe4c 	bl	8011234 <rcl_clock_remove_jump_callback>
 801159c:	f04f 0a0a 	mov.w	sl, #10
 80115a0:	e767      	b.n	8011472 <rcl_timer_init+0x32>
 80115a2:	bf00      	nop
 80115a4:	080112f1 	.word	0x080112f1

080115a8 <rcl_timer_call>:
 80115a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115ac:	b08b      	sub	sp, #44	; 0x2c
 80115ae:	2800      	cmp	r0, #0
 80115b0:	d06e      	beq.n	8011690 <rcl_timer_call+0xe8>
 80115b2:	6803      	ldr	r3, [r0, #0]
 80115b4:	f3bf 8f5b 	dmb	ish
 80115b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80115bc:	f3bf 8f5b 	dmb	ish
 80115c0:	4604      	mov	r4, r0
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d159      	bne.n	801167a <rcl_timer_call+0xd2>
 80115c6:	6803      	ldr	r3, [r0, #0]
 80115c8:	a908      	add	r1, sp, #32
 80115ca:	6818      	ldr	r0, [r3, #0]
 80115cc:	f7ff fdc6 	bl	801115c <rcl_clock_get_now>
 80115d0:	4605      	mov	r5, r0
 80115d2:	2800      	cmp	r0, #0
 80115d4:	d14d      	bne.n	8011672 <rcl_timer_call+0xca>
 80115d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80115da:	2a00      	cmp	r2, #0
 80115dc:	f173 0100 	sbcs.w	r1, r3, #0
 80115e0:	db51      	blt.n	8011686 <rcl_timer_call+0xde>
 80115e2:	6820      	ldr	r0, [r4, #0]
 80115e4:	2605      	movs	r6, #5
 80115e6:	9600      	str	r6, [sp, #0]
 80115e8:	3020      	adds	r0, #32
 80115ea:	f001 f895 	bl	8012718 <__atomic_exchange_8>
 80115ee:	6822      	ldr	r2, [r4, #0]
 80115f0:	f3bf 8f5b 	dmb	ish
 80115f4:	4682      	mov	sl, r0
 80115f6:	f8d2 b010 	ldr.w	fp, [r2, #16]
 80115fa:	f3bf 8f5b 	dmb	ish
 80115fe:	6820      	ldr	r0, [r4, #0]
 8011600:	460b      	mov	r3, r1
 8011602:	3028      	adds	r0, #40	; 0x28
 8011604:	4631      	mov	r1, r6
 8011606:	9305      	str	r3, [sp, #20]
 8011608:	f001 f81e 	bl	8012648 <__atomic_load_8>
 801160c:	4603      	mov	r3, r0
 801160e:	6820      	ldr	r0, [r4, #0]
 8011610:	460a      	mov	r2, r1
 8011612:	3018      	adds	r0, #24
 8011614:	4631      	mov	r1, r6
 8011616:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801161a:	f001 f815 	bl	8012648 <__atomic_load_8>
 801161e:	9b04      	ldr	r3, [sp, #16]
 8011620:	9a03      	ldr	r2, [sp, #12]
 8011622:	4606      	mov	r6, r0
 8011624:	460f      	mov	r7, r1
 8011626:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801162a:	eb13 0806 	adds.w	r8, r3, r6
 801162e:	eb42 0907 	adc.w	r9, r2, r7
 8011632:	4580      	cmp	r8, r0
 8011634:	eb79 0301 	sbcs.w	r3, r9, r1
 8011638:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801163c:	460a      	mov	r2, r1
 801163e:	da04      	bge.n	801164a <rcl_timer_call+0xa2>
 8011640:	ea56 0307 	orrs.w	r3, r6, r7
 8011644:	d129      	bne.n	801169a <rcl_timer_call+0xf2>
 8011646:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 801164a:	6820      	ldr	r0, [r4, #0]
 801164c:	2105      	movs	r1, #5
 801164e:	4642      	mov	r2, r8
 8011650:	464b      	mov	r3, r9
 8011652:	3028      	adds	r0, #40	; 0x28
 8011654:	9100      	str	r1, [sp, #0]
 8011656:	f001 f82b 	bl	80126b0 <__atomic_store_8>
 801165a:	f1bb 0f00 	cmp.w	fp, #0
 801165e:	d008      	beq.n	8011672 <rcl_timer_call+0xca>
 8011660:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011664:	9905      	ldr	r1, [sp, #20]
 8011666:	ebb2 020a 	subs.w	r2, r2, sl
 801166a:	4620      	mov	r0, r4
 801166c:	eb63 0301 	sbc.w	r3, r3, r1
 8011670:	47d8      	blx	fp
 8011672:	4628      	mov	r0, r5
 8011674:	b00b      	add	sp, #44	; 0x2c
 8011676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801167a:	f240 3521 	movw	r5, #801	; 0x321
 801167e:	4628      	mov	r0, r5
 8011680:	b00b      	add	sp, #44	; 0x2c
 8011682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011686:	2501      	movs	r5, #1
 8011688:	4628      	mov	r0, r5
 801168a:	b00b      	add	sp, #44	; 0x2c
 801168c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011690:	250b      	movs	r5, #11
 8011692:	4628      	mov	r0, r5
 8011694:	b00b      	add	sp, #44	; 0x2c
 8011696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801169a:	ebb0 0008 	subs.w	r0, r0, r8
 801169e:	eb62 0109 	sbc.w	r1, r2, r9
 80116a2:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 80116a6:	463b      	mov	r3, r7
 80116a8:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 80116ac:	4632      	mov	r2, r6
 80116ae:	f7ef fa55 	bl	8000b5c <__aeabi_ldivmod>
 80116b2:	1c43      	adds	r3, r0, #1
 80116b4:	f141 0100 	adc.w	r1, r1, #0
 80116b8:	fb00 7007 	mla	r0, r0, r7, r7
 80116bc:	fb06 0001 	mla	r0, r6, r1, r0
 80116c0:	fba3 6706 	umull	r6, r7, r3, r6
 80116c4:	4407      	add	r7, r0
 80116c6:	eb18 0806 	adds.w	r8, r8, r6
 80116ca:	eb49 0907 	adc.w	r9, r9, r7
 80116ce:	e7bc      	b.n	801164a <rcl_timer_call+0xa2>

080116d0 <rcl_timer_is_ready>:
 80116d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116d4:	b082      	sub	sp, #8
 80116d6:	b310      	cbz	r0, 801171e <rcl_timer_is_ready+0x4e>
 80116d8:	4688      	mov	r8, r1
 80116da:	b301      	cbz	r1, 801171e <rcl_timer_is_ready+0x4e>
 80116dc:	6803      	ldr	r3, [r0, #0]
 80116de:	4604      	mov	r4, r0
 80116e0:	4669      	mov	r1, sp
 80116e2:	6818      	ldr	r0, [r3, #0]
 80116e4:	f7ff fd3a 	bl	801115c <rcl_clock_get_now>
 80116e8:	4605      	mov	r5, r0
 80116ea:	b118      	cbz	r0, 80116f4 <rcl_timer_is_ready+0x24>
 80116ec:	4628      	mov	r0, r5
 80116ee:	b002      	add	sp, #8
 80116f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116f4:	6820      	ldr	r0, [r4, #0]
 80116f6:	2105      	movs	r1, #5
 80116f8:	3028      	adds	r0, #40	; 0x28
 80116fa:	f000 ffa5 	bl	8012648 <__atomic_load_8>
 80116fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011702:	1ac6      	subs	r6, r0, r3
 8011704:	eb61 0702 	sbc.w	r7, r1, r2
 8011708:	2e01      	cmp	r6, #1
 801170a:	f177 0300 	sbcs.w	r3, r7, #0
 801170e:	db0b      	blt.n	8011728 <rcl_timer_is_ready+0x58>
 8011710:	462b      	mov	r3, r5
 8011712:	4628      	mov	r0, r5
 8011714:	f888 3000 	strb.w	r3, [r8]
 8011718:	b002      	add	sp, #8
 801171a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801171e:	250b      	movs	r5, #11
 8011720:	4628      	mov	r0, r5
 8011722:	b002      	add	sp, #8
 8011724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011728:	6823      	ldr	r3, [r4, #0]
 801172a:	f3bf 8f5b 	dmb	ish
 801172e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011732:	f3bf 8f5b 	dmb	ish
 8011736:	fab3 f383 	clz	r3, r3
 801173a:	095b      	lsrs	r3, r3, #5
 801173c:	e7e9      	b.n	8011712 <rcl_timer_is_ready+0x42>
 801173e:	bf00      	nop

08011740 <rcl_timer_get_time_until_next_call>:
 8011740:	b570      	push	{r4, r5, r6, lr}
 8011742:	b082      	sub	sp, #8
 8011744:	b1d8      	cbz	r0, 801177e <rcl_timer_get_time_until_next_call+0x3e>
 8011746:	460d      	mov	r5, r1
 8011748:	b1c9      	cbz	r1, 801177e <rcl_timer_get_time_until_next_call+0x3e>
 801174a:	6803      	ldr	r3, [r0, #0]
 801174c:	4604      	mov	r4, r0
 801174e:	4669      	mov	r1, sp
 8011750:	6818      	ldr	r0, [r3, #0]
 8011752:	f7ff fd03 	bl	801115c <rcl_clock_get_now>
 8011756:	4606      	mov	r6, r0
 8011758:	b110      	cbz	r0, 8011760 <rcl_timer_get_time_until_next_call+0x20>
 801175a:	4630      	mov	r0, r6
 801175c:	b002      	add	sp, #8
 801175e:	bd70      	pop	{r4, r5, r6, pc}
 8011760:	6820      	ldr	r0, [r4, #0]
 8011762:	2105      	movs	r1, #5
 8011764:	3028      	adds	r0, #40	; 0x28
 8011766:	f000 ff6f 	bl	8012648 <__atomic_load_8>
 801176a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801176e:	1ac0      	subs	r0, r0, r3
 8011770:	eb61 0102 	sbc.w	r1, r1, r2
 8011774:	e9c5 0100 	strd	r0, r1, [r5]
 8011778:	4630      	mov	r0, r6
 801177a:	b002      	add	sp, #8
 801177c:	bd70      	pop	{r4, r5, r6, pc}
 801177e:	260b      	movs	r6, #11
 8011780:	4630      	mov	r0, r6
 8011782:	b002      	add	sp, #8
 8011784:	bd70      	pop	{r4, r5, r6, pc}
 8011786:	bf00      	nop

08011788 <rcl_timer_is_canceled>:
 8011788:	b168      	cbz	r0, 80117a6 <rcl_timer_is_canceled+0x1e>
 801178a:	b161      	cbz	r1, 80117a6 <rcl_timer_is_canceled+0x1e>
 801178c:	6803      	ldr	r3, [r0, #0]
 801178e:	f3bf 8f5b 	dmb	ish
 8011792:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011796:	f3bf 8f5b 	dmb	ish
 801179a:	3b00      	subs	r3, #0
 801179c:	bf18      	it	ne
 801179e:	2301      	movne	r3, #1
 80117a0:	700b      	strb	r3, [r1, #0]
 80117a2:	2000      	movs	r0, #0
 80117a4:	4770      	bx	lr
 80117a6:	200b      	movs	r0, #11
 80117a8:	4770      	bx	lr
 80117aa:	bf00      	nop

080117ac <rcl_timer_get_guard_condition>:
 80117ac:	b130      	cbz	r0, 80117bc <rcl_timer_get_guard_condition+0x10>
 80117ae:	6800      	ldr	r0, [r0, #0]
 80117b0:	b120      	cbz	r0, 80117bc <rcl_timer_get_guard_condition+0x10>
 80117b2:	68c3      	ldr	r3, [r0, #12]
 80117b4:	b10b      	cbz	r3, 80117ba <rcl_timer_get_guard_condition+0xe>
 80117b6:	3008      	adds	r0, #8
 80117b8:	4770      	bx	lr
 80117ba:	4618      	mov	r0, r3
 80117bc:	4770      	bx	lr
 80117be:	bf00      	nop

080117c0 <rcl_validate_enclave_name_with_size>:
 80117c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117c2:	b0c3      	sub	sp, #268	; 0x10c
 80117c4:	b1d0      	cbz	r0, 80117fc <rcl_validate_enclave_name_with_size+0x3c>
 80117c6:	4615      	mov	r5, r2
 80117c8:	b1c2      	cbz	r2, 80117fc <rcl_validate_enclave_name_with_size+0x3c>
 80117ca:	461f      	mov	r7, r3
 80117cc:	466a      	mov	r2, sp
 80117ce:	ab01      	add	r3, sp, #4
 80117d0:	460e      	mov	r6, r1
 80117d2:	f7fa fcd5 	bl	800c180 <rmw_validate_namespace_with_size>
 80117d6:	4604      	mov	r4, r0
 80117d8:	b9e0      	cbnz	r0, 8011814 <rcl_validate_enclave_name_with_size+0x54>
 80117da:	9b00      	ldr	r3, [sp, #0]
 80117dc:	b923      	cbnz	r3, 80117e8 <rcl_validate_enclave_name_with_size+0x28>
 80117de:	2300      	movs	r3, #0
 80117e0:	602b      	str	r3, [r5, #0]
 80117e2:	4620      	mov	r0, r4
 80117e4:	b043      	add	sp, #268	; 0x10c
 80117e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117e8:	2b07      	cmp	r3, #7
 80117ea:	d00b      	beq.n	8011804 <rcl_validate_enclave_name_with_size+0x44>
 80117ec:	1e5a      	subs	r2, r3, #1
 80117ee:	2a05      	cmp	r2, #5
 80117f0:	d82e      	bhi.n	8011850 <rcl_validate_enclave_name_with_size+0x90>
 80117f2:	e8df f002 	tbb	[pc, r2]
 80117f6:	211e      	.short	0x211e
 80117f8:	152a2724 	.word	0x152a2724
 80117fc:	240b      	movs	r4, #11
 80117fe:	4620      	mov	r0, r4
 8011800:	b043      	add	sp, #268	; 0x10c
 8011802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011804:	2eff      	cmp	r6, #255	; 0xff
 8011806:	d9ea      	bls.n	80117de <rcl_validate_enclave_name_with_size+0x1e>
 8011808:	602b      	str	r3, [r5, #0]
 801180a:	2f00      	cmp	r7, #0
 801180c:	d0e9      	beq.n	80117e2 <rcl_validate_enclave_name_with_size+0x22>
 801180e:	23fe      	movs	r3, #254	; 0xfe
 8011810:	603b      	str	r3, [r7, #0]
 8011812:	e7e6      	b.n	80117e2 <rcl_validate_enclave_name_with_size+0x22>
 8011814:	f7fe fd3e 	bl	8010294 <rcl_convert_rmw_ret_to_rcl_ret>
 8011818:	4604      	mov	r4, r0
 801181a:	4620      	mov	r0, r4
 801181c:	b043      	add	sp, #268	; 0x10c
 801181e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011820:	2306      	movs	r3, #6
 8011822:	602b      	str	r3, [r5, #0]
 8011824:	2f00      	cmp	r7, #0
 8011826:	d0dc      	beq.n	80117e2 <rcl_validate_enclave_name_with_size+0x22>
 8011828:	9b01      	ldr	r3, [sp, #4]
 801182a:	603b      	str	r3, [r7, #0]
 801182c:	4620      	mov	r0, r4
 801182e:	b043      	add	sp, #268	; 0x10c
 8011830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011832:	2301      	movs	r3, #1
 8011834:	602b      	str	r3, [r5, #0]
 8011836:	e7f5      	b.n	8011824 <rcl_validate_enclave_name_with_size+0x64>
 8011838:	2302      	movs	r3, #2
 801183a:	602b      	str	r3, [r5, #0]
 801183c:	e7f2      	b.n	8011824 <rcl_validate_enclave_name_with_size+0x64>
 801183e:	2303      	movs	r3, #3
 8011840:	602b      	str	r3, [r5, #0]
 8011842:	e7ef      	b.n	8011824 <rcl_validate_enclave_name_with_size+0x64>
 8011844:	2304      	movs	r3, #4
 8011846:	602b      	str	r3, [r5, #0]
 8011848:	e7ec      	b.n	8011824 <rcl_validate_enclave_name_with_size+0x64>
 801184a:	2305      	movs	r3, #5
 801184c:	602b      	str	r3, [r5, #0]
 801184e:	e7e9      	b.n	8011824 <rcl_validate_enclave_name_with_size+0x64>
 8011850:	4a03      	ldr	r2, [pc, #12]	; (8011860 <rcl_validate_enclave_name_with_size+0xa0>)
 8011852:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011856:	a802      	add	r0, sp, #8
 8011858:	f7fa fa0a 	bl	800bc70 <rcutils_snprintf>
 801185c:	2401      	movs	r4, #1
 801185e:	e7c0      	b.n	80117e2 <rcl_validate_enclave_name_with_size+0x22>
 8011860:	08016e74 	.word	0x08016e74

08011864 <rcl_validate_enclave_name>:
 8011864:	b168      	cbz	r0, 8011882 <rcl_validate_enclave_name+0x1e>
 8011866:	b570      	push	{r4, r5, r6, lr}
 8011868:	460d      	mov	r5, r1
 801186a:	4616      	mov	r6, r2
 801186c:	4604      	mov	r4, r0
 801186e:	f7ee fcd9 	bl	8000224 <strlen>
 8011872:	4633      	mov	r3, r6
 8011874:	4601      	mov	r1, r0
 8011876:	462a      	mov	r2, r5
 8011878:	4620      	mov	r0, r4
 801187a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801187e:	f7ff bf9f 	b.w	80117c0 <rcl_validate_enclave_name_with_size>
 8011882:	200b      	movs	r0, #11
 8011884:	4770      	bx	lr
 8011886:	bf00      	nop

08011888 <rcl_validate_topic_name>:
 8011888:	2800      	cmp	r0, #0
 801188a:	f000 808b 	beq.w	80119a4 <rcl_validate_topic_name+0x11c>
 801188e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011892:	460e      	mov	r6, r1
 8011894:	2900      	cmp	r1, #0
 8011896:	f000 808c 	beq.w	80119b2 <rcl_validate_topic_name+0x12a>
 801189a:	4617      	mov	r7, r2
 801189c:	4605      	mov	r5, r0
 801189e:	f7ee fcc1 	bl	8000224 <strlen>
 80118a2:	b1b0      	cbz	r0, 80118d2 <rcl_validate_topic_name+0x4a>
 80118a4:	f895 9000 	ldrb.w	r9, [r5]
 80118a8:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8011a58 <rcl_validate_topic_name+0x1d0>
 80118ac:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80118b0:	f013 0304 	ands.w	r3, r3, #4
 80118b4:	d178      	bne.n	80119a8 <rcl_validate_topic_name+0x120>
 80118b6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80118ba:	f815 2008 	ldrb.w	r2, [r5, r8]
 80118be:	2a2f      	cmp	r2, #47	; 0x2f
 80118c0:	d10e      	bne.n	80118e0 <rcl_validate_topic_name+0x58>
 80118c2:	2202      	movs	r2, #2
 80118c4:	6032      	str	r2, [r6, #0]
 80118c6:	b36f      	cbz	r7, 8011924 <rcl_validate_topic_name+0x9c>
 80118c8:	f8c7 8000 	str.w	r8, [r7]
 80118cc:	4618      	mov	r0, r3
 80118ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118d2:	2301      	movs	r3, #1
 80118d4:	6033      	str	r3, [r6, #0]
 80118d6:	b32f      	cbz	r7, 8011924 <rcl_validate_topic_name+0x9c>
 80118d8:	2000      	movs	r0, #0
 80118da:	6038      	str	r0, [r7, #0]
 80118dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118e0:	461c      	mov	r4, r3
 80118e2:	4619      	mov	r1, r3
 80118e4:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 80118e8:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80118ec:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80118f0:	f1be 0f09 	cmp.w	lr, #9
 80118f4:	d946      	bls.n	8011984 <rcl_validate_topic_name+0xfc>
 80118f6:	f022 0e20 	bic.w	lr, r2, #32
 80118fa:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 80118fe:	f1be 0f19 	cmp.w	lr, #25
 8011902:	d93f      	bls.n	8011984 <rcl_validate_topic_name+0xfc>
 8011904:	2a5f      	cmp	r2, #95	; 0x5f
 8011906:	d014      	beq.n	8011932 <rcl_validate_topic_name+0xaa>
 8011908:	2a2f      	cmp	r2, #47	; 0x2f
 801190a:	d05b      	beq.n	80119c4 <rcl_validate_topic_name+0x13c>
 801190c:	2a7e      	cmp	r2, #126	; 0x7e
 801190e:	d052      	beq.n	80119b6 <rcl_validate_topic_name+0x12e>
 8011910:	2a7b      	cmp	r2, #123	; 0x7b
 8011912:	d00a      	beq.n	801192a <rcl_validate_topic_name+0xa2>
 8011914:	2a7d      	cmp	r2, #125	; 0x7d
 8011916:	d16f      	bne.n	80119f8 <rcl_validate_topic_name+0x170>
 8011918:	2c00      	cmp	r4, #0
 801191a:	d15e      	bne.n	80119da <rcl_validate_topic_name+0x152>
 801191c:	2305      	movs	r3, #5
 801191e:	6033      	str	r3, [r6, #0]
 8011920:	b107      	cbz	r7, 8011924 <rcl_validate_topic_name+0x9c>
 8011922:	6039      	str	r1, [r7, #0]
 8011924:	2000      	movs	r0, #0
 8011926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801192a:	2c00      	cmp	r4, #0
 801192c:	d14c      	bne.n	80119c8 <rcl_validate_topic_name+0x140>
 801192e:	460b      	mov	r3, r1
 8011930:	2401      	movs	r4, #1
 8011932:	3101      	adds	r1, #1
 8011934:	4288      	cmp	r0, r1
 8011936:	d1d7      	bne.n	80118e8 <rcl_validate_topic_name+0x60>
 8011938:	2c00      	cmp	r4, #0
 801193a:	d156      	bne.n	80119ea <rcl_validate_topic_name+0x162>
 801193c:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8011940:	4620      	mov	r0, r4
 8011942:	d061      	beq.n	8011a08 <rcl_validate_topic_name+0x180>
 8011944:	f108 0e01 	add.w	lr, r8, #1
 8011948:	e007      	b.n	801195a <rcl_validate_topic_name+0xd2>
 801194a:	2801      	cmp	r0, #1
 801194c:	d047      	beq.n	80119de <rcl_validate_topic_name+0x156>
 801194e:	461a      	mov	r2, r3
 8011950:	4291      	cmp	r1, r2
 8011952:	4618      	mov	r0, r3
 8011954:	f105 0501 	add.w	r5, r5, #1
 8011958:	d944      	bls.n	80119e4 <rcl_validate_topic_name+0x15c>
 801195a:	4580      	cmp	r8, r0
 801195c:	f100 0301 	add.w	r3, r0, #1
 8011960:	d037      	beq.n	80119d2 <rcl_validate_topic_name+0x14a>
 8011962:	782a      	ldrb	r2, [r5, #0]
 8011964:	2a2f      	cmp	r2, #47	; 0x2f
 8011966:	d1f0      	bne.n	801194a <rcl_validate_topic_name+0xc2>
 8011968:	786b      	ldrb	r3, [r5, #1]
 801196a:	f81c 4003 	ldrb.w	r4, [ip, r3]
 801196e:	1c43      	adds	r3, r0, #1
 8011970:	0760      	lsls	r0, r4, #29
 8011972:	461a      	mov	r2, r3
 8011974:	d5ec      	bpl.n	8011950 <rcl_validate_topic_name+0xc8>
 8011976:	2304      	movs	r3, #4
 8011978:	6033      	str	r3, [r6, #0]
 801197a:	2f00      	cmp	r7, #0
 801197c:	d0d2      	beq.n	8011924 <rcl_validate_topic_name+0x9c>
 801197e:	603a      	str	r2, [r7, #0]
 8011980:	2000      	movs	r0, #0
 8011982:	e7ab      	b.n	80118dc <rcl_validate_topic_name+0x54>
 8011984:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8011988:	0752      	lsls	r2, r2, #29
 801198a:	d5d2      	bpl.n	8011932 <rcl_validate_topic_name+0xaa>
 801198c:	2c00      	cmp	r4, #0
 801198e:	d0d0      	beq.n	8011932 <rcl_validate_topic_name+0xaa>
 8011990:	2900      	cmp	r1, #0
 8011992:	d0ce      	beq.n	8011932 <rcl_validate_topic_name+0xaa>
 8011994:	1e4a      	subs	r2, r1, #1
 8011996:	429a      	cmp	r2, r3
 8011998:	d1cb      	bne.n	8011932 <rcl_validate_topic_name+0xaa>
 801199a:	2309      	movs	r3, #9
 801199c:	6033      	str	r3, [r6, #0]
 801199e:	2f00      	cmp	r7, #0
 80119a0:	d1bf      	bne.n	8011922 <rcl_validate_topic_name+0x9a>
 80119a2:	e7bf      	b.n	8011924 <rcl_validate_topic_name+0x9c>
 80119a4:	200b      	movs	r0, #11
 80119a6:	4770      	bx	lr
 80119a8:	2304      	movs	r3, #4
 80119aa:	6033      	str	r3, [r6, #0]
 80119ac:	2f00      	cmp	r7, #0
 80119ae:	d193      	bne.n	80118d8 <rcl_validate_topic_name+0x50>
 80119b0:	e7b8      	b.n	8011924 <rcl_validate_topic_name+0x9c>
 80119b2:	200b      	movs	r0, #11
 80119b4:	e792      	b.n	80118dc <rcl_validate_topic_name+0x54>
 80119b6:	2900      	cmp	r1, #0
 80119b8:	d0bb      	beq.n	8011932 <rcl_validate_topic_name+0xaa>
 80119ba:	2306      	movs	r3, #6
 80119bc:	6033      	str	r3, [r6, #0]
 80119be:	2f00      	cmp	r7, #0
 80119c0:	d1af      	bne.n	8011922 <rcl_validate_topic_name+0x9a>
 80119c2:	e7af      	b.n	8011924 <rcl_validate_topic_name+0x9c>
 80119c4:	2c00      	cmp	r4, #0
 80119c6:	d0b4      	beq.n	8011932 <rcl_validate_topic_name+0xaa>
 80119c8:	2308      	movs	r3, #8
 80119ca:	6033      	str	r3, [r6, #0]
 80119cc:	2f00      	cmp	r7, #0
 80119ce:	d1a8      	bne.n	8011922 <rcl_validate_topic_name+0x9a>
 80119d0:	e7a8      	b.n	8011924 <rcl_validate_topic_name+0x9c>
 80119d2:	4672      	mov	r2, lr
 80119d4:	f108 0301 	add.w	r3, r8, #1
 80119d8:	e7ba      	b.n	8011950 <rcl_validate_topic_name+0xc8>
 80119da:	2400      	movs	r4, #0
 80119dc:	e7a9      	b.n	8011932 <rcl_validate_topic_name+0xaa>
 80119de:	2202      	movs	r2, #2
 80119e0:	4613      	mov	r3, r2
 80119e2:	e7b5      	b.n	8011950 <rcl_validate_topic_name+0xc8>
 80119e4:	2000      	movs	r0, #0
 80119e6:	6030      	str	r0, [r6, #0]
 80119e8:	e778      	b.n	80118dc <rcl_validate_topic_name+0x54>
 80119ea:	2205      	movs	r2, #5
 80119ec:	6032      	str	r2, [r6, #0]
 80119ee:	2f00      	cmp	r7, #0
 80119f0:	d098      	beq.n	8011924 <rcl_validate_topic_name+0x9c>
 80119f2:	603b      	str	r3, [r7, #0]
 80119f4:	2000      	movs	r0, #0
 80119f6:	e771      	b.n	80118dc <rcl_validate_topic_name+0x54>
 80119f8:	2c00      	cmp	r4, #0
 80119fa:	bf14      	ite	ne
 80119fc:	2308      	movne	r3, #8
 80119fe:	2303      	moveq	r3, #3
 8011a00:	6033      	str	r3, [r6, #0]
 8011a02:	2f00      	cmp	r7, #0
 8011a04:	d18d      	bne.n	8011922 <rcl_validate_topic_name+0x9a>
 8011a06:	e78d      	b.n	8011924 <rcl_validate_topic_name+0x9c>
 8011a08:	f108 0401 	add.w	r4, r8, #1
 8011a0c:	e007      	b.n	8011a1e <rcl_validate_topic_name+0x196>
 8011a0e:	2801      	cmp	r0, #1
 8011a10:	d019      	beq.n	8011a46 <rcl_validate_topic_name+0x1be>
 8011a12:	461a      	mov	r2, r3
 8011a14:	4291      	cmp	r1, r2
 8011a16:	4618      	mov	r0, r3
 8011a18:	f105 0501 	add.w	r5, r5, #1
 8011a1c:	d9e2      	bls.n	80119e4 <rcl_validate_topic_name+0x15c>
 8011a1e:	4580      	cmp	r8, r0
 8011a20:	f100 0301 	add.w	r3, r0, #1
 8011a24:	d00b      	beq.n	8011a3e <rcl_validate_topic_name+0x1b6>
 8011a26:	782a      	ldrb	r2, [r5, #0]
 8011a28:	2a2f      	cmp	r2, #47	; 0x2f
 8011a2a:	d1f0      	bne.n	8011a0e <rcl_validate_topic_name+0x186>
 8011a2c:	786b      	ldrb	r3, [r5, #1]
 8011a2e:	f81c e003 	ldrb.w	lr, [ip, r3]
 8011a32:	1c43      	adds	r3, r0, #1
 8011a34:	f01e 0f04 	tst.w	lr, #4
 8011a38:	461a      	mov	r2, r3
 8011a3a:	d0eb      	beq.n	8011a14 <rcl_validate_topic_name+0x18c>
 8011a3c:	e79b      	b.n	8011976 <rcl_validate_topic_name+0xee>
 8011a3e:	4622      	mov	r2, r4
 8011a40:	f108 0301 	add.w	r3, r8, #1
 8011a44:	e7e6      	b.n	8011a14 <rcl_validate_topic_name+0x18c>
 8011a46:	2307      	movs	r3, #7
 8011a48:	6033      	str	r3, [r6, #0]
 8011a4a:	2f00      	cmp	r7, #0
 8011a4c:	f43f af6a 	beq.w	8011924 <rcl_validate_topic_name+0x9c>
 8011a50:	6038      	str	r0, [r7, #0]
 8011a52:	2000      	movs	r0, #0
 8011a54:	e742      	b.n	80118dc <rcl_validate_topic_name+0x54>
 8011a56:	bf00      	nop
 8011a58:	0801715d 	.word	0x0801715d

08011a5c <rcl_get_zero_initialized_wait_set>:
 8011a5c:	b470      	push	{r4, r5, r6}
 8011a5e:	4d07      	ldr	r5, [pc, #28]	; (8011a7c <rcl_get_zero_initialized_wait_set+0x20>)
 8011a60:	4606      	mov	r6, r0
 8011a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a64:	4634      	mov	r4, r6
 8011a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a70:	682b      	ldr	r3, [r5, #0]
 8011a72:	6023      	str	r3, [r4, #0]
 8011a74:	4630      	mov	r0, r6
 8011a76:	bc70      	pop	{r4, r5, r6}
 8011a78:	4770      	bx	lr
 8011a7a:	bf00      	nop
 8011a7c:	08016ed4 	.word	0x08016ed4

08011a80 <rcl_wait_set_is_valid>:
 8011a80:	b118      	cbz	r0, 8011a8a <rcl_wait_set_is_valid+0xa>
 8011a82:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8011a84:	3800      	subs	r0, #0
 8011a86:	bf18      	it	ne
 8011a88:	2001      	movne	r0, #1
 8011a8a:	4770      	bx	lr

08011a8c <rcl_wait_set_fini>:
 8011a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a90:	b082      	sub	sp, #8
 8011a92:	2800      	cmp	r0, #0
 8011a94:	f000 8095 	beq.w	8011bc2 <rcl_wait_set_fini+0x136>
 8011a98:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8011a9a:	4604      	mov	r4, r0
 8011a9c:	2e00      	cmp	r6, #0
 8011a9e:	f000 808c 	beq.w	8011bba <rcl_wait_set_fini+0x12e>
 8011aa2:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8011aa4:	f001 fcbc 	bl	8013420 <rmw_destroy_wait_set>
 8011aa8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011aaa:	1e06      	subs	r6, r0, #0
 8011aac:	bf18      	it	ne
 8011aae:	f44f 7661 	movne.w	r6, #900	; 0x384
 8011ab2:	2d00      	cmp	r5, #0
 8011ab4:	f000 8081 	beq.w	8011bba <rcl_wait_set_fini+0x12e>
 8011ab8:	6820      	ldr	r0, [r4, #0]
 8011aba:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8011abe:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011ac0:	2700      	movs	r7, #0
 8011ac2:	6067      	str	r7, [r4, #4]
 8011ac4:	602f      	str	r7, [r5, #0]
 8011ac6:	b120      	cbz	r0, 8011ad2 <rcl_wait_set_fini+0x46>
 8011ac8:	9101      	str	r1, [sp, #4]
 8011aca:	47c0      	blx	r8
 8011acc:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011ace:	9901      	ldr	r1, [sp, #4]
 8011ad0:	6027      	str	r7, [r4, #0]
 8011ad2:	68a8      	ldr	r0, [r5, #8]
 8011ad4:	b120      	cbz	r0, 8011ae0 <rcl_wait_set_fini+0x54>
 8011ad6:	47c0      	blx	r8
 8011ad8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011ada:	2300      	movs	r3, #0
 8011adc:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8011ae0:	68a0      	ldr	r0, [r4, #8]
 8011ae2:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8011ae4:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011ae6:	f04f 0800 	mov.w	r8, #0
 8011aea:	f8c4 800c 	str.w	r8, [r4, #12]
 8011aee:	f8c5 800c 	str.w	r8, [r5, #12]
 8011af2:	b128      	cbz	r0, 8011b00 <rcl_wait_set_fini+0x74>
 8011af4:	47b8      	blx	r7
 8011af6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011af8:	f8c4 8008 	str.w	r8, [r4, #8]
 8011afc:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8011afe:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011b00:	6968      	ldr	r0, [r5, #20]
 8011b02:	f04f 0800 	mov.w	r8, #0
 8011b06:	f8c5 8010 	str.w	r8, [r5, #16]
 8011b0a:	b128      	cbz	r0, 8011b18 <rcl_wait_set_fini+0x8c>
 8011b0c:	47b8      	blx	r7
 8011b0e:	f8c5 8014 	str.w	r8, [r5, #20]
 8011b12:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011b14:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8011b16:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011b18:	6920      	ldr	r0, [r4, #16]
 8011b1a:	f04f 0800 	mov.w	r8, #0
 8011b1e:	f8c4 8014 	str.w	r8, [r4, #20]
 8011b22:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8011b26:	b128      	cbz	r0, 8011b34 <rcl_wait_set_fini+0xa8>
 8011b28:	47b8      	blx	r7
 8011b2a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011b2c:	f8c4 8010 	str.w	r8, [r4, #16]
 8011b30:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8011b32:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011b34:	69a0      	ldr	r0, [r4, #24]
 8011b36:	f04f 0800 	mov.w	r8, #0
 8011b3a:	f8c4 801c 	str.w	r8, [r4, #28]
 8011b3e:	f8c5 8018 	str.w	r8, [r5, #24]
 8011b42:	b128      	cbz	r0, 8011b50 <rcl_wait_set_fini+0xc4>
 8011b44:	9101      	str	r1, [sp, #4]
 8011b46:	47b8      	blx	r7
 8011b48:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011b4a:	9901      	ldr	r1, [sp, #4]
 8011b4c:	f8c4 8018 	str.w	r8, [r4, #24]
 8011b50:	6a28      	ldr	r0, [r5, #32]
 8011b52:	b120      	cbz	r0, 8011b5e <rcl_wait_set_fini+0xd2>
 8011b54:	47b8      	blx	r7
 8011b56:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011b58:	2300      	movs	r3, #0
 8011b5a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8011b5e:	6a20      	ldr	r0, [r4, #32]
 8011b60:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8011b64:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011b66:	2700      	movs	r7, #0
 8011b68:	6267      	str	r7, [r4, #36]	; 0x24
 8011b6a:	626f      	str	r7, [r5, #36]	; 0x24
 8011b6c:	b120      	cbz	r0, 8011b78 <rcl_wait_set_fini+0xec>
 8011b6e:	9101      	str	r1, [sp, #4]
 8011b70:	47c0      	blx	r8
 8011b72:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011b74:	9901      	ldr	r1, [sp, #4]
 8011b76:	6227      	str	r7, [r4, #32]
 8011b78:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8011b7a:	b120      	cbz	r0, 8011b86 <rcl_wait_set_fini+0xfa>
 8011b7c:	47c0      	blx	r8
 8011b7e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011b80:	2300      	movs	r3, #0
 8011b82:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8011b86:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8011b88:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8011b8c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011b8e:	2700      	movs	r7, #0
 8011b90:	62e7      	str	r7, [r4, #44]	; 0x2c
 8011b92:	632f      	str	r7, [r5, #48]	; 0x30
 8011b94:	b120      	cbz	r0, 8011ba0 <rcl_wait_set_fini+0x114>
 8011b96:	9101      	str	r1, [sp, #4]
 8011b98:	47c0      	blx	r8
 8011b9a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011b9c:	9901      	ldr	r1, [sp, #4]
 8011b9e:	62a7      	str	r7, [r4, #40]	; 0x28
 8011ba0:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8011ba2:	b120      	cbz	r0, 8011bae <rcl_wait_set_fini+0x122>
 8011ba4:	47c0      	blx	r8
 8011ba6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011ba8:	2300      	movs	r3, #0
 8011baa:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 8011bae:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8011bb0:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011bb2:	4628      	mov	r0, r5
 8011bb4:	4798      	blx	r3
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	6323      	str	r3, [r4, #48]	; 0x30
 8011bba:	4630      	mov	r0, r6
 8011bbc:	b002      	add	sp, #8
 8011bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bc2:	260b      	movs	r6, #11
 8011bc4:	4630      	mov	r0, r6
 8011bc6:	b002      	add	sp, #8
 8011bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011bcc <rcl_wait_set_add_subscription>:
 8011bcc:	b320      	cbz	r0, 8011c18 <rcl_wait_set_add_subscription+0x4c>
 8011bce:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011bd0:	b570      	push	{r4, r5, r6, lr}
 8011bd2:	4604      	mov	r4, r0
 8011bd4:	b1d3      	cbz	r3, 8011c0c <rcl_wait_set_add_subscription+0x40>
 8011bd6:	b319      	cbz	r1, 8011c20 <rcl_wait_set_add_subscription+0x54>
 8011bd8:	681d      	ldr	r5, [r3, #0]
 8011bda:	6860      	ldr	r0, [r4, #4]
 8011bdc:	4285      	cmp	r5, r0
 8011bde:	d218      	bcs.n	8011c12 <rcl_wait_set_add_subscription+0x46>
 8011be0:	6820      	ldr	r0, [r4, #0]
 8011be2:	1c6e      	adds	r6, r5, #1
 8011be4:	601e      	str	r6, [r3, #0]
 8011be6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011bea:	b102      	cbz	r2, 8011bee <rcl_wait_set_add_subscription+0x22>
 8011bec:	6015      	str	r5, [r2, #0]
 8011bee:	4608      	mov	r0, r1
 8011bf0:	f7f9 fa26 	bl	800b040 <rcl_subscription_get_rmw_handle>
 8011bf4:	b190      	cbz	r0, 8011c1c <rcl_wait_set_add_subscription+0x50>
 8011bf6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011bf8:	6842      	ldr	r2, [r0, #4]
 8011bfa:	689b      	ldr	r3, [r3, #8]
 8011bfc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011c00:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011c02:	6853      	ldr	r3, [r2, #4]
 8011c04:	3301      	adds	r3, #1
 8011c06:	6053      	str	r3, [r2, #4]
 8011c08:	2000      	movs	r0, #0
 8011c0a:	bd70      	pop	{r4, r5, r6, pc}
 8011c0c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011c10:	bd70      	pop	{r4, r5, r6, pc}
 8011c12:	f240 3086 	movw	r0, #902	; 0x386
 8011c16:	bd70      	pop	{r4, r5, r6, pc}
 8011c18:	200b      	movs	r0, #11
 8011c1a:	4770      	bx	lr
 8011c1c:	2001      	movs	r0, #1
 8011c1e:	bd70      	pop	{r4, r5, r6, pc}
 8011c20:	200b      	movs	r0, #11
 8011c22:	bd70      	pop	{r4, r5, r6, pc}

08011c24 <rcl_wait_set_clear>:
 8011c24:	2800      	cmp	r0, #0
 8011c26:	d073      	beq.n	8011d10 <rcl_wait_set_clear+0xec>
 8011c28:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011c2a:	b510      	push	{r4, lr}
 8011c2c:	4604      	mov	r4, r0
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d070      	beq.n	8011d14 <rcl_wait_set_clear+0xf0>
 8011c32:	6800      	ldr	r0, [r0, #0]
 8011c34:	b138      	cbz	r0, 8011c46 <rcl_wait_set_clear+0x22>
 8011c36:	6862      	ldr	r2, [r4, #4]
 8011c38:	2100      	movs	r1, #0
 8011c3a:	0092      	lsls	r2, r2, #2
 8011c3c:	f003 f9c8 	bl	8014fd0 <memset>
 8011c40:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011c42:	2200      	movs	r2, #0
 8011c44:	601a      	str	r2, [r3, #0]
 8011c46:	68a0      	ldr	r0, [r4, #8]
 8011c48:	b138      	cbz	r0, 8011c5a <rcl_wait_set_clear+0x36>
 8011c4a:	68e2      	ldr	r2, [r4, #12]
 8011c4c:	2100      	movs	r1, #0
 8011c4e:	0092      	lsls	r2, r2, #2
 8011c50:	f003 f9be 	bl	8014fd0 <memset>
 8011c54:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011c56:	2200      	movs	r2, #0
 8011c58:	60da      	str	r2, [r3, #12]
 8011c5a:	69a0      	ldr	r0, [r4, #24]
 8011c5c:	b138      	cbz	r0, 8011c6e <rcl_wait_set_clear+0x4a>
 8011c5e:	69e2      	ldr	r2, [r4, #28]
 8011c60:	2100      	movs	r1, #0
 8011c62:	0092      	lsls	r2, r2, #2
 8011c64:	f003 f9b4 	bl	8014fd0 <memset>
 8011c68:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	619a      	str	r2, [r3, #24]
 8011c6e:	6a20      	ldr	r0, [r4, #32]
 8011c70:	b138      	cbz	r0, 8011c82 <rcl_wait_set_clear+0x5e>
 8011c72:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8011c74:	2100      	movs	r1, #0
 8011c76:	0092      	lsls	r2, r2, #2
 8011c78:	f003 f9aa 	bl	8014fd0 <memset>
 8011c7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011c7e:	2200      	movs	r2, #0
 8011c80:	625a      	str	r2, [r3, #36]	; 0x24
 8011c82:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8011c84:	b138      	cbz	r0, 8011c96 <rcl_wait_set_clear+0x72>
 8011c86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011c88:	2100      	movs	r1, #0
 8011c8a:	0092      	lsls	r2, r2, #2
 8011c8c:	f003 f9a0 	bl	8014fd0 <memset>
 8011c90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011c92:	2200      	movs	r2, #0
 8011c94:	631a      	str	r2, [r3, #48]	; 0x30
 8011c96:	6920      	ldr	r0, [r4, #16]
 8011c98:	b138      	cbz	r0, 8011caa <rcl_wait_set_clear+0x86>
 8011c9a:	6962      	ldr	r2, [r4, #20]
 8011c9c:	2100      	movs	r1, #0
 8011c9e:	0092      	lsls	r2, r2, #2
 8011ca0:	f003 f996 	bl	8014fd0 <memset>
 8011ca4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011ca6:	2200      	movs	r2, #0
 8011ca8:	641a      	str	r2, [r3, #64]	; 0x40
 8011caa:	6898      	ldr	r0, [r3, #8]
 8011cac:	b138      	cbz	r0, 8011cbe <rcl_wait_set_clear+0x9a>
 8011cae:	685a      	ldr	r2, [r3, #4]
 8011cb0:	2100      	movs	r1, #0
 8011cb2:	0092      	lsls	r2, r2, #2
 8011cb4:	f003 f98c 	bl	8014fd0 <memset>
 8011cb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011cba:	2200      	movs	r2, #0
 8011cbc:	605a      	str	r2, [r3, #4]
 8011cbe:	6958      	ldr	r0, [r3, #20]
 8011cc0:	b138      	cbz	r0, 8011cd2 <rcl_wait_set_clear+0xae>
 8011cc2:	691a      	ldr	r2, [r3, #16]
 8011cc4:	2100      	movs	r1, #0
 8011cc6:	0092      	lsls	r2, r2, #2
 8011cc8:	f003 f982 	bl	8014fd0 <memset>
 8011ccc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011cce:	2200      	movs	r2, #0
 8011cd0:	611a      	str	r2, [r3, #16]
 8011cd2:	6a18      	ldr	r0, [r3, #32]
 8011cd4:	b138      	cbz	r0, 8011ce6 <rcl_wait_set_clear+0xc2>
 8011cd6:	69da      	ldr	r2, [r3, #28]
 8011cd8:	2100      	movs	r1, #0
 8011cda:	0092      	lsls	r2, r2, #2
 8011cdc:	f003 f978 	bl	8014fd0 <memset>
 8011ce0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	61da      	str	r2, [r3, #28]
 8011ce6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8011ce8:	b138      	cbz	r0, 8011cfa <rcl_wait_set_clear+0xd6>
 8011cea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011cec:	2100      	movs	r1, #0
 8011cee:	0092      	lsls	r2, r2, #2
 8011cf0:	f003 f96e 	bl	8014fd0 <memset>
 8011cf4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	629a      	str	r2, [r3, #40]	; 0x28
 8011cfa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8011cfc:	b138      	cbz	r0, 8011d0e <rcl_wait_set_clear+0xea>
 8011cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011d00:	2100      	movs	r1, #0
 8011d02:	0092      	lsls	r2, r2, #2
 8011d04:	f003 f964 	bl	8014fd0 <memset>
 8011d08:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011d0a:	2000      	movs	r0, #0
 8011d0c:	6358      	str	r0, [r3, #52]	; 0x34
 8011d0e:	bd10      	pop	{r4, pc}
 8011d10:	200b      	movs	r0, #11
 8011d12:	4770      	bx	lr
 8011d14:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011d18:	bd10      	pop	{r4, pc}
 8011d1a:	bf00      	nop

08011d1c <rcl_wait_set_resize>:
 8011d1c:	2800      	cmp	r0, #0
 8011d1e:	f000 81a6 	beq.w	801206e <rcl_wait_set_resize+0x352>
 8011d22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d26:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 8011d2a:	b083      	sub	sp, #12
 8011d2c:	4604      	mov	r4, r0
 8011d2e:	f1ba 0f00 	cmp.w	sl, #0
 8011d32:	f000 819e 	beq.w	8012072 <rcl_wait_set_resize+0x356>
 8011d36:	461e      	mov	r6, r3
 8011d38:	e9da b313 	ldrd	fp, r3, [sl, #76]	; 0x4c
 8011d3c:	f04f 0800 	mov.w	r8, #0
 8011d40:	f8da 9058 	ldr.w	r9, [sl, #88]	; 0x58
 8011d44:	9300      	str	r3, [sp, #0]
 8011d46:	f8c0 8004 	str.w	r8, [r0, #4]
 8011d4a:	460f      	mov	r7, r1
 8011d4c:	4615      	mov	r5, r2
 8011d4e:	f8ca 8000 	str.w	r8, [sl]
 8011d52:	2900      	cmp	r1, #0
 8011d54:	f000 80c9 	beq.w	8011eea <rcl_wait_set_resize+0x1ce>
 8011d58:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8011d5c:	6800      	ldr	r0, [r0, #0]
 8011d5e:	4651      	mov	r1, sl
 8011d60:	464a      	mov	r2, r9
 8011d62:	4798      	blx	r3
 8011d64:	6020      	str	r0, [r4, #0]
 8011d66:	2800      	cmp	r0, #0
 8011d68:	f000 80d8 	beq.w	8011f1c <rcl_wait_set_resize+0x200>
 8011d6c:	4652      	mov	r2, sl
 8011d6e:	4641      	mov	r1, r8
 8011d70:	f003 f92e 	bl	8014fd0 <memset>
 8011d74:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011d76:	6067      	str	r7, [r4, #4]
 8011d78:	6898      	ldr	r0, [r3, #8]
 8011d7a:	f8c3 8004 	str.w	r8, [r3, #4]
 8011d7e:	9301      	str	r3, [sp, #4]
 8011d80:	464a      	mov	r2, r9
 8011d82:	9b00      	ldr	r3, [sp, #0]
 8011d84:	4651      	mov	r1, sl
 8011d86:	4798      	blx	r3
 8011d88:	9b01      	ldr	r3, [sp, #4]
 8011d8a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011d8c:	6098      	str	r0, [r3, #8]
 8011d8e:	6897      	ldr	r7, [r2, #8]
 8011d90:	2f00      	cmp	r7, #0
 8011d92:	f000 80be 	beq.w	8011f12 <rcl_wait_set_resize+0x1f6>
 8011d96:	4652      	mov	r2, sl
 8011d98:	4641      	mov	r1, r8
 8011d9a:	4638      	mov	r0, r7
 8011d9c:	f003 f918 	bl	8014fd0 <memset>
 8011da0:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8011da4:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8011da8:	2700      	movs	r7, #0
 8011daa:	e9da 2313 	ldrd	r2, r3, [sl, #76]	; 0x4c
 8011dae:	60e7      	str	r7, [r4, #12]
 8011db0:	f8ca 700c 	str.w	r7, [sl, #12]
 8011db4:	2d00      	cmp	r5, #0
 8011db6:	f040 80b5 	bne.w	8011f24 <rcl_wait_set_resize+0x208>
 8011dba:	68a0      	ldr	r0, [r4, #8]
 8011dbc:	b130      	cbz	r0, 8011dcc <rcl_wait_set_resize+0xb0>
 8011dbe:	4641      	mov	r1, r8
 8011dc0:	4790      	blx	r2
 8011dc2:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8011dc6:	60a5      	str	r5, [r4, #8]
 8011dc8:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8011dcc:	2700      	movs	r7, #0
 8011dce:	19ad      	adds	r5, r5, r6
 8011dd0:	f8ca 7010 	str.w	r7, [sl, #16]
 8011dd4:	f040 80be 	bne.w	8011f54 <rcl_wait_set_resize+0x238>
 8011dd8:	f8da 0014 	ldr.w	r0, [sl, #20]
 8011ddc:	b148      	cbz	r0, 8011df2 <rcl_wait_set_resize+0xd6>
 8011dde:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8011de2:	4641      	mov	r1, r8
 8011de4:	4798      	blx	r3
 8011de6:	f8ca 5014 	str.w	r5, [sl, #20]
 8011dea:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8011dee:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8011df2:	2500      	movs	r5, #0
 8011df4:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 8011df8:	6165      	str	r5, [r4, #20]
 8011dfa:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 8011dfe:	2e00      	cmp	r6, #0
 8011e00:	f040 80bf 	bne.w	8011f82 <rcl_wait_set_resize+0x266>
 8011e04:	6920      	ldr	r0, [r4, #16]
 8011e06:	b140      	cbz	r0, 8011e1a <rcl_wait_set_resize+0xfe>
 8011e08:	4641      	mov	r1, r8
 8011e0a:	47c8      	blx	r9
 8011e0c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8011e10:	6126      	str	r6, [r4, #16]
 8011e12:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 8011e16:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8011e1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e1c:	2500      	movs	r5, #0
 8011e1e:	61e5      	str	r5, [r4, #28]
 8011e20:	f8ca 5018 	str.w	r5, [sl, #24]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	f040 80c1 	bne.w	8011fac <rcl_wait_set_resize+0x290>
 8011e2a:	69a0      	ldr	r0, [r4, #24]
 8011e2c:	b128      	cbz	r0, 8011e3a <rcl_wait_set_resize+0x11e>
 8011e2e:	4641      	mov	r1, r8
 8011e30:	47c8      	blx	r9
 8011e32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e34:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8011e38:	61a3      	str	r3, [r4, #24]
 8011e3a:	f8da 0020 	ldr.w	r0, [sl, #32]
 8011e3e:	b130      	cbz	r0, 8011e4e <rcl_wait_set_resize+0x132>
 8011e40:	4641      	mov	r1, r8
 8011e42:	47c8      	blx	r9
 8011e44:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8011e48:	2300      	movs	r3, #0
 8011e4a:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8011e4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e50:	f8da 7058 	ldr.w	r7, [sl, #88]	; 0x58
 8011e54:	2600      	movs	r6, #0
 8011e56:	e9da 8913 	ldrd	r8, r9, [sl, #76]	; 0x4c
 8011e5a:	6266      	str	r6, [r4, #36]	; 0x24
 8011e5c:	f8ca 6024 	str.w	r6, [sl, #36]	; 0x24
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	f000 80c8 	beq.w	8011ff6 <rcl_wait_set_resize+0x2da>
 8011e66:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8011e6a:	6a20      	ldr	r0, [r4, #32]
 8011e6c:	4651      	mov	r1, sl
 8011e6e:	463a      	mov	r2, r7
 8011e70:	47c8      	blx	r9
 8011e72:	6220      	str	r0, [r4, #32]
 8011e74:	2800      	cmp	r0, #0
 8011e76:	d051      	beq.n	8011f1c <rcl_wait_set_resize+0x200>
 8011e78:	4652      	mov	r2, sl
 8011e7a:	4631      	mov	r1, r6
 8011e7c:	f003 f8a8 	bl	8014fd0 <memset>
 8011e80:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011e82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e84:	6263      	str	r3, [r4, #36]	; 0x24
 8011e86:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8011e88:	62ae      	str	r6, [r5, #40]	; 0x28
 8011e8a:	463a      	mov	r2, r7
 8011e8c:	4651      	mov	r1, sl
 8011e8e:	47c8      	blx	r9
 8011e90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011e92:	62e8      	str	r0, [r5, #44]	; 0x2c
 8011e94:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8011e96:	2d00      	cmp	r5, #0
 8011e98:	f000 8105 	beq.w	80120a6 <rcl_wait_set_resize+0x38a>
 8011e9c:	4652      	mov	r2, sl
 8011e9e:	4631      	mov	r1, r6
 8011ea0:	4628      	mov	r0, r5
 8011ea2:	f003 f895 	bl	8014fd0 <memset>
 8011ea6:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8011eaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011eac:	f8da 6058 	ldr.w	r6, [sl, #88]	; 0x58
 8011eb0:	2500      	movs	r5, #0
 8011eb2:	e9da 7913 	ldrd	r7, r9, [sl, #76]	; 0x4c
 8011eb6:	62e5      	str	r5, [r4, #44]	; 0x2c
 8011eb8:	f8ca 5030 	str.w	r5, [sl, #48]	; 0x30
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	f040 80af 	bne.w	8012020 <rcl_wait_set_resize+0x304>
 8011ec2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8011ec4:	b128      	cbz	r0, 8011ed2 <rcl_wait_set_resize+0x1b6>
 8011ec6:	4631      	mov	r1, r6
 8011ec8:	47b8      	blx	r7
 8011eca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011ecc:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8011ed0:	62a3      	str	r3, [r4, #40]	; 0x28
 8011ed2:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8011ed6:	b310      	cbz	r0, 8011f1e <rcl_wait_set_resize+0x202>
 8011ed8:	4631      	mov	r1, r6
 8011eda:	47b8      	blx	r7
 8011edc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011ede:	2000      	movs	r0, #0
 8011ee0:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 8011ee4:	b003      	add	sp, #12
 8011ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eea:	6800      	ldr	r0, [r0, #0]
 8011eec:	b120      	cbz	r0, 8011ef8 <rcl_wait_set_resize+0x1dc>
 8011eee:	4649      	mov	r1, r9
 8011ef0:	47d8      	blx	fp
 8011ef2:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8011ef6:	6027      	str	r7, [r4, #0]
 8011ef8:	f8da 0008 	ldr.w	r0, [sl, #8]
 8011efc:	2800      	cmp	r0, #0
 8011efe:	f43f af51 	beq.w	8011da4 <rcl_wait_set_resize+0x88>
 8011f02:	4649      	mov	r1, r9
 8011f04:	47d8      	blx	fp
 8011f06:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8011f10:	e748      	b.n	8011da4 <rcl_wait_set_resize+0x88>
 8011f12:	6820      	ldr	r0, [r4, #0]
 8011f14:	4649      	mov	r1, r9
 8011f16:	47d8      	blx	fp
 8011f18:	e9c4 7700 	strd	r7, r7, [r4]
 8011f1c:	200a      	movs	r0, #10
 8011f1e:	b003      	add	sp, #12
 8011f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f24:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8011f28:	68a0      	ldr	r0, [r4, #8]
 8011f2a:	4642      	mov	r2, r8
 8011f2c:	4649      	mov	r1, r9
 8011f2e:	4798      	blx	r3
 8011f30:	60a0      	str	r0, [r4, #8]
 8011f32:	2800      	cmp	r0, #0
 8011f34:	d0f2      	beq.n	8011f1c <rcl_wait_set_resize+0x200>
 8011f36:	4639      	mov	r1, r7
 8011f38:	464a      	mov	r2, r9
 8011f3a:	f003 f849 	bl	8014fd0 <memset>
 8011f3e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8011f42:	60e5      	str	r5, [r4, #12]
 8011f44:	2700      	movs	r7, #0
 8011f46:	19ad      	adds	r5, r5, r6
 8011f48:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8011f4c:	f8ca 7010 	str.w	r7, [sl, #16]
 8011f50:	f43f af42 	beq.w	8011dd8 <rcl_wait_set_resize+0xbc>
 8011f54:	00ad      	lsls	r5, r5, #2
 8011f56:	4642      	mov	r2, r8
 8011f58:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 8011f5c:	f8da 0014 	ldr.w	r0, [sl, #20]
 8011f60:	4629      	mov	r1, r5
 8011f62:	4798      	blx	r3
 8011f64:	4680      	mov	r8, r0
 8011f66:	f8ca 0014 	str.w	r0, [sl, #20]
 8011f6a:	2800      	cmp	r0, #0
 8011f6c:	f000 8084 	beq.w	8012078 <rcl_wait_set_resize+0x35c>
 8011f70:	462a      	mov	r2, r5
 8011f72:	4639      	mov	r1, r7
 8011f74:	f003 f82c 	bl	8014fd0 <memset>
 8011f78:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8011f7c:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8011f80:	e737      	b.n	8011df2 <rcl_wait_set_resize+0xd6>
 8011f82:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8011f86:	6920      	ldr	r0, [r4, #16]
 8011f88:	4642      	mov	r2, r8
 8011f8a:	4649      	mov	r1, r9
 8011f8c:	47b8      	blx	r7
 8011f8e:	6120      	str	r0, [r4, #16]
 8011f90:	2800      	cmp	r0, #0
 8011f92:	d0c3      	beq.n	8011f1c <rcl_wait_set_resize+0x200>
 8011f94:	464a      	mov	r2, r9
 8011f96:	4629      	mov	r1, r5
 8011f98:	f003 f81a 	bl	8014fd0 <memset>
 8011f9c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8011fa0:	6166      	str	r6, [r4, #20]
 8011fa2:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 8011fa6:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8011faa:	e736      	b.n	8011e1a <rcl_wait_set_resize+0xfe>
 8011fac:	009e      	lsls	r6, r3, #2
 8011fae:	69a0      	ldr	r0, [r4, #24]
 8011fb0:	4631      	mov	r1, r6
 8011fb2:	4642      	mov	r2, r8
 8011fb4:	47b8      	blx	r7
 8011fb6:	61a0      	str	r0, [r4, #24]
 8011fb8:	2800      	cmp	r0, #0
 8011fba:	d0af      	beq.n	8011f1c <rcl_wait_set_resize+0x200>
 8011fbc:	4632      	mov	r2, r6
 8011fbe:	4629      	mov	r1, r5
 8011fc0:	f003 f806 	bl	8014fd0 <memset>
 8011fc4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8011fc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011fca:	61e3      	str	r3, [r4, #28]
 8011fcc:	f8da 0020 	ldr.w	r0, [sl, #32]
 8011fd0:	f8ca 501c 	str.w	r5, [sl, #28]
 8011fd4:	4642      	mov	r2, r8
 8011fd6:	4631      	mov	r1, r6
 8011fd8:	47b8      	blx	r7
 8011fda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011fdc:	f8ca 0020 	str.w	r0, [sl, #32]
 8011fe0:	6a1f      	ldr	r7, [r3, #32]
 8011fe2:	2f00      	cmp	r7, #0
 8011fe4:	d058      	beq.n	8012098 <rcl_wait_set_resize+0x37c>
 8011fe6:	4632      	mov	r2, r6
 8011fe8:	4629      	mov	r1, r5
 8011fea:	4638      	mov	r0, r7
 8011fec:	f002 fff0 	bl	8014fd0 <memset>
 8011ff0:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8011ff4:	e72b      	b.n	8011e4e <rcl_wait_set_resize+0x132>
 8011ff6:	6a20      	ldr	r0, [r4, #32]
 8011ff8:	b128      	cbz	r0, 8012006 <rcl_wait_set_resize+0x2ea>
 8011ffa:	4639      	mov	r1, r7
 8011ffc:	47c0      	blx	r8
 8011ffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012000:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8012004:	6223      	str	r3, [r4, #32]
 8012006:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 801200a:	2800      	cmp	r0, #0
 801200c:	f43f af4d 	beq.w	8011eaa <rcl_wait_set_resize+0x18e>
 8012010:	4639      	mov	r1, r7
 8012012:	47c0      	blx	r8
 8012014:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8012018:	2300      	movs	r3, #0
 801201a:	e9ca 330a 	strd	r3, r3, [sl, #40]	; 0x28
 801201e:	e744      	b.n	8011eaa <rcl_wait_set_resize+0x18e>
 8012020:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8012024:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8012026:	4641      	mov	r1, r8
 8012028:	4632      	mov	r2, r6
 801202a:	47c8      	blx	r9
 801202c:	62a0      	str	r0, [r4, #40]	; 0x28
 801202e:	2800      	cmp	r0, #0
 8012030:	f43f af74 	beq.w	8011f1c <rcl_wait_set_resize+0x200>
 8012034:	4642      	mov	r2, r8
 8012036:	4629      	mov	r1, r5
 8012038:	f002 ffca 	bl	8014fd0 <memset>
 801203c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8012040:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012042:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012044:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8012048:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 801204c:	4632      	mov	r2, r6
 801204e:	4641      	mov	r1, r8
 8012050:	47c8      	blx	r9
 8012052:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012054:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8012058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801205a:	b35b      	cbz	r3, 80120b4 <rcl_wait_set_resize+0x398>
 801205c:	4642      	mov	r2, r8
 801205e:	4618      	mov	r0, r3
 8012060:	4629      	mov	r1, r5
 8012062:	f002 ffb5 	bl	8014fd0 <memset>
 8012066:	4628      	mov	r0, r5
 8012068:	b003      	add	sp, #12
 801206a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801206e:	200b      	movs	r0, #11
 8012070:	4770      	bx	lr
 8012072:	f44f 7061 	mov.w	r0, #900	; 0x384
 8012076:	e752      	b.n	8011f1e <rcl_wait_set_resize+0x202>
 8012078:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801207a:	68a0      	ldr	r0, [r4, #8]
 801207c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801207e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8012080:	4790      	blx	r2
 8012082:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012084:	6920      	ldr	r0, [r4, #16]
 8012086:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012088:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801208a:	e9c4 8802 	strd	r8, r8, [r4, #8]
 801208e:	4790      	blx	r2
 8012090:	e9c4 8804 	strd	r8, r8, [r4, #16]
 8012094:	200a      	movs	r0, #10
 8012096:	e742      	b.n	8011f1e <rcl_wait_set_resize+0x202>
 8012098:	69a0      	ldr	r0, [r4, #24]
 801209a:	4641      	mov	r1, r8
 801209c:	47c8      	blx	r9
 801209e:	e9c4 7706 	strd	r7, r7, [r4, #24]
 80120a2:	200a      	movs	r0, #10
 80120a4:	e73b      	b.n	8011f1e <rcl_wait_set_resize+0x202>
 80120a6:	6a20      	ldr	r0, [r4, #32]
 80120a8:	4639      	mov	r1, r7
 80120aa:	47c0      	blx	r8
 80120ac:	e9c4 5508 	strd	r5, r5, [r4, #32]
 80120b0:	200a      	movs	r0, #10
 80120b2:	e734      	b.n	8011f1e <rcl_wait_set_resize+0x202>
 80120b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80120b6:	9300      	str	r3, [sp, #0]
 80120b8:	4631      	mov	r1, r6
 80120ba:	47b8      	blx	r7
 80120bc:	9b00      	ldr	r3, [sp, #0]
 80120be:	200a      	movs	r0, #10
 80120c0:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 80120c4:	e72b      	b.n	8011f1e <rcl_wait_set_resize+0x202>
 80120c6:	bf00      	nop

080120c8 <rcl_wait_set_init>:
 80120c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120cc:	b084      	sub	sp, #16
 80120ce:	4604      	mov	r4, r0
 80120d0:	a810      	add	r0, sp, #64	; 0x40
 80120d2:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 80120d6:	460f      	mov	r7, r1
 80120d8:	4690      	mov	r8, r2
 80120da:	4699      	mov	r9, r3
 80120dc:	f7f9 fca6 	bl	800ba2c <rcutils_allocator_is_valid>
 80120e0:	2800      	cmp	r0, #0
 80120e2:	d06b      	beq.n	80121bc <rcl_wait_set_init+0xf4>
 80120e4:	2c00      	cmp	r4, #0
 80120e6:	d069      	beq.n	80121bc <rcl_wait_set_init+0xf4>
 80120e8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80120ea:	b125      	cbz	r5, 80120f6 <rcl_wait_set_init+0x2e>
 80120ec:	2564      	movs	r5, #100	; 0x64
 80120ee:	4628      	mov	r0, r5
 80120f0:	b004      	add	sp, #16
 80120f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120f6:	f1ba 0f00 	cmp.w	sl, #0
 80120fa:	d05f      	beq.n	80121bc <rcl_wait_set_init+0xf4>
 80120fc:	4650      	mov	r0, sl
 80120fe:	f7fe f8e7 	bl	80102d0 <rcl_context_is_valid>
 8012102:	2800      	cmp	r0, #0
 8012104:	d067      	beq.n	80121d6 <rcl_wait_set_init+0x10e>
 8012106:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012108:	9914      	ldr	r1, [sp, #80]	; 0x50
 801210a:	205c      	movs	r0, #92	; 0x5c
 801210c:	4798      	blx	r3
 801210e:	6320      	str	r0, [r4, #48]	; 0x30
 8012110:	2800      	cmp	r0, #0
 8012112:	d062      	beq.n	80121da <rcl_wait_set_init+0x112>
 8012114:	225c      	movs	r2, #92	; 0x5c
 8012116:	4629      	mov	r1, r5
 8012118:	f002 ff5a 	bl	8014fd0 <memset>
 801211c:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8012120:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012124:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8012126:	f8dc e000 	ldr.w	lr, [ip]
 801212a:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 801212e:	f106 0c48 	add.w	ip, r6, #72	; 0x48
 8012132:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8012136:	e9c6 5507 	strd	r5, r5, [r6, #28]
 801213a:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 801213e:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 8012142:	60b5      	str	r5, [r6, #8]
 8012144:	6075      	str	r5, [r6, #4]
 8012146:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801214a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 801214e:	1899      	adds	r1, r3, r2
 8012150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012152:	f8da 0000 	ldr.w	r0, [sl]
 8012156:	f8cc e000 	str.w	lr, [ip]
 801215a:	4419      	add	r1, r3
 801215c:	4441      	add	r1, r8
 801215e:	3028      	adds	r0, #40	; 0x28
 8012160:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8012164:	f001 f952 	bl	801340c <rmw_create_wait_set>
 8012168:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801216a:	63f0      	str	r0, [r6, #60]	; 0x3c
 801216c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801216e:	b350      	cbz	r0, 80121c6 <rcl_wait_set_init+0xfe>
 8012170:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012172:	9302      	str	r3, [sp, #8]
 8012174:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012176:	9301      	str	r3, [sp, #4]
 8012178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801217a:	9300      	str	r3, [sp, #0]
 801217c:	4642      	mov	r2, r8
 801217e:	464b      	mov	r3, r9
 8012180:	4639      	mov	r1, r7
 8012182:	4620      	mov	r0, r4
 8012184:	f7ff fdca 	bl	8011d1c <rcl_wait_set_resize>
 8012188:	4605      	mov	r5, r0
 801218a:	2800      	cmp	r0, #0
 801218c:	d0af      	beq.n	80120ee <rcl_wait_set_init+0x26>
 801218e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012190:	bb2b      	cbnz	r3, 80121de <rcl_wait_set_init+0x116>
 8012192:	2600      	movs	r6, #0
 8012194:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8012198:	9600      	str	r6, [sp, #0]
 801219a:	4633      	mov	r3, r6
 801219c:	4632      	mov	r2, r6
 801219e:	4631      	mov	r1, r6
 80121a0:	4620      	mov	r0, r4
 80121a2:	f7ff fdbb 	bl	8011d1c <rcl_wait_set_resize>
 80121a6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80121a8:	2800      	cmp	r0, #0
 80121aa:	d0a0      	beq.n	80120ee <rcl_wait_set_init+0x26>
 80121ac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80121ae:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80121b0:	4798      	blx	r3
 80121b2:	4628      	mov	r0, r5
 80121b4:	6326      	str	r6, [r4, #48]	; 0x30
 80121b6:	b004      	add	sp, #16
 80121b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121bc:	250b      	movs	r5, #11
 80121be:	4628      	mov	r0, r5
 80121c0:	b004      	add	sp, #16
 80121c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121c6:	2501      	movs	r5, #1
 80121c8:	f001 f92a 	bl	8013420 <rmw_destroy_wait_set>
 80121cc:	2800      	cmp	r0, #0
 80121ce:	bf18      	it	ne
 80121d0:	f44f 7561 	movne.w	r5, #900	; 0x384
 80121d4:	e7dd      	b.n	8012192 <rcl_wait_set_init+0xca>
 80121d6:	2565      	movs	r5, #101	; 0x65
 80121d8:	e789      	b.n	80120ee <rcl_wait_set_init+0x26>
 80121da:	250a      	movs	r5, #10
 80121dc:	e787      	b.n	80120ee <rcl_wait_set_init+0x26>
 80121de:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80121e0:	e7f2      	b.n	80121c8 <rcl_wait_set_init+0x100>
 80121e2:	bf00      	nop

080121e4 <rcl_wait_set_add_guard_condition>:
 80121e4:	b320      	cbz	r0, 8012230 <rcl_wait_set_add_guard_condition+0x4c>
 80121e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80121e8:	b570      	push	{r4, r5, r6, lr}
 80121ea:	4604      	mov	r4, r0
 80121ec:	b1d3      	cbz	r3, 8012224 <rcl_wait_set_add_guard_condition+0x40>
 80121ee:	b319      	cbz	r1, 8012238 <rcl_wait_set_add_guard_condition+0x54>
 80121f0:	68dd      	ldr	r5, [r3, #12]
 80121f2:	68e0      	ldr	r0, [r4, #12]
 80121f4:	4285      	cmp	r5, r0
 80121f6:	d218      	bcs.n	801222a <rcl_wait_set_add_guard_condition+0x46>
 80121f8:	68a0      	ldr	r0, [r4, #8]
 80121fa:	1c6e      	adds	r6, r5, #1
 80121fc:	60de      	str	r6, [r3, #12]
 80121fe:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012202:	b102      	cbz	r2, 8012206 <rcl_wait_set_add_guard_condition+0x22>
 8012204:	6015      	str	r5, [r2, #0]
 8012206:	4608      	mov	r0, r1
 8012208:	f7fe fb78 	bl	80108fc <rcl_guard_condition_get_rmw_handle>
 801220c:	b190      	cbz	r0, 8012234 <rcl_wait_set_add_guard_condition+0x50>
 801220e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012210:	6842      	ldr	r2, [r0, #4]
 8012212:	695b      	ldr	r3, [r3, #20]
 8012214:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012218:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801221a:	6913      	ldr	r3, [r2, #16]
 801221c:	3301      	adds	r3, #1
 801221e:	6113      	str	r3, [r2, #16]
 8012220:	2000      	movs	r0, #0
 8012222:	bd70      	pop	{r4, r5, r6, pc}
 8012224:	f44f 7061 	mov.w	r0, #900	; 0x384
 8012228:	bd70      	pop	{r4, r5, r6, pc}
 801222a:	f240 3086 	movw	r0, #902	; 0x386
 801222e:	bd70      	pop	{r4, r5, r6, pc}
 8012230:	200b      	movs	r0, #11
 8012232:	4770      	bx	lr
 8012234:	2001      	movs	r0, #1
 8012236:	bd70      	pop	{r4, r5, r6, pc}
 8012238:	200b      	movs	r0, #11
 801223a:	bd70      	pop	{r4, r5, r6, pc}

0801223c <rcl_wait_set_add_timer>:
 801223c:	b340      	cbz	r0, 8012290 <rcl_wait_set_add_timer+0x54>
 801223e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8012240:	b570      	push	{r4, r5, r6, lr}
 8012242:	4604      	mov	r4, r0
 8012244:	b1f3      	cbz	r3, 8012284 <rcl_wait_set_add_timer+0x48>
 8012246:	b329      	cbz	r1, 8012294 <rcl_wait_set_add_timer+0x58>
 8012248:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801224a:	6965      	ldr	r5, [r4, #20]
 801224c:	42a8      	cmp	r0, r5
 801224e:	d21c      	bcs.n	801228a <rcl_wait_set_add_timer+0x4e>
 8012250:	6925      	ldr	r5, [r4, #16]
 8012252:	1c46      	adds	r6, r0, #1
 8012254:	641e      	str	r6, [r3, #64]	; 0x40
 8012256:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 801225a:	b102      	cbz	r2, 801225e <rcl_wait_set_add_timer+0x22>
 801225c:	6010      	str	r0, [r2, #0]
 801225e:	4608      	mov	r0, r1
 8012260:	f7ff faa4 	bl	80117ac <rcl_timer_get_guard_condition>
 8012264:	b168      	cbz	r0, 8012282 <rcl_wait_set_add_timer+0x46>
 8012266:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012268:	68e3      	ldr	r3, [r4, #12]
 801226a:	6c15      	ldr	r5, [r2, #64]	; 0x40
 801226c:	3b01      	subs	r3, #1
 801226e:	441d      	add	r5, r3
 8012270:	f7fe fb44 	bl	80108fc <rcl_guard_condition_get_rmw_handle>
 8012274:	b180      	cbz	r0, 8012298 <rcl_wait_set_add_timer+0x5c>
 8012276:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012278:	6842      	ldr	r2, [r0, #4]
 801227a:	695b      	ldr	r3, [r3, #20]
 801227c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012280:	2000      	movs	r0, #0
 8012282:	bd70      	pop	{r4, r5, r6, pc}
 8012284:	f44f 7061 	mov.w	r0, #900	; 0x384
 8012288:	bd70      	pop	{r4, r5, r6, pc}
 801228a:	f240 3086 	movw	r0, #902	; 0x386
 801228e:	bd70      	pop	{r4, r5, r6, pc}
 8012290:	200b      	movs	r0, #11
 8012292:	4770      	bx	lr
 8012294:	200b      	movs	r0, #11
 8012296:	bd70      	pop	{r4, r5, r6, pc}
 8012298:	2001      	movs	r0, #1
 801229a:	bd70      	pop	{r4, r5, r6, pc}

0801229c <rcl_wait_set_add_client>:
 801229c:	b320      	cbz	r0, 80122e8 <rcl_wait_set_add_client+0x4c>
 801229e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80122a0:	b570      	push	{r4, r5, r6, lr}
 80122a2:	4604      	mov	r4, r0
 80122a4:	b1d3      	cbz	r3, 80122dc <rcl_wait_set_add_client+0x40>
 80122a6:	b319      	cbz	r1, 80122f0 <rcl_wait_set_add_client+0x54>
 80122a8:	699d      	ldr	r5, [r3, #24]
 80122aa:	69e0      	ldr	r0, [r4, #28]
 80122ac:	4285      	cmp	r5, r0
 80122ae:	d218      	bcs.n	80122e2 <rcl_wait_set_add_client+0x46>
 80122b0:	69a0      	ldr	r0, [r4, #24]
 80122b2:	1c6e      	adds	r6, r5, #1
 80122b4:	619e      	str	r6, [r3, #24]
 80122b6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80122ba:	b102      	cbz	r2, 80122be <rcl_wait_set_add_client+0x22>
 80122bc:	6015      	str	r5, [r2, #0]
 80122be:	4608      	mov	r0, r1
 80122c0:	f7fd ffa6 	bl	8010210 <rcl_client_get_rmw_handle>
 80122c4:	b190      	cbz	r0, 80122ec <rcl_wait_set_add_client+0x50>
 80122c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80122c8:	6842      	ldr	r2, [r0, #4]
 80122ca:	6a1b      	ldr	r3, [r3, #32]
 80122cc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80122d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80122d2:	69d3      	ldr	r3, [r2, #28]
 80122d4:	3301      	adds	r3, #1
 80122d6:	61d3      	str	r3, [r2, #28]
 80122d8:	2000      	movs	r0, #0
 80122da:	bd70      	pop	{r4, r5, r6, pc}
 80122dc:	f44f 7061 	mov.w	r0, #900	; 0x384
 80122e0:	bd70      	pop	{r4, r5, r6, pc}
 80122e2:	f240 3086 	movw	r0, #902	; 0x386
 80122e6:	bd70      	pop	{r4, r5, r6, pc}
 80122e8:	200b      	movs	r0, #11
 80122ea:	4770      	bx	lr
 80122ec:	2001      	movs	r0, #1
 80122ee:	bd70      	pop	{r4, r5, r6, pc}
 80122f0:	200b      	movs	r0, #11
 80122f2:	bd70      	pop	{r4, r5, r6, pc}

080122f4 <rcl_wait_set_add_service>:
 80122f4:	b320      	cbz	r0, 8012340 <rcl_wait_set_add_service+0x4c>
 80122f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80122f8:	b570      	push	{r4, r5, r6, lr}
 80122fa:	4604      	mov	r4, r0
 80122fc:	b1d3      	cbz	r3, 8012334 <rcl_wait_set_add_service+0x40>
 80122fe:	b319      	cbz	r1, 8012348 <rcl_wait_set_add_service+0x54>
 8012300:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8012302:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012304:	4285      	cmp	r5, r0
 8012306:	d218      	bcs.n	801233a <rcl_wait_set_add_service+0x46>
 8012308:	6a20      	ldr	r0, [r4, #32]
 801230a:	1c6e      	adds	r6, r5, #1
 801230c:	625e      	str	r6, [r3, #36]	; 0x24
 801230e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012312:	b102      	cbz	r2, 8012316 <rcl_wait_set_add_service+0x22>
 8012314:	6015      	str	r5, [r2, #0]
 8012316:	4608      	mov	r0, r1
 8012318:	f7fe fe34 	bl	8010f84 <rcl_service_get_rmw_handle>
 801231c:	b190      	cbz	r0, 8012344 <rcl_wait_set_add_service+0x50>
 801231e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012320:	6842      	ldr	r2, [r0, #4]
 8012322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012324:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012328:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801232a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801232c:	3301      	adds	r3, #1
 801232e:	6293      	str	r3, [r2, #40]	; 0x28
 8012330:	2000      	movs	r0, #0
 8012332:	bd70      	pop	{r4, r5, r6, pc}
 8012334:	f44f 7061 	mov.w	r0, #900	; 0x384
 8012338:	bd70      	pop	{r4, r5, r6, pc}
 801233a:	f240 3086 	movw	r0, #902	; 0x386
 801233e:	bd70      	pop	{r4, r5, r6, pc}
 8012340:	200b      	movs	r0, #11
 8012342:	4770      	bx	lr
 8012344:	2001      	movs	r0, #1
 8012346:	bd70      	pop	{r4, r5, r6, pc}
 8012348:	200b      	movs	r0, #11
 801234a:	bd70      	pop	{r4, r5, r6, pc}
 801234c:	0000      	movs	r0, r0
	...

08012350 <rcl_wait>:
 8012350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012354:	b08f      	sub	sp, #60	; 0x3c
 8012356:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801235a:	2800      	cmp	r0, #0
 801235c:	f000 814c 	beq.w	80125f8 <rcl_wait+0x2a8>
 8012360:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8012362:	4604      	mov	r4, r0
 8012364:	2d00      	cmp	r5, #0
 8012366:	f000 80bc 	beq.w	80124e2 <rcl_wait+0x192>
 801236a:	6843      	ldr	r3, [r0, #4]
 801236c:	b973      	cbnz	r3, 801238c <rcl_wait+0x3c>
 801236e:	68e3      	ldr	r3, [r4, #12]
 8012370:	b963      	cbnz	r3, 801238c <rcl_wait+0x3c>
 8012372:	6963      	ldr	r3, [r4, #20]
 8012374:	b953      	cbnz	r3, 801238c <rcl_wait+0x3c>
 8012376:	69e3      	ldr	r3, [r4, #28]
 8012378:	b943      	cbnz	r3, 801238c <rcl_wait+0x3c>
 801237a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801237c:	b933      	cbnz	r3, 801238c <rcl_wait+0x3c>
 801237e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012380:	b923      	cbnz	r3, 801238c <rcl_wait+0x3c>
 8012382:	f240 3085 	movw	r0, #901	; 0x385
 8012386:	b00f      	add	sp, #60	; 0x3c
 8012388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801238c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012390:	2a01      	cmp	r2, #1
 8012392:	f173 0300 	sbcs.w	r3, r3, #0
 8012396:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8012398:	db56      	blt.n	8012448 <rcl_wait+0xf8>
 801239a:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 801239e:	2900      	cmp	r1, #0
 80123a0:	f000 8149 	beq.w	8012636 <rcl_wait+0x2e6>
 80123a4:	2300      	movs	r3, #0
 80123a6:	9307      	str	r3, [sp, #28]
 80123a8:	469b      	mov	fp, r3
 80123aa:	f04f 0800 	mov.w	r8, #0
 80123ae:	f04f 0900 	mov.w	r9, #0
 80123b2:	e00d      	b.n	80123d0 <rcl_wait+0x80>
 80123b4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80123b6:	6922      	ldr	r2, [r4, #16]
 80123b8:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80123ba:	f842 000a 	str.w	r0, [r2, sl]
 80123be:	f118 0801 	adds.w	r8, r8, #1
 80123c2:	f149 0900 	adc.w	r9, r9, #0
 80123c6:	2300      	movs	r3, #0
 80123c8:	4599      	cmp	r9, r3
 80123ca:	bf08      	it	eq
 80123cc:	4588      	cmpeq	r8, r1
 80123ce:	d243      	bcs.n	8012458 <rcl_wait+0x108>
 80123d0:	6922      	ldr	r2, [r4, #16]
 80123d2:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 80123d6:	f852 000a 	ldr.w	r0, [r2, sl]
 80123da:	2800      	cmp	r0, #0
 80123dc:	d0ef      	beq.n	80123be <rcl_wait+0x6e>
 80123de:	68e2      	ldr	r2, [r4, #12]
 80123e0:	6969      	ldr	r1, [r5, #20]
 80123e2:	4442      	add	r2, r8
 80123e4:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 80123e8:	b13b      	cbz	r3, 80123fa <rcl_wait+0xaa>
 80123ea:	692a      	ldr	r2, [r5, #16]
 80123ec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80123f0:	6921      	ldr	r1, [r4, #16]
 80123f2:	3201      	adds	r2, #1
 80123f4:	f851 000a 	ldr.w	r0, [r1, sl]
 80123f8:	612a      	str	r2, [r5, #16]
 80123fa:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 80123fe:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
 8012402:	f7ff f9c1 	bl	8011788 <rcl_timer_is_canceled>
 8012406:	2800      	cmp	r0, #0
 8012408:	d1bd      	bne.n	8012386 <rcl_wait+0x36>
 801240a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 801240e:	2a00      	cmp	r2, #0
 8012410:	d1d0      	bne.n	80123b4 <rcl_wait+0x64>
 8012412:	6922      	ldr	r2, [r4, #16]
 8012414:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012418:	f852 000a 	ldr.w	r0, [r2, sl]
 801241c:	a90a      	add	r1, sp, #40	; 0x28
 801241e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012422:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012426:	f7ff f98b 	bl	8011740 <rcl_timer_get_time_until_next_call>
 801242a:	2800      	cmp	r0, #0
 801242c:	d1ab      	bne.n	8012386 <rcl_wait+0x36>
 801242e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012432:	42b2      	cmp	r2, r6
 8012434:	eb73 0107 	sbcs.w	r1, r3, r7
 8012438:	da03      	bge.n	8012442 <rcl_wait+0xf2>
 801243a:	461f      	mov	r7, r3
 801243c:	2301      	movs	r3, #1
 801243e:	4616      	mov	r6, r2
 8012440:	9307      	str	r3, [sp, #28]
 8012442:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8012444:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8012446:	e7ba      	b.n	80123be <rcl_wait+0x6e>
 8012448:	2900      	cmp	r1, #0
 801244a:	f000 80de 	beq.w	801260a <rcl_wait+0x2ba>
 801244e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8012452:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8012456:	e7a5      	b.n	80123a4 <rcl_wait+0x54>
 8012458:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801245c:	4313      	orrs	r3, r2
 801245e:	d145      	bne.n	80124ec <rcl_wait+0x19c>
 8012460:	2300      	movs	r3, #0
 8012462:	2200      	movs	r2, #0
 8012464:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012468:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801246c:	ab0a      	add	r3, sp, #40	; 0x28
 801246e:	9302      	str	r3, [sp, #8]
 8012470:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8012472:	9301      	str	r3, [sp, #4]
 8012474:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8012478:	9300      	str	r3, [sp, #0]
 801247a:	f105 0228 	add.w	r2, r5, #40	; 0x28
 801247e:	f105 031c 	add.w	r3, r5, #28
 8012482:	f105 0110 	add.w	r1, r5, #16
 8012486:	1d28      	adds	r0, r5, #4
 8012488:	f000 fe40 	bl	801310c <rmw_wait>
 801248c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801248e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012490:	4680      	mov	r8, r0
 8012492:	b30a      	cbz	r2, 80124d8 <rcl_wait+0x188>
 8012494:	2500      	movs	r5, #0
 8012496:	462f      	mov	r7, r5
 8012498:	e004      	b.n	80124a4 <rcl_wait+0x154>
 801249a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801249c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801249e:	3501      	adds	r5, #1
 80124a0:	42aa      	cmp	r2, r5
 80124a2:	d919      	bls.n	80124d8 <rcl_wait+0x188>
 80124a4:	6922      	ldr	r2, [r4, #16]
 80124a6:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80124aa:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 80124ae:	00ae      	lsls	r6, r5, #2
 80124b0:	2800      	cmp	r0, #0
 80124b2:	d0f3      	beq.n	801249c <rcl_wait+0x14c>
 80124b4:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 80124b8:	f7ff f90a 	bl	80116d0 <rcl_timer_is_ready>
 80124bc:	2800      	cmp	r0, #0
 80124be:	f47f af62 	bne.w	8012386 <rcl_wait+0x36>
 80124c2:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 80124c6:	2a00      	cmp	r2, #0
 80124c8:	d1e7      	bne.n	801249a <rcl_wait+0x14a>
 80124ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80124cc:	6921      	ldr	r1, [r4, #16]
 80124ce:	518a      	str	r2, [r1, r6]
 80124d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80124d2:	3501      	adds	r5, #1
 80124d4:	42aa      	cmp	r2, r5
 80124d6:	d8e5      	bhi.n	80124a4 <rcl_wait+0x154>
 80124d8:	f038 0002 	bics.w	r0, r8, #2
 80124dc:	d029      	beq.n	8012532 <rcl_wait+0x1e2>
 80124de:	2001      	movs	r0, #1
 80124e0:	e751      	b.n	8012386 <rcl_wait+0x36>
 80124e2:	f44f 7061 	mov.w	r0, #900	; 0x384
 80124e6:	b00f      	add	sp, #60	; 0x3c
 80124e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80124f0:	2a01      	cmp	r2, #1
 80124f2:	f173 0300 	sbcs.w	r3, r3, #0
 80124f6:	f2c0 8083 	blt.w	8012600 <rcl_wait+0x2b0>
 80124fa:	2e00      	cmp	r6, #0
 80124fc:	f177 0300 	sbcs.w	r3, r7, #0
 8012500:	bfbc      	itt	lt
 8012502:	2600      	movlt	r6, #0
 8012504:	2700      	movlt	r7, #0
 8012506:	a34e      	add	r3, pc, #312	; (adr r3, 8012640 <rcl_wait+0x2f0>)
 8012508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801250c:	4630      	mov	r0, r6
 801250e:	4639      	mov	r1, r7
 8012510:	f7ee fb24 	bl	8000b5c <__aeabi_ldivmod>
 8012514:	a34a      	add	r3, pc, #296	; (adr r3, 8012640 <rcl_wait+0x2f0>)
 8012516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801251a:	4680      	mov	r8, r0
 801251c:	4689      	mov	r9, r1
 801251e:	4630      	mov	r0, r6
 8012520:	4639      	mov	r1, r7
 8012522:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8012526:	f7ee fb19 	bl	8000b5c <__aeabi_ldivmod>
 801252a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801252e:	ab0a      	add	r3, sp, #40	; 0x28
 8012530:	e79d      	b.n	801246e <rcl_wait+0x11e>
 8012532:	6866      	ldr	r6, [r4, #4]
 8012534:	4602      	mov	r2, r0
 8012536:	b91e      	cbnz	r6, 8012540 <rcl_wait+0x1f0>
 8012538:	e00d      	b.n	8012556 <rcl_wait+0x206>
 801253a:	3201      	adds	r2, #1
 801253c:	42b2      	cmp	r2, r6
 801253e:	d00a      	beq.n	8012556 <rcl_wait+0x206>
 8012540:	6899      	ldr	r1, [r3, #8]
 8012542:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012546:	2900      	cmp	r1, #0
 8012548:	d1f7      	bne.n	801253a <rcl_wait+0x1ea>
 801254a:	6825      	ldr	r5, [r4, #0]
 801254c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8012550:	3201      	adds	r2, #1
 8012552:	42b2      	cmp	r2, r6
 8012554:	d1f4      	bne.n	8012540 <rcl_wait+0x1f0>
 8012556:	68e6      	ldr	r6, [r4, #12]
 8012558:	2200      	movs	r2, #0
 801255a:	b91e      	cbnz	r6, 8012564 <rcl_wait+0x214>
 801255c:	e00d      	b.n	801257a <rcl_wait+0x22a>
 801255e:	3201      	adds	r2, #1
 8012560:	42b2      	cmp	r2, r6
 8012562:	d00a      	beq.n	801257a <rcl_wait+0x22a>
 8012564:	6959      	ldr	r1, [r3, #20]
 8012566:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801256a:	2900      	cmp	r1, #0
 801256c:	d1f7      	bne.n	801255e <rcl_wait+0x20e>
 801256e:	68a5      	ldr	r5, [r4, #8]
 8012570:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8012574:	3201      	adds	r2, #1
 8012576:	42b2      	cmp	r2, r6
 8012578:	d1f4      	bne.n	8012564 <rcl_wait+0x214>
 801257a:	69e6      	ldr	r6, [r4, #28]
 801257c:	2200      	movs	r2, #0
 801257e:	b91e      	cbnz	r6, 8012588 <rcl_wait+0x238>
 8012580:	e00d      	b.n	801259e <rcl_wait+0x24e>
 8012582:	3201      	adds	r2, #1
 8012584:	42b2      	cmp	r2, r6
 8012586:	d00a      	beq.n	801259e <rcl_wait+0x24e>
 8012588:	6a19      	ldr	r1, [r3, #32]
 801258a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801258e:	2900      	cmp	r1, #0
 8012590:	d1f7      	bne.n	8012582 <rcl_wait+0x232>
 8012592:	69a5      	ldr	r5, [r4, #24]
 8012594:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8012598:	3201      	adds	r2, #1
 801259a:	42b2      	cmp	r2, r6
 801259c:	d1f4      	bne.n	8012588 <rcl_wait+0x238>
 801259e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80125a0:	2200      	movs	r2, #0
 80125a2:	b91e      	cbnz	r6, 80125ac <rcl_wait+0x25c>
 80125a4:	e00d      	b.n	80125c2 <rcl_wait+0x272>
 80125a6:	3201      	adds	r2, #1
 80125a8:	4296      	cmp	r6, r2
 80125aa:	d00a      	beq.n	80125c2 <rcl_wait+0x272>
 80125ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80125ae:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80125b2:	2900      	cmp	r1, #0
 80125b4:	d1f7      	bne.n	80125a6 <rcl_wait+0x256>
 80125b6:	6a25      	ldr	r5, [r4, #32]
 80125b8:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80125bc:	3201      	adds	r2, #1
 80125be:	4296      	cmp	r6, r2
 80125c0:	d1f4      	bne.n	80125ac <rcl_wait+0x25c>
 80125c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80125c4:	2200      	movs	r2, #0
 80125c6:	b91e      	cbnz	r6, 80125d0 <rcl_wait+0x280>
 80125c8:	e00d      	b.n	80125e6 <rcl_wait+0x296>
 80125ca:	3201      	adds	r2, #1
 80125cc:	42b2      	cmp	r2, r6
 80125ce:	d00a      	beq.n	80125e6 <rcl_wait+0x296>
 80125d0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80125d2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80125d6:	2900      	cmp	r1, #0
 80125d8:	d1f7      	bne.n	80125ca <rcl_wait+0x27a>
 80125da:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80125dc:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80125e0:	3201      	adds	r2, #1
 80125e2:	42b2      	cmp	r2, r6
 80125e4:	d1f4      	bne.n	80125d0 <rcl_wait+0x280>
 80125e6:	f1b8 0f02 	cmp.w	r8, #2
 80125ea:	f47f aecc 	bne.w	8012386 <rcl_wait+0x36>
 80125ee:	9b07      	ldr	r3, [sp, #28]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	bf08      	it	eq
 80125f4:	2002      	moveq	r0, #2
 80125f6:	e6c6      	b.n	8012386 <rcl_wait+0x36>
 80125f8:	200b      	movs	r0, #11
 80125fa:	b00f      	add	sp, #60	; 0x3c
 80125fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012600:	9b07      	ldr	r3, [sp, #28]
 8012602:	2b00      	cmp	r3, #0
 8012604:	f47f af79 	bne.w	80124fa <rcl_wait+0x1aa>
 8012608:	e731      	b.n	801246e <rcl_wait+0x11e>
 801260a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801260e:	4313      	orrs	r3, r2
 8012610:	bf08      	it	eq
 8012612:	9107      	streq	r1, [sp, #28]
 8012614:	f43f af24 	beq.w	8012460 <rcl_wait+0x110>
 8012618:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801261c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8012620:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8012624:	2a01      	cmp	r2, #1
 8012626:	f173 0300 	sbcs.w	r3, r3, #0
 801262a:	f04f 0300 	mov.w	r3, #0
 801262e:	9307      	str	r3, [sp, #28]
 8012630:	f6bf af63 	bge.w	80124fa <rcl_wait+0x1aa>
 8012634:	e71b      	b.n	801246e <rcl_wait+0x11e>
 8012636:	4632      	mov	r2, r6
 8012638:	463b      	mov	r3, r7
 801263a:	e7f3      	b.n	8012624 <rcl_wait+0x2d4>
 801263c:	f3af 8000 	nop.w
 8012640:	3b9aca00 	.word	0x3b9aca00
 8012644:	00000000 	.word	0x00000000

08012648 <__atomic_load_8>:
 8012648:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801264c:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8012650:	4b14      	ldr	r3, [pc, #80]	; (80126a4 <__atomic_load_8+0x5c>)
 8012652:	4a15      	ldr	r2, [pc, #84]	; (80126a8 <__atomic_load_8+0x60>)
 8012654:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012658:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801265c:	fb03 f301 	mul.w	r3, r3, r1
 8012660:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 8012664:	fba2 1203 	umull	r1, r2, r2, r3
 8012668:	0912      	lsrs	r2, r2, #4
 801266a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801266e:	b430      	push	{r4, r5}
 8012670:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 8012674:	4c0d      	ldr	r4, [pc, #52]	; (80126ac <__atomic_load_8+0x64>)
 8012676:	1a9b      	subs	r3, r3, r2
 8012678:	18e1      	adds	r1, r4, r3
 801267a:	f04f 0501 	mov.w	r5, #1
 801267e:	e8d1 2f4f 	ldrexb	r2, [r1]
 8012682:	e8c1 5f4c 	strexb	ip, r5, [r1]
 8012686:	f1bc 0f00 	cmp.w	ip, #0
 801268a:	d1f8      	bne.n	801267e <__atomic_load_8+0x36>
 801268c:	f3bf 8f5b 	dmb	ish
 8012690:	b2d2      	uxtb	r2, r2
 8012692:	2a00      	cmp	r2, #0
 8012694:	d1f3      	bne.n	801267e <__atomic_load_8+0x36>
 8012696:	e9d0 0100 	ldrd	r0, r1, [r0]
 801269a:	f3bf 8f5b 	dmb	ish
 801269e:	54e2      	strb	r2, [r4, r3]
 80126a0:	bc30      	pop	{r4, r5}
 80126a2:	4770      	bx	lr
 80126a4:	27d4eb2d 	.word	0x27d4eb2d
 80126a8:	b21642c9 	.word	0xb21642c9
 80126ac:	2000c1d4 	.word	0x2000c1d4

080126b0 <__atomic_store_8>:
 80126b0:	b4f0      	push	{r4, r5, r6, r7}
 80126b2:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 80126b6:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 80126ba:	4914      	ldr	r1, [pc, #80]	; (801270c <__atomic_store_8+0x5c>)
 80126bc:	4c14      	ldr	r4, [pc, #80]	; (8012710 <__atomic_store_8+0x60>)
 80126be:	4e15      	ldr	r6, [pc, #84]	; (8012714 <__atomic_store_8+0x64>)
 80126c0:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 80126c4:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 80126c8:	fb01 f105 	mul.w	r1, r1, r5
 80126cc:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80126d0:	fba4 5401 	umull	r5, r4, r4, r1
 80126d4:	0924      	lsrs	r4, r4, #4
 80126d6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80126da:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 80126de:	1b09      	subs	r1, r1, r4
 80126e0:	1875      	adds	r5, r6, r1
 80126e2:	f04f 0701 	mov.w	r7, #1
 80126e6:	e8d5 4f4f 	ldrexb	r4, [r5]
 80126ea:	e8c5 7f4c 	strexb	ip, r7, [r5]
 80126ee:	f1bc 0f00 	cmp.w	ip, #0
 80126f2:	d1f8      	bne.n	80126e6 <__atomic_store_8+0x36>
 80126f4:	f3bf 8f5b 	dmb	ish
 80126f8:	b2e4      	uxtb	r4, r4
 80126fa:	2c00      	cmp	r4, #0
 80126fc:	d1f3      	bne.n	80126e6 <__atomic_store_8+0x36>
 80126fe:	e9c0 2300 	strd	r2, r3, [r0]
 8012702:	f3bf 8f5b 	dmb	ish
 8012706:	5474      	strb	r4, [r6, r1]
 8012708:	bcf0      	pop	{r4, r5, r6, r7}
 801270a:	4770      	bx	lr
 801270c:	27d4eb2d 	.word	0x27d4eb2d
 8012710:	b21642c9 	.word	0xb21642c9
 8012714:	2000c1d4 	.word	0x2000c1d4

08012718 <__atomic_exchange_8>:
 8012718:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 801271c:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8012720:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8012724:	4c16      	ldr	r4, [pc, #88]	; (8012780 <__atomic_exchange_8+0x68>)
 8012726:	4917      	ldr	r1, [pc, #92]	; (8012784 <__atomic_exchange_8+0x6c>)
 8012728:	4e17      	ldr	r6, [pc, #92]	; (8012788 <__atomic_exchange_8+0x70>)
 801272a:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 801272e:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8012732:	fb04 f505 	mul.w	r5, r4, r5
 8012736:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 801273a:	fba1 4105 	umull	r4, r1, r1, r5
 801273e:	0909      	lsrs	r1, r1, #4
 8012740:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8012744:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8012748:	1a6c      	subs	r4, r5, r1
 801274a:	1931      	adds	r1, r6, r4
 801274c:	f04f 0701 	mov.w	r7, #1
 8012750:	e8d1 5f4f 	ldrexb	r5, [r1]
 8012754:	e8c1 7f4c 	strexb	ip, r7, [r1]
 8012758:	f1bc 0f00 	cmp.w	ip, #0
 801275c:	d1f8      	bne.n	8012750 <__atomic_exchange_8+0x38>
 801275e:	f3bf 8f5b 	dmb	ish
 8012762:	b2ed      	uxtb	r5, r5
 8012764:	2d00      	cmp	r5, #0
 8012766:	d1f3      	bne.n	8012750 <__atomic_exchange_8+0x38>
 8012768:	e9d0 8900 	ldrd	r8, r9, [r0]
 801276c:	e9c0 2300 	strd	r2, r3, [r0]
 8012770:	f3bf 8f5b 	dmb	ish
 8012774:	5535      	strb	r5, [r6, r4]
 8012776:	4640      	mov	r0, r8
 8012778:	4649      	mov	r1, r9
 801277a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 801277e:	4770      	bx	lr
 8012780:	27d4eb2d 	.word	0x27d4eb2d
 8012784:	b21642c9 	.word	0xb21642c9
 8012788:	2000c1d4 	.word	0x2000c1d4

0801278c <rcutils_is_directory>:
 801278c:	2000      	movs	r0, #0
 801278e:	4770      	bx	lr

08012790 <rcutils_join_path>:
 8012790:	b082      	sub	sp, #8
 8012792:	e88d 000c 	stmia.w	sp, {r2, r3}
 8012796:	2000      	movs	r0, #0
 8012798:	b002      	add	sp, #8
 801279a:	4770      	bx	lr

0801279c <rcutils_to_native_path>:
 801279c:	b084      	sub	sp, #16
 801279e:	a801      	add	r0, sp, #4
 80127a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80127a4:	b004      	add	sp, #16
 80127a6:	2000      	movs	r0, #0
 80127a8:	4770      	bx	lr
 80127aa:	bf00      	nop

080127ac <rcutils_get_env>:
 80127ac:	b168      	cbz	r0, 80127ca <rcutils_get_env+0x1e>
 80127ae:	b510      	push	{r4, lr}
 80127b0:	460c      	mov	r4, r1
 80127b2:	b129      	cbz	r1, 80127c0 <rcutils_get_env+0x14>
 80127b4:	f002 fb68 	bl	8014e88 <getenv>
 80127b8:	b120      	cbz	r0, 80127c4 <rcutils_get_env+0x18>
 80127ba:	6020      	str	r0, [r4, #0]
 80127bc:	2000      	movs	r0, #0
 80127be:	bd10      	pop	{r4, pc}
 80127c0:	4803      	ldr	r0, [pc, #12]	; (80127d0 <rcutils_get_env+0x24>)
 80127c2:	bd10      	pop	{r4, pc}
 80127c4:	4b03      	ldr	r3, [pc, #12]	; (80127d4 <rcutils_get_env+0x28>)
 80127c6:	6023      	str	r3, [r4, #0]
 80127c8:	bd10      	pop	{r4, pc}
 80127ca:	4803      	ldr	r0, [pc, #12]	; (80127d8 <rcutils_get_env+0x2c>)
 80127cc:	4770      	bx	lr
 80127ce:	bf00      	nop
 80127d0:	08016f24 	.word	0x08016f24
 80127d4:	08016b68 	.word	0x08016b68
 80127d8:	08016f08 	.word	0x08016f08

080127dc <rmw_get_zero_initialized_context>:
 80127dc:	b510      	push	{r4, lr}
 80127de:	2250      	movs	r2, #80	; 0x50
 80127e0:	4604      	mov	r4, r0
 80127e2:	2100      	movs	r1, #0
 80127e4:	f002 fbf4 	bl	8014fd0 <memset>
 80127e8:	4620      	mov	r0, r4
 80127ea:	bd10      	pop	{r4, pc}

080127ec <rmw_get_zero_initialized_init_options>:
 80127ec:	b510      	push	{r4, lr}
 80127ee:	2238      	movs	r2, #56	; 0x38
 80127f0:	4604      	mov	r4, r0
 80127f2:	2100      	movs	r1, #0
 80127f4:	f002 fbec 	bl	8014fd0 <memset>
 80127f8:	f104 0010 	add.w	r0, r4, #16
 80127fc:	f000 f806 	bl	801280c <rmw_get_default_security_options>
 8012800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012804:	60e3      	str	r3, [r4, #12]
 8012806:	4620      	mov	r0, r4
 8012808:	bd10      	pop	{r4, pc}
 801280a:	bf00      	nop

0801280c <rmw_get_default_security_options>:
 801280c:	2200      	movs	r2, #0
 801280e:	7002      	strb	r2, [r0, #0]
 8012810:	6042      	str	r2, [r0, #4]
 8012812:	4770      	bx	lr

08012814 <get_memory>:
 8012814:	4603      	mov	r3, r0
 8012816:	6840      	ldr	r0, [r0, #4]
 8012818:	b158      	cbz	r0, 8012832 <get_memory+0x1e>
 801281a:	6882      	ldr	r2, [r0, #8]
 801281c:	605a      	str	r2, [r3, #4]
 801281e:	b10a      	cbz	r2, 8012824 <get_memory+0x10>
 8012820:	2100      	movs	r1, #0
 8012822:	6051      	str	r1, [r2, #4]
 8012824:	681a      	ldr	r2, [r3, #0]
 8012826:	6082      	str	r2, [r0, #8]
 8012828:	b102      	cbz	r2, 801282c <get_memory+0x18>
 801282a:	6050      	str	r0, [r2, #4]
 801282c:	2200      	movs	r2, #0
 801282e:	6042      	str	r2, [r0, #4]
 8012830:	6018      	str	r0, [r3, #0]
 8012832:	4770      	bx	lr

08012834 <put_memory>:
 8012834:	684b      	ldr	r3, [r1, #4]
 8012836:	b10b      	cbz	r3, 801283c <put_memory+0x8>
 8012838:	688a      	ldr	r2, [r1, #8]
 801283a:	609a      	str	r2, [r3, #8]
 801283c:	688a      	ldr	r2, [r1, #8]
 801283e:	b102      	cbz	r2, 8012842 <put_memory+0xe>
 8012840:	6053      	str	r3, [r2, #4]
 8012842:	6803      	ldr	r3, [r0, #0]
 8012844:	428b      	cmp	r3, r1
 8012846:	6843      	ldr	r3, [r0, #4]
 8012848:	bf08      	it	eq
 801284a:	6002      	streq	r2, [r0, #0]
 801284c:	608b      	str	r3, [r1, #8]
 801284e:	b103      	cbz	r3, 8012852 <put_memory+0x1e>
 8012850:	6059      	str	r1, [r3, #4]
 8012852:	2300      	movs	r3, #0
 8012854:	604b      	str	r3, [r1, #4]
 8012856:	6041      	str	r1, [r0, #4]
 8012858:	4770      	bx	lr
 801285a:	bf00      	nop

0801285c <rmw_destroy_client>:
 801285c:	b570      	push	{r4, r5, r6, lr}
 801285e:	b128      	cbz	r0, 801286c <rmw_destroy_client+0x10>
 8012860:	4604      	mov	r4, r0
 8012862:	6800      	ldr	r0, [r0, #0]
 8012864:	460d      	mov	r5, r1
 8012866:	f7fa fd13 	bl	800d290 <is_uxrce_rmw_identifier_valid>
 801286a:	b910      	cbnz	r0, 8012872 <rmw_destroy_client+0x16>
 801286c:	2401      	movs	r4, #1
 801286e:	4620      	mov	r0, r4
 8012870:	bd70      	pop	{r4, r5, r6, pc}
 8012872:	6863      	ldr	r3, [r4, #4]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d0f9      	beq.n	801286c <rmw_destroy_client+0x10>
 8012878:	2d00      	cmp	r5, #0
 801287a:	d0f7      	beq.n	801286c <rmw_destroy_client+0x10>
 801287c:	6828      	ldr	r0, [r5, #0]
 801287e:	f7fa fd07 	bl	800d290 <is_uxrce_rmw_identifier_valid>
 8012882:	2800      	cmp	r0, #0
 8012884:	d0f2      	beq.n	801286c <rmw_destroy_client+0x10>
 8012886:	686e      	ldr	r6, [r5, #4]
 8012888:	2e00      	cmp	r6, #0
 801288a:	d0ef      	beq.n	801286c <rmw_destroy_client+0x10>
 801288c:	6864      	ldr	r4, [r4, #4]
 801288e:	6932      	ldr	r2, [r6, #16]
 8012890:	6920      	ldr	r0, [r4, #16]
 8012892:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012896:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801289a:	6819      	ldr	r1, [r3, #0]
 801289c:	f7fa ff7c 	bl	800d798 <uxr_buffer_cancel_data>
 80128a0:	4602      	mov	r2, r0
 80128a2:	6920      	ldr	r0, [r4, #16]
 80128a4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80128a8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80128ac:	f7fa fc70 	bl	800d190 <run_xrce_session>
 80128b0:	6920      	ldr	r0, [r4, #16]
 80128b2:	6932      	ldr	r2, [r6, #16]
 80128b4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80128b8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80128bc:	6819      	ldr	r1, [r3, #0]
 80128be:	f7fa fd01 	bl	800d2c4 <uxr_buffer_delete_entity>
 80128c2:	4602      	mov	r2, r0
 80128c4:	6920      	ldr	r0, [r4, #16]
 80128c6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80128ca:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80128ce:	f7fa fc5f 	bl	800d190 <run_xrce_session>
 80128d2:	2800      	cmp	r0, #0
 80128d4:	4628      	mov	r0, r5
 80128d6:	bf14      	ite	ne
 80128d8:	2400      	movne	r4, #0
 80128da:	2402      	moveq	r4, #2
 80128dc:	f7fa fb4a 	bl	800cf74 <rmw_uxrce_fini_client_memory>
 80128e0:	e7c5      	b.n	801286e <rmw_destroy_client+0x12>
 80128e2:	bf00      	nop

080128e4 <rmw_get_implementation_identifier>:
 80128e4:	4b01      	ldr	r3, [pc, #4]	; (80128ec <rmw_get_implementation_identifier+0x8>)
 80128e6:	6818      	ldr	r0, [r3, #0]
 80128e8:	4770      	bx	lr
 80128ea:	bf00      	nop
 80128ec:	08016f58 	.word	0x08016f58

080128f0 <rmw_create_guard_condition>:
 80128f0:	b538      	push	{r3, r4, r5, lr}
 80128f2:	4605      	mov	r5, r0
 80128f4:	4807      	ldr	r0, [pc, #28]	; (8012914 <rmw_create_guard_condition+0x24>)
 80128f6:	f7ff ff8d 	bl	8012814 <get_memory>
 80128fa:	b148      	cbz	r0, 8012910 <rmw_create_guard_condition+0x20>
 80128fc:	68c4      	ldr	r4, [r0, #12]
 80128fe:	2300      	movs	r3, #0
 8012900:	61e5      	str	r5, [r4, #28]
 8012902:	7423      	strb	r3, [r4, #16]
 8012904:	f7ff ffee 	bl	80128e4 <rmw_get_implementation_identifier>
 8012908:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801290c:	f104 0014 	add.w	r0, r4, #20
 8012910:	bd38      	pop	{r3, r4, r5, pc}
 8012912:	bf00      	nop
 8012914:	2000f460 	.word	0x2000f460

08012918 <rmw_destroy_guard_condition>:
 8012918:	b508      	push	{r3, lr}
 801291a:	4b08      	ldr	r3, [pc, #32]	; (801293c <rmw_destroy_guard_condition+0x24>)
 801291c:	6819      	ldr	r1, [r3, #0]
 801291e:	b911      	cbnz	r1, 8012926 <rmw_destroy_guard_condition+0xe>
 8012920:	e00a      	b.n	8012938 <rmw_destroy_guard_condition+0x20>
 8012922:	6889      	ldr	r1, [r1, #8]
 8012924:	b141      	cbz	r1, 8012938 <rmw_destroy_guard_condition+0x20>
 8012926:	68cb      	ldr	r3, [r1, #12]
 8012928:	3314      	adds	r3, #20
 801292a:	4298      	cmp	r0, r3
 801292c:	d1f9      	bne.n	8012922 <rmw_destroy_guard_condition+0xa>
 801292e:	4803      	ldr	r0, [pc, #12]	; (801293c <rmw_destroy_guard_condition+0x24>)
 8012930:	f7ff ff80 	bl	8012834 <put_memory>
 8012934:	2000      	movs	r0, #0
 8012936:	bd08      	pop	{r3, pc}
 8012938:	2001      	movs	r0, #1
 801293a:	bd08      	pop	{r3, pc}
 801293c:	2000f460 	.word	0x2000f460

08012940 <rmw_init_options_init>:
 8012940:	b084      	sub	sp, #16
 8012942:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012946:	ad09      	add	r5, sp, #36	; 0x24
 8012948:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801294c:	b130      	cbz	r0, 801295c <rmw_init_options_init+0x1c>
 801294e:	4604      	mov	r4, r0
 8012950:	4628      	mov	r0, r5
 8012952:	f7f9 f86b 	bl	800ba2c <rcutils_allocator_is_valid>
 8012956:	b108      	cbz	r0, 801295c <rmw_init_options_init+0x1c>
 8012958:	68a3      	ldr	r3, [r4, #8]
 801295a:	b123      	cbz	r3, 8012966 <rmw_init_options_init+0x26>
 801295c:	200b      	movs	r0, #11
 801295e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012962:	b004      	add	sp, #16
 8012964:	4770      	bx	lr
 8012966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012968:	4f1c      	ldr	r7, [pc, #112]	; (80129dc <rmw_init_options_init+0x9c>)
 801296a:	682e      	ldr	r6, [r5, #0]
 801296c:	683d      	ldr	r5, [r7, #0]
 801296e:	60a5      	str	r5, [r4, #8]
 8012970:	f04f 0800 	mov.w	r8, #0
 8012974:	f04f 0900 	mov.w	r9, #0
 8012978:	f104 0520 	add.w	r5, r4, #32
 801297c:	e9c4 8900 	strd	r8, r9, [r4]
 8012980:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012982:	4b17      	ldr	r3, [pc, #92]	; (80129e0 <rmw_init_options_init+0xa0>)
 8012984:	4817      	ldr	r0, [pc, #92]	; (80129e4 <rmw_init_options_init+0xa4>)
 8012986:	602e      	str	r6, [r5, #0]
 8012988:	4917      	ldr	r1, [pc, #92]	; (80129e8 <rmw_init_options_init+0xa8>)
 801298a:	61e3      	str	r3, [r4, #28]
 801298c:	2203      	movs	r2, #3
 801298e:	f7fa fa41 	bl	800ce14 <rmw_uxrce_init_init_options_impl_memory>
 8012992:	4814      	ldr	r0, [pc, #80]	; (80129e4 <rmw_init_options_init+0xa4>)
 8012994:	f7ff ff3e 	bl	8012814 <get_memory>
 8012998:	b1e8      	cbz	r0, 80129d6 <rmw_init_options_init+0x96>
 801299a:	4a14      	ldr	r2, [pc, #80]	; (80129ec <rmw_init_options_init+0xac>)
 801299c:	68c3      	ldr	r3, [r0, #12]
 801299e:	6851      	ldr	r1, [r2, #4]
 80129a0:	7810      	ldrb	r0, [r2, #0]
 80129a2:	6363      	str	r3, [r4, #52]	; 0x34
 80129a4:	7418      	strb	r0, [r3, #16]
 80129a6:	6159      	str	r1, [r3, #20]
 80129a8:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 80129ac:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 80129b0:	e9c3 5006 	strd	r5, r0, [r3, #24]
 80129b4:	e9c3 1208 	strd	r1, r2, [r3, #32]
 80129b8:	f7fc fa1c 	bl	800edf4 <uxr_nanos>
 80129bc:	f002 fc1e 	bl	80151fc <srand>
 80129c0:	f002 fc4a 	bl	8015258 <rand>
 80129c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80129c6:	6298      	str	r0, [r3, #40]	; 0x28
 80129c8:	2800      	cmp	r0, #0
 80129ca:	d0f9      	beq.n	80129c0 <rmw_init_options_init+0x80>
 80129cc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129d0:	2000      	movs	r0, #0
 80129d2:	b004      	add	sp, #16
 80129d4:	4770      	bx	lr
 80129d6:	2001      	movs	r0, #1
 80129d8:	e7c1      	b.n	801295e <rmw_init_options_init+0x1e>
 80129da:	bf00      	nop
 80129dc:	08016f58 	.word	0x08016f58
 80129e0:	08016858 	.word	0x08016858
 80129e4:	2000f5d4 	.word	0x2000f5d4
 80129e8:	2000f228 	.word	0x2000f228
 80129ec:	2000c2b8 	.word	0x2000c2b8

080129f0 <rmw_init_options_copy>:
 80129f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129f2:	b158      	cbz	r0, 8012a0c <rmw_init_options_copy+0x1c>
 80129f4:	460e      	mov	r6, r1
 80129f6:	b149      	cbz	r1, 8012a0c <rmw_init_options_copy+0x1c>
 80129f8:	4604      	mov	r4, r0
 80129fa:	6880      	ldr	r0, [r0, #8]
 80129fc:	b120      	cbz	r0, 8012a08 <rmw_init_options_copy+0x18>
 80129fe:	4b1b      	ldr	r3, [pc, #108]	; (8012a6c <rmw_init_options_copy+0x7c>)
 8012a00:	6819      	ldr	r1, [r3, #0]
 8012a02:	f7ed fc05 	bl	8000210 <strcmp>
 8012a06:	bb60      	cbnz	r0, 8012a62 <rmw_init_options_copy+0x72>
 8012a08:	68b3      	ldr	r3, [r6, #8]
 8012a0a:	b113      	cbz	r3, 8012a12 <rmw_init_options_copy+0x22>
 8012a0c:	230b      	movs	r3, #11
 8012a0e:	4618      	mov	r0, r3
 8012a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a12:	4623      	mov	r3, r4
 8012a14:	4632      	mov	r2, r6
 8012a16:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8012a1a:	681d      	ldr	r5, [r3, #0]
 8012a1c:	6858      	ldr	r0, [r3, #4]
 8012a1e:	6899      	ldr	r1, [r3, #8]
 8012a20:	68df      	ldr	r7, [r3, #12]
 8012a22:	60d7      	str	r7, [r2, #12]
 8012a24:	3310      	adds	r3, #16
 8012a26:	4563      	cmp	r3, ip
 8012a28:	6015      	str	r5, [r2, #0]
 8012a2a:	6050      	str	r0, [r2, #4]
 8012a2c:	6091      	str	r1, [r2, #8]
 8012a2e:	f102 0210 	add.w	r2, r2, #16
 8012a32:	d1f2      	bne.n	8012a1a <rmw_init_options_copy+0x2a>
 8012a34:	6819      	ldr	r1, [r3, #0]
 8012a36:	685b      	ldr	r3, [r3, #4]
 8012a38:	480d      	ldr	r0, [pc, #52]	; (8012a70 <rmw_init_options_copy+0x80>)
 8012a3a:	6053      	str	r3, [r2, #4]
 8012a3c:	6011      	str	r1, [r2, #0]
 8012a3e:	f7ff fee9 	bl	8012814 <get_memory>
 8012a42:	b188      	cbz	r0, 8012a68 <rmw_init_options_copy+0x78>
 8012a44:	68c5      	ldr	r5, [r0, #12]
 8012a46:	6375      	str	r5, [r6, #52]	; 0x34
 8012a48:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8012a4a:	3610      	adds	r6, #16
 8012a4c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012a4e:	f105 0410 	add.w	r4, r5, #16
 8012a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012a54:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8012a58:	2300      	movs	r3, #0
 8012a5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012a5e:	4618      	mov	r0, r3
 8012a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a62:	230c      	movs	r3, #12
 8012a64:	4618      	mov	r0, r3
 8012a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a68:	2301      	movs	r3, #1
 8012a6a:	e7d0      	b.n	8012a0e <rmw_init_options_copy+0x1e>
 8012a6c:	08016f58 	.word	0x08016f58
 8012a70:	2000f5d4 	.word	0x2000f5d4

08012a74 <rmw_init_options_fini>:
 8012a74:	2800      	cmp	r0, #0
 8012a76:	d036      	beq.n	8012ae6 <rmw_init_options_fini+0x72>
 8012a78:	b530      	push	{r4, r5, lr}
 8012a7a:	4604      	mov	r4, r0
 8012a7c:	b08f      	sub	sp, #60	; 0x3c
 8012a7e:	3020      	adds	r0, #32
 8012a80:	f7f8 ffd4 	bl	800ba2c <rcutils_allocator_is_valid>
 8012a84:	b328      	cbz	r0, 8012ad2 <rmw_init_options_fini+0x5e>
 8012a86:	68a0      	ldr	r0, [r4, #8]
 8012a88:	b120      	cbz	r0, 8012a94 <rmw_init_options_fini+0x20>
 8012a8a:	4b18      	ldr	r3, [pc, #96]	; (8012aec <rmw_init_options_fini+0x78>)
 8012a8c:	6819      	ldr	r1, [r3, #0]
 8012a8e:	f7ed fbbf 	bl	8000210 <strcmp>
 8012a92:	bb30      	cbnz	r0, 8012ae2 <rmw_init_options_fini+0x6e>
 8012a94:	4b16      	ldr	r3, [pc, #88]	; (8012af0 <rmw_init_options_fini+0x7c>)
 8012a96:	6819      	ldr	r1, [r3, #0]
 8012a98:	b1f9      	cbz	r1, 8012ada <rmw_init_options_fini+0x66>
 8012a9a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8012a9c:	e001      	b.n	8012aa2 <rmw_init_options_fini+0x2e>
 8012a9e:	6889      	ldr	r1, [r1, #8]
 8012aa0:	b1d9      	cbz	r1, 8012ada <rmw_init_options_fini+0x66>
 8012aa2:	68cb      	ldr	r3, [r1, #12]
 8012aa4:	429a      	cmp	r2, r3
 8012aa6:	d1fa      	bne.n	8012a9e <rmw_init_options_fini+0x2a>
 8012aa8:	4811      	ldr	r0, [pc, #68]	; (8012af0 <rmw_init_options_fini+0x7c>)
 8012aaa:	f7ff fec3 	bl	8012834 <put_memory>
 8012aae:	466d      	mov	r5, sp
 8012ab0:	4668      	mov	r0, sp
 8012ab2:	f7ff fe9b 	bl	80127ec <rmw_get_zero_initialized_init_options>
 8012ab6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012aba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012abc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012abe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012ac0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012ac2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012ac6:	e884 0003 	stmia.w	r4, {r0, r1}
 8012aca:	2300      	movs	r3, #0
 8012acc:	4618      	mov	r0, r3
 8012ace:	b00f      	add	sp, #60	; 0x3c
 8012ad0:	bd30      	pop	{r4, r5, pc}
 8012ad2:	230b      	movs	r3, #11
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	b00f      	add	sp, #60	; 0x3c
 8012ad8:	bd30      	pop	{r4, r5, pc}
 8012ada:	2301      	movs	r3, #1
 8012adc:	4618      	mov	r0, r3
 8012ade:	b00f      	add	sp, #60	; 0x3c
 8012ae0:	bd30      	pop	{r4, r5, pc}
 8012ae2:	230c      	movs	r3, #12
 8012ae4:	e7f2      	b.n	8012acc <rmw_init_options_fini+0x58>
 8012ae6:	230b      	movs	r3, #11
 8012ae8:	4618      	mov	r0, r3
 8012aea:	4770      	bx	lr
 8012aec:	08016f58 	.word	0x08016f58
 8012af0:	2000f5d4 	.word	0x2000f5d4

08012af4 <rmw_init>:
 8012af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012af8:	b082      	sub	sp, #8
 8012afa:	2800      	cmp	r0, #0
 8012afc:	f000 80d6 	beq.w	8012cac <rmw_init+0x1b8>
 8012b00:	460e      	mov	r6, r1
 8012b02:	2900      	cmp	r1, #0
 8012b04:	f000 80d2 	beq.w	8012cac <rmw_init+0x1b8>
 8012b08:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012b0a:	4605      	mov	r5, r0
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	f000 80cd 	beq.w	8012cac <rmw_init+0x1b8>
 8012b12:	4b79      	ldr	r3, [pc, #484]	; (8012cf8 <rmw_init+0x204>)
 8012b14:	6880      	ldr	r0, [r0, #8]
 8012b16:	f8d3 9000 	ldr.w	r9, [r3]
 8012b1a:	b128      	cbz	r0, 8012b28 <rmw_init+0x34>
 8012b1c:	4649      	mov	r1, r9
 8012b1e:	f7ed fb77 	bl	8000210 <strcmp>
 8012b22:	2800      	cmp	r0, #0
 8012b24:	f040 80cc 	bne.w	8012cc0 <rmw_init+0x1cc>
 8012b28:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012b2c:	68eb      	ldr	r3, [r5, #12]
 8012b2e:	61f3      	str	r3, [r6, #28]
 8012b30:	e9c6 0100 	strd	r0, r1, [r6]
 8012b34:	2201      	movs	r2, #1
 8012b36:	4971      	ldr	r1, [pc, #452]	; (8012cfc <rmw_init+0x208>)
 8012b38:	4871      	ldr	r0, [pc, #452]	; (8012d00 <rmw_init+0x20c>)
 8012b3a:	f8c6 9008 	str.w	r9, [r6, #8]
 8012b3e:	f7fa f911 	bl	800cd64 <rmw_uxrce_init_session_memory>
 8012b42:	4870      	ldr	r0, [pc, #448]	; (8012d04 <rmw_init+0x210>)
 8012b44:	4970      	ldr	r1, [pc, #448]	; (8012d08 <rmw_init+0x214>)
 8012b46:	2204      	movs	r2, #4
 8012b48:	f7fa f946 	bl	800cdd8 <rmw_uxrce_init_static_input_buffer_memory>
 8012b4c:	486c      	ldr	r0, [pc, #432]	; (8012d00 <rmw_init+0x20c>)
 8012b4e:	f7ff fe61 	bl	8012814 <get_memory>
 8012b52:	2800      	cmp	r0, #0
 8012b54:	f000 80af 	beq.w	8012cb6 <rmw_init+0x1c2>
 8012b58:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8012b5a:	68c4      	ldr	r4, [r0, #12]
 8012b5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b5e:	7c39      	ldrb	r1, [r7, #16]
 8012b60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012b64:	9001      	str	r0, [sp, #4]
 8012b66:	6a38      	ldr	r0, [r7, #32]
 8012b68:	9000      	str	r0, [sp, #0]
 8012b6a:	f104 0a10 	add.w	sl, r4, #16
 8012b6e:	4650      	mov	r0, sl
 8012b70:	f000 fe90 	bl	8013894 <uxr_set_custom_transport_callbacks>
 8012b74:	f241 5294 	movw	r2, #5524	; 0x1594
 8012b78:	f241 5398 	movw	r3, #5528	; 0x1598
 8012b7c:	f04f 0800 	mov.w	r8, #0
 8012b80:	f241 509c 	movw	r0, #5532	; 0x159c
 8012b84:	f504 51ad 	add.w	r1, r4, #5536	; 0x15a0
 8012b88:	f844 8002 	str.w	r8, [r4, r2]
 8012b8c:	f844 8003 	str.w	r8, [r4, r3]
 8012b90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012b94:	f504 735e 	add.w	r3, r4, #888	; 0x378
 8012b98:	f844 8000 	str.w	r8, [r4, r0]
 8012b9c:	e9c4 33e1 	strd	r3, r3, [r4, #900]	; 0x384
 8012ba0:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8012ba4:	4859      	ldr	r0, [pc, #356]	; (8012d0c <rmw_init+0x218>)
 8012ba6:	f8c1 8000 	str.w	r8, [r1]
 8012baa:	2201      	movs	r2, #1
 8012bac:	e9c4 98da 	strd	r9, r8, [r4, #872]	; 0x368
 8012bb0:	4957      	ldr	r1, [pc, #348]	; (8012d10 <rmw_init+0x21c>)
 8012bb2:	64b4      	str	r4, [r6, #72]	; 0x48
 8012bb4:	f7fa f8bc 	bl	800cd30 <rmw_uxrce_init_node_memory>
 8012bb8:	4956      	ldr	r1, [pc, #344]	; (8012d14 <rmw_init+0x220>)
 8012bba:	4857      	ldr	r0, [pc, #348]	; (8012d18 <rmw_init+0x224>)
 8012bbc:	2205      	movs	r2, #5
 8012bbe:	f7fa f89d 	bl	800ccfc <rmw_uxrce_init_subscription_memory>
 8012bc2:	4956      	ldr	r1, [pc, #344]	; (8012d1c <rmw_init+0x228>)
 8012bc4:	4856      	ldr	r0, [pc, #344]	; (8012d20 <rmw_init+0x22c>)
 8012bc6:	220a      	movs	r2, #10
 8012bc8:	f7fa f87e 	bl	800ccc8 <rmw_uxrce_init_publisher_memory>
 8012bcc:	4955      	ldr	r1, [pc, #340]	; (8012d24 <rmw_init+0x230>)
 8012bce:	4856      	ldr	r0, [pc, #344]	; (8012d28 <rmw_init+0x234>)
 8012bd0:	2201      	movs	r2, #1
 8012bd2:	f7fa f845 	bl	800cc60 <rmw_uxrce_init_service_memory>
 8012bd6:	4955      	ldr	r1, [pc, #340]	; (8012d2c <rmw_init+0x238>)
 8012bd8:	4855      	ldr	r0, [pc, #340]	; (8012d30 <rmw_init+0x23c>)
 8012bda:	2201      	movs	r2, #1
 8012bdc:	f7fa f85a 	bl	800cc94 <rmw_uxrce_init_client_memory>
 8012be0:	4954      	ldr	r1, [pc, #336]	; (8012d34 <rmw_init+0x240>)
 8012be2:	4855      	ldr	r0, [pc, #340]	; (8012d38 <rmw_init+0x244>)
 8012be4:	220f      	movs	r2, #15
 8012be6:	f7fa f8db 	bl	800cda0 <rmw_uxrce_init_topic_memory>
 8012bea:	4954      	ldr	r1, [pc, #336]	; (8012d3c <rmw_init+0x248>)
 8012bec:	4854      	ldr	r0, [pc, #336]	; (8012d40 <rmw_init+0x24c>)
 8012bee:	2203      	movs	r2, #3
 8012bf0:	f7fa f910 	bl	800ce14 <rmw_uxrce_init_init_options_impl_memory>
 8012bf4:	4953      	ldr	r1, [pc, #332]	; (8012d44 <rmw_init+0x250>)
 8012bf6:	4854      	ldr	r0, [pc, #336]	; (8012d48 <rmw_init+0x254>)
 8012bf8:	2204      	movs	r2, #4
 8012bfa:	f7fa f925 	bl	800ce48 <rmw_uxrce_init_wait_set_memory>
 8012bfe:	4953      	ldr	r1, [pc, #332]	; (8012d4c <rmw_init+0x258>)
 8012c00:	4853      	ldr	r0, [pc, #332]	; (8012d50 <rmw_init+0x25c>)
 8012c02:	2204      	movs	r2, #4
 8012c04:	f7fa f93c 	bl	800ce80 <rmw_uxrce_init_guard_condition_memory>
 8012c08:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8012c0a:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 8012c0c:	4642      	mov	r2, r8
 8012c0e:	f000 fa65 	bl	80130dc <rmw_uxrce_transport_init>
 8012c12:	4607      	mov	r7, r0
 8012c14:	2800      	cmp	r0, #0
 8012c16:	d158      	bne.n	8012cca <rmw_init+0x1d6>
 8012c18:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8012c1a:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8012c1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012c20:	4628      	mov	r0, r5
 8012c22:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8012c26:	f7fa ff31 	bl	800da8c <uxr_init_session>
 8012c2a:	494a      	ldr	r1, [pc, #296]	; (8012d54 <rmw_init+0x260>)
 8012c2c:	4622      	mov	r2, r4
 8012c2e:	4628      	mov	r0, r5
 8012c30:	f7fa ff4e 	bl	800dad0 <uxr_set_topic_callback>
 8012c34:	4948      	ldr	r1, [pc, #288]	; (8012d58 <rmw_init+0x264>)
 8012c36:	463a      	mov	r2, r7
 8012c38:	4628      	mov	r0, r5
 8012c3a:	f7fa ff45 	bl	800dac8 <uxr_set_status_callback>
 8012c3e:	4947      	ldr	r1, [pc, #284]	; (8012d5c <rmw_init+0x268>)
 8012c40:	463a      	mov	r2, r7
 8012c42:	4628      	mov	r0, r5
 8012c44:	f7fa ff48 	bl	800dad8 <uxr_set_request_callback>
 8012c48:	4945      	ldr	r1, [pc, #276]	; (8012d60 <rmw_init+0x26c>)
 8012c4a:	463a      	mov	r2, r7
 8012c4c:	4628      	mov	r0, r5
 8012c4e:	f7fa ff47 	bl	800dae0 <uxr_set_reply_callback>
 8012c52:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8012c56:	2304      	movs	r3, #4
 8012c58:	0092      	lsls	r2, r2, #2
 8012c5a:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8012c5e:	4628      	mov	r0, r5
 8012c60:	f7fa ff7e 	bl	800db60 <uxr_create_input_reliable_stream>
 8012c64:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8012c68:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8012c6c:	0092      	lsls	r2, r2, #2
 8012c6e:	2304      	movs	r3, #4
 8012c70:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8012c74:	4628      	mov	r0, r5
 8012c76:	f7fa ff49 	bl	800db0c <uxr_create_output_reliable_stream>
 8012c7a:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8012c7e:	4628      	mov	r0, r5
 8012c80:	f7fa ff68 	bl	800db54 <uxr_create_input_best_effort_stream>
 8012c84:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 8012c88:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8012c8c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8012c90:	4628      	mov	r0, r5
 8012c92:	3114      	adds	r1, #20
 8012c94:	f7fa ff28 	bl	800dae8 <uxr_create_output_best_effort_stream>
 8012c98:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8012c9c:	4628      	mov	r0, r5
 8012c9e:	f7fb fbb9 	bl	800e414 <uxr_create_session>
 8012ca2:	b1f8      	cbz	r0, 8012ce4 <rmw_init+0x1f0>
 8012ca4:	4638      	mov	r0, r7
 8012ca6:	b002      	add	sp, #8
 8012ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cac:	270b      	movs	r7, #11
 8012cae:	4638      	mov	r0, r7
 8012cb0:	b002      	add	sp, #8
 8012cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cb6:	2701      	movs	r7, #1
 8012cb8:	4638      	mov	r0, r7
 8012cba:	b002      	add	sp, #8
 8012cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cc0:	270c      	movs	r7, #12
 8012cc2:	4638      	mov	r0, r7
 8012cc4:	b002      	add	sp, #8
 8012cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cca:	4650      	mov	r0, sl
 8012ccc:	f000 fe22 	bl	8013914 <uxr_close_custom_transport>
 8012cd0:	480b      	ldr	r0, [pc, #44]	; (8012d00 <rmw_init+0x20c>)
 8012cd2:	4621      	mov	r1, r4
 8012cd4:	f7ff fdae 	bl	8012834 <put_memory>
 8012cd8:	4638      	mov	r0, r7
 8012cda:	f8c6 8048 	str.w	r8, [r6, #72]	; 0x48
 8012cde:	b002      	add	sp, #8
 8012ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ce4:	4650      	mov	r0, sl
 8012ce6:	f000 fe15 	bl	8013914 <uxr_close_custom_transport>
 8012cea:	4805      	ldr	r0, [pc, #20]	; (8012d00 <rmw_init+0x20c>)
 8012cec:	4621      	mov	r1, r4
 8012cee:	f7ff fda1 	bl	8012834 <put_memory>
 8012cf2:	64b7      	str	r7, [r6, #72]	; 0x48
 8012cf4:	2701      	movs	r7, #1
 8012cf6:	e7d5      	b.n	8012ca4 <rmw_init+0x1b0>
 8012cf8:	08016f58 	.word	0x08016f58
 8012cfc:	2000f6b0 	.word	0x2000f6b0
 8012d00:	2000f480 	.word	0x2000f480
 8012d04:	2000c2d8 	.word	0x2000c2d8
 8012d08:	2000d0b8 	.word	0x2000d0b8
 8012d0c:	2000f2ac 	.word	0x2000f2ac
 8012d10:	2000f490 	.word	0x2000f490
 8012d14:	2000cbe0 	.word	0x2000cbe0
 8012d18:	2000f544 	.word	0x2000f544
 8012d1c:	2000c2f8 	.word	0x2000c2f8
 8012d20:	2000c2e8 	.word	0x2000c2e8
 8012d24:	2000f5e8 	.word	0x2000f5e8
 8012d28:	2000f534 	.word	0x2000f534
 8012d2c:	2000cff0 	.word	0x2000cff0
 8012d30:	2000cb68 	.word	0x2000cb68
 8012d34:	2000f2bc 	.word	0x2000f2bc
 8012d38:	2000f470 	.word	0x2000f470
 8012d3c:	2000f228 	.word	0x2000f228
 8012d40:	2000f5d4 	.word	0x2000f5d4
 8012d44:	2000f1b8 	.word	0x2000f1b8
 8012d48:	20010c58 	.word	0x20010c58
 8012d4c:	2000f554 	.word	0x2000f554
 8012d50:	2000f460 	.word	0x2000f460
 8012d54:	08014cad 	.word	0x08014cad
 8012d58:	08014ca5 	.word	0x08014ca5
 8012d5c:	08014d41 	.word	0x08014d41
 8012d60:	08014dd9 	.word	0x08014dd9

08012d64 <rmw_context_fini>:
 8012d64:	4b17      	ldr	r3, [pc, #92]	; (8012dc4 <rmw_context_fini+0x60>)
 8012d66:	b570      	push	{r4, r5, r6, lr}
 8012d68:	681c      	ldr	r4, [r3, #0]
 8012d6a:	4605      	mov	r5, r0
 8012d6c:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8012d6e:	b33c      	cbz	r4, 8012dc0 <rmw_context_fini+0x5c>
 8012d70:	2600      	movs	r6, #0
 8012d72:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 8012d76:	691a      	ldr	r2, [r3, #16]
 8012d78:	4282      	cmp	r2, r0
 8012d7a:	d018      	beq.n	8012dae <rmw_context_fini+0x4a>
 8012d7c:	2c00      	cmp	r4, #0
 8012d7e:	d1f8      	bne.n	8012d72 <rmw_context_fini+0xe>
 8012d80:	b188      	cbz	r0, 8012da6 <rmw_context_fini+0x42>
 8012d82:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012d86:	789b      	ldrb	r3, [r3, #2]
 8012d88:	2b01      	cmp	r3, #1
 8012d8a:	bf14      	ite	ne
 8012d8c:	210a      	movne	r1, #10
 8012d8e:	2100      	moveq	r1, #0
 8012d90:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012d94:	f7fb fd00 	bl	800e798 <uxr_delete_session_retries>
 8012d98:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8012d9a:	f7fa f88b 	bl	800ceb4 <rmw_uxrce_fini_session_memory>
 8012d9e:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8012da0:	3010      	adds	r0, #16
 8012da2:	f000 fdb7 	bl	8013914 <uxr_close_custom_transport>
 8012da6:	2300      	movs	r3, #0
 8012da8:	4630      	mov	r0, r6
 8012daa:	64ab      	str	r3, [r5, #72]	; 0x48
 8012dac:	bd70      	pop	{r4, r5, r6, pc}
 8012dae:	f103 0018 	add.w	r0, r3, #24
 8012db2:	f7f9 fb57 	bl	800c464 <rmw_destroy_node>
 8012db6:	4606      	mov	r6, r0
 8012db8:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8012dba:	2c00      	cmp	r4, #0
 8012dbc:	d1d9      	bne.n	8012d72 <rmw_context_fini+0xe>
 8012dbe:	e7df      	b.n	8012d80 <rmw_context_fini+0x1c>
 8012dc0:	4626      	mov	r6, r4
 8012dc2:	e7dd      	b.n	8012d80 <rmw_context_fini+0x1c>
 8012dc4:	2000f2ac 	.word	0x2000f2ac

08012dc8 <create_topic>:
 8012dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012dcc:	4607      	mov	r7, r0
 8012dce:	b084      	sub	sp, #16
 8012dd0:	4822      	ldr	r0, [pc, #136]	; (8012e5c <create_topic+0x94>)
 8012dd2:	4689      	mov	r9, r1
 8012dd4:	4690      	mov	r8, r2
 8012dd6:	f7ff fd1d 	bl	8012814 <get_memory>
 8012dda:	4604      	mov	r4, r0
 8012ddc:	2800      	cmp	r0, #0
 8012dde:	d038      	beq.n	8012e52 <create_topic+0x8a>
 8012de0:	693e      	ldr	r6, [r7, #16]
 8012de2:	68c4      	ldr	r4, [r0, #12]
 8012de4:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8012e64 <create_topic+0x9c>
 8012de8:	61a7      	str	r7, [r4, #24]
 8012dea:	f241 5596 	movw	r5, #5526	; 0x1596
 8012dee:	f8c4 8014 	str.w	r8, [r4, #20]
 8012df2:	5b70      	ldrh	r0, [r6, r5]
 8012df4:	1c42      	adds	r2, r0, #1
 8012df6:	5372      	strh	r2, [r6, r5]
 8012df8:	2102      	movs	r1, #2
 8012dfa:	f7fa fc65 	bl	800d6c8 <uxr_object_id>
 8012dfe:	4651      	mov	r1, sl
 8012e00:	6120      	str	r0, [r4, #16]
 8012e02:	223c      	movs	r2, #60	; 0x3c
 8012e04:	4648      	mov	r0, r9
 8012e06:	f7fa fa29 	bl	800d25c <generate_topic_name>
 8012e0a:	b1f0      	cbz	r0, 8012e4a <create_topic+0x82>
 8012e0c:	4d14      	ldr	r5, [pc, #80]	; (8012e60 <create_topic+0x98>)
 8012e0e:	4640      	mov	r0, r8
 8012e10:	4629      	mov	r1, r5
 8012e12:	2264      	movs	r2, #100	; 0x64
 8012e14:	f7fa f9f2 	bl	800d1fc <generate_type_name>
 8012e18:	b1b8      	cbz	r0, 8012e4a <create_topic+0x82>
 8012e1a:	e9d7 0304 	ldrd	r0, r3, [r7, #16]
 8012e1e:	2106      	movs	r1, #6
 8012e20:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8012e24:	9501      	str	r5, [sp, #4]
 8012e26:	f8cd a000 	str.w	sl, [sp]
 8012e2a:	9102      	str	r1, [sp, #8]
 8012e2c:	6811      	ldr	r1, [r2, #0]
 8012e2e:	6922      	ldr	r2, [r4, #16]
 8012e30:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012e34:	f7fa fac4 	bl	800d3c0 <uxr_buffer_create_topic_bin>
 8012e38:	4602      	mov	r2, r0
 8012e3a:	6938      	ldr	r0, [r7, #16]
 8012e3c:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8012e40:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8012e44:	f7fa f9a4 	bl	800d190 <run_xrce_session>
 8012e48:	b918      	cbnz	r0, 8012e52 <create_topic+0x8a>
 8012e4a:	4620      	mov	r0, r4
 8012e4c:	f7fa f8a8 	bl	800cfa0 <rmw_uxrce_fini_topic_memory>
 8012e50:	2400      	movs	r4, #0
 8012e52:	4620      	mov	r0, r4
 8012e54:	b004      	add	sp, #16
 8012e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e5a:	bf00      	nop
 8012e5c:	2000f470 	.word	0x2000f470
 8012e60:	2000c228 	.word	0x2000c228
 8012e64:	2000c1ec 	.word	0x2000c1ec

08012e68 <destroy_topic>:
 8012e68:	b538      	push	{r3, r4, r5, lr}
 8012e6a:	6985      	ldr	r5, [r0, #24]
 8012e6c:	b1d5      	cbz	r5, 8012ea4 <destroy_topic+0x3c>
 8012e6e:	4604      	mov	r4, r0
 8012e70:	6928      	ldr	r0, [r5, #16]
 8012e72:	6922      	ldr	r2, [r4, #16]
 8012e74:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012e78:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012e7c:	6819      	ldr	r1, [r3, #0]
 8012e7e:	f7fa fa21 	bl	800d2c4 <uxr_buffer_delete_entity>
 8012e82:	4602      	mov	r2, r0
 8012e84:	6928      	ldr	r0, [r5, #16]
 8012e86:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012e8a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012e8e:	f7fa f97f 	bl	800d190 <run_xrce_session>
 8012e92:	2800      	cmp	r0, #0
 8012e94:	4620      	mov	r0, r4
 8012e96:	bf14      	ite	ne
 8012e98:	2400      	movne	r4, #0
 8012e9a:	2402      	moveq	r4, #2
 8012e9c:	f7fa f880 	bl	800cfa0 <rmw_uxrce_fini_topic_memory>
 8012ea0:	4620      	mov	r0, r4
 8012ea2:	bd38      	pop	{r3, r4, r5, pc}
 8012ea4:	2401      	movs	r4, #1
 8012ea6:	4620      	mov	r0, r4
 8012ea8:	bd38      	pop	{r3, r4, r5, pc}
 8012eaa:	bf00      	nop

08012eac <rmw_take_request>:
 8012eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012eb0:	4605      	mov	r5, r0
 8012eb2:	6800      	ldr	r0, [r0, #0]
 8012eb4:	b089      	sub	sp, #36	; 0x24
 8012eb6:	460c      	mov	r4, r1
 8012eb8:	4690      	mov	r8, r2
 8012eba:	461e      	mov	r6, r3
 8012ebc:	b128      	cbz	r0, 8012eca <rmw_take_request+0x1e>
 8012ebe:	4b28      	ldr	r3, [pc, #160]	; (8012f60 <rmw_take_request+0xb4>)
 8012ec0:	6819      	ldr	r1, [r3, #0]
 8012ec2:	f7ed f9a5 	bl	8000210 <strcmp>
 8012ec6:	2800      	cmp	r0, #0
 8012ec8:	d146      	bne.n	8012f58 <rmw_take_request+0xac>
 8012eca:	b10e      	cbz	r6, 8012ed0 <rmw_take_request+0x24>
 8012ecc:	2300      	movs	r3, #0
 8012ece:	7033      	strb	r3, [r6, #0]
 8012ed0:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8012ed4:	f7fa f8e4 	bl	800d0a0 <rmw_uxrce_clean_expired_static_input_buffer>
 8012ed8:	4648      	mov	r0, r9
 8012eda:	f7fa f8b9 	bl	800d050 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012ede:	4607      	mov	r7, r0
 8012ee0:	b3b0      	cbz	r0, 8012f50 <rmw_take_request+0xa4>
 8012ee2:	68c5      	ldr	r5, [r0, #12]
 8012ee4:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 8012ee8:	f8d5 183c 	ldr.w	r1, [r5, #2108]	; 0x83c
 8012eec:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8012ef0:	7423      	strb	r3, [r4, #16]
 8012ef2:	e9c4 1208 	strd	r1, r2, [r4, #32]
 8012ef6:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 8012efa:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 8012efe:	74e2      	strb	r2, [r4, #19]
 8012f00:	f8a4 3011 	strh.w	r3, [r4, #17]
 8012f04:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 8012f08:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 8012f0c:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 8012f10:	61e1      	str	r1, [r4, #28]
 8012f12:	6162      	str	r2, [r4, #20]
 8012f14:	61a3      	str	r3, [r4, #24]
 8012f16:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8012f1a:	689b      	ldr	r3, [r3, #8]
 8012f1c:	4798      	blx	r3
 8012f1e:	6844      	ldr	r4, [r0, #4]
 8012f20:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8012f24:	f105 0110 	add.w	r1, r5, #16
 8012f28:	4668      	mov	r0, sp
 8012f2a:	f7f7 fb29 	bl	800a580 <ucdr_init_buffer>
 8012f2e:	68e3      	ldr	r3, [r4, #12]
 8012f30:	4641      	mov	r1, r8
 8012f32:	4668      	mov	r0, sp
 8012f34:	4798      	blx	r3
 8012f36:	4639      	mov	r1, r7
 8012f38:	4604      	mov	r4, r0
 8012f3a:	480a      	ldr	r0, [pc, #40]	; (8012f64 <rmw_take_request+0xb8>)
 8012f3c:	f7ff fc7a 	bl	8012834 <put_memory>
 8012f40:	b106      	cbz	r6, 8012f44 <rmw_take_request+0x98>
 8012f42:	7034      	strb	r4, [r6, #0]
 8012f44:	f084 0001 	eor.w	r0, r4, #1
 8012f48:	b2c0      	uxtb	r0, r0
 8012f4a:	b009      	add	sp, #36	; 0x24
 8012f4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f50:	2001      	movs	r0, #1
 8012f52:	b009      	add	sp, #36	; 0x24
 8012f54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f58:	200c      	movs	r0, #12
 8012f5a:	b009      	add	sp, #36	; 0x24
 8012f5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f60:	08016f58 	.word	0x08016f58
 8012f64:	2000c2d8 	.word	0x2000c2d8

08012f68 <rmw_send_response>:
 8012f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f6a:	4605      	mov	r5, r0
 8012f6c:	6800      	ldr	r0, [r0, #0]
 8012f6e:	b091      	sub	sp, #68	; 0x44
 8012f70:	460c      	mov	r4, r1
 8012f72:	4617      	mov	r7, r2
 8012f74:	b128      	cbz	r0, 8012f82 <rmw_send_response+0x1a>
 8012f76:	4b2a      	ldr	r3, [pc, #168]	; (8013020 <rmw_send_response+0xb8>)
 8012f78:	6819      	ldr	r1, [r3, #0]
 8012f7a:	f7ed f949 	bl	8000210 <strcmp>
 8012f7e:	2800      	cmp	r0, #0
 8012f80:	d143      	bne.n	801300a <rmw_send_response+0xa2>
 8012f82:	4623      	mov	r3, r4
 8012f84:	4626      	mov	r6, r4
 8012f86:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8012f8a:	f836 ef01 	ldrh.w	lr, [r6, #1]!
 8012f8e:	6859      	ldr	r1, [r3, #4]
 8012f90:	686d      	ldr	r5, [r5, #4]
 8012f92:	689a      	ldr	r2, [r3, #8]
 8012f94:	78b3      	ldrb	r3, [r6, #2]
 8012f96:	f894 c000 	ldrb.w	ip, [r4]
 8012f9a:	6966      	ldr	r6, [r4, #20]
 8012f9c:	f88d 3016 	strb.w	r3, [sp, #22]
 8012fa0:	ab02      	add	r3, sp, #8
 8012fa2:	f8ad e014 	strh.w	lr, [sp, #20]
 8012fa6:	f88d c017 	strb.w	ip, [sp, #23]
 8012faa:	9606      	str	r6, [sp, #24]
 8012fac:	c307      	stmia	r3!, {r0, r1, r2}
 8012fae:	696b      	ldr	r3, [r5, #20]
 8012fb0:	6922      	ldr	r2, [r4, #16]
 8012fb2:	9207      	str	r2, [sp, #28]
 8012fb4:	68db      	ldr	r3, [r3, #12]
 8012fb6:	6fae      	ldr	r6, [r5, #120]	; 0x78
 8012fb8:	4798      	blx	r3
 8012fba:	4603      	mov	r3, r0
 8012fbc:	4638      	mov	r0, r7
 8012fbe:	685c      	ldr	r4, [r3, #4]
 8012fc0:	6923      	ldr	r3, [r4, #16]
 8012fc2:	4798      	blx	r3
 8012fc4:	6933      	ldr	r3, [r6, #16]
 8012fc6:	3018      	adds	r0, #24
 8012fc8:	9000      	str	r0, [sp, #0]
 8012fca:	692a      	ldr	r2, [r5, #16]
 8012fcc:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8012fce:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8012fd2:	ab08      	add	r3, sp, #32
 8012fd4:	f7fb ffae 	bl	800ef34 <uxr_prepare_output_stream>
 8012fd8:	b910      	cbnz	r0, 8012fe0 <rmw_send_response+0x78>
 8012fda:	2001      	movs	r0, #1
 8012fdc:	b011      	add	sp, #68	; 0x44
 8012fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fe0:	a902      	add	r1, sp, #8
 8012fe2:	a808      	add	r0, sp, #32
 8012fe4:	f7fd f8c4 	bl	8010170 <uxr_serialize_SampleIdentity>
 8012fe8:	68a3      	ldr	r3, [r4, #8]
 8012fea:	a908      	add	r1, sp, #32
 8012fec:	4638      	mov	r0, r7
 8012fee:	4798      	blx	r3
 8012ff0:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8012ff4:	6930      	ldr	r0, [r6, #16]
 8012ff6:	2b01      	cmp	r3, #1
 8012ff8:	d00a      	beq.n	8013010 <rmw_send_response+0xa8>
 8012ffa:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8012ffc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013000:	f7fb f990 	bl	800e324 <uxr_run_session_until_confirm_delivery>
 8013004:	2000      	movs	r0, #0
 8013006:	b011      	add	sp, #68	; 0x44
 8013008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801300a:	200c      	movs	r0, #12
 801300c:	b011      	add	sp, #68	; 0x44
 801300e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013010:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013014:	f7fa fdca 	bl	800dbac <uxr_flash_output_streams>
 8013018:	2000      	movs	r0, #0
 801301a:	b011      	add	sp, #68	; 0x44
 801301c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801301e:	bf00      	nop
 8013020:	08016f58 	.word	0x08016f58

08013024 <rmw_take_response>:
 8013024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013028:	4604      	mov	r4, r0
 801302a:	6800      	ldr	r0, [r0, #0]
 801302c:	b089      	sub	sp, #36	; 0x24
 801302e:	4688      	mov	r8, r1
 8013030:	4617      	mov	r7, r2
 8013032:	461d      	mov	r5, r3
 8013034:	b120      	cbz	r0, 8013040 <rmw_take_response+0x1c>
 8013036:	4b1f      	ldr	r3, [pc, #124]	; (80130b4 <rmw_take_response+0x90>)
 8013038:	6819      	ldr	r1, [r3, #0]
 801303a:	f7ed f8e9 	bl	8000210 <strcmp>
 801303e:	bb88      	cbnz	r0, 80130a4 <rmw_take_response+0x80>
 8013040:	b10d      	cbz	r5, 8013046 <rmw_take_response+0x22>
 8013042:	2300      	movs	r3, #0
 8013044:	702b      	strb	r3, [r5, #0]
 8013046:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801304a:	f7fa f829 	bl	800d0a0 <rmw_uxrce_clean_expired_static_input_buffer>
 801304e:	4648      	mov	r0, r9
 8013050:	f7f9 fffe 	bl	800d050 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013054:	4606      	mov	r6, r0
 8013056:	b348      	cbz	r0, 80130ac <rmw_take_response+0x88>
 8013058:	68c4      	ldr	r4, [r0, #12]
 801305a:	f8d9 1014 	ldr.w	r1, [r9, #20]
 801305e:	f604 0328 	addw	r3, r4, #2088	; 0x828
 8013062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013066:	68c9      	ldr	r1, [r1, #12]
 8013068:	e9c8 2308 	strd	r2, r3, [r8, #32]
 801306c:	4788      	blx	r1
 801306e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8013072:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 8013076:	f104 0110 	add.w	r1, r4, #16
 801307a:	4668      	mov	r0, sp
 801307c:	f7f7 fa80 	bl	800a580 <ucdr_init_buffer>
 8013080:	4639      	mov	r1, r7
 8013082:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013086:	4668      	mov	r0, sp
 8013088:	4798      	blx	r3
 801308a:	4631      	mov	r1, r6
 801308c:	4604      	mov	r4, r0
 801308e:	480a      	ldr	r0, [pc, #40]	; (80130b8 <rmw_take_response+0x94>)
 8013090:	f7ff fbd0 	bl	8012834 <put_memory>
 8013094:	b105      	cbz	r5, 8013098 <rmw_take_response+0x74>
 8013096:	702c      	strb	r4, [r5, #0]
 8013098:	f084 0001 	eor.w	r0, r4, #1
 801309c:	b2c0      	uxtb	r0, r0
 801309e:	b009      	add	sp, #36	; 0x24
 80130a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130a4:	200c      	movs	r0, #12
 80130a6:	b009      	add	sp, #36	; 0x24
 80130a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130ac:	2001      	movs	r0, #1
 80130ae:	b009      	add	sp, #36	; 0x24
 80130b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130b4:	08016f58 	.word	0x08016f58
 80130b8:	2000c2d8 	.word	0x2000c2d8

080130bc <rmw_trigger_guard_condition>:
 80130bc:	b160      	cbz	r0, 80130d8 <rmw_trigger_guard_condition+0x1c>
 80130be:	b510      	push	{r4, lr}
 80130c0:	4604      	mov	r4, r0
 80130c2:	6800      	ldr	r0, [r0, #0]
 80130c4:	f7fa f8e4 	bl	800d290 <is_uxrce_rmw_identifier_valid>
 80130c8:	b908      	cbnz	r0, 80130ce <rmw_trigger_guard_condition+0x12>
 80130ca:	2001      	movs	r0, #1
 80130cc:	bd10      	pop	{r4, pc}
 80130ce:	6863      	ldr	r3, [r4, #4]
 80130d0:	2201      	movs	r2, #1
 80130d2:	741a      	strb	r2, [r3, #16]
 80130d4:	2000      	movs	r0, #0
 80130d6:	bd10      	pop	{r4, pc}
 80130d8:	2001      	movs	r0, #1
 80130da:	4770      	bx	lr

080130dc <rmw_uxrce_transport_init>:
 80130dc:	b508      	push	{r3, lr}
 80130de:	b108      	cbz	r0, 80130e4 <rmw_uxrce_transport_init+0x8>
 80130e0:	f100 0210 	add.w	r2, r0, #16
 80130e4:	b139      	cbz	r1, 80130f6 <rmw_uxrce_transport_init+0x1a>
 80130e6:	6949      	ldr	r1, [r1, #20]
 80130e8:	4610      	mov	r0, r2
 80130ea:	f000 fbdf 	bl	80138ac <uxr_init_custom_transport>
 80130ee:	f080 0001 	eor.w	r0, r0, #1
 80130f2:	b2c0      	uxtb	r0, r0
 80130f4:	bd08      	pop	{r3, pc}
 80130f6:	4b04      	ldr	r3, [pc, #16]	; (8013108 <rmw_uxrce_transport_init+0x2c>)
 80130f8:	4610      	mov	r0, r2
 80130fa:	6859      	ldr	r1, [r3, #4]
 80130fc:	f000 fbd6 	bl	80138ac <uxr_init_custom_transport>
 8013100:	f080 0001 	eor.w	r0, r0, #1
 8013104:	b2c0      	uxtb	r0, r0
 8013106:	bd08      	pop	{r3, pc}
 8013108:	2000c2b8 	.word	0x2000c2b8

0801310c <rmw_wait>:
 801310c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013110:	460f      	mov	r7, r1
 8013112:	4606      	mov	r6, r0
 8013114:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013116:	469a      	mov	sl, r3
 8013118:	4615      	mov	r5, r2
 801311a:	2a00      	cmp	r2, #0
 801311c:	f000 8122 	beq.w	8013364 <rmw_wait+0x258>
 8013120:	2900      	cmp	r1, #0
 8013122:	f000 812a 	beq.w	801337a <rmw_wait+0x26e>
 8013126:	e9d1 2300 	ldrd	r2, r3, [r1]
 801312a:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 801312e:	015c      	lsls	r4, r3, #5
 8013130:	ebbb 0b02 	subs.w	fp, fp, r2
 8013134:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
 8013138:	eb64 0403 	sbc.w	r4, r4, r3
 801313c:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8013140:	00a4      	lsls	r4, r4, #2
 8013142:	ea44 749b 	orr.w	r4, r4, fp, lsr #30
 8013146:	eb10 0b02 	adds.w	fp, r0, r2
 801314a:	eb43 0404 	adc.w	r4, r3, r4
 801314e:	4aad      	ldr	r2, [pc, #692]	; (8013404 <rmw_wait+0x2f8>)
 8013150:	2300      	movs	r3, #0
 8013152:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8013156:	f7ed fd51 	bl	8000bfc <__aeabi_uldivmod>
 801315a:	00e4      	lsls	r4, r4, #3
 801315c:	ea44 745b 	orr.w	r4, r4, fp, lsr #29
 8013160:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8013164:	eb1b 0800 	adds.w	r8, fp, r0
 8013168:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801316c:	eb44 0901 	adc.w	r9, r4, r1
 8013170:	2300      	movs	r3, #0
 8013172:	4542      	cmp	r2, r8
 8013174:	eb73 0109 	sbcs.w	r1, r3, r9
 8013178:	f2c0 80f2 	blt.w	8013360 <rmw_wait+0x254>
 801317c:	f7f9 ff90 	bl	800d0a0 <rmw_uxrce_clean_expired_static_input_buffer>
 8013180:	4ba1      	ldr	r3, [pc, #644]	; (8013408 <rmw_wait+0x2fc>)
 8013182:	681c      	ldr	r4, [r3, #0]
 8013184:	b144      	cbz	r4, 8013198 <rmw_wait+0x8c>
 8013186:	4623      	mov	r3, r4
 8013188:	f241 50a4 	movw	r0, #5540	; 0x15a4
 801318c:	2100      	movs	r1, #0
 801318e:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8013192:	5411      	strb	r1, [r2, r0]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d1fa      	bne.n	801318e <rmw_wait+0x82>
 8013198:	b185      	cbz	r5, 80131bc <rmw_wait+0xb0>
 801319a:	6829      	ldr	r1, [r5, #0]
 801319c:	b171      	cbz	r1, 80131bc <rmw_wait+0xb0>
 801319e:	f8d5 e004 	ldr.w	lr, [r5, #4]
 80131a2:	2300      	movs	r3, #0
 80131a4:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 80131a8:	2001      	movs	r0, #1
 80131aa:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 80131ae:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80131b0:	3301      	adds	r3, #1
 80131b2:	6912      	ldr	r2, [r2, #16]
 80131b4:	4299      	cmp	r1, r3
 80131b6:	f802 000c 	strb.w	r0, [r2, ip]
 80131ba:	d1f6      	bne.n	80131aa <rmw_wait+0x9e>
 80131bc:	f1ba 0f00 	cmp.w	sl, #0
 80131c0:	d011      	beq.n	80131e6 <rmw_wait+0xda>
 80131c2:	f8da 1000 	ldr.w	r1, [sl]
 80131c6:	b171      	cbz	r1, 80131e6 <rmw_wait+0xda>
 80131c8:	f8da e004 	ldr.w	lr, [sl, #4]
 80131cc:	2300      	movs	r3, #0
 80131ce:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 80131d2:	2001      	movs	r0, #1
 80131d4:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 80131d8:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80131da:	3301      	adds	r3, #1
 80131dc:	6912      	ldr	r2, [r2, #16]
 80131de:	4299      	cmp	r1, r3
 80131e0:	f802 000c 	strb.w	r0, [r2, ip]
 80131e4:	d1f6      	bne.n	80131d4 <rmw_wait+0xc8>
 80131e6:	b186      	cbz	r6, 801320a <rmw_wait+0xfe>
 80131e8:	6831      	ldr	r1, [r6, #0]
 80131ea:	b171      	cbz	r1, 801320a <rmw_wait+0xfe>
 80131ec:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80131f0:	2300      	movs	r3, #0
 80131f2:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 80131f6:	2001      	movs	r0, #1
 80131f8:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 80131fc:	6a12      	ldr	r2, [r2, #32]
 80131fe:	3301      	adds	r3, #1
 8013200:	6912      	ldr	r2, [r2, #16]
 8013202:	4299      	cmp	r1, r3
 8013204:	f802 000c 	strb.w	r0, [r2, ip]
 8013208:	d1f6      	bne.n	80131f8 <rmw_wait+0xec>
 801320a:	b34c      	cbz	r4, 8013260 <rmw_wait+0x154>
 801320c:	4622      	mov	r2, r4
 801320e:	2300      	movs	r3, #0
 8013210:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8013214:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 8013218:	5c09      	ldrb	r1, [r1, r0]
 801321a:	440b      	add	r3, r1
 801321c:	b2db      	uxtb	r3, r3
 801321e:	2a00      	cmp	r2, #0
 8013220:	d1f8      	bne.n	8013214 <rmw_wait+0x108>
 8013222:	2b00      	cmp	r3, #0
 8013224:	f000 8082 	beq.w	801332c <rmw_wait+0x220>
 8013228:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 801322c:	d00d      	beq.n	801324a <rmw_wait+0x13e>
 801322e:	ee07 8a90 	vmov	s15, r8
 8013232:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013236:	ee07 3a90 	vmov	s15, r3
 801323a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801323e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013242:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8013246:	ee17 8a90 	vmov	r8, s15
 801324a:	f241 59a4 	movw	r9, #5540	; 0x15a4
 801324e:	68e0      	ldr	r0, [r4, #12]
 8013250:	f810 3009 	ldrb.w	r3, [r0, r9]
 8013254:	2b00      	cmp	r3, #0
 8013256:	f040 8093 	bne.w	8013380 <rmw_wait+0x274>
 801325a:	68a4      	ldr	r4, [r4, #8]
 801325c:	2c00      	cmp	r4, #0
 801325e:	d1f6      	bne.n	801324e <rmw_wait+0x142>
 8013260:	2d00      	cmp	r5, #0
 8013262:	f000 80ac 	beq.w	80133be <rmw_wait+0x2b2>
 8013266:	682b      	ldr	r3, [r5, #0]
 8013268:	2b00      	cmp	r3, #0
 801326a:	f000 8093 	beq.w	8013394 <rmw_wait+0x288>
 801326e:	2400      	movs	r4, #0
 8013270:	46a0      	mov	r8, r4
 8013272:	686b      	ldr	r3, [r5, #4]
 8013274:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013278:	f7f9 feea 	bl	800d050 <rmw_uxrce_find_static_input_buffer_by_owner>
 801327c:	2800      	cmp	r0, #0
 801327e:	d05f      	beq.n	8013340 <rmw_wait+0x234>
 8013280:	682b      	ldr	r3, [r5, #0]
 8013282:	3401      	adds	r4, #1
 8013284:	42a3      	cmp	r3, r4
 8013286:	f04f 0801 	mov.w	r8, #1
 801328a:	d8f2      	bhi.n	8013272 <rmw_wait+0x166>
 801328c:	f1ba 0f00 	cmp.w	sl, #0
 8013290:	d012      	beq.n	80132b8 <rmw_wait+0x1ac>
 8013292:	f8da 3000 	ldr.w	r3, [sl]
 8013296:	b17b      	cbz	r3, 80132b8 <rmw_wait+0x1ac>
 8013298:	2400      	movs	r4, #0
 801329a:	f8da 3004 	ldr.w	r3, [sl, #4]
 801329e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80132a2:	f7f9 fed5 	bl	800d050 <rmw_uxrce_find_static_input_buffer_by_owner>
 80132a6:	2800      	cmp	r0, #0
 80132a8:	d052      	beq.n	8013350 <rmw_wait+0x244>
 80132aa:	f8da 3000 	ldr.w	r3, [sl]
 80132ae:	3401      	adds	r4, #1
 80132b0:	42a3      	cmp	r3, r4
 80132b2:	f04f 0801 	mov.w	r8, #1
 80132b6:	d8f0      	bhi.n	801329a <rmw_wait+0x18e>
 80132b8:	b1e6      	cbz	r6, 80132f4 <rmw_wait+0x1e8>
 80132ba:	6833      	ldr	r3, [r6, #0]
 80132bc:	b1d3      	cbz	r3, 80132f4 <rmw_wait+0x1e8>
 80132be:	2400      	movs	r4, #0
 80132c0:	6873      	ldr	r3, [r6, #4]
 80132c2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80132c6:	f7f9 fec3 	bl	800d050 <rmw_uxrce_find_static_input_buffer_by_owner>
 80132ca:	b160      	cbz	r0, 80132e6 <rmw_wait+0x1da>
 80132cc:	6833      	ldr	r3, [r6, #0]
 80132ce:	3401      	adds	r4, #1
 80132d0:	42a3      	cmp	r3, r4
 80132d2:	d96c      	bls.n	80133ae <rmw_wait+0x2a2>
 80132d4:	6873      	ldr	r3, [r6, #4]
 80132d6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80132da:	f04f 0801 	mov.w	r8, #1
 80132de:	f7f9 feb7 	bl	800d050 <rmw_uxrce_find_static_input_buffer_by_owner>
 80132e2:	2800      	cmp	r0, #0
 80132e4:	d1f2      	bne.n	80132cc <rmw_wait+0x1c0>
 80132e6:	e9d6 3200 	ldrd	r3, r2, [r6]
 80132ea:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80132ee:	3401      	adds	r4, #1
 80132f0:	42a3      	cmp	r3, r4
 80132f2:	d8e5      	bhi.n	80132c0 <rmw_wait+0x1b4>
 80132f4:	b1a7      	cbz	r7, 8013320 <rmw_wait+0x214>
 80132f6:	683c      	ldr	r4, [r7, #0]
 80132f8:	b194      	cbz	r4, 8013320 <rmw_wait+0x214>
 80132fa:	2300      	movs	r3, #0
 80132fc:	461d      	mov	r5, r3
 80132fe:	e004      	b.n	801330a <rmw_wait+0x1fe>
 8013300:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8013304:	3301      	adds	r3, #1
 8013306:	42a3      	cmp	r3, r4
 8013308:	d00a      	beq.n	8013320 <rmw_wait+0x214>
 801330a:	6878      	ldr	r0, [r7, #4]
 801330c:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8013310:	7c0a      	ldrb	r2, [r1, #16]
 8013312:	2a00      	cmp	r2, #0
 8013314:	d0f4      	beq.n	8013300 <rmw_wait+0x1f4>
 8013316:	3301      	adds	r3, #1
 8013318:	42a3      	cmp	r3, r4
 801331a:	740d      	strb	r5, [r1, #16]
 801331c:	4690      	mov	r8, r2
 801331e:	d1f4      	bne.n	801330a <rmw_wait+0x1fe>
 8013320:	f1b8 0f00 	cmp.w	r8, #0
 8013324:	d040      	beq.n	80133a8 <rmw_wait+0x29c>
 8013326:	2000      	movs	r0, #0
 8013328:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801332c:	68e0      	ldr	r0, [r4, #12]
 801332e:	2100      	movs	r1, #0
 8013330:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013334:	f7fa ffbc 	bl	800e2b0 <uxr_run_session_timeout>
 8013338:	68a4      	ldr	r4, [r4, #8]
 801333a:	2c00      	cmp	r4, #0
 801333c:	d1f6      	bne.n	801332c <rmw_wait+0x220>
 801333e:	e78f      	b.n	8013260 <rmw_wait+0x154>
 8013340:	e9d5 3200 	ldrd	r3, r2, [r5]
 8013344:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013348:	3401      	adds	r4, #1
 801334a:	42a3      	cmp	r3, r4
 801334c:	d891      	bhi.n	8013272 <rmw_wait+0x166>
 801334e:	e79d      	b.n	801328c <rmw_wait+0x180>
 8013350:	e9da 3200 	ldrd	r3, r2, [sl]
 8013354:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013358:	3401      	adds	r4, #1
 801335a:	429c      	cmp	r4, r3
 801335c:	d39d      	bcc.n	801329a <rmw_wait+0x18e>
 801335e:	e7ab      	b.n	80132b8 <rmw_wait+0x1ac>
 8013360:	4690      	mov	r8, r2
 8013362:	e70b      	b.n	801317c <rmw_wait+0x70>
 8013364:	2b00      	cmp	r3, #0
 8013366:	f47f aedb 	bne.w	8013120 <rmw_wait+0x14>
 801336a:	2800      	cmp	r0, #0
 801336c:	f47f aed8 	bne.w	8013120 <rmw_wait+0x14>
 8013370:	2f00      	cmp	r7, #0
 8013372:	d0d8      	beq.n	8013326 <rmw_wait+0x21a>
 8013374:	2900      	cmp	r1, #0
 8013376:	f47f aed6 	bne.w	8013126 <rmw_wait+0x1a>
 801337a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801337e:	e6fd      	b.n	801317c <rmw_wait+0x70>
 8013380:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013384:	4641      	mov	r1, r8
 8013386:	f7fa ffad 	bl	800e2e4 <uxr_run_session_until_data>
 801338a:	68a4      	ldr	r4, [r4, #8]
 801338c:	2c00      	cmp	r4, #0
 801338e:	f47f af5e 	bne.w	801324e <rmw_wait+0x142>
 8013392:	e765      	b.n	8013260 <rmw_wait+0x154>
 8013394:	f1ba 0f00 	cmp.w	sl, #0
 8013398:	d11e      	bne.n	80133d8 <rmw_wait+0x2cc>
 801339a:	b35e      	cbz	r6, 80133f4 <rmw_wait+0x2e8>
 801339c:	6833      	ldr	r3, [r6, #0]
 801339e:	46d0      	mov	r8, sl
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d18c      	bne.n	80132be <rmw_wait+0x1b2>
 80133a4:	2f00      	cmp	r7, #0
 80133a6:	d1a6      	bne.n	80132f6 <rmw_wait+0x1ea>
 80133a8:	2002      	movs	r0, #2
 80133aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133ae:	2f00      	cmp	r7, #0
 80133b0:	d0b9      	beq.n	8013326 <rmw_wait+0x21a>
 80133b2:	683c      	ldr	r4, [r7, #0]
 80133b4:	f04f 0801 	mov.w	r8, #1
 80133b8:	2c00      	cmp	r4, #0
 80133ba:	d19e      	bne.n	80132fa <rmw_wait+0x1ee>
 80133bc:	e7b3      	b.n	8013326 <rmw_wait+0x21a>
 80133be:	f1ba 0f00 	cmp.w	sl, #0
 80133c2:	d0ea      	beq.n	801339a <rmw_wait+0x28e>
 80133c4:	f8da 3000 	ldr.w	r3, [sl]
 80133c8:	46a8      	mov	r8, r5
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	f47f af64 	bne.w	8013298 <rmw_wait+0x18c>
 80133d0:	2e00      	cmp	r6, #0
 80133d2:	f47f af72 	bne.w	80132ba <rmw_wait+0x1ae>
 80133d6:	e009      	b.n	80133ec <rmw_wait+0x2e0>
 80133d8:	f8da 2000 	ldr.w	r2, [sl]
 80133dc:	4698      	mov	r8, r3
 80133de:	2a00      	cmp	r2, #0
 80133e0:	f47f af5a 	bne.w	8013298 <rmw_wait+0x18c>
 80133e4:	4690      	mov	r8, r2
 80133e6:	2e00      	cmp	r6, #0
 80133e8:	f47f af67 	bne.w	80132ba <rmw_wait+0x1ae>
 80133ec:	46b0      	mov	r8, r6
 80133ee:	2f00      	cmp	r7, #0
 80133f0:	d181      	bne.n	80132f6 <rmw_wait+0x1ea>
 80133f2:	e7d9      	b.n	80133a8 <rmw_wait+0x29c>
 80133f4:	2f00      	cmp	r7, #0
 80133f6:	d0d7      	beq.n	80133a8 <rmw_wait+0x29c>
 80133f8:	683c      	ldr	r4, [r7, #0]
 80133fa:	46b0      	mov	r8, r6
 80133fc:	2c00      	cmp	r4, #0
 80133fe:	f47f af7c 	bne.w	80132fa <rmw_wait+0x1ee>
 8013402:	e7d1      	b.n	80133a8 <rmw_wait+0x29c>
 8013404:	000f4240 	.word	0x000f4240
 8013408:	2000f480 	.word	0x2000f480

0801340c <rmw_create_wait_set>:
 801340c:	b508      	push	{r3, lr}
 801340e:	4803      	ldr	r0, [pc, #12]	; (801341c <rmw_create_wait_set+0x10>)
 8013410:	f7ff fa00 	bl	8012814 <get_memory>
 8013414:	b108      	cbz	r0, 801341a <rmw_create_wait_set+0xe>
 8013416:	68c0      	ldr	r0, [r0, #12]
 8013418:	3010      	adds	r0, #16
 801341a:	bd08      	pop	{r3, pc}
 801341c:	20010c58 	.word	0x20010c58

08013420 <rmw_destroy_wait_set>:
 8013420:	b508      	push	{r3, lr}
 8013422:	4b08      	ldr	r3, [pc, #32]	; (8013444 <rmw_destroy_wait_set+0x24>)
 8013424:	6819      	ldr	r1, [r3, #0]
 8013426:	b911      	cbnz	r1, 801342e <rmw_destroy_wait_set+0xe>
 8013428:	e00a      	b.n	8013440 <rmw_destroy_wait_set+0x20>
 801342a:	6889      	ldr	r1, [r1, #8]
 801342c:	b141      	cbz	r1, 8013440 <rmw_destroy_wait_set+0x20>
 801342e:	68cb      	ldr	r3, [r1, #12]
 8013430:	3310      	adds	r3, #16
 8013432:	4298      	cmp	r0, r3
 8013434:	d1f9      	bne.n	801342a <rmw_destroy_wait_set+0xa>
 8013436:	4803      	ldr	r0, [pc, #12]	; (8013444 <rmw_destroy_wait_set+0x24>)
 8013438:	f7ff f9fc 	bl	8012834 <put_memory>
 801343c:	2000      	movs	r0, #0
 801343e:	bd08      	pop	{r3, pc}
 8013440:	2001      	movs	r0, #1
 8013442:	bd08      	pop	{r3, pc}
 8013444:	20010c58 	.word	0x20010c58

08013448 <rmw_uros_epoch_nanos>:
 8013448:	4b05      	ldr	r3, [pc, #20]	; (8013460 <rmw_uros_epoch_nanos+0x18>)
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	b123      	cbz	r3, 8013458 <rmw_uros_epoch_nanos+0x10>
 801344e:	68d8      	ldr	r0, [r3, #12]
 8013450:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013454:	f7fa bba0 	b.w	800db98 <uxr_epoch_nanos>
 8013458:	2000      	movs	r0, #0
 801345a:	2100      	movs	r1, #0
 801345c:	4770      	bx	lr
 801345e:	bf00      	nop
 8013460:	2000f480 	.word	0x2000f480

08013464 <ucdr_serialize_endian_array_char>:
 8013464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013468:	4619      	mov	r1, r3
 801346a:	461e      	mov	r6, r3
 801346c:	4690      	mov	r8, r2
 801346e:	4604      	mov	r4, r0
 8013470:	f7f7 f834 	bl	800a4dc <ucdr_check_buffer_available_for>
 8013474:	b9e0      	cbnz	r0, 80134b0 <ucdr_serialize_endian_array_char+0x4c>
 8013476:	4637      	mov	r7, r6
 8013478:	e009      	b.n	801348e <ucdr_serialize_endian_array_char+0x2a>
 801347a:	68a0      	ldr	r0, [r4, #8]
 801347c:	f001 fd80 	bl	8014f80 <memcpy>
 8013480:	68a2      	ldr	r2, [r4, #8]
 8013482:	6923      	ldr	r3, [r4, #16]
 8013484:	442a      	add	r2, r5
 8013486:	442b      	add	r3, r5
 8013488:	1b7f      	subs	r7, r7, r5
 801348a:	60a2      	str	r2, [r4, #8]
 801348c:	6123      	str	r3, [r4, #16]
 801348e:	2201      	movs	r2, #1
 8013490:	4639      	mov	r1, r7
 8013492:	4620      	mov	r0, r4
 8013494:	f7f7 f8a8 	bl	800a5e8 <ucdr_check_final_buffer_behavior_array>
 8013498:	1bf1      	subs	r1, r6, r7
 801349a:	4441      	add	r1, r8
 801349c:	4605      	mov	r5, r0
 801349e:	4602      	mov	r2, r0
 80134a0:	2800      	cmp	r0, #0
 80134a2:	d1ea      	bne.n	801347a <ucdr_serialize_endian_array_char+0x16>
 80134a4:	2301      	movs	r3, #1
 80134a6:	7da0      	ldrb	r0, [r4, #22]
 80134a8:	7563      	strb	r3, [r4, #21]
 80134aa:	4058      	eors	r0, r3
 80134ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134b0:	4632      	mov	r2, r6
 80134b2:	68a0      	ldr	r0, [r4, #8]
 80134b4:	4641      	mov	r1, r8
 80134b6:	f001 fd63 	bl	8014f80 <memcpy>
 80134ba:	68a2      	ldr	r2, [r4, #8]
 80134bc:	6923      	ldr	r3, [r4, #16]
 80134be:	4432      	add	r2, r6
 80134c0:	4433      	add	r3, r6
 80134c2:	60a2      	str	r2, [r4, #8]
 80134c4:	6123      	str	r3, [r4, #16]
 80134c6:	e7ed      	b.n	80134a4 <ucdr_serialize_endian_array_char+0x40>

080134c8 <ucdr_deserialize_endian_array_char>:
 80134c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134cc:	4619      	mov	r1, r3
 80134ce:	461e      	mov	r6, r3
 80134d0:	4690      	mov	r8, r2
 80134d2:	4604      	mov	r4, r0
 80134d4:	f7f7 f802 	bl	800a4dc <ucdr_check_buffer_available_for>
 80134d8:	b9e0      	cbnz	r0, 8013514 <ucdr_deserialize_endian_array_char+0x4c>
 80134da:	4637      	mov	r7, r6
 80134dc:	e009      	b.n	80134f2 <ucdr_deserialize_endian_array_char+0x2a>
 80134de:	68a1      	ldr	r1, [r4, #8]
 80134e0:	f001 fd4e 	bl	8014f80 <memcpy>
 80134e4:	68a2      	ldr	r2, [r4, #8]
 80134e6:	6923      	ldr	r3, [r4, #16]
 80134e8:	442a      	add	r2, r5
 80134ea:	442b      	add	r3, r5
 80134ec:	1b7f      	subs	r7, r7, r5
 80134ee:	60a2      	str	r2, [r4, #8]
 80134f0:	6123      	str	r3, [r4, #16]
 80134f2:	2201      	movs	r2, #1
 80134f4:	4639      	mov	r1, r7
 80134f6:	4620      	mov	r0, r4
 80134f8:	f7f7 f876 	bl	800a5e8 <ucdr_check_final_buffer_behavior_array>
 80134fc:	4605      	mov	r5, r0
 80134fe:	1bf0      	subs	r0, r6, r7
 8013500:	4440      	add	r0, r8
 8013502:	462a      	mov	r2, r5
 8013504:	2d00      	cmp	r5, #0
 8013506:	d1ea      	bne.n	80134de <ucdr_deserialize_endian_array_char+0x16>
 8013508:	2301      	movs	r3, #1
 801350a:	7da0      	ldrb	r0, [r4, #22]
 801350c:	7563      	strb	r3, [r4, #21]
 801350e:	4058      	eors	r0, r3
 8013510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013514:	4632      	mov	r2, r6
 8013516:	68a1      	ldr	r1, [r4, #8]
 8013518:	4640      	mov	r0, r8
 801351a:	f001 fd31 	bl	8014f80 <memcpy>
 801351e:	68a2      	ldr	r2, [r4, #8]
 8013520:	6923      	ldr	r3, [r4, #16]
 8013522:	4432      	add	r2, r6
 8013524:	4433      	add	r3, r6
 8013526:	60a2      	str	r2, [r4, #8]
 8013528:	6123      	str	r3, [r4, #16]
 801352a:	e7ed      	b.n	8013508 <ucdr_deserialize_endian_array_char+0x40>

0801352c <ucdr_serialize_array_uint8_t>:
 801352c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013530:	4688      	mov	r8, r1
 8013532:	4611      	mov	r1, r2
 8013534:	4616      	mov	r6, r2
 8013536:	4604      	mov	r4, r0
 8013538:	f7f6 ffd0 	bl	800a4dc <ucdr_check_buffer_available_for>
 801353c:	b9e0      	cbnz	r0, 8013578 <ucdr_serialize_array_uint8_t+0x4c>
 801353e:	4637      	mov	r7, r6
 8013540:	e009      	b.n	8013556 <ucdr_serialize_array_uint8_t+0x2a>
 8013542:	68a0      	ldr	r0, [r4, #8]
 8013544:	f001 fd1c 	bl	8014f80 <memcpy>
 8013548:	68a2      	ldr	r2, [r4, #8]
 801354a:	6923      	ldr	r3, [r4, #16]
 801354c:	442a      	add	r2, r5
 801354e:	442b      	add	r3, r5
 8013550:	1b7f      	subs	r7, r7, r5
 8013552:	60a2      	str	r2, [r4, #8]
 8013554:	6123      	str	r3, [r4, #16]
 8013556:	2201      	movs	r2, #1
 8013558:	4639      	mov	r1, r7
 801355a:	4620      	mov	r0, r4
 801355c:	f7f7 f844 	bl	800a5e8 <ucdr_check_final_buffer_behavior_array>
 8013560:	1bf1      	subs	r1, r6, r7
 8013562:	4441      	add	r1, r8
 8013564:	4605      	mov	r5, r0
 8013566:	4602      	mov	r2, r0
 8013568:	2800      	cmp	r0, #0
 801356a:	d1ea      	bne.n	8013542 <ucdr_serialize_array_uint8_t+0x16>
 801356c:	2301      	movs	r3, #1
 801356e:	7da0      	ldrb	r0, [r4, #22]
 8013570:	7563      	strb	r3, [r4, #21]
 8013572:	4058      	eors	r0, r3
 8013574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013578:	4632      	mov	r2, r6
 801357a:	68a0      	ldr	r0, [r4, #8]
 801357c:	4641      	mov	r1, r8
 801357e:	f001 fcff 	bl	8014f80 <memcpy>
 8013582:	68a3      	ldr	r3, [r4, #8]
 8013584:	6922      	ldr	r2, [r4, #16]
 8013586:	4433      	add	r3, r6
 8013588:	4432      	add	r2, r6
 801358a:	60a3      	str	r3, [r4, #8]
 801358c:	6122      	str	r2, [r4, #16]
 801358e:	e7ed      	b.n	801356c <ucdr_serialize_array_uint8_t+0x40>

08013590 <ucdr_serialize_endian_array_uint8_t>:
 8013590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013594:	4619      	mov	r1, r3
 8013596:	461e      	mov	r6, r3
 8013598:	4690      	mov	r8, r2
 801359a:	4604      	mov	r4, r0
 801359c:	f7f6 ff9e 	bl	800a4dc <ucdr_check_buffer_available_for>
 80135a0:	b9e0      	cbnz	r0, 80135dc <ucdr_serialize_endian_array_uint8_t+0x4c>
 80135a2:	4637      	mov	r7, r6
 80135a4:	e009      	b.n	80135ba <ucdr_serialize_endian_array_uint8_t+0x2a>
 80135a6:	68a0      	ldr	r0, [r4, #8]
 80135a8:	f001 fcea 	bl	8014f80 <memcpy>
 80135ac:	68a2      	ldr	r2, [r4, #8]
 80135ae:	6923      	ldr	r3, [r4, #16]
 80135b0:	442a      	add	r2, r5
 80135b2:	442b      	add	r3, r5
 80135b4:	1b7f      	subs	r7, r7, r5
 80135b6:	60a2      	str	r2, [r4, #8]
 80135b8:	6123      	str	r3, [r4, #16]
 80135ba:	2201      	movs	r2, #1
 80135bc:	4639      	mov	r1, r7
 80135be:	4620      	mov	r0, r4
 80135c0:	f7f7 f812 	bl	800a5e8 <ucdr_check_final_buffer_behavior_array>
 80135c4:	1bf1      	subs	r1, r6, r7
 80135c6:	4441      	add	r1, r8
 80135c8:	4605      	mov	r5, r0
 80135ca:	4602      	mov	r2, r0
 80135cc:	2800      	cmp	r0, #0
 80135ce:	d1ea      	bne.n	80135a6 <ucdr_serialize_endian_array_uint8_t+0x16>
 80135d0:	2301      	movs	r3, #1
 80135d2:	7da0      	ldrb	r0, [r4, #22]
 80135d4:	7563      	strb	r3, [r4, #21]
 80135d6:	4058      	eors	r0, r3
 80135d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135dc:	4632      	mov	r2, r6
 80135de:	68a0      	ldr	r0, [r4, #8]
 80135e0:	4641      	mov	r1, r8
 80135e2:	f001 fccd 	bl	8014f80 <memcpy>
 80135e6:	68a2      	ldr	r2, [r4, #8]
 80135e8:	6923      	ldr	r3, [r4, #16]
 80135ea:	4432      	add	r2, r6
 80135ec:	4433      	add	r3, r6
 80135ee:	60a2      	str	r2, [r4, #8]
 80135f0:	6123      	str	r3, [r4, #16]
 80135f2:	e7ed      	b.n	80135d0 <ucdr_serialize_endian_array_uint8_t+0x40>

080135f4 <ucdr_deserialize_array_uint8_t>:
 80135f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135f8:	4688      	mov	r8, r1
 80135fa:	4611      	mov	r1, r2
 80135fc:	4616      	mov	r6, r2
 80135fe:	4604      	mov	r4, r0
 8013600:	f7f6 ff6c 	bl	800a4dc <ucdr_check_buffer_available_for>
 8013604:	b9e0      	cbnz	r0, 8013640 <ucdr_deserialize_array_uint8_t+0x4c>
 8013606:	4637      	mov	r7, r6
 8013608:	e009      	b.n	801361e <ucdr_deserialize_array_uint8_t+0x2a>
 801360a:	68a1      	ldr	r1, [r4, #8]
 801360c:	f001 fcb8 	bl	8014f80 <memcpy>
 8013610:	68a2      	ldr	r2, [r4, #8]
 8013612:	6923      	ldr	r3, [r4, #16]
 8013614:	442a      	add	r2, r5
 8013616:	442b      	add	r3, r5
 8013618:	1b7f      	subs	r7, r7, r5
 801361a:	60a2      	str	r2, [r4, #8]
 801361c:	6123      	str	r3, [r4, #16]
 801361e:	2201      	movs	r2, #1
 8013620:	4639      	mov	r1, r7
 8013622:	4620      	mov	r0, r4
 8013624:	f7f6 ffe0 	bl	800a5e8 <ucdr_check_final_buffer_behavior_array>
 8013628:	4605      	mov	r5, r0
 801362a:	1bf0      	subs	r0, r6, r7
 801362c:	4440      	add	r0, r8
 801362e:	462a      	mov	r2, r5
 8013630:	2d00      	cmp	r5, #0
 8013632:	d1ea      	bne.n	801360a <ucdr_deserialize_array_uint8_t+0x16>
 8013634:	2301      	movs	r3, #1
 8013636:	7da0      	ldrb	r0, [r4, #22]
 8013638:	7563      	strb	r3, [r4, #21]
 801363a:	4058      	eors	r0, r3
 801363c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013640:	4632      	mov	r2, r6
 8013642:	68a1      	ldr	r1, [r4, #8]
 8013644:	4640      	mov	r0, r8
 8013646:	f001 fc9b 	bl	8014f80 <memcpy>
 801364a:	68a3      	ldr	r3, [r4, #8]
 801364c:	6922      	ldr	r2, [r4, #16]
 801364e:	4433      	add	r3, r6
 8013650:	4432      	add	r2, r6
 8013652:	60a3      	str	r3, [r4, #8]
 8013654:	6122      	str	r2, [r4, #16]
 8013656:	e7ed      	b.n	8013634 <ucdr_deserialize_array_uint8_t+0x40>

08013658 <ucdr_deserialize_endian_array_uint8_t>:
 8013658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801365c:	4619      	mov	r1, r3
 801365e:	461e      	mov	r6, r3
 8013660:	4690      	mov	r8, r2
 8013662:	4604      	mov	r4, r0
 8013664:	f7f6 ff3a 	bl	800a4dc <ucdr_check_buffer_available_for>
 8013668:	b9e0      	cbnz	r0, 80136a4 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801366a:	4637      	mov	r7, r6
 801366c:	e009      	b.n	8013682 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 801366e:	68a1      	ldr	r1, [r4, #8]
 8013670:	f001 fc86 	bl	8014f80 <memcpy>
 8013674:	68a2      	ldr	r2, [r4, #8]
 8013676:	6923      	ldr	r3, [r4, #16]
 8013678:	442a      	add	r2, r5
 801367a:	442b      	add	r3, r5
 801367c:	1b7f      	subs	r7, r7, r5
 801367e:	60a2      	str	r2, [r4, #8]
 8013680:	6123      	str	r3, [r4, #16]
 8013682:	2201      	movs	r2, #1
 8013684:	4639      	mov	r1, r7
 8013686:	4620      	mov	r0, r4
 8013688:	f7f6 ffae 	bl	800a5e8 <ucdr_check_final_buffer_behavior_array>
 801368c:	4605      	mov	r5, r0
 801368e:	1bf0      	subs	r0, r6, r7
 8013690:	4440      	add	r0, r8
 8013692:	462a      	mov	r2, r5
 8013694:	2d00      	cmp	r5, #0
 8013696:	d1ea      	bne.n	801366e <ucdr_deserialize_endian_array_uint8_t+0x16>
 8013698:	2301      	movs	r3, #1
 801369a:	7da0      	ldrb	r0, [r4, #22]
 801369c:	7563      	strb	r3, [r4, #21]
 801369e:	4058      	eors	r0, r3
 80136a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136a4:	4632      	mov	r2, r6
 80136a6:	68a1      	ldr	r1, [r4, #8]
 80136a8:	4640      	mov	r0, r8
 80136aa:	f001 fc69 	bl	8014f80 <memcpy>
 80136ae:	68a2      	ldr	r2, [r4, #8]
 80136b0:	6923      	ldr	r3, [r4, #16]
 80136b2:	4432      	add	r2, r6
 80136b4:	4433      	add	r3, r6
 80136b6:	60a2      	str	r2, [r4, #8]
 80136b8:	6123      	str	r3, [r4, #16]
 80136ba:	e7ed      	b.n	8013698 <ucdr_deserialize_endian_array_uint8_t+0x40>

080136bc <ucdr_serialize_sequence_char>:
 80136bc:	b570      	push	{r4, r5, r6, lr}
 80136be:	460e      	mov	r6, r1
 80136c0:	4615      	mov	r5, r2
 80136c2:	7d01      	ldrb	r1, [r0, #20]
 80136c4:	4604      	mov	r4, r0
 80136c6:	f7f6 f8c9 	bl	800985c <ucdr_serialize_endian_uint32_t>
 80136ca:	b90d      	cbnz	r5, 80136d0 <ucdr_serialize_sequence_char+0x14>
 80136cc:	2001      	movs	r0, #1
 80136ce:	bd70      	pop	{r4, r5, r6, pc}
 80136d0:	7d21      	ldrb	r1, [r4, #20]
 80136d2:	462b      	mov	r3, r5
 80136d4:	4632      	mov	r2, r6
 80136d6:	4620      	mov	r0, r4
 80136d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80136dc:	f7ff bec2 	b.w	8013464 <ucdr_serialize_endian_array_char>

080136e0 <ucdr_deserialize_sequence_char>:
 80136e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136e4:	461d      	mov	r5, r3
 80136e6:	4616      	mov	r6, r2
 80136e8:	460f      	mov	r7, r1
 80136ea:	461a      	mov	r2, r3
 80136ec:	7d01      	ldrb	r1, [r0, #20]
 80136ee:	4604      	mov	r4, r0
 80136f0:	f7f6 f9dc 	bl	8009aac <ucdr_deserialize_endian_uint32_t>
 80136f4:	682b      	ldr	r3, [r5, #0]
 80136f6:	429e      	cmp	r6, r3
 80136f8:	bf3c      	itt	cc
 80136fa:	2201      	movcc	r2, #1
 80136fc:	75a2      	strbcc	r2, [r4, #22]
 80136fe:	b913      	cbnz	r3, 8013706 <ucdr_deserialize_sequence_char+0x26>
 8013700:	2001      	movs	r0, #1
 8013702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013706:	7d21      	ldrb	r1, [r4, #20]
 8013708:	463a      	mov	r2, r7
 801370a:	4620      	mov	r0, r4
 801370c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013710:	f7ff beda 	b.w	80134c8 <ucdr_deserialize_endian_array_char>

08013714 <ucdr_serialize_sequence_uint8_t>:
 8013714:	b570      	push	{r4, r5, r6, lr}
 8013716:	460e      	mov	r6, r1
 8013718:	4615      	mov	r5, r2
 801371a:	7d01      	ldrb	r1, [r0, #20]
 801371c:	4604      	mov	r4, r0
 801371e:	f7f6 f89d 	bl	800985c <ucdr_serialize_endian_uint32_t>
 8013722:	b90d      	cbnz	r5, 8013728 <ucdr_serialize_sequence_uint8_t+0x14>
 8013724:	2001      	movs	r0, #1
 8013726:	bd70      	pop	{r4, r5, r6, pc}
 8013728:	7d21      	ldrb	r1, [r4, #20]
 801372a:	462b      	mov	r3, r5
 801372c:	4632      	mov	r2, r6
 801372e:	4620      	mov	r0, r4
 8013730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013734:	f7ff bf2c 	b.w	8013590 <ucdr_serialize_endian_array_uint8_t>

08013738 <ucdr_deserialize_sequence_uint8_t>:
 8013738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801373c:	461d      	mov	r5, r3
 801373e:	4616      	mov	r6, r2
 8013740:	460f      	mov	r7, r1
 8013742:	461a      	mov	r2, r3
 8013744:	7d01      	ldrb	r1, [r0, #20]
 8013746:	4604      	mov	r4, r0
 8013748:	f7f6 f9b0 	bl	8009aac <ucdr_deserialize_endian_uint32_t>
 801374c:	682b      	ldr	r3, [r5, #0]
 801374e:	429e      	cmp	r6, r3
 8013750:	bf3c      	itt	cc
 8013752:	2201      	movcc	r2, #1
 8013754:	75a2      	strbcc	r2, [r4, #22]
 8013756:	b913      	cbnz	r3, 801375e <ucdr_deserialize_sequence_uint8_t+0x26>
 8013758:	2001      	movs	r0, #1
 801375a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801375e:	7d21      	ldrb	r1, [r4, #20]
 8013760:	463a      	mov	r2, r7
 8013762:	4620      	mov	r0, r4
 8013764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013768:	f7ff bf76 	b.w	8013658 <ucdr_deserialize_endian_array_uint8_t>

0801376c <ucdr_serialize_string>:
 801376c:	b510      	push	{r4, lr}
 801376e:	b082      	sub	sp, #8
 8013770:	4604      	mov	r4, r0
 8013772:	4608      	mov	r0, r1
 8013774:	9101      	str	r1, [sp, #4]
 8013776:	f7ec fd55 	bl	8000224 <strlen>
 801377a:	9901      	ldr	r1, [sp, #4]
 801377c:	4602      	mov	r2, r0
 801377e:	3201      	adds	r2, #1
 8013780:	4620      	mov	r0, r4
 8013782:	b002      	add	sp, #8
 8013784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013788:	f7ff bf98 	b.w	80136bc <ucdr_serialize_sequence_char>

0801378c <ucdr_deserialize_string>:
 801378c:	b500      	push	{lr}
 801378e:	b083      	sub	sp, #12
 8013790:	ab01      	add	r3, sp, #4
 8013792:	f7ff ffa5 	bl	80136e0 <ucdr_deserialize_sequence_char>
 8013796:	b003      	add	sp, #12
 8013798:	f85d fb04 	ldr.w	pc, [sp], #4

0801379c <get_custom_error>:
 801379c:	4b01      	ldr	r3, [pc, #4]	; (80137a4 <get_custom_error+0x8>)
 801379e:	7818      	ldrb	r0, [r3, #0]
 80137a0:	4770      	bx	lr
 80137a2:	bf00      	nop
 80137a4:	2000c28c 	.word	0x2000c28c

080137a8 <recv_custom_msg>:
 80137a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137ac:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 80137b0:	b089      	sub	sp, #36	; 0x24
 80137b2:	2600      	movs	r6, #0
 80137b4:	4604      	mov	r4, r0
 80137b6:	9305      	str	r3, [sp, #20]
 80137b8:	468a      	mov	sl, r1
 80137ba:	4693      	mov	fp, r2
 80137bc:	f88d 601e 	strb.w	r6, [sp, #30]
 80137c0:	b325      	cbz	r5, 801380c <recv_custom_msg+0x64>
 80137c2:	f200 2902 	addw	r9, r0, #514	; 0x202
 80137c6:	f10d 081f 	add.w	r8, sp, #31
 80137ca:	af05      	add	r7, sp, #20
 80137cc:	f10d 061e 	add.w	r6, sp, #30
 80137d0:	f44f 7500 	mov.w	r5, #512	; 0x200
 80137d4:	e002      	b.n	80137dc <recv_custom_msg+0x34>
 80137d6:	9b05      	ldr	r3, [sp, #20]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	dd0f      	ble.n	80137fc <recv_custom_msg+0x54>
 80137dc:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80137e0:	e9cd 5600 	strd	r5, r6, [sp]
 80137e4:	4623      	mov	r3, r4
 80137e6:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 80137ea:	4622      	mov	r2, r4
 80137ec:	4648      	mov	r0, r9
 80137ee:	f000 ffc9 	bl	8014784 <uxr_read_framed_msg>
 80137f2:	2800      	cmp	r0, #0
 80137f4:	d0ef      	beq.n	80137d6 <recv_custom_msg+0x2e>
 80137f6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80137fa:	b1b3      	cbz	r3, 801382a <recv_custom_msg+0x82>
 80137fc:	4b0f      	ldr	r3, [pc, #60]	; (801383c <recv_custom_msg+0x94>)
 80137fe:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8013802:	701a      	strb	r2, [r3, #0]
 8013804:	2000      	movs	r0, #0
 8013806:	b009      	add	sp, #36	; 0x24
 8013808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801380c:	f10d 021f 	add.w	r2, sp, #31
 8013810:	9200      	str	r2, [sp, #0]
 8013812:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8013816:	f44f 7200 	mov.w	r2, #512	; 0x200
 801381a:	4601      	mov	r1, r0
 801381c:	47a8      	blx	r5
 801381e:	2800      	cmp	r0, #0
 8013820:	d0ec      	beq.n	80137fc <recv_custom_msg+0x54>
 8013822:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d1e8      	bne.n	80137fc <recv_custom_msg+0x54>
 801382a:	f8cb 0000 	str.w	r0, [fp]
 801382e:	2001      	movs	r0, #1
 8013830:	f8ca 4000 	str.w	r4, [sl]
 8013834:	b009      	add	sp, #36	; 0x24
 8013836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801383a:	bf00      	nop
 801383c:	2000c28c 	.word	0x2000c28c

08013840 <send_custom_msg>:
 8013840:	b570      	push	{r4, r5, r6, lr}
 8013842:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8013846:	b086      	sub	sp, #24
 8013848:	4616      	mov	r6, r2
 801384a:	b975      	cbnz	r5, 801386a <send_custom_msg+0x2a>
 801384c:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 8013850:	f10d 0317 	add.w	r3, sp, #23
 8013854:	47a0      	blx	r4
 8013856:	b108      	cbz	r0, 801385c <send_custom_msg+0x1c>
 8013858:	42b0      	cmp	r0, r6
 801385a:	d015      	beq.n	8013888 <send_custom_msg+0x48>
 801385c:	4b0c      	ldr	r3, [pc, #48]	; (8013890 <send_custom_msg+0x50>)
 801385e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8013862:	701a      	strb	r2, [r3, #0]
 8013864:	2000      	movs	r0, #0
 8013866:	b006      	add	sp, #24
 8013868:	bd70      	pop	{r4, r5, r6, pc}
 801386a:	460b      	mov	r3, r1
 801386c:	2200      	movs	r2, #0
 801386e:	f10d 0117 	add.w	r1, sp, #23
 8013872:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8013876:	9600      	str	r6, [sp, #0]
 8013878:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 801387c:	4602      	mov	r2, r0
 801387e:	f200 2002 	addw	r0, r0, #514	; 0x202
 8013882:	f000 fd97 	bl	80143b4 <uxr_write_framed_msg>
 8013886:	e7e6      	b.n	8013856 <send_custom_msg+0x16>
 8013888:	2001      	movs	r0, #1
 801388a:	b006      	add	sp, #24
 801388c:	bd70      	pop	{r4, r5, r6, pc}
 801388e:	bf00      	nop
 8013890:	2000c28c 	.word	0x2000c28c

08013894 <uxr_set_custom_transport_callbacks>:
 8013894:	b430      	push	{r4, r5}
 8013896:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 801389a:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 801389e:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 80138a2:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 80138a6:	bc30      	pop	{r4, r5}
 80138a8:	4770      	bx	lr
 80138aa:	bf00      	nop

080138ac <uxr_init_custom_transport>:
 80138ac:	b538      	push	{r3, r4, r5, lr}
 80138ae:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 80138b2:	b303      	cbz	r3, 80138f6 <uxr_init_custom_transport+0x4a>
 80138b4:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 80138b8:	4604      	mov	r4, r0
 80138ba:	b1e2      	cbz	r2, 80138f6 <uxr_init_custom_transport+0x4a>
 80138bc:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 80138c0:	b1ca      	cbz	r2, 80138f6 <uxr_init_custom_transport+0x4a>
 80138c2:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 80138c6:	b1b2      	cbz	r2, 80138f6 <uxr_init_custom_transport+0x4a>
 80138c8:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 80138cc:	4798      	blx	r3
 80138ce:	4605      	mov	r5, r0
 80138d0:	b188      	cbz	r0, 80138f6 <uxr_init_custom_transport+0x4a>
 80138d2:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80138d6:	b98b      	cbnz	r3, 80138fc <uxr_init_custom_transport+0x50>
 80138d8:	480b      	ldr	r0, [pc, #44]	; (8013908 <uxr_init_custom_transport+0x5c>)
 80138da:	490c      	ldr	r1, [pc, #48]	; (801390c <uxr_init_custom_transport+0x60>)
 80138dc:	4a0c      	ldr	r2, [pc, #48]	; (8013910 <uxr_init_custom_transport+0x64>)
 80138de:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 80138e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80138e6:	e9c4 019f 	strd	r0, r1, [r4, #636]	; 0x27c
 80138ea:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 80138ee:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 80138f2:	4628      	mov	r0, r5
 80138f4:	bd38      	pop	{r3, r4, r5, pc}
 80138f6:	2500      	movs	r5, #0
 80138f8:	4628      	mov	r0, r5
 80138fa:	bd38      	pop	{r3, r4, r5, pc}
 80138fc:	2100      	movs	r1, #0
 80138fe:	f204 2002 	addw	r0, r4, #514	; 0x202
 8013902:	f000 fd51 	bl	80143a8 <uxr_init_framing_io>
 8013906:	e7e7      	b.n	80138d8 <uxr_init_custom_transport+0x2c>
 8013908:	08013841 	.word	0x08013841
 801390c:	080137a9 	.word	0x080137a9
 8013910:	0801379d 	.word	0x0801379d

08013914 <uxr_close_custom_transport>:
 8013914:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8013918:	4718      	bx	r3
 801391a:	bf00      	nop

0801391c <uxr_init_input_best_effort_stream>:
 801391c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013920:	8003      	strh	r3, [r0, #0]
 8013922:	4770      	bx	lr

08013924 <uxr_reset_input_best_effort_stream>:
 8013924:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013928:	8003      	strh	r3, [r0, #0]
 801392a:	4770      	bx	lr

0801392c <uxr_receive_best_effort_message>:
 801392c:	b538      	push	{r3, r4, r5, lr}
 801392e:	4604      	mov	r4, r0
 8013930:	8800      	ldrh	r0, [r0, #0]
 8013932:	460d      	mov	r5, r1
 8013934:	f000 fd20 	bl	8014378 <uxr_seq_num_cmp>
 8013938:	4603      	mov	r3, r0
 801393a:	2b00      	cmp	r3, #0
 801393c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8013940:	bfb8      	it	lt
 8013942:	8025      	strhlt	r5, [r4, #0]
 8013944:	bd38      	pop	{r3, r4, r5, pc}
 8013946:	bf00      	nop

08013948 <on_full_input_buffer>:
 8013948:	b570      	push	{r4, r5, r6, lr}
 801394a:	6802      	ldr	r2, [r0, #0]
 801394c:	460d      	mov	r5, r1
 801394e:	6809      	ldr	r1, [r1, #0]
 8013950:	686c      	ldr	r4, [r5, #4]
 8013952:	1a53      	subs	r3, r2, r1
 8013954:	4606      	mov	r6, r0
 8013956:	8928      	ldrh	r0, [r5, #8]
 8013958:	fbb4 f4f0 	udiv	r4, r4, r0
 801395c:	fbb3 f3f4 	udiv	r3, r3, r4
 8013960:	3301      	adds	r3, #1
 8013962:	b29b      	uxth	r3, r3
 8013964:	fbb3 f2f0 	udiv	r2, r3, r0
 8013968:	fb00 3312 	mls	r3, r0, r2, r3
 801396c:	b29b      	uxth	r3, r3
 801396e:	fb04 f403 	mul.w	r4, r4, r3
 8013972:	1d23      	adds	r3, r4, #4
 8013974:	440b      	add	r3, r1
 8013976:	7d28      	ldrb	r0, [r5, #20]
 8013978:	f853 2c04 	ldr.w	r2, [r3, #-4]
 801397c:	b110      	cbz	r0, 8013984 <on_full_input_buffer+0x3c>
 801397e:	2000      	movs	r0, #0
 8013980:	f843 0c04 	str.w	r0, [r3, #-4]
 8013984:	2a03      	cmp	r2, #3
 8013986:	d801      	bhi.n	801398c <on_full_input_buffer+0x44>
 8013988:	2001      	movs	r0, #1
 801398a:	bd70      	pop	{r4, r5, r6, pc}
 801398c:	3408      	adds	r4, #8
 801398e:	6933      	ldr	r3, [r6, #16]
 8013990:	4421      	add	r1, r4
 8013992:	4630      	mov	r0, r6
 8013994:	3a04      	subs	r2, #4
 8013996:	f7f6 fdeb 	bl	800a570 <ucdr_init_buffer_origin>
 801399a:	4630      	mov	r0, r6
 801399c:	4902      	ldr	r1, [pc, #8]	; (80139a8 <on_full_input_buffer+0x60>)
 801399e:	462a      	mov	r2, r5
 80139a0:	f7f6 fdc4 	bl	800a52c <ucdr_set_on_full_buffer_callback>
 80139a4:	2000      	movs	r0, #0
 80139a6:	bd70      	pop	{r4, r5, r6, pc}
 80139a8:	08013949 	.word	0x08013949

080139ac <uxr_init_input_reliable_stream>:
 80139ac:	b470      	push	{r4, r5, r6}
 80139ae:	9c03      	ldr	r4, [sp, #12]
 80139b0:	6001      	str	r1, [r0, #0]
 80139b2:	2600      	movs	r6, #0
 80139b4:	8103      	strh	r3, [r0, #8]
 80139b6:	6042      	str	r2, [r0, #4]
 80139b8:	6104      	str	r4, [r0, #16]
 80139ba:	7506      	strb	r6, [r0, #20]
 80139bc:	b1ab      	cbz	r3, 80139ea <uxr_init_input_reliable_stream+0x3e>
 80139be:	600e      	str	r6, [r1, #0]
 80139c0:	8901      	ldrh	r1, [r0, #8]
 80139c2:	2901      	cmp	r1, #1
 80139c4:	d911      	bls.n	80139ea <uxr_init_input_reliable_stream+0x3e>
 80139c6:	2201      	movs	r2, #1
 80139c8:	e9d0 5400 	ldrd	r5, r4, [r0]
 80139cc:	fbb2 f3f1 	udiv	r3, r2, r1
 80139d0:	fb01 2313 	mls	r3, r1, r3, r2
 80139d4:	b29b      	uxth	r3, r3
 80139d6:	fbb4 f1f1 	udiv	r1, r4, r1
 80139da:	fb03 f301 	mul.w	r3, r3, r1
 80139de:	3201      	adds	r2, #1
 80139e0:	50ee      	str	r6, [r5, r3]
 80139e2:	8901      	ldrh	r1, [r0, #8]
 80139e4:	b292      	uxth	r2, r2
 80139e6:	4291      	cmp	r1, r2
 80139e8:	d8ee      	bhi.n	80139c8 <uxr_init_input_reliable_stream+0x1c>
 80139ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80139ee:	bc70      	pop	{r4, r5, r6}
 80139f0:	60c3      	str	r3, [r0, #12]
 80139f2:	4770      	bx	lr

080139f4 <uxr_reset_input_reliable_stream>:
 80139f4:	8902      	ldrh	r2, [r0, #8]
 80139f6:	b1ca      	cbz	r2, 8013a2c <uxr_reset_input_reliable_stream+0x38>
 80139f8:	b470      	push	{r4, r5, r6}
 80139fa:	2400      	movs	r4, #0
 80139fc:	4621      	mov	r1, r4
 80139fe:	4626      	mov	r6, r4
 8013a00:	fbb1 f3f2 	udiv	r3, r1, r2
 8013a04:	fb02 1313 	mls	r3, r2, r3, r1
 8013a08:	e9d0 5100 	ldrd	r5, r1, [r0]
 8013a0c:	b29b      	uxth	r3, r3
 8013a0e:	fbb1 f2f2 	udiv	r2, r1, r2
 8013a12:	fb03 f302 	mul.w	r3, r3, r2
 8013a16:	3401      	adds	r4, #1
 8013a18:	50ee      	str	r6, [r5, r3]
 8013a1a:	8902      	ldrh	r2, [r0, #8]
 8013a1c:	b2a1      	uxth	r1, r4
 8013a1e:	428a      	cmp	r2, r1
 8013a20:	d8ee      	bhi.n	8013a00 <uxr_reset_input_reliable_stream+0xc>
 8013a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013a26:	bc70      	pop	{r4, r5, r6}
 8013a28:	60c3      	str	r3, [r0, #12]
 8013a2a:	4770      	bx	lr
 8013a2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013a30:	60c3      	str	r3, [r0, #12]
 8013a32:	4770      	bx	lr

08013a34 <uxr_receive_reliable_message>:
 8013a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a38:	4604      	mov	r4, r0
 8013a3a:	460d      	mov	r5, r1
 8013a3c:	8901      	ldrh	r1, [r0, #8]
 8013a3e:	8980      	ldrh	r0, [r0, #12]
 8013a40:	4690      	mov	r8, r2
 8013a42:	461f      	mov	r7, r3
 8013a44:	f000 fc90 	bl	8014368 <uxr_seq_num_add>
 8013a48:	4629      	mov	r1, r5
 8013a4a:	4606      	mov	r6, r0
 8013a4c:	89a0      	ldrh	r0, [r4, #12]
 8013a4e:	f000 fc93 	bl	8014378 <uxr_seq_num_cmp>
 8013a52:	2800      	cmp	r0, #0
 8013a54:	db0a      	blt.n	8013a6c <uxr_receive_reliable_message+0x38>
 8013a56:	2600      	movs	r6, #0
 8013a58:	89e0      	ldrh	r0, [r4, #14]
 8013a5a:	4629      	mov	r1, r5
 8013a5c:	f000 fc8c 	bl	8014378 <uxr_seq_num_cmp>
 8013a60:	2800      	cmp	r0, #0
 8013a62:	bfb8      	it	lt
 8013a64:	81e5      	strhlt	r5, [r4, #14]
 8013a66:	4630      	mov	r0, r6
 8013a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a6c:	4630      	mov	r0, r6
 8013a6e:	4629      	mov	r1, r5
 8013a70:	f000 fc82 	bl	8014378 <uxr_seq_num_cmp>
 8013a74:	2800      	cmp	r0, #0
 8013a76:	dbee      	blt.n	8013a56 <uxr_receive_reliable_message+0x22>
 8013a78:	6923      	ldr	r3, [r4, #16]
 8013a7a:	4640      	mov	r0, r8
 8013a7c:	4798      	blx	r3
 8013a7e:	2101      	movs	r1, #1
 8013a80:	4681      	mov	r9, r0
 8013a82:	89a0      	ldrh	r0, [r4, #12]
 8013a84:	f000 fc70 	bl	8014368 <uxr_seq_num_add>
 8013a88:	f1b9 0f00 	cmp.w	r9, #0
 8013a8c:	d101      	bne.n	8013a92 <uxr_receive_reliable_message+0x5e>
 8013a8e:	4285      	cmp	r5, r0
 8013a90:	d049      	beq.n	8013b26 <uxr_receive_reliable_message+0xf2>
 8013a92:	8921      	ldrh	r1, [r4, #8]
 8013a94:	fbb5 f3f1 	udiv	r3, r5, r1
 8013a98:	fb01 5313 	mls	r3, r1, r3, r5
 8013a9c:	b29b      	uxth	r3, r3
 8013a9e:	6862      	ldr	r2, [r4, #4]
 8013aa0:	6820      	ldr	r0, [r4, #0]
 8013aa2:	fbb2 f2f1 	udiv	r2, r2, r1
 8013aa6:	fb03 f302 	mul.w	r3, r3, r2
 8013aaa:	3304      	adds	r3, #4
 8013aac:	4418      	add	r0, r3
 8013aae:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d1cf      	bne.n	8013a56 <uxr_receive_reliable_message+0x22>
 8013ab6:	4641      	mov	r1, r8
 8013ab8:	463a      	mov	r2, r7
 8013aba:	f001 fa61 	bl	8014f80 <memcpy>
 8013abe:	8921      	ldrh	r1, [r4, #8]
 8013ac0:	fbb5 f3f1 	udiv	r3, r5, r1
 8013ac4:	fb01 5313 	mls	r3, r1, r3, r5
 8013ac8:	b29b      	uxth	r3, r3
 8013aca:	6862      	ldr	r2, [r4, #4]
 8013acc:	fbb2 f2f1 	udiv	r2, r2, r1
 8013ad0:	6821      	ldr	r1, [r4, #0]
 8013ad2:	fb03 f302 	mul.w	r3, r3, r2
 8013ad6:	2201      	movs	r2, #1
 8013ad8:	50cf      	str	r7, [r1, r3]
 8013ada:	9b08      	ldr	r3, [sp, #32]
 8013adc:	701a      	strb	r2, [r3, #0]
 8013ade:	f1b9 0f00 	cmp.w	r9, #0
 8013ae2:	d0b8      	beq.n	8013a56 <uxr_receive_reliable_message+0x22>
 8013ae4:	89a6      	ldrh	r6, [r4, #12]
 8013ae6:	e001      	b.n	8013aec <uxr_receive_reliable_message+0xb8>
 8013ae8:	2801      	cmp	r0, #1
 8013aea:	d1b4      	bne.n	8013a56 <uxr_receive_reliable_message+0x22>
 8013aec:	4630      	mov	r0, r6
 8013aee:	2101      	movs	r1, #1
 8013af0:	f000 fc3a 	bl	8014368 <uxr_seq_num_add>
 8013af4:	8921      	ldrh	r1, [r4, #8]
 8013af6:	fbb0 f3f1 	udiv	r3, r0, r1
 8013afa:	fb01 0313 	mls	r3, r1, r3, r0
 8013afe:	b29b      	uxth	r3, r3
 8013b00:	6862      	ldr	r2, [r4, #4]
 8013b02:	fbb2 f2f1 	udiv	r2, r2, r1
 8013b06:	4606      	mov	r6, r0
 8013b08:	fb03 f302 	mul.w	r3, r3, r2
 8013b0c:	6820      	ldr	r0, [r4, #0]
 8013b0e:	3304      	adds	r3, #4
 8013b10:	4418      	add	r0, r3
 8013b12:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d09d      	beq.n	8013a56 <uxr_receive_reliable_message+0x22>
 8013b1a:	6923      	ldr	r3, [r4, #16]
 8013b1c:	4798      	blx	r3
 8013b1e:	2802      	cmp	r0, #2
 8013b20:	d1e2      	bne.n	8013ae8 <uxr_receive_reliable_message+0xb4>
 8013b22:	2601      	movs	r6, #1
 8013b24:	e798      	b.n	8013a58 <uxr_receive_reliable_message+0x24>
 8013b26:	9b08      	ldr	r3, [sp, #32]
 8013b28:	81a5      	strh	r5, [r4, #12]
 8013b2a:	2601      	movs	r6, #1
 8013b2c:	f883 9000 	strb.w	r9, [r3]
 8013b30:	e792      	b.n	8013a58 <uxr_receive_reliable_message+0x24>
 8013b32:	bf00      	nop

08013b34 <uxr_next_input_reliable_buffer_available>:
 8013b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b38:	4604      	mov	r4, r0
 8013b3a:	460e      	mov	r6, r1
 8013b3c:	8980      	ldrh	r0, [r0, #12]
 8013b3e:	2101      	movs	r1, #1
 8013b40:	4617      	mov	r7, r2
 8013b42:	f000 fc11 	bl	8014368 <uxr_seq_num_add>
 8013b46:	8921      	ldrh	r1, [r4, #8]
 8013b48:	fbb0 f3f1 	udiv	r3, r0, r1
 8013b4c:	fb01 0313 	mls	r3, r1, r3, r0
 8013b50:	b29b      	uxth	r3, r3
 8013b52:	6862      	ldr	r2, [r4, #4]
 8013b54:	fbb2 f2f1 	udiv	r2, r2, r1
 8013b58:	fb03 f302 	mul.w	r3, r3, r2
 8013b5c:	6822      	ldr	r2, [r4, #0]
 8013b5e:	3304      	adds	r3, #4
 8013b60:	eb02 0803 	add.w	r8, r2, r3
 8013b64:	f858 9c04 	ldr.w	r9, [r8, #-4]
 8013b68:	f1b9 0f00 	cmp.w	r9, #0
 8013b6c:	d025      	beq.n	8013bba <uxr_next_input_reliable_buffer_available+0x86>
 8013b6e:	6923      	ldr	r3, [r4, #16]
 8013b70:	4605      	mov	r5, r0
 8013b72:	4640      	mov	r0, r8
 8013b74:	4798      	blx	r3
 8013b76:	4682      	mov	sl, r0
 8013b78:	b310      	cbz	r0, 8013bc0 <uxr_next_input_reliable_buffer_available+0x8c>
 8013b7a:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8013b7e:	e005      	b.n	8013b8c <uxr_next_input_reliable_buffer_available+0x58>
 8013b80:	6923      	ldr	r3, [r4, #16]
 8013b82:	4798      	blx	r3
 8013b84:	2802      	cmp	r0, #2
 8013b86:	d032      	beq.n	8013bee <uxr_next_input_reliable_buffer_available+0xba>
 8013b88:	2801      	cmp	r0, #1
 8013b8a:	d116      	bne.n	8013bba <uxr_next_input_reliable_buffer_available+0x86>
 8013b8c:	4650      	mov	r0, sl
 8013b8e:	2101      	movs	r1, #1
 8013b90:	f000 fbea 	bl	8014368 <uxr_seq_num_add>
 8013b94:	8921      	ldrh	r1, [r4, #8]
 8013b96:	fbb0 f3f1 	udiv	r3, r0, r1
 8013b9a:	fb01 0313 	mls	r3, r1, r3, r0
 8013b9e:	b29b      	uxth	r3, r3
 8013ba0:	6862      	ldr	r2, [r4, #4]
 8013ba2:	fbb2 f2f1 	udiv	r2, r2, r1
 8013ba6:	4682      	mov	sl, r0
 8013ba8:	fb03 f302 	mul.w	r3, r3, r2
 8013bac:	6820      	ldr	r0, [r4, #0]
 8013bae:	3304      	adds	r3, #4
 8013bb0:	4418      	add	r0, r3
 8013bb2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d1e2      	bne.n	8013b80 <uxr_next_input_reliable_buffer_available+0x4c>
 8013bba:	2000      	movs	r0, #0
 8013bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bc0:	464a      	mov	r2, r9
 8013bc2:	4641      	mov	r1, r8
 8013bc4:	4630      	mov	r0, r6
 8013bc6:	f7f6 fcdb 	bl	800a580 <ucdr_init_buffer>
 8013bca:	8921      	ldrh	r1, [r4, #8]
 8013bcc:	fbb5 f3f1 	udiv	r3, r5, r1
 8013bd0:	fb01 5313 	mls	r3, r1, r3, r5
 8013bd4:	b29b      	uxth	r3, r3
 8013bd6:	6862      	ldr	r2, [r4, #4]
 8013bd8:	fbb2 f2f1 	udiv	r2, r2, r1
 8013bdc:	6821      	ldr	r1, [r4, #0]
 8013bde:	fb03 f302 	mul.w	r3, r3, r2
 8013be2:	2001      	movs	r0, #1
 8013be4:	f841 a003 	str.w	sl, [r1, r3]
 8013be8:	81a5      	strh	r5, [r4, #12]
 8013bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bee:	8922      	ldrh	r2, [r4, #8]
 8013bf0:	fbb5 f0f2 	udiv	r0, r5, r2
 8013bf4:	fb02 5510 	mls	r5, r2, r0, r5
 8013bf8:	b2ad      	uxth	r5, r5
 8013bfa:	6863      	ldr	r3, [r4, #4]
 8013bfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8013c00:	fb05 f503 	mul.w	r5, r5, r3
 8013c04:	6823      	ldr	r3, [r4, #0]
 8013c06:	2000      	movs	r0, #0
 8013c08:	5158      	str	r0, [r3, r5]
 8013c0a:	eba9 0207 	sub.w	r2, r9, r7
 8013c0e:	eb08 0107 	add.w	r1, r8, r7
 8013c12:	4630      	mov	r0, r6
 8013c14:	f7f6 fcb4 	bl	800a580 <ucdr_init_buffer>
 8013c18:	4630      	mov	r0, r6
 8013c1a:	4904      	ldr	r1, [pc, #16]	; (8013c2c <uxr_next_input_reliable_buffer_available+0xf8>)
 8013c1c:	4622      	mov	r2, r4
 8013c1e:	f7f6 fc85 	bl	800a52c <ucdr_set_on_full_buffer_callback>
 8013c22:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8013c26:	2001      	movs	r0, #1
 8013c28:	e7c8      	b.n	8013bbc <uxr_next_input_reliable_buffer_available+0x88>
 8013c2a:	bf00      	nop
 8013c2c:	08013949 	.word	0x08013949

08013c30 <uxr_process_heartbeat>:
 8013c30:	b538      	push	{r3, r4, r5, lr}
 8013c32:	4611      	mov	r1, r2
 8013c34:	4604      	mov	r4, r0
 8013c36:	89c0      	ldrh	r0, [r0, #14]
 8013c38:	4615      	mov	r5, r2
 8013c3a:	f000 fb9d 	bl	8014378 <uxr_seq_num_cmp>
 8013c3e:	2800      	cmp	r0, #0
 8013c40:	bfb8      	it	lt
 8013c42:	81e5      	strhlt	r5, [r4, #14]
 8013c44:	bd38      	pop	{r3, r4, r5, pc}
 8013c46:	bf00      	nop

08013c48 <uxr_compute_acknack>:
 8013c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c4c:	8903      	ldrh	r3, [r0, #8]
 8013c4e:	8986      	ldrh	r6, [r0, #12]
 8013c50:	4604      	mov	r4, r0
 8013c52:	460d      	mov	r5, r1
 8013c54:	b1d3      	cbz	r3, 8013c8c <uxr_compute_acknack+0x44>
 8013c56:	4630      	mov	r0, r6
 8013c58:	2701      	movs	r7, #1
 8013c5a:	e003      	b.n	8013c64 <uxr_compute_acknack+0x1c>
 8013c5c:	4567      	cmp	r7, ip
 8013c5e:	d215      	bcs.n	8013c8c <uxr_compute_acknack+0x44>
 8013c60:	89a0      	ldrh	r0, [r4, #12]
 8013c62:	3701      	adds	r7, #1
 8013c64:	b2b9      	uxth	r1, r7
 8013c66:	f000 fb7f 	bl	8014368 <uxr_seq_num_add>
 8013c6a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8013c6e:	fbb0 f2fc 	udiv	r2, r0, ip
 8013c72:	e9d4 1300 	ldrd	r1, r3, [r4]
 8013c76:	fb0c 0212 	mls	r2, ip, r2, r0
 8013c7a:	b292      	uxth	r2, r2
 8013c7c:	fbb3 f3fc 	udiv	r3, r3, ip
 8013c80:	fb02 1303 	mla	r3, r2, r3, r1
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d1e8      	bne.n	8013c5c <uxr_compute_acknack+0x14>
 8013c8a:	4606      	mov	r6, r0
 8013c8c:	802e      	strh	r6, [r5, #0]
 8013c8e:	4630      	mov	r0, r6
 8013c90:	2101      	movs	r1, #1
 8013c92:	89e6      	ldrh	r6, [r4, #14]
 8013c94:	f000 fb6c 	bl	8014370 <uxr_seq_num_sub>
 8013c98:	4601      	mov	r1, r0
 8013c9a:	4630      	mov	r0, r6
 8013c9c:	f000 fb68 	bl	8014370 <uxr_seq_num_sub>
 8013ca0:	4606      	mov	r6, r0
 8013ca2:	b318      	cbz	r0, 8013cec <uxr_compute_acknack+0xa4>
 8013ca4:	f04f 0900 	mov.w	r9, #0
 8013ca8:	464f      	mov	r7, r9
 8013caa:	f04f 0801 	mov.w	r8, #1
 8013cae:	fa1f f189 	uxth.w	r1, r9
 8013cb2:	8828      	ldrh	r0, [r5, #0]
 8013cb4:	f000 fb58 	bl	8014368 <uxr_seq_num_add>
 8013cb8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8013cbc:	6822      	ldr	r2, [r4, #0]
 8013cbe:	fbb0 f1fc 	udiv	r1, r0, ip
 8013cc2:	fb01 011c 	mls	r1, r1, ip, r0
 8013cc6:	b289      	uxth	r1, r1
 8013cc8:	6863      	ldr	r3, [r4, #4]
 8013cca:	fbb3 f3fc 	udiv	r3, r3, ip
 8013cce:	fb01 2303 	mla	r3, r1, r3, r2
 8013cd2:	fa08 f209 	lsl.w	r2, r8, r9
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	f109 0901 	add.w	r9, r9, #1
 8013cdc:	b90b      	cbnz	r3, 8013ce2 <uxr_compute_acknack+0x9a>
 8013cde:	4317      	orrs	r7, r2
 8013ce0:	b2bf      	uxth	r7, r7
 8013ce2:	454e      	cmp	r6, r9
 8013ce4:	d1e3      	bne.n	8013cae <uxr_compute_acknack+0x66>
 8013ce6:	4638      	mov	r0, r7
 8013ce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cec:	4607      	mov	r7, r0
 8013cee:	4638      	mov	r0, r7
 8013cf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013cf4 <uxr_init_output_best_effort_stream>:
 8013cf4:	b410      	push	{r4}
 8013cf6:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8013cfa:	81c4      	strh	r4, [r0, #14]
 8013cfc:	e9c0 1300 	strd	r1, r3, [r0]
 8013d00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d04:	7303      	strb	r3, [r0, #12]
 8013d06:	6082      	str	r2, [r0, #8]
 8013d08:	4770      	bx	lr
 8013d0a:	bf00      	nop

08013d0c <uxr_reset_output_best_effort_stream>:
 8013d0c:	7b02      	ldrb	r2, [r0, #12]
 8013d0e:	6042      	str	r2, [r0, #4]
 8013d10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013d14:	81c3      	strh	r3, [r0, #14]
 8013d16:	4770      	bx	lr

08013d18 <uxr_prepare_best_effort_buffer_to_write>:
 8013d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d1a:	4604      	mov	r4, r0
 8013d1c:	b083      	sub	sp, #12
 8013d1e:	6840      	ldr	r0, [r0, #4]
 8013d20:	460d      	mov	r5, r1
 8013d22:	4616      	mov	r6, r2
 8013d24:	f7fb f844 	bl	800edb0 <uxr_submessage_padding>
 8013d28:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8013d2c:	4410      	add	r0, r2
 8013d2e:	1942      	adds	r2, r0, r5
 8013d30:	4293      	cmp	r3, r2
 8013d32:	bf2c      	ite	cs
 8013d34:	2701      	movcs	r7, #1
 8013d36:	2700      	movcc	r7, #0
 8013d38:	d202      	bcs.n	8013d40 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8013d3a:	4638      	mov	r0, r7
 8013d3c:	b003      	add	sp, #12
 8013d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d40:	9000      	str	r0, [sp, #0]
 8013d42:	6821      	ldr	r1, [r4, #0]
 8013d44:	4630      	mov	r0, r6
 8013d46:	2300      	movs	r3, #0
 8013d48:	f7f6 fc08 	bl	800a55c <ucdr_init_buffer_origin_offset>
 8013d4c:	6861      	ldr	r1, [r4, #4]
 8013d4e:	4638      	mov	r0, r7
 8013d50:	4429      	add	r1, r5
 8013d52:	6061      	str	r1, [r4, #4]
 8013d54:	b003      	add	sp, #12
 8013d56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013d58 <uxr_prepare_best_effort_buffer_to_send>:
 8013d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d5c:	6845      	ldr	r5, [r0, #4]
 8013d5e:	4604      	mov	r4, r0
 8013d60:	7b00      	ldrb	r0, [r0, #12]
 8013d62:	4285      	cmp	r5, r0
 8013d64:	bf8c      	ite	hi
 8013d66:	2701      	movhi	r7, #1
 8013d68:	2700      	movls	r7, #0
 8013d6a:	d802      	bhi.n	8013d72 <uxr_prepare_best_effort_buffer_to_send+0x1a>
 8013d6c:	4638      	mov	r0, r7
 8013d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d72:	4688      	mov	r8, r1
 8013d74:	89e0      	ldrh	r0, [r4, #14]
 8013d76:	2101      	movs	r1, #1
 8013d78:	4615      	mov	r5, r2
 8013d7a:	461e      	mov	r6, r3
 8013d7c:	f000 faf4 	bl	8014368 <uxr_seq_num_add>
 8013d80:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013d84:	81e0      	strh	r0, [r4, #14]
 8013d86:	8030      	strh	r0, [r6, #0]
 8013d88:	f8c8 2000 	str.w	r2, [r8]
 8013d8c:	602b      	str	r3, [r5, #0]
 8013d8e:	7b23      	ldrb	r3, [r4, #12]
 8013d90:	6063      	str	r3, [r4, #4]
 8013d92:	4638      	mov	r0, r7
 8013d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013d98 <on_full_output_buffer>:
 8013d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d9a:	6802      	ldr	r2, [r0, #0]
 8013d9c:	460d      	mov	r5, r1
 8013d9e:	6809      	ldr	r1, [r1, #0]
 8013da0:	892f      	ldrh	r7, [r5, #8]
 8013da2:	686c      	ldr	r4, [r5, #4]
 8013da4:	fbb4 f4f7 	udiv	r4, r4, r7
 8013da8:	1a53      	subs	r3, r2, r1
 8013daa:	fbb3 f3f4 	udiv	r3, r3, r4
 8013dae:	3301      	adds	r3, #1
 8013db0:	b29b      	uxth	r3, r3
 8013db2:	fbb3 f2f7 	udiv	r2, r3, r7
 8013db6:	fb07 3312 	mls	r3, r7, r2, r3
 8013dba:	b29b      	uxth	r3, r3
 8013dbc:	fb04 f403 	mul.w	r4, r4, r3
 8013dc0:	7b2f      	ldrb	r7, [r5, #12]
 8013dc2:	590a      	ldr	r2, [r1, r4]
 8013dc4:	6903      	ldr	r3, [r0, #16]
 8013dc6:	443c      	add	r4, r7
 8013dc8:	3408      	adds	r4, #8
 8013dca:	1bd2      	subs	r2, r2, r7
 8013dcc:	4606      	mov	r6, r0
 8013dce:	4421      	add	r1, r4
 8013dd0:	3a04      	subs	r2, #4
 8013dd2:	f7f6 fbcd 	bl	800a570 <ucdr_init_buffer_origin>
 8013dd6:	4630      	mov	r0, r6
 8013dd8:	4902      	ldr	r1, [pc, #8]	; (8013de4 <on_full_output_buffer+0x4c>)
 8013dda:	462a      	mov	r2, r5
 8013ddc:	f7f6 fba6 	bl	800a52c <ucdr_set_on_full_buffer_callback>
 8013de0:	2000      	movs	r0, #0
 8013de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013de4:	08013d99 	.word	0x08013d99

08013de8 <uxr_init_output_reliable_stream>:
 8013de8:	b430      	push	{r4, r5}
 8013dea:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8013dee:	6001      	str	r1, [r0, #0]
 8013df0:	8103      	strh	r3, [r0, #8]
 8013df2:	6042      	str	r2, [r0, #4]
 8013df4:	7304      	strb	r4, [r0, #12]
 8013df6:	b1b3      	cbz	r3, 8013e26 <uxr_init_output_reliable_stream+0x3e>
 8013df8:	600c      	str	r4, [r1, #0]
 8013dfa:	8901      	ldrh	r1, [r0, #8]
 8013dfc:	2901      	cmp	r1, #1
 8013dfe:	d912      	bls.n	8013e26 <uxr_init_output_reliable_stream+0x3e>
 8013e00:	2201      	movs	r2, #1
 8013e02:	e9d0 5400 	ldrd	r5, r4, [r0]
 8013e06:	fbb2 f3f1 	udiv	r3, r2, r1
 8013e0a:	fb01 2313 	mls	r3, r1, r3, r2
 8013e0e:	b29b      	uxth	r3, r3
 8013e10:	fbb4 f1f1 	udiv	r1, r4, r1
 8013e14:	fb03 f301 	mul.w	r3, r3, r1
 8013e18:	7b01      	ldrb	r1, [r0, #12]
 8013e1a:	50e9      	str	r1, [r5, r3]
 8013e1c:	3201      	adds	r2, #1
 8013e1e:	8901      	ldrh	r1, [r0, #8]
 8013e20:	b292      	uxth	r2, r2
 8013e22:	4291      	cmp	r1, r2
 8013e24:	d8ed      	bhi.n	8013e02 <uxr_init_output_reliable_stream+0x1a>
 8013e26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013e2a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013e2e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8013e32:	4b05      	ldr	r3, [pc, #20]	; (8013e48 <uxr_init_output_reliable_stream+0x60>)
 8013e34:	f8c0 300e 	str.w	r3, [r0, #14]
 8013e38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	bc30      	pop	{r4, r5}
 8013e40:	8242      	strh	r2, [r0, #18]
 8013e42:	8403      	strh	r3, [r0, #32]
 8013e44:	4770      	bx	lr
 8013e46:	bf00      	nop
 8013e48:	ffff0000 	.word	0xffff0000

08013e4c <uxr_reset_output_reliable_stream>:
 8013e4c:	8902      	ldrh	r2, [r0, #8]
 8013e4e:	b430      	push	{r4, r5}
 8013e50:	b19a      	cbz	r2, 8013e7a <uxr_reset_output_reliable_stream+0x2e>
 8013e52:	2400      	movs	r4, #0
 8013e54:	4621      	mov	r1, r4
 8013e56:	fbb1 f3f2 	udiv	r3, r1, r2
 8013e5a:	fb02 1313 	mls	r3, r2, r3, r1
 8013e5e:	e9d0 5100 	ldrd	r5, r1, [r0]
 8013e62:	b29b      	uxth	r3, r3
 8013e64:	fbb1 f2f2 	udiv	r2, r1, r2
 8013e68:	fb03 f302 	mul.w	r3, r3, r2
 8013e6c:	7b02      	ldrb	r2, [r0, #12]
 8013e6e:	50ea      	str	r2, [r5, r3]
 8013e70:	3401      	adds	r4, #1
 8013e72:	8902      	ldrh	r2, [r0, #8]
 8013e74:	b2a1      	uxth	r1, r4
 8013e76:	428a      	cmp	r2, r1
 8013e78:	d8ed      	bhi.n	8013e56 <uxr_reset_output_reliable_stream+0xa>
 8013e7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013e7e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013e82:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8013e86:	4b05      	ldr	r3, [pc, #20]	; (8013e9c <uxr_reset_output_reliable_stream+0x50>)
 8013e88:	f8c0 300e 	str.w	r3, [r0, #14]
 8013e8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013e90:	2300      	movs	r3, #0
 8013e92:	bc30      	pop	{r4, r5}
 8013e94:	8242      	strh	r2, [r0, #18]
 8013e96:	8403      	strh	r3, [r0, #32]
 8013e98:	4770      	bx	lr
 8013e9a:	bf00      	nop
 8013e9c:	ffff0000 	.word	0xffff0000

08013ea0 <uxr_prepare_reliable_buffer_to_write>:
 8013ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ea4:	89c5      	ldrh	r5, [r0, #14]
 8013ea6:	4604      	mov	r4, r0
 8013ea8:	8900      	ldrh	r0, [r0, #8]
 8013eaa:	fbb5 f3f0 	udiv	r3, r5, r0
 8013eae:	4688      	mov	r8, r1
 8013eb0:	e9d4 1600 	ldrd	r1, r6, [r4]
 8013eb4:	fb00 5313 	mls	r3, r0, r3, r5
 8013eb8:	b29b      	uxth	r3, r3
 8013eba:	fbb6 f0f0 	udiv	r0, r6, r0
 8013ebe:	fb00 f303 	mul.w	r3, r0, r3
 8013ec2:	3304      	adds	r3, #4
 8013ec4:	18cb      	adds	r3, r1, r3
 8013ec6:	b091      	sub	sp, #68	; 0x44
 8013ec8:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8013ecc:	9004      	str	r0, [sp, #16]
 8013ece:	2104      	movs	r1, #4
 8013ed0:	4630      	mov	r0, r6
 8013ed2:	9305      	str	r3, [sp, #20]
 8013ed4:	9206      	str	r2, [sp, #24]
 8013ed6:	f7f6 fb57 	bl	800a588 <ucdr_alignment>
 8013eda:	1833      	adds	r3, r6, r0
 8013edc:	9804      	ldr	r0, [sp, #16]
 8013ede:	9303      	str	r3, [sp, #12]
 8013ee0:	eb03 0708 	add.w	r7, r3, r8
 8013ee4:	1f06      	subs	r6, r0, #4
 8013ee6:	42b7      	cmp	r7, r6
 8013ee8:	f240 80dc 	bls.w	80140a4 <uxr_prepare_reliable_buffer_to_write+0x204>
 8013eec:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8013ef0:	eb0e 0308 	add.w	r3, lr, r8
 8013ef4:	42b3      	cmp	r3, r6
 8013ef6:	f240 80c2 	bls.w	801407e <uxr_prepare_reliable_buffer_to_write+0x1de>
 8013efa:	9b03      	ldr	r3, [sp, #12]
 8013efc:	3304      	adds	r3, #4
 8013efe:	42b3      	cmp	r3, r6
 8013f00:	f080 8112 	bcs.w	8014128 <uxr_prepare_reliable_buffer_to_write+0x288>
 8013f04:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8013f08:	f1bc 0f00 	cmp.w	ip, #0
 8013f0c:	f000 8127 	beq.w	801415e <uxr_prepare_reliable_buffer_to_write+0x2be>
 8013f10:	e9d4 7300 	ldrd	r7, r3, [r4]
 8013f14:	2100      	movs	r1, #0
 8013f16:	4608      	mov	r0, r1
 8013f18:	460a      	mov	r2, r1
 8013f1a:	fbb3 f9fc 	udiv	r9, r3, ip
 8013f1e:	fbb2 f3fc 	udiv	r3, r2, ip
 8013f22:	fb0c 2313 	mls	r3, ip, r3, r2
 8013f26:	b29b      	uxth	r3, r3
 8013f28:	fb09 7303 	mla	r3, r9, r3, r7
 8013f2c:	3101      	adds	r1, #1
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	459e      	cmp	lr, r3
 8013f32:	bf08      	it	eq
 8013f34:	3001      	addeq	r0, #1
 8013f36:	b28a      	uxth	r2, r1
 8013f38:	bf08      	it	eq
 8013f3a:	b280      	uxtheq	r0, r0
 8013f3c:	4562      	cmp	r2, ip
 8013f3e:	d3ee      	bcc.n	8013f1e <uxr_prepare_reliable_buffer_to_write+0x7e>
 8013f40:	9b03      	ldr	r3, [sp, #12]
 8013f42:	1f37      	subs	r7, r6, #4
 8013f44:	b2bf      	uxth	r7, r7
 8013f46:	eba7 0903 	sub.w	r9, r7, r3
 8013f4a:	fa1f f989 	uxth.w	r9, r9
 8013f4e:	eba7 070e 	sub.w	r7, r7, lr
 8013f52:	b2bf      	uxth	r7, r7
 8013f54:	eba8 0809 	sub.w	r8, r8, r9
 8013f58:	fbb8 faf7 	udiv	sl, r8, r7
 8013f5c:	fb07 831a 	mls	r3, r7, sl, r8
 8013f60:	9707      	str	r7, [sp, #28]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	f040 80bf 	bne.w	80140e6 <uxr_prepare_reliable_buffer_to_write+0x246>
 8013f68:	fa1f fa8a 	uxth.w	sl, sl
 8013f6c:	4582      	cmp	sl, r0
 8013f6e:	f200 8095 	bhi.w	801409c <uxr_prepare_reliable_buffer_to_write+0x1fc>
 8013f72:	f10d 0b20 	add.w	fp, sp, #32
 8013f76:	f1ba 0f00 	cmp.w	sl, #0
 8013f7a:	d03a      	beq.n	8013ff2 <uxr_prepare_reliable_buffer_to_write+0x152>
 8013f7c:	f04f 0800 	mov.w	r8, #0
 8013f80:	f10d 0b20 	add.w	fp, sp, #32
 8013f84:	e000      	b.n	8013f88 <uxr_prepare_reliable_buffer_to_write+0xe8>
 8013f86:	46b9      	mov	r9, r7
 8013f88:	e9d4 3200 	ldrd	r3, r2, [r4]
 8013f8c:	fbb5 f1fc 	udiv	r1, r5, ip
 8013f90:	fb0c 5111 	mls	r1, ip, r1, r5
 8013f94:	b289      	uxth	r1, r1
 8013f96:	fbb2 f2fc 	udiv	r2, r2, ip
 8013f9a:	fb01 f102 	mul.w	r1, r1, r2
 8013f9e:	3104      	adds	r1, #4
 8013fa0:	4419      	add	r1, r3
 8013fa2:	4632      	mov	r2, r6
 8013fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013fa8:	9300      	str	r3, [sp, #0]
 8013faa:	4658      	mov	r0, fp
 8013fac:	2300      	movs	r3, #0
 8013fae:	f7f6 fad5 	bl	800a55c <ucdr_init_buffer_origin_offset>
 8013fb2:	464a      	mov	r2, r9
 8013fb4:	2300      	movs	r3, #0
 8013fb6:	210d      	movs	r1, #13
 8013fb8:	4658      	mov	r0, fp
 8013fba:	f7fa feb9 	bl	800ed30 <uxr_buffer_submessage_header>
 8013fbe:	8920      	ldrh	r0, [r4, #8]
 8013fc0:	fbb5 f3f0 	udiv	r3, r5, r0
 8013fc4:	e9d4 2100 	ldrd	r2, r1, [r4]
 8013fc8:	fb00 5313 	mls	r3, r0, r3, r5
 8013fcc:	b29b      	uxth	r3, r3
 8013fce:	fbb1 f1f0 	udiv	r1, r1, r0
 8013fd2:	fb03 f301 	mul.w	r3, r3, r1
 8013fd6:	4628      	mov	r0, r5
 8013fd8:	50d6      	str	r6, [r2, r3]
 8013fda:	2101      	movs	r1, #1
 8013fdc:	f000 f9c4 	bl	8014368 <uxr_seq_num_add>
 8013fe0:	f108 0801 	add.w	r8, r8, #1
 8013fe4:	fa1f f388 	uxth.w	r3, r8
 8013fe8:	459a      	cmp	sl, r3
 8013fea:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8013fee:	4605      	mov	r5, r0
 8013ff0:	d8c9      	bhi.n	8013f86 <uxr_prepare_reliable_buffer_to_write+0xe6>
 8013ff2:	fbb5 f1fc 	udiv	r1, r5, ip
 8013ff6:	fb0c 5111 	mls	r1, ip, r1, r5
 8013ffa:	b289      	uxth	r1, r1
 8013ffc:	6863      	ldr	r3, [r4, #4]
 8013ffe:	fbb3 fcfc 	udiv	ip, r3, ip
 8014002:	6823      	ldr	r3, [r4, #0]
 8014004:	fb01 f10c 	mul.w	r1, r1, ip
 8014008:	3104      	adds	r1, #4
 801400a:	4419      	add	r1, r3
 801400c:	4632      	mov	r2, r6
 801400e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014012:	9300      	str	r3, [sp, #0]
 8014014:	4658      	mov	r0, fp
 8014016:	2300      	movs	r3, #0
 8014018:	f7f6 faa0 	bl	800a55c <ucdr_init_buffer_origin_offset>
 801401c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8014020:	4658      	mov	r0, fp
 8014022:	fa1f f288 	uxth.w	r2, r8
 8014026:	2302      	movs	r3, #2
 8014028:	210d      	movs	r1, #13
 801402a:	f7fa fe81 	bl	800ed30 <uxr_buffer_submessage_header>
 801402e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8014032:	8921      	ldrh	r1, [r4, #8]
 8014034:	9f03      	ldr	r7, [sp, #12]
 8014036:	9307      	str	r3, [sp, #28]
 8014038:	9b05      	ldr	r3, [sp, #20]
 801403a:	7b26      	ldrb	r6, [r4, #12]
 801403c:	fbb5 f0f1 	udiv	r0, r5, r1
 8014040:	fbb2 f2f1 	udiv	r2, r2, r1
 8014044:	fb01 5010 	mls	r0, r1, r0, r5
 8014048:	1d39      	adds	r1, r7, #4
 801404a:	440b      	add	r3, r1
 801404c:	b280      	uxth	r0, r0
 801404e:	fb00 f002 	mul.w	r0, r0, r2
 8014052:	4619      	mov	r1, r3
 8014054:	3604      	adds	r6, #4
 8014056:	9b07      	ldr	r3, [sp, #28]
 8014058:	9a04      	ldr	r2, [sp, #16]
 801405a:	4446      	add	r6, r8
 801405c:	501e      	str	r6, [r3, r0]
 801405e:	9e06      	ldr	r6, [sp, #24]
 8014060:	3a08      	subs	r2, #8
 8014062:	1bd2      	subs	r2, r2, r7
 8014064:	4630      	mov	r0, r6
 8014066:	f7f6 fa8b 	bl	800a580 <ucdr_init_buffer>
 801406a:	4630      	mov	r0, r6
 801406c:	493d      	ldr	r1, [pc, #244]	; (8014164 <uxr_prepare_reliable_buffer_to_write+0x2c4>)
 801406e:	4622      	mov	r2, r4
 8014070:	f7f6 fa5c 	bl	800a52c <ucdr_set_on_full_buffer_callback>
 8014074:	2001      	movs	r0, #1
 8014076:	81e5      	strh	r5, [r4, #14]
 8014078:	b011      	add	sp, #68	; 0x44
 801407a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801407e:	2101      	movs	r1, #1
 8014080:	89e0      	ldrh	r0, [r4, #14]
 8014082:	f000 f971 	bl	8014368 <uxr_seq_num_add>
 8014086:	8921      	ldrh	r1, [r4, #8]
 8014088:	4605      	mov	r5, r0
 801408a:	8a60      	ldrh	r0, [r4, #18]
 801408c:	f000 f96c 	bl	8014368 <uxr_seq_num_add>
 8014090:	4601      	mov	r1, r0
 8014092:	4628      	mov	r0, r5
 8014094:	f000 f970 	bl	8014378 <uxr_seq_num_cmp>
 8014098:	2800      	cmp	r0, #0
 801409a:	dd2a      	ble.n	80140f2 <uxr_prepare_reliable_buffer_to_write+0x252>
 801409c:	2000      	movs	r0, #0
 801409e:	b011      	add	sp, #68	; 0x44
 80140a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140a4:	8921      	ldrh	r1, [r4, #8]
 80140a6:	8a60      	ldrh	r0, [r4, #18]
 80140a8:	f000 f95e 	bl	8014368 <uxr_seq_num_add>
 80140ac:	4601      	mov	r1, r0
 80140ae:	4628      	mov	r0, r5
 80140b0:	f000 f962 	bl	8014378 <uxr_seq_num_cmp>
 80140b4:	2800      	cmp	r0, #0
 80140b6:	dcf1      	bgt.n	801409c <uxr_prepare_reliable_buffer_to_write+0x1fc>
 80140b8:	8921      	ldrh	r1, [r4, #8]
 80140ba:	fbb5 f3f1 	udiv	r3, r5, r1
 80140be:	e9d4 4200 	ldrd	r4, r2, [r4]
 80140c2:	fb01 5313 	mls	r3, r1, r3, r5
 80140c6:	b29b      	uxth	r3, r3
 80140c8:	fbb2 f2f1 	udiv	r2, r2, r1
 80140cc:	fb03 f302 	mul.w	r3, r3, r2
 80140d0:	e9dd 1005 	ldrd	r1, r0, [sp, #20]
 80140d4:	50e7      	str	r7, [r4, r3]
 80140d6:	9b03      	ldr	r3, [sp, #12]
 80140d8:	9300      	str	r3, [sp, #0]
 80140da:	463a      	mov	r2, r7
 80140dc:	2300      	movs	r3, #0
 80140de:	f7f6 fa3d 	bl	800a55c <ucdr_init_buffer_origin_offset>
 80140e2:	2001      	movs	r0, #1
 80140e4:	e7db      	b.n	801409e <uxr_prepare_reliable_buffer_to_write+0x1fe>
 80140e6:	f10a 0a01 	add.w	sl, sl, #1
 80140ea:	fa1f fa8a 	uxth.w	sl, sl
 80140ee:	9307      	str	r3, [sp, #28]
 80140f0:	e73c      	b.n	8013f6c <uxr_prepare_reliable_buffer_to_write+0xcc>
 80140f2:	8920      	ldrh	r0, [r4, #8]
 80140f4:	fbb5 f3f0 	udiv	r3, r5, r0
 80140f8:	fb00 5313 	mls	r3, r0, r3, r5
 80140fc:	b29b      	uxth	r3, r3
 80140fe:	6862      	ldr	r2, [r4, #4]
 8014100:	6821      	ldr	r1, [r4, #0]
 8014102:	fbb2 f0f0 	udiv	r0, r2, r0
 8014106:	fb03 f300 	mul.w	r3, r3, r0
 801410a:	7b22      	ldrb	r2, [r4, #12]
 801410c:	9806      	ldr	r0, [sp, #24]
 801410e:	3304      	adds	r3, #4
 8014110:	4419      	add	r1, r3
 8014112:	4442      	add	r2, r8
 8014114:	f841 2c04 	str.w	r2, [r1, #-4]
 8014118:	7b23      	ldrb	r3, [r4, #12]
 801411a:	9300      	str	r3, [sp, #0]
 801411c:	2300      	movs	r3, #0
 801411e:	f7f6 fa1d 	bl	800a55c <ucdr_init_buffer_origin_offset>
 8014122:	81e5      	strh	r5, [r4, #14]
 8014124:	2001      	movs	r0, #1
 8014126:	e7ba      	b.n	801409e <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8014128:	4628      	mov	r0, r5
 801412a:	2101      	movs	r1, #1
 801412c:	f000 f91c 	bl	8014368 <uxr_seq_num_add>
 8014130:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014134:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014138:	fbb3 f1fc 	udiv	r1, r3, ip
 801413c:	fbb0 f3fc 	udiv	r3, r0, ip
 8014140:	fb0c 0313 	mls	r3, ip, r3, r0
 8014144:	b29b      	uxth	r3, r3
 8014146:	fb03 f301 	mul.w	r3, r3, r1
 801414a:	3304      	adds	r3, #4
 801414c:	18d3      	adds	r3, r2, r3
 801414e:	9305      	str	r3, [sp, #20]
 8014150:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8014154:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8014158:	9303      	str	r3, [sp, #12]
 801415a:	4605      	mov	r5, r0
 801415c:	e6d4      	b.n	8013f08 <uxr_prepare_reliable_buffer_to_write+0x68>
 801415e:	4660      	mov	r0, ip
 8014160:	e6ee      	b.n	8013f40 <uxr_prepare_reliable_buffer_to_write+0xa0>
 8014162:	bf00      	nop
 8014164:	08013d99 	.word	0x08013d99

08014168 <uxr_prepare_next_reliable_buffer_to_send>:
 8014168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801416c:	4605      	mov	r5, r0
 801416e:	4688      	mov	r8, r1
 8014170:	8a00      	ldrh	r0, [r0, #16]
 8014172:	2101      	movs	r1, #1
 8014174:	4617      	mov	r7, r2
 8014176:	461e      	mov	r6, r3
 8014178:	f000 f8f6 	bl	8014368 <uxr_seq_num_add>
 801417c:	8030      	strh	r0, [r6, #0]
 801417e:	892a      	ldrh	r2, [r5, #8]
 8014180:	fbb0 f3f2 	udiv	r3, r0, r2
 8014184:	fb02 0413 	mls	r4, r2, r3, r0
 8014188:	b2a4      	uxth	r4, r4
 801418a:	686b      	ldr	r3, [r5, #4]
 801418c:	fbb3 f2f2 	udiv	r2, r3, r2
 8014190:	682b      	ldr	r3, [r5, #0]
 8014192:	89e9      	ldrh	r1, [r5, #14]
 8014194:	fb04 f402 	mul.w	r4, r4, r2
 8014198:	3404      	adds	r4, #4
 801419a:	4423      	add	r3, r4
 801419c:	f8c8 3000 	str.w	r3, [r8]
 80141a0:	682b      	ldr	r3, [r5, #0]
 80141a2:	441c      	add	r4, r3
 80141a4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80141a8:	603b      	str	r3, [r7, #0]
 80141aa:	f000 f8e5 	bl	8014378 <uxr_seq_num_cmp>
 80141ae:	2800      	cmp	r0, #0
 80141b0:	dd02      	ble.n	80141b8 <uxr_prepare_next_reliable_buffer_to_send+0x50>
 80141b2:	2000      	movs	r0, #0
 80141b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141b8:	683a      	ldr	r2, [r7, #0]
 80141ba:	7b2b      	ldrb	r3, [r5, #12]
 80141bc:	429a      	cmp	r2, r3
 80141be:	d9f8      	bls.n	80141b2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80141c0:	8a69      	ldrh	r1, [r5, #18]
 80141c2:	8a28      	ldrh	r0, [r5, #16]
 80141c4:	f000 f8d4 	bl	8014370 <uxr_seq_num_sub>
 80141c8:	892b      	ldrh	r3, [r5, #8]
 80141ca:	4283      	cmp	r3, r0
 80141cc:	d0f1      	beq.n	80141b2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80141ce:	8830      	ldrh	r0, [r6, #0]
 80141d0:	89eb      	ldrh	r3, [r5, #14]
 80141d2:	8228      	strh	r0, [r5, #16]
 80141d4:	4298      	cmp	r0, r3
 80141d6:	d002      	beq.n	80141de <uxr_prepare_next_reliable_buffer_to_send+0x76>
 80141d8:	2001      	movs	r0, #1
 80141da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141de:	2101      	movs	r1, #1
 80141e0:	f000 f8c2 	bl	8014368 <uxr_seq_num_add>
 80141e4:	81e8      	strh	r0, [r5, #14]
 80141e6:	2001      	movs	r0, #1
 80141e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080141ec <uxr_update_output_stream_heartbeat_timestamp>:
 80141ec:	b5d0      	push	{r4, r6, r7, lr}
 80141ee:	8a01      	ldrh	r1, [r0, #16]
 80141f0:	4604      	mov	r4, r0
 80141f2:	8a40      	ldrh	r0, [r0, #18]
 80141f4:	4616      	mov	r6, r2
 80141f6:	461f      	mov	r7, r3
 80141f8:	f000 f8be 	bl	8014378 <uxr_seq_num_cmp>
 80141fc:	2800      	cmp	r0, #0
 80141fe:	db07      	blt.n	8014210 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8014200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014204:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014208:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801420c:	2000      	movs	r0, #0
 801420e:	bdd0      	pop	{r4, r6, r7, pc}
 8014210:	f894 0020 	ldrb.w	r0, [r4, #32]
 8014214:	b948      	cbnz	r0, 801422a <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 8014216:	2301      	movs	r3, #1
 8014218:	f884 3020 	strb.w	r3, [r4, #32]
 801421c:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 8014220:	f147 0200 	adc.w	r2, r7, #0
 8014224:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8014228:	bdd0      	pop	{r4, r6, r7, pc}
 801422a:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801422e:	4296      	cmp	r6, r2
 8014230:	eb77 0303 	sbcs.w	r3, r7, r3
 8014234:	bfa5      	ittet	ge
 8014236:	3001      	addge	r0, #1
 8014238:	f884 0020 	strbge.w	r0, [r4, #32]
 801423c:	2000      	movlt	r0, #0
 801423e:	2001      	movge	r0, #1
 8014240:	e7ec      	b.n	801421c <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8014242:	bf00      	nop

08014244 <uxr_begin_output_nack_buffer_it>:
 8014244:	8a40      	ldrh	r0, [r0, #18]
 8014246:	4770      	bx	lr

08014248 <uxr_next_reliable_nack_buffer_to_send>:
 8014248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801424c:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 8014250:	f1b9 0f00 	cmp.w	r9, #0
 8014254:	d011      	beq.n	801427a <uxr_next_reliable_nack_buffer_to_send+0x32>
 8014256:	4605      	mov	r5, r0
 8014258:	8818      	ldrh	r0, [r3, #0]
 801425a:	460f      	mov	r7, r1
 801425c:	4690      	mov	r8, r2
 801425e:	461e      	mov	r6, r3
 8014260:	2101      	movs	r1, #1
 8014262:	f000 f881 	bl	8014368 <uxr_seq_num_add>
 8014266:	8030      	strh	r0, [r6, #0]
 8014268:	8a29      	ldrh	r1, [r5, #16]
 801426a:	f000 f885 	bl	8014378 <uxr_seq_num_cmp>
 801426e:	2800      	cmp	r0, #0
 8014270:	dd06      	ble.n	8014280 <uxr_next_reliable_nack_buffer_to_send+0x38>
 8014272:	f04f 0900 	mov.w	r9, #0
 8014276:	f885 9021 	strb.w	r9, [r5, #33]	; 0x21
 801427a:	4648      	mov	r0, r9
 801427c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014280:	892a      	ldrh	r2, [r5, #8]
 8014282:	8830      	ldrh	r0, [r6, #0]
 8014284:	fbb0 f4f2 	udiv	r4, r0, r2
 8014288:	fb02 0414 	mls	r4, r2, r4, r0
 801428c:	b2a4      	uxth	r4, r4
 801428e:	686b      	ldr	r3, [r5, #4]
 8014290:	fbb3 f2f2 	udiv	r2, r3, r2
 8014294:	682b      	ldr	r3, [r5, #0]
 8014296:	fb04 f402 	mul.w	r4, r4, r2
 801429a:	3404      	adds	r4, #4
 801429c:	4423      	add	r3, r4
 801429e:	603b      	str	r3, [r7, #0]
 80142a0:	682b      	ldr	r3, [r5, #0]
 80142a2:	441c      	add	r4, r3
 80142a4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80142a8:	f8c8 3000 	str.w	r3, [r8]
 80142ac:	7b2a      	ldrb	r2, [r5, #12]
 80142ae:	429a      	cmp	r2, r3
 80142b0:	d0d6      	beq.n	8014260 <uxr_next_reliable_nack_buffer_to_send+0x18>
 80142b2:	4648      	mov	r0, r9
 80142b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080142b8 <uxr_process_acknack>:
 80142b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142ba:	4604      	mov	r4, r0
 80142bc:	460e      	mov	r6, r1
 80142be:	4610      	mov	r0, r2
 80142c0:	2101      	movs	r1, #1
 80142c2:	f000 f855 	bl	8014370 <uxr_seq_num_sub>
 80142c6:	8a61      	ldrh	r1, [r4, #18]
 80142c8:	f000 f852 	bl	8014370 <uxr_seq_num_sub>
 80142cc:	b1c0      	cbz	r0, 8014300 <uxr_process_acknack+0x48>
 80142ce:	4605      	mov	r5, r0
 80142d0:	2700      	movs	r7, #0
 80142d2:	2101      	movs	r1, #1
 80142d4:	8a60      	ldrh	r0, [r4, #18]
 80142d6:	f000 f847 	bl	8014368 <uxr_seq_num_add>
 80142da:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80142de:	fbb0 f3fc 	udiv	r3, r0, ip
 80142e2:	e9d4 2100 	ldrd	r2, r1, [r4]
 80142e6:	fb0c 0313 	mls	r3, ip, r3, r0
 80142ea:	b29b      	uxth	r3, r3
 80142ec:	fbb1 f1fc 	udiv	r1, r1, ip
 80142f0:	3701      	adds	r7, #1
 80142f2:	fb03 f301 	mul.w	r3, r3, r1
 80142f6:	42bd      	cmp	r5, r7
 80142f8:	7b21      	ldrb	r1, [r4, #12]
 80142fa:	8260      	strh	r0, [r4, #18]
 80142fc:	50d1      	str	r1, [r2, r3]
 80142fe:	d1e8      	bne.n	80142d2 <uxr_process_acknack+0x1a>
 8014300:	3e00      	subs	r6, #0
 8014302:	f04f 0300 	mov.w	r3, #0
 8014306:	bf18      	it	ne
 8014308:	2601      	movne	r6, #1
 801430a:	f884 3020 	strb.w	r3, [r4, #32]
 801430e:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8014312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014314 <uxr_is_output_up_to_date>:
 8014314:	8a01      	ldrh	r1, [r0, #16]
 8014316:	8a40      	ldrh	r0, [r0, #18]
 8014318:	b508      	push	{r3, lr}
 801431a:	f000 f82d 	bl	8014378 <uxr_seq_num_cmp>
 801431e:	fab0 f080 	clz	r0, r0
 8014322:	0940      	lsrs	r0, r0, #5
 8014324:	bd08      	pop	{r3, pc}
 8014326:	bf00      	nop

08014328 <get_available_free_slots>:
 8014328:	8901      	ldrh	r1, [r0, #8]
 801432a:	b1d9      	cbz	r1, 8014364 <get_available_free_slots+0x3c>
 801432c:	b4f0      	push	{r4, r5, r6, r7}
 801432e:	2400      	movs	r4, #0
 8014330:	6845      	ldr	r5, [r0, #4]
 8014332:	6807      	ldr	r7, [r0, #0]
 8014334:	7b06      	ldrb	r6, [r0, #12]
 8014336:	fbb5 f5f1 	udiv	r5, r5, r1
 801433a:	4620      	mov	r0, r4
 801433c:	4622      	mov	r2, r4
 801433e:	fbb2 f3f1 	udiv	r3, r2, r1
 8014342:	fb01 2313 	mls	r3, r1, r3, r2
 8014346:	b29b      	uxth	r3, r3
 8014348:	fb05 7303 	mla	r3, r5, r3, r7
 801434c:	3401      	adds	r4, #1
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	429e      	cmp	r6, r3
 8014352:	bf08      	it	eq
 8014354:	3001      	addeq	r0, #1
 8014356:	b2a2      	uxth	r2, r4
 8014358:	bf08      	it	eq
 801435a:	b280      	uxtheq	r0, r0
 801435c:	428a      	cmp	r2, r1
 801435e:	d3ee      	bcc.n	801433e <get_available_free_slots+0x16>
 8014360:	bcf0      	pop	{r4, r5, r6, r7}
 8014362:	4770      	bx	lr
 8014364:	4608      	mov	r0, r1
 8014366:	4770      	bx	lr

08014368 <uxr_seq_num_add>:
 8014368:	4408      	add	r0, r1
 801436a:	b280      	uxth	r0, r0
 801436c:	4770      	bx	lr
 801436e:	bf00      	nop

08014370 <uxr_seq_num_sub>:
 8014370:	1a40      	subs	r0, r0, r1
 8014372:	b280      	uxth	r0, r0
 8014374:	4770      	bx	lr
 8014376:	bf00      	nop

08014378 <uxr_seq_num_cmp>:
 8014378:	4288      	cmp	r0, r1
 801437a:	d011      	beq.n	80143a0 <uxr_seq_num_cmp+0x28>
 801437c:	d309      	bcc.n	8014392 <uxr_seq_num_cmp+0x1a>
 801437e:	4288      	cmp	r0, r1
 8014380:	d910      	bls.n	80143a4 <uxr_seq_num_cmp+0x2c>
 8014382:	1a40      	subs	r0, r0, r1
 8014384:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8014388:	bfd4      	ite	le
 801438a:	2001      	movle	r0, #1
 801438c:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8014390:	4770      	bx	lr
 8014392:	1a0b      	subs	r3, r1, r0
 8014394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014398:	daf1      	bge.n	801437e <uxr_seq_num_cmp+0x6>
 801439a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801439e:	4770      	bx	lr
 80143a0:	2000      	movs	r0, #0
 80143a2:	4770      	bx	lr
 80143a4:	2001      	movs	r0, #1
 80143a6:	4770      	bx	lr

080143a8 <uxr_init_framing_io>:
 80143a8:	2300      	movs	r3, #0
 80143aa:	7041      	strb	r1, [r0, #1]
 80143ac:	7003      	strb	r3, [r0, #0]
 80143ae:	8583      	strh	r3, [r0, #44]	; 0x2c
 80143b0:	4770      	bx	lr
 80143b2:	bf00      	nop

080143b4 <uxr_write_framed_msg>:
 80143b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143b8:	7845      	ldrb	r5, [r0, #1]
 80143ba:	b085      	sub	sp, #20
 80143bc:	4604      	mov	r4, r0
 80143be:	f1a5 0c7d 	sub.w	ip, r5, #125	; 0x7d
 80143c2:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 80143c6:	f1bc 0f01 	cmp.w	ip, #1
 80143ca:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80143ce:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80143d2:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
 80143d6:	460e      	mov	r6, r1
 80143d8:	4617      	mov	r7, r2
 80143da:	469b      	mov	fp, r3
 80143dc:	f240 8116 	bls.w	801460c <uxr_write_framed_msg+0x258>
 80143e0:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 80143e4:	2302      	movs	r3, #2
 80143e6:	2a01      	cmp	r2, #1
 80143e8:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 80143ec:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80143f0:	f240 8091 	bls.w	8014516 <uxr_write_framed_msg+0x162>
 80143f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80143f6:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 80143fa:	b2d9      	uxtb	r1, r3
 80143fc:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8014400:	2203      	movs	r2, #3
 8014402:	2b01      	cmp	r3, #1
 8014404:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014408:	f240 809a 	bls.w	8014540 <uxr_write_framed_msg+0x18c>
 801440c:	18a3      	adds	r3, r4, r2
 801440e:	3201      	adds	r2, #1
 8014410:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8014414:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014418:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801441a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801441e:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8014422:	2901      	cmp	r1, #1
 8014424:	eb04 0102 	add.w	r1, r4, r2
 8014428:	f240 8101 	bls.w	801462e <uxr_write_framed_msg+0x27a>
 801442c:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8014430:	3201      	adds	r2, #1
 8014432:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014434:	b2d2      	uxtb	r2, r2
 8014436:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801443a:	2b00      	cmp	r3, #0
 801443c:	f000 8106 	beq.w	801464c <uxr_write_framed_msg+0x298>
 8014440:	f04f 0a00 	mov.w	sl, #0
 8014444:	46d1      	mov	r9, sl
 8014446:	f81b 3009 	ldrb.w	r3, [fp, r9]
 801444a:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 801444e:	2901      	cmp	r1, #1
 8014450:	f240 80a3 	bls.w	801459a <uxr_write_framed_msg+0x1e6>
 8014454:	2a29      	cmp	r2, #41	; 0x29
 8014456:	d87f      	bhi.n	8014558 <uxr_write_framed_msg+0x1a4>
 8014458:	18a1      	adds	r1, r4, r2
 801445a:	3201      	adds	r2, #1
 801445c:	b2d2      	uxtb	r2, r2
 801445e:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8014462:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014466:	ea8a 0303 	eor.w	r3, sl, r3
 801446a:	4984      	ldr	r1, [pc, #528]	; (801467c <uxr_write_framed_msg+0x2c8>)
 801446c:	b2db      	uxtb	r3, r3
 801446e:	f109 0901 	add.w	r9, r9, #1
 8014472:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014476:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 801447a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801447c:	454b      	cmp	r3, r9
 801447e:	d8e2      	bhi.n	8014446 <uxr_write_framed_msg+0x92>
 8014480:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8014484:	fa5f f98a 	uxtb.w	r9, sl
 8014488:	9301      	str	r3, [sp, #4]
 801448a:	f04f 0b00 	mov.w	fp, #0
 801448e:	f88d 900c 	strb.w	r9, [sp, #12]
 8014492:	f88d 300d 	strb.w	r3, [sp, #13]
 8014496:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 801449a:	fa5f f18a 	uxtb.w	r1, sl
 801449e:	2901      	cmp	r1, #1
 80144a0:	d920      	bls.n	80144e4 <uxr_write_framed_msg+0x130>
 80144a2:	2a29      	cmp	r2, #41	; 0x29
 80144a4:	f240 808b 	bls.w	80145be <uxr_write_framed_msg+0x20a>
 80144a8:	2500      	movs	r5, #0
 80144aa:	e000      	b.n	80144ae <uxr_write_framed_msg+0xfa>
 80144ac:	b160      	cbz	r0, 80144c8 <uxr_write_framed_msg+0x114>
 80144ae:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80144b2:	1b52      	subs	r2, r2, r5
 80144b4:	4421      	add	r1, r4
 80144b6:	4643      	mov	r3, r8
 80144b8:	4638      	mov	r0, r7
 80144ba:	47b0      	blx	r6
 80144bc:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80144c0:	4405      	add	r5, r0
 80144c2:	4295      	cmp	r5, r2
 80144c4:	d3f2      	bcc.n	80144ac <uxr_write_framed_msg+0xf8>
 80144c6:	d003      	beq.n	80144d0 <uxr_write_framed_msg+0x11c>
 80144c8:	2000      	movs	r0, #0
 80144ca:	b005      	add	sp, #20
 80144cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144d0:	fa5f f18a 	uxtb.w	r1, sl
 80144d4:	f04f 0300 	mov.w	r3, #0
 80144d8:	2901      	cmp	r1, #1
 80144da:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80144de:	f04f 0200 	mov.w	r2, #0
 80144e2:	d86c      	bhi.n	80145be <uxr_write_framed_msg+0x20a>
 80144e4:	1c51      	adds	r1, r2, #1
 80144e6:	b2c9      	uxtb	r1, r1
 80144e8:	2929      	cmp	r1, #41	; 0x29
 80144ea:	d8dd      	bhi.n	80144a8 <uxr_write_framed_msg+0xf4>
 80144ec:	18a0      	adds	r0, r4, r2
 80144ee:	3202      	adds	r2, #2
 80144f0:	f089 0920 	eor.w	r9, r9, #32
 80144f4:	b2d2      	uxtb	r2, r2
 80144f6:	4659      	mov	r1, fp
 80144f8:	f04f 037d 	mov.w	r3, #125	; 0x7d
 80144fc:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 8014500:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8014504:	f04f 0b01 	mov.w	fp, #1
 8014508:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801450c:	2900      	cmp	r1, #0
 801450e:	d162      	bne.n	80145d6 <uxr_write_framed_msg+0x222>
 8014510:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014514:	e7bf      	b.n	8014496 <uxr_write_framed_msg+0xe2>
 8014516:	2204      	movs	r2, #4
 8014518:	2503      	movs	r5, #3
 801451a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801451c:	4423      	add	r3, r4
 801451e:	b2c9      	uxtb	r1, r1
 8014520:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8014524:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 8014528:	4425      	add	r5, r4
 801452a:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 801452e:	f080 0020 	eor.w	r0, r0, #32
 8014532:	2b01      	cmp	r3, #1
 8014534:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 8014538:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801453c:	f63f af66 	bhi.w	801440c <uxr_write_framed_msg+0x58>
 8014540:	18a3      	adds	r3, r4, r2
 8014542:	f081 0120 	eor.w	r1, r1, #32
 8014546:	3202      	adds	r2, #2
 8014548:	207d      	movs	r0, #125	; 0x7d
 801454a:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 801454e:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
 8014552:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014556:	e75f      	b.n	8014418 <uxr_write_framed_msg+0x64>
 8014558:	2500      	movs	r5, #0
 801455a:	e001      	b.n	8014560 <uxr_write_framed_msg+0x1ac>
 801455c:	2800      	cmp	r0, #0
 801455e:	d0b3      	beq.n	80144c8 <uxr_write_framed_msg+0x114>
 8014560:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8014564:	1b52      	subs	r2, r2, r5
 8014566:	4421      	add	r1, r4
 8014568:	4643      	mov	r3, r8
 801456a:	4638      	mov	r0, r7
 801456c:	47b0      	blx	r6
 801456e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8014572:	4405      	add	r5, r0
 8014574:	4295      	cmp	r5, r2
 8014576:	d3f1      	bcc.n	801455c <uxr_write_framed_msg+0x1a8>
 8014578:	d1a6      	bne.n	80144c8 <uxr_write_framed_msg+0x114>
 801457a:	f04f 0300 	mov.w	r3, #0
 801457e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8014582:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014584:	454b      	cmp	r3, r9
 8014586:	d971      	bls.n	801466c <uxr_write_framed_msg+0x2b8>
 8014588:	f81b 3009 	ldrb.w	r3, [fp, r9]
 801458c:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8014590:	2901      	cmp	r1, #1
 8014592:	f04f 0200 	mov.w	r2, #0
 8014596:	f63f af5d 	bhi.w	8014454 <uxr_write_framed_msg+0xa0>
 801459a:	1c51      	adds	r1, r2, #1
 801459c:	b2c9      	uxtb	r1, r1
 801459e:	2929      	cmp	r1, #41	; 0x29
 80145a0:	d8da      	bhi.n	8014558 <uxr_write_framed_msg+0x1a4>
 80145a2:	18a0      	adds	r0, r4, r2
 80145a4:	3202      	adds	r2, #2
 80145a6:	b2d2      	uxtb	r2, r2
 80145a8:	f083 0120 	eor.w	r1, r3, #32
 80145ac:	f04f 057d 	mov.w	r5, #125	; 0x7d
 80145b0:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 80145b4:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 80145b8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80145bc:	e753      	b.n	8014466 <uxr_write_framed_msg+0xb2>
 80145be:	18a0      	adds	r0, r4, r2
 80145c0:	3201      	adds	r2, #1
 80145c2:	b2d2      	uxtb	r2, r2
 80145c4:	4659      	mov	r1, fp
 80145c6:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 80145ca:	f04f 0b01 	mov.w	fp, #1
 80145ce:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80145d2:	2900      	cmp	r1, #0
 80145d4:	d09c      	beq.n	8014510 <uxr_write_framed_msg+0x15c>
 80145d6:	2500      	movs	r5, #0
 80145d8:	e002      	b.n	80145e0 <uxr_write_framed_msg+0x22c>
 80145da:	2800      	cmp	r0, #0
 80145dc:	f43f af74 	beq.w	80144c8 <uxr_write_framed_msg+0x114>
 80145e0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80145e4:	1b52      	subs	r2, r2, r5
 80145e6:	4421      	add	r1, r4
 80145e8:	4643      	mov	r3, r8
 80145ea:	4638      	mov	r0, r7
 80145ec:	47b0      	blx	r6
 80145ee:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80145f2:	4405      	add	r5, r0
 80145f4:	4295      	cmp	r5, r2
 80145f6:	d3f0      	bcc.n	80145da <uxr_write_framed_msg+0x226>
 80145f8:	f47f af66 	bne.w	80144c8 <uxr_write_framed_msg+0x114>
 80145fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80145fe:	2300      	movs	r3, #0
 8014600:	b290      	uxth	r0, r2
 8014602:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8014606:	b005      	add	sp, #20
 8014608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801460c:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8014610:	f085 0520 	eor.w	r5, r5, #32
 8014614:	2303      	movs	r3, #3
 8014616:	217d      	movs	r1, #125	; 0x7d
 8014618:	2a01      	cmp	r2, #1
 801461a:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
 801461e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8014622:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8014626:	d814      	bhi.n	8014652 <uxr_write_framed_msg+0x29e>
 8014628:	2205      	movs	r2, #5
 801462a:	2504      	movs	r5, #4
 801462c:	e775      	b.n	801451a <uxr_write_framed_msg+0x166>
 801462e:	f083 0320 	eor.w	r3, r3, #32
 8014632:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 8014636:	3202      	adds	r2, #2
 8014638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801463a:	b2d2      	uxtb	r2, r2
 801463c:	207d      	movs	r0, #125	; 0x7d
 801463e:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8014642:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014646:	2b00      	cmp	r3, #0
 8014648:	f47f aefa 	bne.w	8014440 <uxr_write_framed_msg+0x8c>
 801464c:	9301      	str	r3, [sp, #4]
 801464e:	4699      	mov	r9, r3
 8014650:	e71b      	b.n	801448a <uxr_write_framed_msg+0xd6>
 8014652:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014654:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8014658:	b2d9      	uxtb	r1, r3
 801465a:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 801465e:	2204      	movs	r2, #4
 8014660:	2b01      	cmp	r3, #1
 8014662:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014666:	f63f aed1 	bhi.w	801440c <uxr_write_framed_msg+0x58>
 801466a:	e769      	b.n	8014540 <uxr_write_framed_msg+0x18c>
 801466c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8014670:	fa5f f98a 	uxtb.w	r9, sl
 8014674:	9301      	str	r3, [sp, #4]
 8014676:	2200      	movs	r2, #0
 8014678:	e707      	b.n	801448a <uxr_write_framed_msg+0xd6>
 801467a:	bf00      	nop
 801467c:	08016f5c 	.word	0x08016f5c

08014680 <uxr_framing_read_transport>:
 8014680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014684:	4604      	mov	r4, r0
 8014686:	b083      	sub	sp, #12
 8014688:	461f      	mov	r7, r3
 801468a:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 801468e:	4689      	mov	r9, r1
 8014690:	4692      	mov	sl, r2
 8014692:	f7fa fb93 	bl	800edbc <uxr_millis>
 8014696:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801469a:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 801469e:	42b3      	cmp	r3, r6
 80146a0:	4680      	mov	r8, r0
 80146a2:	d05f      	beq.n	8014764 <uxr_framing_read_transport+0xe4>
 80146a4:	d81b      	bhi.n	80146de <uxr_framing_read_transport+0x5e>
 80146a6:	1e75      	subs	r5, r6, #1
 80146a8:	1aed      	subs	r5, r5, r3
 80146aa:	b2ed      	uxtb	r5, r5
 80146ac:	2600      	movs	r6, #0
 80146ae:	455d      	cmp	r5, fp
 80146b0:	d81e      	bhi.n	80146f0 <uxr_framing_read_transport+0x70>
 80146b2:	19ab      	adds	r3, r5, r6
 80146b4:	455b      	cmp	r3, fp
 80146b6:	bf84      	itt	hi
 80146b8:	ebab 0605 	subhi.w	r6, fp, r5
 80146bc:	b2f6      	uxtbhi	r6, r6
 80146be:	b9e5      	cbnz	r5, 80146fa <uxr_framing_read_transport+0x7a>
 80146c0:	f04f 0b00 	mov.w	fp, #0
 80146c4:	f7fa fb7a 	bl	800edbc <uxr_millis>
 80146c8:	683b      	ldr	r3, [r7, #0]
 80146ca:	eba0 0008 	sub.w	r0, r0, r8
 80146ce:	1a1b      	subs	r3, r3, r0
 80146d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80146d4:	4658      	mov	r0, fp
 80146d6:	603b      	str	r3, [r7, #0]
 80146d8:	b003      	add	sp, #12
 80146da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146de:	2e00      	cmp	r6, #0
 80146e0:	d048      	beq.n	8014774 <uxr_framing_read_transport+0xf4>
 80146e2:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 80146e6:	b2ed      	uxtb	r5, r5
 80146e8:	3e01      	subs	r6, #1
 80146ea:	455d      	cmp	r5, fp
 80146ec:	b2f6      	uxtb	r6, r6
 80146ee:	d9e0      	bls.n	80146b2 <uxr_framing_read_transport+0x32>
 80146f0:	fa5f f58b 	uxtb.w	r5, fp
 80146f4:	2600      	movs	r6, #0
 80146f6:	2d00      	cmp	r5, #0
 80146f8:	d0e2      	beq.n	80146c0 <uxr_framing_read_transport+0x40>
 80146fa:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80146fe:	3102      	adds	r1, #2
 8014700:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014702:	9300      	str	r3, [sp, #0]
 8014704:	683b      	ldr	r3, [r7, #0]
 8014706:	4421      	add	r1, r4
 8014708:	462a      	mov	r2, r5
 801470a:	4650      	mov	r0, sl
 801470c:	47c8      	blx	r9
 801470e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8014712:	4a1b      	ldr	r2, [pc, #108]	; (8014780 <uxr_framing_read_transport+0x100>)
 8014714:	4403      	add	r3, r0
 8014716:	0859      	lsrs	r1, r3, #1
 8014718:	fba2 2101 	umull	r2, r1, r2, r1
 801471c:	0889      	lsrs	r1, r1, #2
 801471e:	222a      	movs	r2, #42	; 0x2a
 8014720:	fb02 3111 	mls	r1, r2, r1, r3
 8014724:	4683      	mov	fp, r0
 8014726:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 801472a:	2800      	cmp	r0, #0
 801472c:	d0c8      	beq.n	80146c0 <uxr_framing_read_transport+0x40>
 801472e:	42a8      	cmp	r0, r5
 8014730:	d1c8      	bne.n	80146c4 <uxr_framing_read_transport+0x44>
 8014732:	b31e      	cbz	r6, 801477c <uxr_framing_read_transport+0xfc>
 8014734:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014736:	9300      	str	r3, [sp, #0]
 8014738:	3102      	adds	r1, #2
 801473a:	4421      	add	r1, r4
 801473c:	4632      	mov	r2, r6
 801473e:	2300      	movs	r3, #0
 8014740:	4650      	mov	r0, sl
 8014742:	47c8      	blx	r9
 8014744:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8014748:	490d      	ldr	r1, [pc, #52]	; (8014780 <uxr_framing_read_transport+0x100>)
 801474a:	181a      	adds	r2, r3, r0
 801474c:	0853      	lsrs	r3, r2, #1
 801474e:	fba1 1303 	umull	r1, r3, r1, r3
 8014752:	089b      	lsrs	r3, r3, #2
 8014754:	212a      	movs	r1, #42	; 0x2a
 8014756:	fb01 2313 	mls	r3, r1, r3, r2
 801475a:	eb00 0b05 	add.w	fp, r0, r5
 801475e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8014762:	e7af      	b.n	80146c4 <uxr_framing_read_transport+0x44>
 8014764:	2600      	movs	r6, #0
 8014766:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 801476a:	85a6      	strh	r6, [r4, #44]	; 0x2c
 801476c:	d9c0      	bls.n	80146f0 <uxr_framing_read_transport+0x70>
 801476e:	2102      	movs	r1, #2
 8014770:	2529      	movs	r5, #41	; 0x29
 8014772:	e7c5      	b.n	8014700 <uxr_framing_read_transport+0x80>
 8014774:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8014778:	b2ed      	uxtb	r5, r5
 801477a:	e798      	b.n	80146ae <uxr_framing_read_transport+0x2e>
 801477c:	46ab      	mov	fp, r5
 801477e:	e7a1      	b.n	80146c4 <uxr_framing_read_transport+0x44>
 8014780:	30c30c31 	.word	0x30c30c31

08014784 <uxr_read_framed_msg>:
 8014784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014788:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 801478c:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 8014790:	42ae      	cmp	r6, r5
 8014792:	b083      	sub	sp, #12
 8014794:	4604      	mov	r4, r0
 8014796:	461f      	mov	r7, r3
 8014798:	4689      	mov	r9, r1
 801479a:	4692      	mov	sl, r2
 801479c:	f000 817d 	beq.w	8014a9a <uxr_read_framed_msg+0x316>
 80147a0:	7823      	ldrb	r3, [r4, #0]
 80147a2:	4ecc      	ldr	r6, [pc, #816]	; (8014ad4 <uxr_read_framed_msg+0x350>)
 80147a4:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8014ad8 <uxr_read_framed_msg+0x354>
 80147a8:	2b07      	cmp	r3, #7
 80147aa:	d8fd      	bhi.n	80147a8 <uxr_read_framed_msg+0x24>
 80147ac:	e8df f013 	tbh	[pc, r3, lsl #1]
 80147b0:	00f40113 	.word	0x00f40113
 80147b4:	00b700d4 	.word	0x00b700d4
 80147b8:	004d008e 	.word	0x004d008e
 80147bc:	00080030 	.word	0x00080030
 80147c0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80147c4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80147c8:	4298      	cmp	r0, r3
 80147ca:	f000 8141 	beq.w	8014a50 <uxr_read_framed_msg+0x2cc>
 80147ce:	18e2      	adds	r2, r4, r3
 80147d0:	7891      	ldrb	r1, [r2, #2]
 80147d2:	297d      	cmp	r1, #125	; 0x7d
 80147d4:	f000 81a2 	beq.w	8014b1c <uxr_read_framed_msg+0x398>
 80147d8:	3301      	adds	r3, #1
 80147da:	085a      	lsrs	r2, r3, #1
 80147dc:	fba6 0202 	umull	r0, r2, r6, r2
 80147e0:	0892      	lsrs	r2, r2, #2
 80147e2:	202a      	movs	r0, #42	; 0x2a
 80147e4:	fb00 3312 	mls	r3, r0, r2, r3
 80147e8:	297e      	cmp	r1, #126	; 0x7e
 80147ea:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80147ee:	f000 8251 	beq.w	8014c94 <uxr_read_framed_msg+0x510>
 80147f2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80147f4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80147f6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80147fa:	b29b      	uxth	r3, r3
 80147fc:	2100      	movs	r1, #0
 80147fe:	429a      	cmp	r2, r3
 8014800:	86a3      	strh	r3, [r4, #52]	; 0x34
 8014802:	7021      	strb	r1, [r4, #0]
 8014804:	f000 8182 	beq.w	8014b0c <uxr_read_framed_msg+0x388>
 8014808:	2000      	movs	r0, #0
 801480a:	b003      	add	sp, #12
 801480c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014810:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8014814:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8014818:	4298      	cmp	r0, r3
 801481a:	f000 8128 	beq.w	8014a6e <uxr_read_framed_msg+0x2ea>
 801481e:	18e2      	adds	r2, r4, r3
 8014820:	7891      	ldrb	r1, [r2, #2]
 8014822:	297d      	cmp	r1, #125	; 0x7d
 8014824:	f000 8196 	beq.w	8014b54 <uxr_read_framed_msg+0x3d0>
 8014828:	3301      	adds	r3, #1
 801482a:	085a      	lsrs	r2, r3, #1
 801482c:	fba6 0202 	umull	r0, r2, r6, r2
 8014830:	0892      	lsrs	r2, r2, #2
 8014832:	202a      	movs	r0, #42	; 0x2a
 8014834:	fb00 3312 	mls	r3, r0, r2, r3
 8014838:	297e      	cmp	r1, #126	; 0x7e
 801483a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801483e:	f000 8219 	beq.w	8014c74 <uxr_read_framed_msg+0x4f0>
 8014842:	2307      	movs	r3, #7
 8014844:	86a1      	strh	r1, [r4, #52]	; 0x34
 8014846:	7023      	strb	r3, [r4, #0]
 8014848:	e7ae      	b.n	80147a8 <uxr_read_framed_msg+0x24>
 801484a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801484c:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 801484e:	429d      	cmp	r5, r3
 8014850:	d937      	bls.n	80148c2 <uxr_read_framed_msg+0x13e>
 8014852:	ee07 9a90 	vmov	s15, r9
 8014856:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801485a:	e01e      	b.n	801489a <uxr_read_framed_msg+0x116>
 801485c:	f89e e002 	ldrb.w	lr, [lr, #2]
 8014860:	f1be 0f7d 	cmp.w	lr, #125	; 0x7d
 8014864:	f000 80d2 	beq.w	8014a0c <uxr_read_framed_msg+0x288>
 8014868:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 801486c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8014870:	f000 8214 	beq.w	8014c9c <uxr_read_framed_msg+0x518>
 8014874:	f807 e003 	strb.w	lr, [r7, r3]
 8014878:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801487a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801487c:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 801487e:	ea80 010e 	eor.w	r1, r0, lr
 8014882:	b2c9      	uxtb	r1, r1
 8014884:	3301      	adds	r3, #1
 8014886:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 801488a:	b29b      	uxth	r3, r3
 801488c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8014890:	42ab      	cmp	r3, r5
 8014892:	86e2      	strh	r2, [r4, #54]	; 0x36
 8014894:	8663      	strh	r3, [r4, #50]	; 0x32
 8014896:	f080 8121 	bcs.w	8014adc <uxr_read_framed_msg+0x358>
 801489a:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 801489e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80148a2:	f101 0b01 	add.w	fp, r1, #1
 80148a6:	ea4f 025b 	mov.w	r2, fp, lsr #1
 80148aa:	fba6 9202 	umull	r9, r2, r6, r2
 80148ae:	0892      	lsrs	r2, r2, #2
 80148b0:	4288      	cmp	r0, r1
 80148b2:	eb04 0e01 	add.w	lr, r4, r1
 80148b6:	fb0c b212 	mls	r2, ip, r2, fp
 80148ba:	d1cf      	bne.n	801485c <uxr_read_framed_msg+0xd8>
 80148bc:	ee17 9a90 	vmov	r9, s15
 80148c0:	429d      	cmp	r5, r3
 80148c2:	f040 8112 	bne.w	8014aea <uxr_read_framed_msg+0x366>
 80148c6:	2306      	movs	r3, #6
 80148c8:	7023      	strb	r3, [r4, #0]
 80148ca:	e76d      	b.n	80147a8 <uxr_read_framed_msg+0x24>
 80148cc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80148d0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80148d4:	4298      	cmp	r0, r3
 80148d6:	f000 80bb 	beq.w	8014a50 <uxr_read_framed_msg+0x2cc>
 80148da:	18e2      	adds	r2, r4, r3
 80148dc:	7891      	ldrb	r1, [r2, #2]
 80148de:	297d      	cmp	r1, #125	; 0x7d
 80148e0:	f000 8153 	beq.w	8014b8a <uxr_read_framed_msg+0x406>
 80148e4:	3301      	adds	r3, #1
 80148e6:	085a      	lsrs	r2, r3, #1
 80148e8:	fba6 0202 	umull	r0, r2, r6, r2
 80148ec:	0892      	lsrs	r2, r2, #2
 80148ee:	202a      	movs	r0, #42	; 0x2a
 80148f0:	fb00 3212 	mls	r2, r0, r2, r3
 80148f4:	297e      	cmp	r1, #126	; 0x7e
 80148f6:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80148fa:	f000 81cb 	beq.w	8014c94 <uxr_read_framed_msg+0x510>
 80148fe:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8014900:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8014904:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014906:	b29b      	uxth	r3, r3
 8014908:	2000      	movs	r0, #0
 801490a:	428b      	cmp	r3, r1
 801490c:	8623      	strh	r3, [r4, #48]	; 0x30
 801490e:	8660      	strh	r0, [r4, #50]	; 0x32
 8014910:	86e0      	strh	r0, [r4, #54]	; 0x36
 8014912:	f240 80db 	bls.w	8014acc <uxr_read_framed_msg+0x348>
 8014916:	7020      	strb	r0, [r4, #0]
 8014918:	b003      	add	sp, #12
 801491a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801491e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8014922:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8014926:	4298      	cmp	r0, r3
 8014928:	f000 80a1 	beq.w	8014a6e <uxr_read_framed_msg+0x2ea>
 801492c:	18e2      	adds	r2, r4, r3
 801492e:	7891      	ldrb	r1, [r2, #2]
 8014930:	297d      	cmp	r1, #125	; 0x7d
 8014932:	f000 8167 	beq.w	8014c04 <uxr_read_framed_msg+0x480>
 8014936:	3301      	adds	r3, #1
 8014938:	085a      	lsrs	r2, r3, #1
 801493a:	fba6 0202 	umull	r0, r2, r6, r2
 801493e:	0892      	lsrs	r2, r2, #2
 8014940:	202a      	movs	r0, #42	; 0x2a
 8014942:	fb00 3312 	mls	r3, r0, r2, r3
 8014946:	297e      	cmp	r1, #126	; 0x7e
 8014948:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801494c:	f000 8192 	beq.w	8014c74 <uxr_read_framed_msg+0x4f0>
 8014950:	2304      	movs	r3, #4
 8014952:	8621      	strh	r1, [r4, #48]	; 0x30
 8014954:	7023      	strb	r3, [r4, #0]
 8014956:	e727      	b.n	80147a8 <uxr_read_framed_msg+0x24>
 8014958:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801495c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8014960:	4290      	cmp	r0, r2
 8014962:	f000 80b1 	beq.w	8014ac8 <uxr_read_framed_msg+0x344>
 8014966:	18a3      	adds	r3, r4, r2
 8014968:	7899      	ldrb	r1, [r3, #2]
 801496a:	297d      	cmp	r1, #125	; 0x7d
 801496c:	f000 8166 	beq.w	8014c3c <uxr_read_framed_msg+0x4b8>
 8014970:	3201      	adds	r2, #1
 8014972:	0850      	lsrs	r0, r2, #1
 8014974:	fba6 3000 	umull	r3, r0, r6, r0
 8014978:	0880      	lsrs	r0, r0, #2
 801497a:	232a      	movs	r3, #42	; 0x2a
 801497c:	fb03 2210 	mls	r2, r3, r0, r2
 8014980:	297e      	cmp	r1, #126	; 0x7e
 8014982:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8014986:	f000 8187 	beq.w	8014c98 <uxr_read_framed_msg+0x514>
 801498a:	7863      	ldrb	r3, [r4, #1]
 801498c:	428b      	cmp	r3, r1
 801498e:	bf0c      	ite	eq
 8014990:	2303      	moveq	r3, #3
 8014992:	2300      	movne	r3, #0
 8014994:	7023      	strb	r3, [r4, #0]
 8014996:	e707      	b.n	80147a8 <uxr_read_framed_msg+0x24>
 8014998:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801499c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80149a0:	2200      	movs	r2, #0
 80149a2:	4299      	cmp	r1, r3
 80149a4:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 80149a8:	d063      	beq.n	8014a72 <uxr_read_framed_msg+0x2ee>
 80149aa:	18e2      	adds	r2, r4, r3
 80149ac:	7892      	ldrb	r2, [r2, #2]
 80149ae:	2a7d      	cmp	r2, #125	; 0x7d
 80149b0:	f000 8107 	beq.w	8014bc2 <uxr_read_framed_msg+0x43e>
 80149b4:	1c59      	adds	r1, r3, #1
 80149b6:	084b      	lsrs	r3, r1, #1
 80149b8:	fba6 0303 	umull	r0, r3, r6, r3
 80149bc:	089b      	lsrs	r3, r3, #2
 80149be:	202a      	movs	r0, #42	; 0x2a
 80149c0:	fb00 1313 	mls	r3, r0, r3, r1
 80149c4:	2a7e      	cmp	r2, #126	; 0x7e
 80149c6:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 80149ca:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80149ce:	d050      	beq.n	8014a72 <uxr_read_framed_msg+0x2ee>
 80149d0:	2302      	movs	r3, #2
 80149d2:	7023      	strb	r3, [r4, #0]
 80149d4:	e6e8      	b.n	80147a8 <uxr_read_framed_msg+0x24>
 80149d6:	f894 e02c 	ldrb.w	lr, [r4, #44]	; 0x2c
 80149da:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80149de:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80149e2:	1c51      	adds	r1, r2, #1
 80149e4:	084b      	lsrs	r3, r1, #1
 80149e6:	fba6 5303 	umull	r5, r3, r6, r3
 80149ea:	089b      	lsrs	r3, r3, #2
 80149ec:	fb0c 1313 	mls	r3, ip, r3, r1
 80149f0:	4596      	cmp	lr, r2
 80149f2:	eb04 0002 	add.w	r0, r4, r2
 80149f6:	b2da      	uxtb	r2, r3
 80149f8:	f43f af06 	beq.w	8014808 <uxr_read_framed_msg+0x84>
 80149fc:	7883      	ldrb	r3, [r0, #2]
 80149fe:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8014a02:	2b7e      	cmp	r3, #126	; 0x7e
 8014a04:	d1ed      	bne.n	80149e2 <uxr_read_framed_msg+0x25e>
 8014a06:	2301      	movs	r3, #1
 8014a08:	7023      	strb	r3, [r4, #0]
 8014a0a:	e6cd      	b.n	80147a8 <uxr_read_framed_msg+0x24>
 8014a0c:	f101 0b01 	add.w	fp, r1, #1
 8014a10:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8014a14:	fba6 e202 	umull	lr, r2, r6, r2
 8014a18:	3102      	adds	r1, #2
 8014a1a:	0892      	lsrs	r2, r2, #2
 8014a1c:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8014a20:	fb0c b212 	mls	r2, ip, r2, fp
 8014a24:	fba6 9e0e 	umull	r9, lr, r6, lr
 8014a28:	eb04 0b02 	add.w	fp, r4, r2
 8014a2c:	b2d2      	uxtb	r2, r2
 8014a2e:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 8014a32:	4290      	cmp	r0, r2
 8014a34:	fb0c 111e 	mls	r1, ip, lr, r1
 8014a38:	f43f af40 	beq.w	80148bc <uxr_read_framed_msg+0x138>
 8014a3c:	f89b e002 	ldrb.w	lr, [fp, #2]
 8014a40:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8014a44:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8014a48:	d036      	beq.n	8014ab8 <uxr_read_framed_msg+0x334>
 8014a4a:	f08e 0e20 	eor.w	lr, lr, #32
 8014a4e:	e711      	b.n	8014874 <uxr_read_framed_msg+0xf0>
 8014a50:	2301      	movs	r3, #1
 8014a52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014a54:	4649      	mov	r1, r9
 8014a56:	e9cd 2300 	strd	r2, r3, [sp]
 8014a5a:	4620      	mov	r0, r4
 8014a5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014a5e:	4652      	mov	r2, sl
 8014a60:	f7ff fe0e 	bl	8014680 <uxr_framing_read_transport>
 8014a64:	2800      	cmp	r0, #0
 8014a66:	f43f aecf 	beq.w	8014808 <uxr_read_framed_msg+0x84>
 8014a6a:	7823      	ldrb	r3, [r4, #0]
 8014a6c:	e69c      	b.n	80147a8 <uxr_read_framed_msg+0x24>
 8014a6e:	2302      	movs	r3, #2
 8014a70:	e7ef      	b.n	8014a52 <uxr_read_framed_msg+0x2ce>
 8014a72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014a74:	2304      	movs	r3, #4
 8014a76:	e9cd 2300 	strd	r2, r3, [sp]
 8014a7a:	4649      	mov	r1, r9
 8014a7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014a7e:	4652      	mov	r2, sl
 8014a80:	4620      	mov	r0, r4
 8014a82:	f7ff fdfd 	bl	8014680 <uxr_framing_read_transport>
 8014a86:	2800      	cmp	r0, #0
 8014a88:	d1ef      	bne.n	8014a6a <uxr_read_framed_msg+0x2e6>
 8014a8a:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8014a8e:	387e      	subs	r0, #126	; 0x7e
 8014a90:	bf18      	it	ne
 8014a92:	2001      	movne	r0, #1
 8014a94:	2800      	cmp	r0, #0
 8014a96:	d0e8      	beq.n	8014a6a <uxr_read_framed_msg+0x2e6>
 8014a98:	e6b6      	b.n	8014808 <uxr_read_framed_msg+0x84>
 8014a9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014a9c:	2305      	movs	r3, #5
 8014a9e:	e9cd 5300 	strd	r5, r3, [sp]
 8014aa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014aa4:	f7ff fdec 	bl	8014680 <uxr_framing_read_transport>
 8014aa8:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8014aac:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8014ab0:	429a      	cmp	r2, r3
 8014ab2:	f43f aea9 	beq.w	8014808 <uxr_read_framed_msg+0x84>
 8014ab6:	e673      	b.n	80147a0 <uxr_read_framed_msg+0x1c>
 8014ab8:	429d      	cmp	r5, r3
 8014aba:	ee17 9a90 	vmov	r9, s15
 8014abe:	f43f af02 	beq.w	80148c6 <uxr_read_framed_msg+0x142>
 8014ac2:	2301      	movs	r3, #1
 8014ac4:	7023      	strb	r3, [r4, #0]
 8014ac6:	e66f      	b.n	80147a8 <uxr_read_framed_msg+0x24>
 8014ac8:	2303      	movs	r3, #3
 8014aca:	e7c2      	b.n	8014a52 <uxr_read_framed_msg+0x2ce>
 8014acc:	2305      	movs	r3, #5
 8014ace:	7023      	strb	r3, [r4, #0]
 8014ad0:	e66a      	b.n	80147a8 <uxr_read_framed_msg+0x24>
 8014ad2:	bf00      	nop
 8014ad4:	30c30c31 	.word	0x30c30c31
 8014ad8:	08016f5c 	.word	0x08016f5c
 8014adc:	ee17 9a90 	vmov	r9, s15
 8014ae0:	f43f aef1 	beq.w	80148c6 <uxr_read_framed_msg+0x142>
 8014ae4:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8014ae8:	d08d      	beq.n	8014a06 <uxr_read_framed_msg+0x282>
 8014aea:	1aeb      	subs	r3, r5, r3
 8014aec:	3302      	adds	r3, #2
 8014aee:	9301      	str	r3, [sp, #4]
 8014af0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014af2:	9300      	str	r3, [sp, #0]
 8014af4:	4652      	mov	r2, sl
 8014af6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014af8:	4649      	mov	r1, r9
 8014afa:	4620      	mov	r0, r4
 8014afc:	f7ff fdc0 	bl	8014680 <uxr_framing_read_transport>
 8014b00:	fab0 f080 	clz	r0, r0
 8014b04:	0940      	lsrs	r0, r0, #5
 8014b06:	2800      	cmp	r0, #0
 8014b08:	d0af      	beq.n	8014a6a <uxr_read_framed_msg+0x2e6>
 8014b0a:	e67d      	b.n	8014808 <uxr_read_framed_msg+0x84>
 8014b0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014b0e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8014b12:	7013      	strb	r3, [r2, #0]
 8014b14:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8014b16:	b003      	add	sp, #12
 8014b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b1c:	1c59      	adds	r1, r3, #1
 8014b1e:	084a      	lsrs	r2, r1, #1
 8014b20:	fba6 5202 	umull	r5, r2, r6, r2
 8014b24:	0892      	lsrs	r2, r2, #2
 8014b26:	252a      	movs	r5, #42	; 0x2a
 8014b28:	fb05 1212 	mls	r2, r5, r2, r1
 8014b2c:	b2d1      	uxtb	r1, r2
 8014b2e:	4288      	cmp	r0, r1
 8014b30:	d08e      	beq.n	8014a50 <uxr_read_framed_msg+0x2cc>
 8014b32:	3302      	adds	r3, #2
 8014b34:	4422      	add	r2, r4
 8014b36:	0858      	lsrs	r0, r3, #1
 8014b38:	fba6 1000 	umull	r1, r0, r6, r0
 8014b3c:	7891      	ldrb	r1, [r2, #2]
 8014b3e:	0882      	lsrs	r2, r0, #2
 8014b40:	fb05 3312 	mls	r3, r5, r2, r3
 8014b44:	297e      	cmp	r1, #126	; 0x7e
 8014b46:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014b4a:	f000 80a3 	beq.w	8014c94 <uxr_read_framed_msg+0x510>
 8014b4e:	f081 0120 	eor.w	r1, r1, #32
 8014b52:	e64e      	b.n	80147f2 <uxr_read_framed_msg+0x6e>
 8014b54:	1c59      	adds	r1, r3, #1
 8014b56:	084a      	lsrs	r2, r1, #1
 8014b58:	fba6 5202 	umull	r5, r2, r6, r2
 8014b5c:	0892      	lsrs	r2, r2, #2
 8014b5e:	252a      	movs	r5, #42	; 0x2a
 8014b60:	fb05 1212 	mls	r2, r5, r2, r1
 8014b64:	b2d1      	uxtb	r1, r2
 8014b66:	4288      	cmp	r0, r1
 8014b68:	d081      	beq.n	8014a6e <uxr_read_framed_msg+0x2ea>
 8014b6a:	3302      	adds	r3, #2
 8014b6c:	4422      	add	r2, r4
 8014b6e:	0858      	lsrs	r0, r3, #1
 8014b70:	fba6 1000 	umull	r1, r0, r6, r0
 8014b74:	7891      	ldrb	r1, [r2, #2]
 8014b76:	0882      	lsrs	r2, r0, #2
 8014b78:	fb05 3312 	mls	r3, r5, r2, r3
 8014b7c:	297e      	cmp	r1, #126	; 0x7e
 8014b7e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014b82:	d077      	beq.n	8014c74 <uxr_read_framed_msg+0x4f0>
 8014b84:	f081 0120 	eor.w	r1, r1, #32
 8014b88:	e65b      	b.n	8014842 <uxr_read_framed_msg+0xbe>
 8014b8a:	1c59      	adds	r1, r3, #1
 8014b8c:	084a      	lsrs	r2, r1, #1
 8014b8e:	fba6 5202 	umull	r5, r2, r6, r2
 8014b92:	0892      	lsrs	r2, r2, #2
 8014b94:	252a      	movs	r5, #42	; 0x2a
 8014b96:	fb05 1212 	mls	r2, r5, r2, r1
 8014b9a:	b2d1      	uxtb	r1, r2
 8014b9c:	4288      	cmp	r0, r1
 8014b9e:	f43f af57 	beq.w	8014a50 <uxr_read_framed_msg+0x2cc>
 8014ba2:	3302      	adds	r3, #2
 8014ba4:	4422      	add	r2, r4
 8014ba6:	0858      	lsrs	r0, r3, #1
 8014ba8:	fba6 1000 	umull	r1, r0, r6, r0
 8014bac:	7891      	ldrb	r1, [r2, #2]
 8014bae:	0882      	lsrs	r2, r0, #2
 8014bb0:	fb05 3312 	mls	r3, r5, r2, r3
 8014bb4:	297e      	cmp	r1, #126	; 0x7e
 8014bb6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014bba:	d06b      	beq.n	8014c94 <uxr_read_framed_msg+0x510>
 8014bbc:	f081 0120 	eor.w	r1, r1, #32
 8014bc0:	e69d      	b.n	80148fe <uxr_read_framed_msg+0x17a>
 8014bc2:	1c5d      	adds	r5, r3, #1
 8014bc4:	086a      	lsrs	r2, r5, #1
 8014bc6:	fba6 0202 	umull	r0, r2, r6, r2
 8014bca:	0892      	lsrs	r2, r2, #2
 8014bcc:	202a      	movs	r0, #42	; 0x2a
 8014bce:	fb00 5212 	mls	r2, r0, r2, r5
 8014bd2:	b2d5      	uxtb	r5, r2
 8014bd4:	42a9      	cmp	r1, r5
 8014bd6:	f43f af4c 	beq.w	8014a72 <uxr_read_framed_msg+0x2ee>
 8014bda:	3302      	adds	r3, #2
 8014bdc:	4422      	add	r2, r4
 8014bde:	0859      	lsrs	r1, r3, #1
 8014be0:	fba6 5101 	umull	r5, r1, r6, r1
 8014be4:	7895      	ldrb	r5, [r2, #2]
 8014be6:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8014bea:	088a      	lsrs	r2, r1, #2
 8014bec:	fb00 3312 	mls	r3, r0, r2, r3
 8014bf0:	2d7e      	cmp	r5, #126	; 0x7e
 8014bf2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014bf6:	f43f af3c 	beq.w	8014a72 <uxr_read_framed_msg+0x2ee>
 8014bfa:	f085 0520 	eor.w	r5, r5, #32
 8014bfe:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8014c02:	e6e5      	b.n	80149d0 <uxr_read_framed_msg+0x24c>
 8014c04:	1c59      	adds	r1, r3, #1
 8014c06:	084a      	lsrs	r2, r1, #1
 8014c08:	fba6 5202 	umull	r5, r2, r6, r2
 8014c0c:	0892      	lsrs	r2, r2, #2
 8014c0e:	252a      	movs	r5, #42	; 0x2a
 8014c10:	fb05 1212 	mls	r2, r5, r2, r1
 8014c14:	b2d1      	uxtb	r1, r2
 8014c16:	4288      	cmp	r0, r1
 8014c18:	f43f af29 	beq.w	8014a6e <uxr_read_framed_msg+0x2ea>
 8014c1c:	3302      	adds	r3, #2
 8014c1e:	4422      	add	r2, r4
 8014c20:	0858      	lsrs	r0, r3, #1
 8014c22:	fba6 1000 	umull	r1, r0, r6, r0
 8014c26:	7891      	ldrb	r1, [r2, #2]
 8014c28:	0882      	lsrs	r2, r0, #2
 8014c2a:	fb05 3312 	mls	r3, r5, r2, r3
 8014c2e:	297e      	cmp	r1, #126	; 0x7e
 8014c30:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014c34:	d01e      	beq.n	8014c74 <uxr_read_framed_msg+0x4f0>
 8014c36:	f081 0120 	eor.w	r1, r1, #32
 8014c3a:	e689      	b.n	8014950 <uxr_read_framed_msg+0x1cc>
 8014c3c:	1c51      	adds	r1, r2, #1
 8014c3e:	084b      	lsrs	r3, r1, #1
 8014c40:	fba6 5303 	umull	r5, r3, r6, r3
 8014c44:	089b      	lsrs	r3, r3, #2
 8014c46:	252a      	movs	r5, #42	; 0x2a
 8014c48:	fb05 1313 	mls	r3, r5, r3, r1
 8014c4c:	b2d9      	uxtb	r1, r3
 8014c4e:	4288      	cmp	r0, r1
 8014c50:	f43f af3a 	beq.w	8014ac8 <uxr_read_framed_msg+0x344>
 8014c54:	3202      	adds	r2, #2
 8014c56:	4423      	add	r3, r4
 8014c58:	0850      	lsrs	r0, r2, #1
 8014c5a:	789b      	ldrb	r3, [r3, #2]
 8014c5c:	fba6 1000 	umull	r1, r0, r6, r0
 8014c60:	0880      	lsrs	r0, r0, #2
 8014c62:	fb05 2210 	mls	r2, r5, r0, r2
 8014c66:	2b7e      	cmp	r3, #126	; 0x7e
 8014c68:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8014c6c:	d014      	beq.n	8014c98 <uxr_read_framed_msg+0x514>
 8014c6e:	f083 0120 	eor.w	r1, r3, #32
 8014c72:	e68a      	b.n	801498a <uxr_read_framed_msg+0x206>
 8014c74:	2302      	movs	r3, #2
 8014c76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014c78:	4649      	mov	r1, r9
 8014c7a:	e9cd 2300 	strd	r2, r3, [sp]
 8014c7e:	4620      	mov	r0, r4
 8014c80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c82:	4652      	mov	r2, sl
 8014c84:	f7ff fcfc 	bl	8014680 <uxr_framing_read_transport>
 8014c88:	2800      	cmp	r0, #0
 8014c8a:	f47f aeee 	bne.w	8014a6a <uxr_read_framed_msg+0x2e6>
 8014c8e:	2301      	movs	r3, #1
 8014c90:	7023      	strb	r3, [r4, #0]
 8014c92:	e589      	b.n	80147a8 <uxr_read_framed_msg+0x24>
 8014c94:	2301      	movs	r3, #1
 8014c96:	e7ee      	b.n	8014c76 <uxr_read_framed_msg+0x4f2>
 8014c98:	2303      	movs	r3, #3
 8014c9a:	e7ec      	b.n	8014c76 <uxr_read_framed_msg+0x4f2>
 8014c9c:	ee17 9a90 	vmov	r9, s15
 8014ca0:	e6b1      	b.n	8014a06 <uxr_read_framed_msg+0x282>
 8014ca2:	bf00      	nop

08014ca4 <on_status>:
 8014ca4:	b082      	sub	sp, #8
 8014ca6:	b002      	add	sp, #8
 8014ca8:	4770      	bx	lr
 8014caa:	bf00      	nop

08014cac <on_topic>:
 8014cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cb0:	4a21      	ldr	r2, [pc, #132]	; (8014d38 <on_topic+0x8c>)
 8014cb2:	b094      	sub	sp, #80	; 0x50
 8014cb4:	6812      	ldr	r2, [r2, #0]
 8014cb6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8014cb8:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8014cbc:	9113      	str	r1, [sp, #76]	; 0x4c
 8014cbe:	9312      	str	r3, [sp, #72]	; 0x48
 8014cc0:	b3ba      	cbz	r2, 8014d32 <on_topic+0x86>
 8014cc2:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8014cc6:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8014cca:	e001      	b.n	8014cd0 <on_topic+0x24>
 8014ccc:	6892      	ldr	r2, [r2, #8]
 8014cce:	b382      	cbz	r2, 8014d32 <on_topic+0x86>
 8014cd0:	68d4      	ldr	r4, [r2, #12]
 8014cd2:	8aa3      	ldrh	r3, [r4, #20]
 8014cd4:	428b      	cmp	r3, r1
 8014cd6:	d1f9      	bne.n	8014ccc <on_topic+0x20>
 8014cd8:	7da3      	ldrb	r3, [r4, #22]
 8014cda:	4283      	cmp	r3, r0
 8014cdc:	d1f6      	bne.n	8014ccc <on_topic+0x20>
 8014cde:	2248      	movs	r2, #72	; 0x48
 8014ce0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8014ce4:	4668      	mov	r0, sp
 8014ce6:	f000 f94b 	bl	8014f80 <memcpy>
 8014cea:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8014cee:	4620      	mov	r0, r4
 8014cf0:	f7f8 f962 	bl	800cfb8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8014cf4:	4607      	mov	r7, r0
 8014cf6:	b1e0      	cbz	r0, 8014d32 <on_topic+0x86>
 8014cf8:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8014cfc:	462a      	mov	r2, r5
 8014cfe:	4630      	mov	r0, r6
 8014d00:	f108 0110 	add.w	r1, r8, #16
 8014d04:	f7fe fc76 	bl	80135f4 <ucdr_deserialize_array_uint8_t>
 8014d08:	b930      	cbnz	r0, 8014d18 <on_topic+0x6c>
 8014d0a:	480c      	ldr	r0, [pc, #48]	; (8014d3c <on_topic+0x90>)
 8014d0c:	4639      	mov	r1, r7
 8014d0e:	b014      	add	sp, #80	; 0x50
 8014d10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014d14:	f7fd bd8e 	b.w	8012834 <put_memory>
 8014d18:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8014d1c:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 8014d20:	f7fe fb92 	bl	8013448 <rmw_uros_epoch_nanos>
 8014d24:	f608 0218 	addw	r2, r8, #2072	; 0x818
 8014d28:	2305      	movs	r3, #5
 8014d2a:	e9c2 0100 	strd	r0, r1, [r2]
 8014d2e:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8014d32:	b014      	add	sp, #80	; 0x50
 8014d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d38:	2000f544 	.word	0x2000f544
 8014d3c:	2000c2d8 	.word	0x2000c2d8

08014d40 <on_request>:
 8014d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014d44:	4822      	ldr	r0, [pc, #136]	; (8014dd0 <on_request+0x90>)
 8014d46:	b095      	sub	sp, #84	; 0x54
 8014d48:	9113      	str	r1, [sp, #76]	; 0x4c
 8014d4a:	6801      	ldr	r1, [r0, #0]
 8014d4c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8014d4e:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 8014d52:	2900      	cmp	r1, #0
 8014d54:	d039      	beq.n	8014dca <on_request+0x8a>
 8014d56:	461d      	mov	r5, r3
 8014d58:	e001      	b.n	8014d5e <on_request+0x1e>
 8014d5a:	6889      	ldr	r1, [r1, #8]
 8014d5c:	b3a9      	cbz	r1, 8014dca <on_request+0x8a>
 8014d5e:	68cc      	ldr	r4, [r1, #12]
 8014d60:	8b20      	ldrh	r0, [r4, #24]
 8014d62:	4290      	cmp	r0, r2
 8014d64:	d1f9      	bne.n	8014d5a <on_request+0x1a>
 8014d66:	2248      	movs	r2, #72	; 0x48
 8014d68:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8014d6c:	4668      	mov	r0, sp
 8014d6e:	f000 f907 	bl	8014f80 <memcpy>
 8014d72:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8014d76:	4620      	mov	r0, r4
 8014d78:	f7f8 f91e 	bl	800cfb8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8014d7c:	4680      	mov	r8, r0
 8014d7e:	b320      	cbz	r0, 8014dca <on_request+0x8a>
 8014d80:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8014d84:	4632      	mov	r2, r6
 8014d86:	4638      	mov	r0, r7
 8014d88:	f109 0110 	add.w	r1, r9, #16
 8014d8c:	f7fe fc32 	bl	80135f4 <ucdr_deserialize_array_uint8_t>
 8014d90:	b930      	cbnz	r0, 8014da0 <on_request+0x60>
 8014d92:	4810      	ldr	r0, [pc, #64]	; (8014dd4 <on_request+0x94>)
 8014d94:	4641      	mov	r1, r8
 8014d96:	b015      	add	sp, #84	; 0x54
 8014d98:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014d9c:	f7fd bd4a 	b.w	8012834 <put_memory>
 8014da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014da2:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8014da6:	f609 0428 	addw	r4, r9, #2088	; 0x828
 8014daa:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 8014dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014db0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014db4:	e884 0003 	stmia.w	r4, {r0, r1}
 8014db8:	f7fe fb46 	bl	8013448 <rmw_uros_epoch_nanos>
 8014dbc:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8014dc0:	2303      	movs	r3, #3
 8014dc2:	e9c2 0100 	strd	r0, r1, [r2]
 8014dc6:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8014dca:	b015      	add	sp, #84	; 0x54
 8014dcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014dd0:	2000f534 	.word	0x2000f534
 8014dd4:	2000c2d8 	.word	0x2000c2d8

08014dd8 <on_reply>:
 8014dd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ddc:	4821      	ldr	r0, [pc, #132]	; (8014e64 <on_reply+0x8c>)
 8014dde:	b095      	sub	sp, #84	; 0x54
 8014de0:	9113      	str	r1, [sp, #76]	; 0x4c
 8014de2:	6801      	ldr	r1, [r0, #0]
 8014de4:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8014de6:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 8014dea:	b3b9      	cbz	r1, 8014e5c <on_reply+0x84>
 8014dec:	461d      	mov	r5, r3
 8014dee:	e001      	b.n	8014df4 <on_reply+0x1c>
 8014df0:	6889      	ldr	r1, [r1, #8]
 8014df2:	b399      	cbz	r1, 8014e5c <on_reply+0x84>
 8014df4:	68cc      	ldr	r4, [r1, #12]
 8014df6:	8b20      	ldrh	r0, [r4, #24]
 8014df8:	4290      	cmp	r0, r2
 8014dfa:	d1f9      	bne.n	8014df0 <on_reply+0x18>
 8014dfc:	2248      	movs	r2, #72	; 0x48
 8014dfe:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8014e02:	4668      	mov	r0, sp
 8014e04:	f000 f8bc 	bl	8014f80 <memcpy>
 8014e08:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8014e0c:	4620      	mov	r0, r4
 8014e0e:	f7f8 f8d3 	bl	800cfb8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8014e12:	4680      	mov	r8, r0
 8014e14:	b310      	cbz	r0, 8014e5c <on_reply+0x84>
 8014e16:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8014e1a:	4632      	mov	r2, r6
 8014e1c:	4638      	mov	r0, r7
 8014e1e:	f109 0110 	add.w	r1, r9, #16
 8014e22:	f7fe fbe7 	bl	80135f4 <ucdr_deserialize_array_uint8_t>
 8014e26:	b930      	cbnz	r0, 8014e36 <on_reply+0x5e>
 8014e28:	480f      	ldr	r0, [pc, #60]	; (8014e68 <on_reply+0x90>)
 8014e2a:	4641      	mov	r1, r8
 8014e2c:	b015      	add	sp, #84	; 0x54
 8014e2e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014e32:	f7fd bcff 	b.w	8012834 <put_memory>
 8014e36:	b2aa      	uxth	r2, r5
 8014e38:	2300      	movs	r3, #0
 8014e3a:	f609 0128 	addw	r1, r9, #2088	; 0x828
 8014e3e:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8014e42:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 8014e46:	e9c1 2300 	strd	r2, r3, [r1]
 8014e4a:	f7fe fafd 	bl	8013448 <rmw_uros_epoch_nanos>
 8014e4e:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8014e52:	2304      	movs	r3, #4
 8014e54:	e9c2 0100 	strd	r0, r1, [r2]
 8014e58:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8014e5c:	b015      	add	sp, #84	; 0x54
 8014e5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e62:	bf00      	nop
 8014e64:	2000cb68 	.word	0x2000cb68
 8014e68:	2000c2d8 	.word	0x2000c2d8

08014e6c <calloc>:
 8014e6c:	4b02      	ldr	r3, [pc, #8]	; (8014e78 <calloc+0xc>)
 8014e6e:	460a      	mov	r2, r1
 8014e70:	4601      	mov	r1, r0
 8014e72:	6818      	ldr	r0, [r3, #0]
 8014e74:	f000 b8b4 	b.w	8014fe0 <_calloc_r>
 8014e78:	20000094 	.word	0x20000094

08014e7c <__errno>:
 8014e7c:	4b01      	ldr	r3, [pc, #4]	; (8014e84 <__errno+0x8>)
 8014e7e:	6818      	ldr	r0, [r3, #0]
 8014e80:	4770      	bx	lr
 8014e82:	bf00      	nop
 8014e84:	20000094 	.word	0x20000094

08014e88 <getenv>:
 8014e88:	b507      	push	{r0, r1, r2, lr}
 8014e8a:	4b04      	ldr	r3, [pc, #16]	; (8014e9c <getenv+0x14>)
 8014e8c:	4601      	mov	r1, r0
 8014e8e:	aa01      	add	r2, sp, #4
 8014e90:	6818      	ldr	r0, [r3, #0]
 8014e92:	f000 f805 	bl	8014ea0 <_findenv_r>
 8014e96:	b003      	add	sp, #12
 8014e98:	f85d fb04 	ldr.w	pc, [sp], #4
 8014e9c:	20000094 	.word	0x20000094

08014ea0 <_findenv_r>:
 8014ea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ea4:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8014f14 <_findenv_r+0x74>
 8014ea8:	4607      	mov	r7, r0
 8014eaa:	4689      	mov	r9, r1
 8014eac:	4616      	mov	r6, r2
 8014eae:	f000 fb71 	bl	8015594 <__env_lock>
 8014eb2:	f8da 4000 	ldr.w	r4, [sl]
 8014eb6:	b134      	cbz	r4, 8014ec6 <_findenv_r+0x26>
 8014eb8:	464b      	mov	r3, r9
 8014eba:	4698      	mov	r8, r3
 8014ebc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014ec0:	b13a      	cbz	r2, 8014ed2 <_findenv_r+0x32>
 8014ec2:	2a3d      	cmp	r2, #61	; 0x3d
 8014ec4:	d1f9      	bne.n	8014eba <_findenv_r+0x1a>
 8014ec6:	4638      	mov	r0, r7
 8014ec8:	f000 fb6a 	bl	80155a0 <__env_unlock>
 8014ecc:	2000      	movs	r0, #0
 8014ece:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ed2:	eba8 0809 	sub.w	r8, r8, r9
 8014ed6:	46a3      	mov	fp, r4
 8014ed8:	f854 0b04 	ldr.w	r0, [r4], #4
 8014edc:	2800      	cmp	r0, #0
 8014ede:	d0f2      	beq.n	8014ec6 <_findenv_r+0x26>
 8014ee0:	4642      	mov	r2, r8
 8014ee2:	4649      	mov	r1, r9
 8014ee4:	f000 fa57 	bl	8015396 <strncmp>
 8014ee8:	2800      	cmp	r0, #0
 8014eea:	d1f4      	bne.n	8014ed6 <_findenv_r+0x36>
 8014eec:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014ef0:	eb03 0508 	add.w	r5, r3, r8
 8014ef4:	f813 3008 	ldrb.w	r3, [r3, r8]
 8014ef8:	2b3d      	cmp	r3, #61	; 0x3d
 8014efa:	d1ec      	bne.n	8014ed6 <_findenv_r+0x36>
 8014efc:	f8da 3000 	ldr.w	r3, [sl]
 8014f00:	ebab 0303 	sub.w	r3, fp, r3
 8014f04:	109b      	asrs	r3, r3, #2
 8014f06:	4638      	mov	r0, r7
 8014f08:	6033      	str	r3, [r6, #0]
 8014f0a:	f000 fb49 	bl	80155a0 <__env_unlock>
 8014f0e:	1c68      	adds	r0, r5, #1
 8014f10:	e7dd      	b.n	8014ece <_findenv_r+0x2e>
 8014f12:	bf00      	nop
 8014f14:	20000000 	.word	0x20000000

08014f18 <__libc_init_array>:
 8014f18:	b570      	push	{r4, r5, r6, lr}
 8014f1a:	4d0d      	ldr	r5, [pc, #52]	; (8014f50 <__libc_init_array+0x38>)
 8014f1c:	4c0d      	ldr	r4, [pc, #52]	; (8014f54 <__libc_init_array+0x3c>)
 8014f1e:	1b64      	subs	r4, r4, r5
 8014f20:	10a4      	asrs	r4, r4, #2
 8014f22:	2600      	movs	r6, #0
 8014f24:	42a6      	cmp	r6, r4
 8014f26:	d109      	bne.n	8014f3c <__libc_init_array+0x24>
 8014f28:	4d0b      	ldr	r5, [pc, #44]	; (8014f58 <__libc_init_array+0x40>)
 8014f2a:	4c0c      	ldr	r4, [pc, #48]	; (8014f5c <__libc_init_array+0x44>)
 8014f2c:	f001 fbb4 	bl	8016698 <_init>
 8014f30:	1b64      	subs	r4, r4, r5
 8014f32:	10a4      	asrs	r4, r4, #2
 8014f34:	2600      	movs	r6, #0
 8014f36:	42a6      	cmp	r6, r4
 8014f38:	d105      	bne.n	8014f46 <__libc_init_array+0x2e>
 8014f3a:	bd70      	pop	{r4, r5, r6, pc}
 8014f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014f40:	4798      	blx	r3
 8014f42:	3601      	adds	r6, #1
 8014f44:	e7ee      	b.n	8014f24 <__libc_init_array+0xc>
 8014f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8014f4a:	4798      	blx	r3
 8014f4c:	3601      	adds	r6, #1
 8014f4e:	e7f2      	b.n	8014f36 <__libc_init_array+0x1e>
 8014f50:	080173b0 	.word	0x080173b0
 8014f54:	080173b0 	.word	0x080173b0
 8014f58:	080173b0 	.word	0x080173b0
 8014f5c:	080173b4 	.word	0x080173b4

08014f60 <malloc>:
 8014f60:	4b02      	ldr	r3, [pc, #8]	; (8014f6c <malloc+0xc>)
 8014f62:	4601      	mov	r1, r0
 8014f64:	6818      	ldr	r0, [r3, #0]
 8014f66:	f000 b8bd 	b.w	80150e4 <_malloc_r>
 8014f6a:	bf00      	nop
 8014f6c:	20000094 	.word	0x20000094

08014f70 <free>:
 8014f70:	4b02      	ldr	r3, [pc, #8]	; (8014f7c <free+0xc>)
 8014f72:	4601      	mov	r1, r0
 8014f74:	6818      	ldr	r0, [r3, #0]
 8014f76:	f000 b849 	b.w	801500c <_free_r>
 8014f7a:	bf00      	nop
 8014f7c:	20000094 	.word	0x20000094

08014f80 <memcpy>:
 8014f80:	440a      	add	r2, r1
 8014f82:	4291      	cmp	r1, r2
 8014f84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014f88:	d100      	bne.n	8014f8c <memcpy+0xc>
 8014f8a:	4770      	bx	lr
 8014f8c:	b510      	push	{r4, lr}
 8014f8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014f92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014f96:	4291      	cmp	r1, r2
 8014f98:	d1f9      	bne.n	8014f8e <memcpy+0xe>
 8014f9a:	bd10      	pop	{r4, pc}

08014f9c <memmove>:
 8014f9c:	4288      	cmp	r0, r1
 8014f9e:	b510      	push	{r4, lr}
 8014fa0:	eb01 0402 	add.w	r4, r1, r2
 8014fa4:	d902      	bls.n	8014fac <memmove+0x10>
 8014fa6:	4284      	cmp	r4, r0
 8014fa8:	4623      	mov	r3, r4
 8014faa:	d807      	bhi.n	8014fbc <memmove+0x20>
 8014fac:	1e43      	subs	r3, r0, #1
 8014fae:	42a1      	cmp	r1, r4
 8014fb0:	d008      	beq.n	8014fc4 <memmove+0x28>
 8014fb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014fb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014fba:	e7f8      	b.n	8014fae <memmove+0x12>
 8014fbc:	4402      	add	r2, r0
 8014fbe:	4601      	mov	r1, r0
 8014fc0:	428a      	cmp	r2, r1
 8014fc2:	d100      	bne.n	8014fc6 <memmove+0x2a>
 8014fc4:	bd10      	pop	{r4, pc}
 8014fc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014fca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014fce:	e7f7      	b.n	8014fc0 <memmove+0x24>

08014fd0 <memset>:
 8014fd0:	4402      	add	r2, r0
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	4293      	cmp	r3, r2
 8014fd6:	d100      	bne.n	8014fda <memset+0xa>
 8014fd8:	4770      	bx	lr
 8014fda:	f803 1b01 	strb.w	r1, [r3], #1
 8014fde:	e7f9      	b.n	8014fd4 <memset+0x4>

08014fe0 <_calloc_r>:
 8014fe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014fe2:	fba1 2402 	umull	r2, r4, r1, r2
 8014fe6:	b94c      	cbnz	r4, 8014ffc <_calloc_r+0x1c>
 8014fe8:	4611      	mov	r1, r2
 8014fea:	9201      	str	r2, [sp, #4]
 8014fec:	f000 f87a 	bl	80150e4 <_malloc_r>
 8014ff0:	9a01      	ldr	r2, [sp, #4]
 8014ff2:	4605      	mov	r5, r0
 8014ff4:	b930      	cbnz	r0, 8015004 <_calloc_r+0x24>
 8014ff6:	4628      	mov	r0, r5
 8014ff8:	b003      	add	sp, #12
 8014ffa:	bd30      	pop	{r4, r5, pc}
 8014ffc:	220c      	movs	r2, #12
 8014ffe:	6002      	str	r2, [r0, #0]
 8015000:	2500      	movs	r5, #0
 8015002:	e7f8      	b.n	8014ff6 <_calloc_r+0x16>
 8015004:	4621      	mov	r1, r4
 8015006:	f7ff ffe3 	bl	8014fd0 <memset>
 801500a:	e7f4      	b.n	8014ff6 <_calloc_r+0x16>

0801500c <_free_r>:
 801500c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801500e:	2900      	cmp	r1, #0
 8015010:	d044      	beq.n	801509c <_free_r+0x90>
 8015012:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015016:	9001      	str	r0, [sp, #4]
 8015018:	2b00      	cmp	r3, #0
 801501a:	f1a1 0404 	sub.w	r4, r1, #4
 801501e:	bfb8      	it	lt
 8015020:	18e4      	addlt	r4, r4, r3
 8015022:	f000 fbcd 	bl	80157c0 <__malloc_lock>
 8015026:	4a1e      	ldr	r2, [pc, #120]	; (80150a0 <_free_r+0x94>)
 8015028:	9801      	ldr	r0, [sp, #4]
 801502a:	6813      	ldr	r3, [r2, #0]
 801502c:	b933      	cbnz	r3, 801503c <_free_r+0x30>
 801502e:	6063      	str	r3, [r4, #4]
 8015030:	6014      	str	r4, [r2, #0]
 8015032:	b003      	add	sp, #12
 8015034:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015038:	f000 bbc8 	b.w	80157cc <__malloc_unlock>
 801503c:	42a3      	cmp	r3, r4
 801503e:	d908      	bls.n	8015052 <_free_r+0x46>
 8015040:	6825      	ldr	r5, [r4, #0]
 8015042:	1961      	adds	r1, r4, r5
 8015044:	428b      	cmp	r3, r1
 8015046:	bf01      	itttt	eq
 8015048:	6819      	ldreq	r1, [r3, #0]
 801504a:	685b      	ldreq	r3, [r3, #4]
 801504c:	1949      	addeq	r1, r1, r5
 801504e:	6021      	streq	r1, [r4, #0]
 8015050:	e7ed      	b.n	801502e <_free_r+0x22>
 8015052:	461a      	mov	r2, r3
 8015054:	685b      	ldr	r3, [r3, #4]
 8015056:	b10b      	cbz	r3, 801505c <_free_r+0x50>
 8015058:	42a3      	cmp	r3, r4
 801505a:	d9fa      	bls.n	8015052 <_free_r+0x46>
 801505c:	6811      	ldr	r1, [r2, #0]
 801505e:	1855      	adds	r5, r2, r1
 8015060:	42a5      	cmp	r5, r4
 8015062:	d10b      	bne.n	801507c <_free_r+0x70>
 8015064:	6824      	ldr	r4, [r4, #0]
 8015066:	4421      	add	r1, r4
 8015068:	1854      	adds	r4, r2, r1
 801506a:	42a3      	cmp	r3, r4
 801506c:	6011      	str	r1, [r2, #0]
 801506e:	d1e0      	bne.n	8015032 <_free_r+0x26>
 8015070:	681c      	ldr	r4, [r3, #0]
 8015072:	685b      	ldr	r3, [r3, #4]
 8015074:	6053      	str	r3, [r2, #4]
 8015076:	4421      	add	r1, r4
 8015078:	6011      	str	r1, [r2, #0]
 801507a:	e7da      	b.n	8015032 <_free_r+0x26>
 801507c:	d902      	bls.n	8015084 <_free_r+0x78>
 801507e:	230c      	movs	r3, #12
 8015080:	6003      	str	r3, [r0, #0]
 8015082:	e7d6      	b.n	8015032 <_free_r+0x26>
 8015084:	6825      	ldr	r5, [r4, #0]
 8015086:	1961      	adds	r1, r4, r5
 8015088:	428b      	cmp	r3, r1
 801508a:	bf04      	itt	eq
 801508c:	6819      	ldreq	r1, [r3, #0]
 801508e:	685b      	ldreq	r3, [r3, #4]
 8015090:	6063      	str	r3, [r4, #4]
 8015092:	bf04      	itt	eq
 8015094:	1949      	addeq	r1, r1, r5
 8015096:	6021      	streq	r1, [r4, #0]
 8015098:	6054      	str	r4, [r2, #4]
 801509a:	e7ca      	b.n	8015032 <_free_r+0x26>
 801509c:	b003      	add	sp, #12
 801509e:	bd30      	pop	{r4, r5, pc}
 80150a0:	2000c290 	.word	0x2000c290

080150a4 <sbrk_aligned>:
 80150a4:	b570      	push	{r4, r5, r6, lr}
 80150a6:	4e0e      	ldr	r6, [pc, #56]	; (80150e0 <sbrk_aligned+0x3c>)
 80150a8:	460c      	mov	r4, r1
 80150aa:	6831      	ldr	r1, [r6, #0]
 80150ac:	4605      	mov	r5, r0
 80150ae:	b911      	cbnz	r1, 80150b6 <sbrk_aligned+0x12>
 80150b0:	f000 f918 	bl	80152e4 <_sbrk_r>
 80150b4:	6030      	str	r0, [r6, #0]
 80150b6:	4621      	mov	r1, r4
 80150b8:	4628      	mov	r0, r5
 80150ba:	f000 f913 	bl	80152e4 <_sbrk_r>
 80150be:	1c43      	adds	r3, r0, #1
 80150c0:	d00a      	beq.n	80150d8 <sbrk_aligned+0x34>
 80150c2:	1cc4      	adds	r4, r0, #3
 80150c4:	f024 0403 	bic.w	r4, r4, #3
 80150c8:	42a0      	cmp	r0, r4
 80150ca:	d007      	beq.n	80150dc <sbrk_aligned+0x38>
 80150cc:	1a21      	subs	r1, r4, r0
 80150ce:	4628      	mov	r0, r5
 80150d0:	f000 f908 	bl	80152e4 <_sbrk_r>
 80150d4:	3001      	adds	r0, #1
 80150d6:	d101      	bne.n	80150dc <sbrk_aligned+0x38>
 80150d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80150dc:	4620      	mov	r0, r4
 80150de:	bd70      	pop	{r4, r5, r6, pc}
 80150e0:	2000c294 	.word	0x2000c294

080150e4 <_malloc_r>:
 80150e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150e8:	1ccd      	adds	r5, r1, #3
 80150ea:	f025 0503 	bic.w	r5, r5, #3
 80150ee:	3508      	adds	r5, #8
 80150f0:	2d0c      	cmp	r5, #12
 80150f2:	bf38      	it	cc
 80150f4:	250c      	movcc	r5, #12
 80150f6:	2d00      	cmp	r5, #0
 80150f8:	4607      	mov	r7, r0
 80150fa:	db01      	blt.n	8015100 <_malloc_r+0x1c>
 80150fc:	42a9      	cmp	r1, r5
 80150fe:	d905      	bls.n	801510c <_malloc_r+0x28>
 8015100:	230c      	movs	r3, #12
 8015102:	603b      	str	r3, [r7, #0]
 8015104:	2600      	movs	r6, #0
 8015106:	4630      	mov	r0, r6
 8015108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801510c:	4e2e      	ldr	r6, [pc, #184]	; (80151c8 <_malloc_r+0xe4>)
 801510e:	f000 fb57 	bl	80157c0 <__malloc_lock>
 8015112:	6833      	ldr	r3, [r6, #0]
 8015114:	461c      	mov	r4, r3
 8015116:	bb34      	cbnz	r4, 8015166 <_malloc_r+0x82>
 8015118:	4629      	mov	r1, r5
 801511a:	4638      	mov	r0, r7
 801511c:	f7ff ffc2 	bl	80150a4 <sbrk_aligned>
 8015120:	1c43      	adds	r3, r0, #1
 8015122:	4604      	mov	r4, r0
 8015124:	d14d      	bne.n	80151c2 <_malloc_r+0xde>
 8015126:	6834      	ldr	r4, [r6, #0]
 8015128:	4626      	mov	r6, r4
 801512a:	2e00      	cmp	r6, #0
 801512c:	d140      	bne.n	80151b0 <_malloc_r+0xcc>
 801512e:	6823      	ldr	r3, [r4, #0]
 8015130:	4631      	mov	r1, r6
 8015132:	4638      	mov	r0, r7
 8015134:	eb04 0803 	add.w	r8, r4, r3
 8015138:	f000 f8d4 	bl	80152e4 <_sbrk_r>
 801513c:	4580      	cmp	r8, r0
 801513e:	d13a      	bne.n	80151b6 <_malloc_r+0xd2>
 8015140:	6821      	ldr	r1, [r4, #0]
 8015142:	3503      	adds	r5, #3
 8015144:	1a6d      	subs	r5, r5, r1
 8015146:	f025 0503 	bic.w	r5, r5, #3
 801514a:	3508      	adds	r5, #8
 801514c:	2d0c      	cmp	r5, #12
 801514e:	bf38      	it	cc
 8015150:	250c      	movcc	r5, #12
 8015152:	4629      	mov	r1, r5
 8015154:	4638      	mov	r0, r7
 8015156:	f7ff ffa5 	bl	80150a4 <sbrk_aligned>
 801515a:	3001      	adds	r0, #1
 801515c:	d02b      	beq.n	80151b6 <_malloc_r+0xd2>
 801515e:	6823      	ldr	r3, [r4, #0]
 8015160:	442b      	add	r3, r5
 8015162:	6023      	str	r3, [r4, #0]
 8015164:	e00e      	b.n	8015184 <_malloc_r+0xa0>
 8015166:	6822      	ldr	r2, [r4, #0]
 8015168:	1b52      	subs	r2, r2, r5
 801516a:	d41e      	bmi.n	80151aa <_malloc_r+0xc6>
 801516c:	2a0b      	cmp	r2, #11
 801516e:	d916      	bls.n	801519e <_malloc_r+0xba>
 8015170:	1961      	adds	r1, r4, r5
 8015172:	42a3      	cmp	r3, r4
 8015174:	6025      	str	r5, [r4, #0]
 8015176:	bf18      	it	ne
 8015178:	6059      	strne	r1, [r3, #4]
 801517a:	6863      	ldr	r3, [r4, #4]
 801517c:	bf08      	it	eq
 801517e:	6031      	streq	r1, [r6, #0]
 8015180:	5162      	str	r2, [r4, r5]
 8015182:	604b      	str	r3, [r1, #4]
 8015184:	4638      	mov	r0, r7
 8015186:	f104 060b 	add.w	r6, r4, #11
 801518a:	f000 fb1f 	bl	80157cc <__malloc_unlock>
 801518e:	f026 0607 	bic.w	r6, r6, #7
 8015192:	1d23      	adds	r3, r4, #4
 8015194:	1af2      	subs	r2, r6, r3
 8015196:	d0b6      	beq.n	8015106 <_malloc_r+0x22>
 8015198:	1b9b      	subs	r3, r3, r6
 801519a:	50a3      	str	r3, [r4, r2]
 801519c:	e7b3      	b.n	8015106 <_malloc_r+0x22>
 801519e:	6862      	ldr	r2, [r4, #4]
 80151a0:	42a3      	cmp	r3, r4
 80151a2:	bf0c      	ite	eq
 80151a4:	6032      	streq	r2, [r6, #0]
 80151a6:	605a      	strne	r2, [r3, #4]
 80151a8:	e7ec      	b.n	8015184 <_malloc_r+0xa0>
 80151aa:	4623      	mov	r3, r4
 80151ac:	6864      	ldr	r4, [r4, #4]
 80151ae:	e7b2      	b.n	8015116 <_malloc_r+0x32>
 80151b0:	4634      	mov	r4, r6
 80151b2:	6876      	ldr	r6, [r6, #4]
 80151b4:	e7b9      	b.n	801512a <_malloc_r+0x46>
 80151b6:	230c      	movs	r3, #12
 80151b8:	603b      	str	r3, [r7, #0]
 80151ba:	4638      	mov	r0, r7
 80151bc:	f000 fb06 	bl	80157cc <__malloc_unlock>
 80151c0:	e7a1      	b.n	8015106 <_malloc_r+0x22>
 80151c2:	6025      	str	r5, [r4, #0]
 80151c4:	e7de      	b.n	8015184 <_malloc_r+0xa0>
 80151c6:	bf00      	nop
 80151c8:	2000c290 	.word	0x2000c290

080151cc <iprintf>:
 80151cc:	b40f      	push	{r0, r1, r2, r3}
 80151ce:	4b0a      	ldr	r3, [pc, #40]	; (80151f8 <iprintf+0x2c>)
 80151d0:	b513      	push	{r0, r1, r4, lr}
 80151d2:	681c      	ldr	r4, [r3, #0]
 80151d4:	b124      	cbz	r4, 80151e0 <iprintf+0x14>
 80151d6:	69a3      	ldr	r3, [r4, #24]
 80151d8:	b913      	cbnz	r3, 80151e0 <iprintf+0x14>
 80151da:	4620      	mov	r0, r4
 80151dc:	f000 fa3e 	bl	801565c <__sinit>
 80151e0:	ab05      	add	r3, sp, #20
 80151e2:	9a04      	ldr	r2, [sp, #16]
 80151e4:	68a1      	ldr	r1, [r4, #8]
 80151e6:	9301      	str	r3, [sp, #4]
 80151e8:	4620      	mov	r0, r4
 80151ea:	f000 fca9 	bl	8015b40 <_vfiprintf_r>
 80151ee:	b002      	add	sp, #8
 80151f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80151f4:	b004      	add	sp, #16
 80151f6:	4770      	bx	lr
 80151f8:	20000094 	.word	0x20000094

080151fc <srand>:
 80151fc:	b538      	push	{r3, r4, r5, lr}
 80151fe:	4b10      	ldr	r3, [pc, #64]	; (8015240 <srand+0x44>)
 8015200:	681d      	ldr	r5, [r3, #0]
 8015202:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8015204:	4604      	mov	r4, r0
 8015206:	b9b3      	cbnz	r3, 8015236 <srand+0x3a>
 8015208:	2018      	movs	r0, #24
 801520a:	f7ff fea9 	bl	8014f60 <malloc>
 801520e:	4602      	mov	r2, r0
 8015210:	63a8      	str	r0, [r5, #56]	; 0x38
 8015212:	b920      	cbnz	r0, 801521e <srand+0x22>
 8015214:	4b0b      	ldr	r3, [pc, #44]	; (8015244 <srand+0x48>)
 8015216:	480c      	ldr	r0, [pc, #48]	; (8015248 <srand+0x4c>)
 8015218:	2142      	movs	r1, #66	; 0x42
 801521a:	f000 f99d 	bl	8015558 <__assert_func>
 801521e:	490b      	ldr	r1, [pc, #44]	; (801524c <srand+0x50>)
 8015220:	4b0b      	ldr	r3, [pc, #44]	; (8015250 <srand+0x54>)
 8015222:	e9c0 1300 	strd	r1, r3, [r0]
 8015226:	4b0b      	ldr	r3, [pc, #44]	; (8015254 <srand+0x58>)
 8015228:	6083      	str	r3, [r0, #8]
 801522a:	230b      	movs	r3, #11
 801522c:	8183      	strh	r3, [r0, #12]
 801522e:	2100      	movs	r1, #0
 8015230:	2001      	movs	r0, #1
 8015232:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015236:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8015238:	2200      	movs	r2, #0
 801523a:	611c      	str	r4, [r3, #16]
 801523c:	615a      	str	r2, [r3, #20]
 801523e:	bd38      	pop	{r3, r4, r5, pc}
 8015240:	20000094 	.word	0x20000094
 8015244:	08017264 	.word	0x08017264
 8015248:	0801727b 	.word	0x0801727b
 801524c:	abcd330e 	.word	0xabcd330e
 8015250:	e66d1234 	.word	0xe66d1234
 8015254:	0005deec 	.word	0x0005deec

08015258 <rand>:
 8015258:	4b16      	ldr	r3, [pc, #88]	; (80152b4 <rand+0x5c>)
 801525a:	b510      	push	{r4, lr}
 801525c:	681c      	ldr	r4, [r3, #0]
 801525e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015260:	b9b3      	cbnz	r3, 8015290 <rand+0x38>
 8015262:	2018      	movs	r0, #24
 8015264:	f7ff fe7c 	bl	8014f60 <malloc>
 8015268:	63a0      	str	r0, [r4, #56]	; 0x38
 801526a:	b928      	cbnz	r0, 8015278 <rand+0x20>
 801526c:	4602      	mov	r2, r0
 801526e:	4b12      	ldr	r3, [pc, #72]	; (80152b8 <rand+0x60>)
 8015270:	4812      	ldr	r0, [pc, #72]	; (80152bc <rand+0x64>)
 8015272:	214e      	movs	r1, #78	; 0x4e
 8015274:	f000 f970 	bl	8015558 <__assert_func>
 8015278:	4a11      	ldr	r2, [pc, #68]	; (80152c0 <rand+0x68>)
 801527a:	4b12      	ldr	r3, [pc, #72]	; (80152c4 <rand+0x6c>)
 801527c:	e9c0 2300 	strd	r2, r3, [r0]
 8015280:	4b11      	ldr	r3, [pc, #68]	; (80152c8 <rand+0x70>)
 8015282:	6083      	str	r3, [r0, #8]
 8015284:	230b      	movs	r3, #11
 8015286:	8183      	strh	r3, [r0, #12]
 8015288:	2201      	movs	r2, #1
 801528a:	2300      	movs	r3, #0
 801528c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8015290:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8015292:	4a0e      	ldr	r2, [pc, #56]	; (80152cc <rand+0x74>)
 8015294:	6920      	ldr	r0, [r4, #16]
 8015296:	6963      	ldr	r3, [r4, #20]
 8015298:	490d      	ldr	r1, [pc, #52]	; (80152d0 <rand+0x78>)
 801529a:	4342      	muls	r2, r0
 801529c:	fb01 2203 	mla	r2, r1, r3, r2
 80152a0:	fba0 0101 	umull	r0, r1, r0, r1
 80152a4:	1c43      	adds	r3, r0, #1
 80152a6:	eb42 0001 	adc.w	r0, r2, r1
 80152aa:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80152ae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80152b2:	bd10      	pop	{r4, pc}
 80152b4:	20000094 	.word	0x20000094
 80152b8:	08017264 	.word	0x08017264
 80152bc:	0801727b 	.word	0x0801727b
 80152c0:	abcd330e 	.word	0xabcd330e
 80152c4:	e66d1234 	.word	0xe66d1234
 80152c8:	0005deec 	.word	0x0005deec
 80152cc:	5851f42d 	.word	0x5851f42d
 80152d0:	4c957f2d 	.word	0x4c957f2d

080152d4 <realloc>:
 80152d4:	4b02      	ldr	r3, [pc, #8]	; (80152e0 <realloc+0xc>)
 80152d6:	460a      	mov	r2, r1
 80152d8:	4601      	mov	r1, r0
 80152da:	6818      	ldr	r0, [r3, #0]
 80152dc:	f000 ba7c 	b.w	80157d8 <_realloc_r>
 80152e0:	20000094 	.word	0x20000094

080152e4 <_sbrk_r>:
 80152e4:	b538      	push	{r3, r4, r5, lr}
 80152e6:	4d06      	ldr	r5, [pc, #24]	; (8015300 <_sbrk_r+0x1c>)
 80152e8:	2300      	movs	r3, #0
 80152ea:	4604      	mov	r4, r0
 80152ec:	4608      	mov	r0, r1
 80152ee:	602b      	str	r3, [r5, #0]
 80152f0:	f7ed f8d2 	bl	8002498 <_sbrk>
 80152f4:	1c43      	adds	r3, r0, #1
 80152f6:	d102      	bne.n	80152fe <_sbrk_r+0x1a>
 80152f8:	682b      	ldr	r3, [r5, #0]
 80152fa:	b103      	cbz	r3, 80152fe <_sbrk_r+0x1a>
 80152fc:	6023      	str	r3, [r4, #0]
 80152fe:	bd38      	pop	{r3, r4, r5, pc}
 8015300:	2000c29c 	.word	0x2000c29c

08015304 <sniprintf>:
 8015304:	b40c      	push	{r2, r3}
 8015306:	b530      	push	{r4, r5, lr}
 8015308:	4b17      	ldr	r3, [pc, #92]	; (8015368 <sniprintf+0x64>)
 801530a:	1e0c      	subs	r4, r1, #0
 801530c:	681d      	ldr	r5, [r3, #0]
 801530e:	b09d      	sub	sp, #116	; 0x74
 8015310:	da08      	bge.n	8015324 <sniprintf+0x20>
 8015312:	238b      	movs	r3, #139	; 0x8b
 8015314:	602b      	str	r3, [r5, #0]
 8015316:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801531a:	b01d      	add	sp, #116	; 0x74
 801531c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015320:	b002      	add	sp, #8
 8015322:	4770      	bx	lr
 8015324:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015328:	f8ad 3014 	strh.w	r3, [sp, #20]
 801532c:	bf14      	ite	ne
 801532e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8015332:	4623      	moveq	r3, r4
 8015334:	9304      	str	r3, [sp, #16]
 8015336:	9307      	str	r3, [sp, #28]
 8015338:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801533c:	9002      	str	r0, [sp, #8]
 801533e:	9006      	str	r0, [sp, #24]
 8015340:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015344:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015346:	ab21      	add	r3, sp, #132	; 0x84
 8015348:	a902      	add	r1, sp, #8
 801534a:	4628      	mov	r0, r5
 801534c:	9301      	str	r3, [sp, #4]
 801534e:	f000 facd 	bl	80158ec <_svfiprintf_r>
 8015352:	1c43      	adds	r3, r0, #1
 8015354:	bfbc      	itt	lt
 8015356:	238b      	movlt	r3, #139	; 0x8b
 8015358:	602b      	strlt	r3, [r5, #0]
 801535a:	2c00      	cmp	r4, #0
 801535c:	d0dd      	beq.n	801531a <sniprintf+0x16>
 801535e:	9b02      	ldr	r3, [sp, #8]
 8015360:	2200      	movs	r2, #0
 8015362:	701a      	strb	r2, [r3, #0]
 8015364:	e7d9      	b.n	801531a <sniprintf+0x16>
 8015366:	bf00      	nop
 8015368:	20000094 	.word	0x20000094

0801536c <strchr>:
 801536c:	b2c9      	uxtb	r1, r1
 801536e:	4603      	mov	r3, r0
 8015370:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015374:	b11a      	cbz	r2, 801537e <strchr+0x12>
 8015376:	428a      	cmp	r2, r1
 8015378:	d1f9      	bne.n	801536e <strchr+0x2>
 801537a:	4618      	mov	r0, r3
 801537c:	4770      	bx	lr
 801537e:	2900      	cmp	r1, #0
 8015380:	bf18      	it	ne
 8015382:	2300      	movne	r3, #0
 8015384:	e7f9      	b.n	801537a <strchr+0xe>

08015386 <strcpy>:
 8015386:	4603      	mov	r3, r0
 8015388:	f811 2b01 	ldrb.w	r2, [r1], #1
 801538c:	f803 2b01 	strb.w	r2, [r3], #1
 8015390:	2a00      	cmp	r2, #0
 8015392:	d1f9      	bne.n	8015388 <strcpy+0x2>
 8015394:	4770      	bx	lr

08015396 <strncmp>:
 8015396:	b510      	push	{r4, lr}
 8015398:	b17a      	cbz	r2, 80153ba <strncmp+0x24>
 801539a:	4603      	mov	r3, r0
 801539c:	3901      	subs	r1, #1
 801539e:	1884      	adds	r4, r0, r2
 80153a0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80153a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80153a8:	4290      	cmp	r0, r2
 80153aa:	d101      	bne.n	80153b0 <strncmp+0x1a>
 80153ac:	42a3      	cmp	r3, r4
 80153ae:	d101      	bne.n	80153b4 <strncmp+0x1e>
 80153b0:	1a80      	subs	r0, r0, r2
 80153b2:	bd10      	pop	{r4, pc}
 80153b4:	2800      	cmp	r0, #0
 80153b6:	d1f3      	bne.n	80153a0 <strncmp+0xa>
 80153b8:	e7fa      	b.n	80153b0 <strncmp+0x1a>
 80153ba:	4610      	mov	r0, r2
 80153bc:	e7f9      	b.n	80153b2 <strncmp+0x1c>

080153be <strstr>:
 80153be:	780a      	ldrb	r2, [r1, #0]
 80153c0:	b570      	push	{r4, r5, r6, lr}
 80153c2:	b96a      	cbnz	r2, 80153e0 <strstr+0x22>
 80153c4:	bd70      	pop	{r4, r5, r6, pc}
 80153c6:	429a      	cmp	r2, r3
 80153c8:	d109      	bne.n	80153de <strstr+0x20>
 80153ca:	460c      	mov	r4, r1
 80153cc:	4605      	mov	r5, r0
 80153ce:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d0f6      	beq.n	80153c4 <strstr+0x6>
 80153d6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80153da:	429e      	cmp	r6, r3
 80153dc:	d0f7      	beq.n	80153ce <strstr+0x10>
 80153de:	3001      	adds	r0, #1
 80153e0:	7803      	ldrb	r3, [r0, #0]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d1ef      	bne.n	80153c6 <strstr+0x8>
 80153e6:	4618      	mov	r0, r3
 80153e8:	e7ec      	b.n	80153c4 <strstr+0x6>
	...

080153ec <_strtoul_l.constprop.0>:
 80153ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80153f0:	4f36      	ldr	r7, [pc, #216]	; (80154cc <_strtoul_l.constprop.0+0xe0>)
 80153f2:	4686      	mov	lr, r0
 80153f4:	460d      	mov	r5, r1
 80153f6:	4628      	mov	r0, r5
 80153f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80153fc:	5de6      	ldrb	r6, [r4, r7]
 80153fe:	f016 0608 	ands.w	r6, r6, #8
 8015402:	d1f8      	bne.n	80153f6 <_strtoul_l.constprop.0+0xa>
 8015404:	2c2d      	cmp	r4, #45	; 0x2d
 8015406:	d12f      	bne.n	8015468 <_strtoul_l.constprop.0+0x7c>
 8015408:	782c      	ldrb	r4, [r5, #0]
 801540a:	2601      	movs	r6, #1
 801540c:	1c85      	adds	r5, r0, #2
 801540e:	2b00      	cmp	r3, #0
 8015410:	d057      	beq.n	80154c2 <_strtoul_l.constprop.0+0xd6>
 8015412:	2b10      	cmp	r3, #16
 8015414:	d109      	bne.n	801542a <_strtoul_l.constprop.0+0x3e>
 8015416:	2c30      	cmp	r4, #48	; 0x30
 8015418:	d107      	bne.n	801542a <_strtoul_l.constprop.0+0x3e>
 801541a:	7828      	ldrb	r0, [r5, #0]
 801541c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8015420:	2858      	cmp	r0, #88	; 0x58
 8015422:	d149      	bne.n	80154b8 <_strtoul_l.constprop.0+0xcc>
 8015424:	786c      	ldrb	r4, [r5, #1]
 8015426:	2310      	movs	r3, #16
 8015428:	3502      	adds	r5, #2
 801542a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801542e:	2700      	movs	r7, #0
 8015430:	fbb8 f8f3 	udiv	r8, r8, r3
 8015434:	fb03 f908 	mul.w	r9, r3, r8
 8015438:	ea6f 0909 	mvn.w	r9, r9
 801543c:	4638      	mov	r0, r7
 801543e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8015442:	f1bc 0f09 	cmp.w	ip, #9
 8015446:	d814      	bhi.n	8015472 <_strtoul_l.constprop.0+0x86>
 8015448:	4664      	mov	r4, ip
 801544a:	42a3      	cmp	r3, r4
 801544c:	dd22      	ble.n	8015494 <_strtoul_l.constprop.0+0xa8>
 801544e:	2f00      	cmp	r7, #0
 8015450:	db1d      	blt.n	801548e <_strtoul_l.constprop.0+0xa2>
 8015452:	4580      	cmp	r8, r0
 8015454:	d31b      	bcc.n	801548e <_strtoul_l.constprop.0+0xa2>
 8015456:	d101      	bne.n	801545c <_strtoul_l.constprop.0+0x70>
 8015458:	45a1      	cmp	r9, r4
 801545a:	db18      	blt.n	801548e <_strtoul_l.constprop.0+0xa2>
 801545c:	fb00 4003 	mla	r0, r0, r3, r4
 8015460:	2701      	movs	r7, #1
 8015462:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015466:	e7ea      	b.n	801543e <_strtoul_l.constprop.0+0x52>
 8015468:	2c2b      	cmp	r4, #43	; 0x2b
 801546a:	bf04      	itt	eq
 801546c:	782c      	ldrbeq	r4, [r5, #0]
 801546e:	1c85      	addeq	r5, r0, #2
 8015470:	e7cd      	b.n	801540e <_strtoul_l.constprop.0+0x22>
 8015472:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8015476:	f1bc 0f19 	cmp.w	ip, #25
 801547a:	d801      	bhi.n	8015480 <_strtoul_l.constprop.0+0x94>
 801547c:	3c37      	subs	r4, #55	; 0x37
 801547e:	e7e4      	b.n	801544a <_strtoul_l.constprop.0+0x5e>
 8015480:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8015484:	f1bc 0f19 	cmp.w	ip, #25
 8015488:	d804      	bhi.n	8015494 <_strtoul_l.constprop.0+0xa8>
 801548a:	3c57      	subs	r4, #87	; 0x57
 801548c:	e7dd      	b.n	801544a <_strtoul_l.constprop.0+0x5e>
 801548e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015492:	e7e6      	b.n	8015462 <_strtoul_l.constprop.0+0x76>
 8015494:	2f00      	cmp	r7, #0
 8015496:	da07      	bge.n	80154a8 <_strtoul_l.constprop.0+0xbc>
 8015498:	2322      	movs	r3, #34	; 0x22
 801549a:	f8ce 3000 	str.w	r3, [lr]
 801549e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80154a2:	b932      	cbnz	r2, 80154b2 <_strtoul_l.constprop.0+0xc6>
 80154a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80154a8:	b106      	cbz	r6, 80154ac <_strtoul_l.constprop.0+0xc0>
 80154aa:	4240      	negs	r0, r0
 80154ac:	2a00      	cmp	r2, #0
 80154ae:	d0f9      	beq.n	80154a4 <_strtoul_l.constprop.0+0xb8>
 80154b0:	b107      	cbz	r7, 80154b4 <_strtoul_l.constprop.0+0xc8>
 80154b2:	1e69      	subs	r1, r5, #1
 80154b4:	6011      	str	r1, [r2, #0]
 80154b6:	e7f5      	b.n	80154a4 <_strtoul_l.constprop.0+0xb8>
 80154b8:	2430      	movs	r4, #48	; 0x30
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d1b5      	bne.n	801542a <_strtoul_l.constprop.0+0x3e>
 80154be:	2308      	movs	r3, #8
 80154c0:	e7b3      	b.n	801542a <_strtoul_l.constprop.0+0x3e>
 80154c2:	2c30      	cmp	r4, #48	; 0x30
 80154c4:	d0a9      	beq.n	801541a <_strtoul_l.constprop.0+0x2e>
 80154c6:	230a      	movs	r3, #10
 80154c8:	e7af      	b.n	801542a <_strtoul_l.constprop.0+0x3e>
 80154ca:	bf00      	nop
 80154cc:	0801715d 	.word	0x0801715d

080154d0 <strtoul>:
 80154d0:	4613      	mov	r3, r2
 80154d2:	460a      	mov	r2, r1
 80154d4:	4601      	mov	r1, r0
 80154d6:	4802      	ldr	r0, [pc, #8]	; (80154e0 <strtoul+0x10>)
 80154d8:	6800      	ldr	r0, [r0, #0]
 80154da:	f7ff bf87 	b.w	80153ec <_strtoul_l.constprop.0>
 80154de:	bf00      	nop
 80154e0:	20000094 	.word	0x20000094

080154e4 <_vsniprintf_r>:
 80154e4:	b530      	push	{r4, r5, lr}
 80154e6:	4614      	mov	r4, r2
 80154e8:	2c00      	cmp	r4, #0
 80154ea:	b09b      	sub	sp, #108	; 0x6c
 80154ec:	4605      	mov	r5, r0
 80154ee:	461a      	mov	r2, r3
 80154f0:	da05      	bge.n	80154fe <_vsniprintf_r+0x1a>
 80154f2:	238b      	movs	r3, #139	; 0x8b
 80154f4:	6003      	str	r3, [r0, #0]
 80154f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80154fa:	b01b      	add	sp, #108	; 0x6c
 80154fc:	bd30      	pop	{r4, r5, pc}
 80154fe:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015502:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015506:	bf14      	ite	ne
 8015508:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801550c:	4623      	moveq	r3, r4
 801550e:	9302      	str	r3, [sp, #8]
 8015510:	9305      	str	r3, [sp, #20]
 8015512:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015516:	9100      	str	r1, [sp, #0]
 8015518:	9104      	str	r1, [sp, #16]
 801551a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801551e:	4669      	mov	r1, sp
 8015520:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015522:	f000 f9e3 	bl	80158ec <_svfiprintf_r>
 8015526:	1c43      	adds	r3, r0, #1
 8015528:	bfbc      	itt	lt
 801552a:	238b      	movlt	r3, #139	; 0x8b
 801552c:	602b      	strlt	r3, [r5, #0]
 801552e:	2c00      	cmp	r4, #0
 8015530:	d0e3      	beq.n	80154fa <_vsniprintf_r+0x16>
 8015532:	9b00      	ldr	r3, [sp, #0]
 8015534:	2200      	movs	r2, #0
 8015536:	701a      	strb	r2, [r3, #0]
 8015538:	e7df      	b.n	80154fa <_vsniprintf_r+0x16>
	...

0801553c <vsniprintf>:
 801553c:	b507      	push	{r0, r1, r2, lr}
 801553e:	9300      	str	r3, [sp, #0]
 8015540:	4613      	mov	r3, r2
 8015542:	460a      	mov	r2, r1
 8015544:	4601      	mov	r1, r0
 8015546:	4803      	ldr	r0, [pc, #12]	; (8015554 <vsniprintf+0x18>)
 8015548:	6800      	ldr	r0, [r0, #0]
 801554a:	f7ff ffcb 	bl	80154e4 <_vsniprintf_r>
 801554e:	b003      	add	sp, #12
 8015550:	f85d fb04 	ldr.w	pc, [sp], #4
 8015554:	20000094 	.word	0x20000094

08015558 <__assert_func>:
 8015558:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801555a:	4614      	mov	r4, r2
 801555c:	461a      	mov	r2, r3
 801555e:	4b09      	ldr	r3, [pc, #36]	; (8015584 <__assert_func+0x2c>)
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	4605      	mov	r5, r0
 8015564:	68d8      	ldr	r0, [r3, #12]
 8015566:	b14c      	cbz	r4, 801557c <__assert_func+0x24>
 8015568:	4b07      	ldr	r3, [pc, #28]	; (8015588 <__assert_func+0x30>)
 801556a:	9100      	str	r1, [sp, #0]
 801556c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015570:	4906      	ldr	r1, [pc, #24]	; (801558c <__assert_func+0x34>)
 8015572:	462b      	mov	r3, r5
 8015574:	f000 f8f0 	bl	8015758 <fiprintf>
 8015578:	f000 febc 	bl	80162f4 <abort>
 801557c:	4b04      	ldr	r3, [pc, #16]	; (8015590 <__assert_func+0x38>)
 801557e:	461c      	mov	r4, r3
 8015580:	e7f3      	b.n	801556a <__assert_func+0x12>
 8015582:	bf00      	nop
 8015584:	20000094 	.word	0x20000094
 8015588:	080172d6 	.word	0x080172d6
 801558c:	080172e3 	.word	0x080172e3
 8015590:	08017311 	.word	0x08017311

08015594 <__env_lock>:
 8015594:	4801      	ldr	r0, [pc, #4]	; (801559c <__env_lock+0x8>)
 8015596:	f000 b911 	b.w	80157bc <__retarget_lock_acquire_recursive>
 801559a:	bf00      	nop
 801559c:	2000c298 	.word	0x2000c298

080155a0 <__env_unlock>:
 80155a0:	4801      	ldr	r0, [pc, #4]	; (80155a8 <__env_unlock+0x8>)
 80155a2:	f000 b90c 	b.w	80157be <__retarget_lock_release_recursive>
 80155a6:	bf00      	nop
 80155a8:	2000c298 	.word	0x2000c298

080155ac <std>:
 80155ac:	2300      	movs	r3, #0
 80155ae:	b510      	push	{r4, lr}
 80155b0:	4604      	mov	r4, r0
 80155b2:	e9c0 3300 	strd	r3, r3, [r0]
 80155b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80155ba:	6083      	str	r3, [r0, #8]
 80155bc:	8181      	strh	r1, [r0, #12]
 80155be:	6643      	str	r3, [r0, #100]	; 0x64
 80155c0:	81c2      	strh	r2, [r0, #14]
 80155c2:	6183      	str	r3, [r0, #24]
 80155c4:	4619      	mov	r1, r3
 80155c6:	2208      	movs	r2, #8
 80155c8:	305c      	adds	r0, #92	; 0x5c
 80155ca:	f7ff fd01 	bl	8014fd0 <memset>
 80155ce:	4b05      	ldr	r3, [pc, #20]	; (80155e4 <std+0x38>)
 80155d0:	6263      	str	r3, [r4, #36]	; 0x24
 80155d2:	4b05      	ldr	r3, [pc, #20]	; (80155e8 <std+0x3c>)
 80155d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80155d6:	4b05      	ldr	r3, [pc, #20]	; (80155ec <std+0x40>)
 80155d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80155da:	4b05      	ldr	r3, [pc, #20]	; (80155f0 <std+0x44>)
 80155dc:	6224      	str	r4, [r4, #32]
 80155de:	6323      	str	r3, [r4, #48]	; 0x30
 80155e0:	bd10      	pop	{r4, pc}
 80155e2:	bf00      	nop
 80155e4:	080160c9 	.word	0x080160c9
 80155e8:	080160eb 	.word	0x080160eb
 80155ec:	08016123 	.word	0x08016123
 80155f0:	08016147 	.word	0x08016147

080155f4 <_cleanup_r>:
 80155f4:	4901      	ldr	r1, [pc, #4]	; (80155fc <_cleanup_r+0x8>)
 80155f6:	f000 b8c1 	b.w	801577c <_fwalk_reent>
 80155fa:	bf00      	nop
 80155fc:	08016431 	.word	0x08016431

08015600 <__sfmoreglue>:
 8015600:	b570      	push	{r4, r5, r6, lr}
 8015602:	2268      	movs	r2, #104	; 0x68
 8015604:	1e4d      	subs	r5, r1, #1
 8015606:	4355      	muls	r5, r2
 8015608:	460e      	mov	r6, r1
 801560a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801560e:	f7ff fd69 	bl	80150e4 <_malloc_r>
 8015612:	4604      	mov	r4, r0
 8015614:	b140      	cbz	r0, 8015628 <__sfmoreglue+0x28>
 8015616:	2100      	movs	r1, #0
 8015618:	e9c0 1600 	strd	r1, r6, [r0]
 801561c:	300c      	adds	r0, #12
 801561e:	60a0      	str	r0, [r4, #8]
 8015620:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015624:	f7ff fcd4 	bl	8014fd0 <memset>
 8015628:	4620      	mov	r0, r4
 801562a:	bd70      	pop	{r4, r5, r6, pc}

0801562c <__sfp_lock_acquire>:
 801562c:	4801      	ldr	r0, [pc, #4]	; (8015634 <__sfp_lock_acquire+0x8>)
 801562e:	f000 b8c5 	b.w	80157bc <__retarget_lock_acquire_recursive>
 8015632:	bf00      	nop
 8015634:	2000c29a 	.word	0x2000c29a

08015638 <__sfp_lock_release>:
 8015638:	4801      	ldr	r0, [pc, #4]	; (8015640 <__sfp_lock_release+0x8>)
 801563a:	f000 b8c0 	b.w	80157be <__retarget_lock_release_recursive>
 801563e:	bf00      	nop
 8015640:	2000c29a 	.word	0x2000c29a

08015644 <__sinit_lock_acquire>:
 8015644:	4801      	ldr	r0, [pc, #4]	; (801564c <__sinit_lock_acquire+0x8>)
 8015646:	f000 b8b9 	b.w	80157bc <__retarget_lock_acquire_recursive>
 801564a:	bf00      	nop
 801564c:	2000c29b 	.word	0x2000c29b

08015650 <__sinit_lock_release>:
 8015650:	4801      	ldr	r0, [pc, #4]	; (8015658 <__sinit_lock_release+0x8>)
 8015652:	f000 b8b4 	b.w	80157be <__retarget_lock_release_recursive>
 8015656:	bf00      	nop
 8015658:	2000c29b 	.word	0x2000c29b

0801565c <__sinit>:
 801565c:	b510      	push	{r4, lr}
 801565e:	4604      	mov	r4, r0
 8015660:	f7ff fff0 	bl	8015644 <__sinit_lock_acquire>
 8015664:	69a3      	ldr	r3, [r4, #24]
 8015666:	b11b      	cbz	r3, 8015670 <__sinit+0x14>
 8015668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801566c:	f7ff bff0 	b.w	8015650 <__sinit_lock_release>
 8015670:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015674:	6523      	str	r3, [r4, #80]	; 0x50
 8015676:	4b13      	ldr	r3, [pc, #76]	; (80156c4 <__sinit+0x68>)
 8015678:	4a13      	ldr	r2, [pc, #76]	; (80156c8 <__sinit+0x6c>)
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	62a2      	str	r2, [r4, #40]	; 0x28
 801567e:	42a3      	cmp	r3, r4
 8015680:	bf04      	itt	eq
 8015682:	2301      	moveq	r3, #1
 8015684:	61a3      	streq	r3, [r4, #24]
 8015686:	4620      	mov	r0, r4
 8015688:	f000 f820 	bl	80156cc <__sfp>
 801568c:	6060      	str	r0, [r4, #4]
 801568e:	4620      	mov	r0, r4
 8015690:	f000 f81c 	bl	80156cc <__sfp>
 8015694:	60a0      	str	r0, [r4, #8]
 8015696:	4620      	mov	r0, r4
 8015698:	f000 f818 	bl	80156cc <__sfp>
 801569c:	2200      	movs	r2, #0
 801569e:	60e0      	str	r0, [r4, #12]
 80156a0:	2104      	movs	r1, #4
 80156a2:	6860      	ldr	r0, [r4, #4]
 80156a4:	f7ff ff82 	bl	80155ac <std>
 80156a8:	68a0      	ldr	r0, [r4, #8]
 80156aa:	2201      	movs	r2, #1
 80156ac:	2109      	movs	r1, #9
 80156ae:	f7ff ff7d 	bl	80155ac <std>
 80156b2:	68e0      	ldr	r0, [r4, #12]
 80156b4:	2202      	movs	r2, #2
 80156b6:	2112      	movs	r1, #18
 80156b8:	f7ff ff78 	bl	80155ac <std>
 80156bc:	2301      	movs	r3, #1
 80156be:	61a3      	str	r3, [r4, #24]
 80156c0:	e7d2      	b.n	8015668 <__sinit+0xc>
 80156c2:	bf00      	nop
 80156c4:	08017260 	.word	0x08017260
 80156c8:	080155f5 	.word	0x080155f5

080156cc <__sfp>:
 80156cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156ce:	4607      	mov	r7, r0
 80156d0:	f7ff ffac 	bl	801562c <__sfp_lock_acquire>
 80156d4:	4b1e      	ldr	r3, [pc, #120]	; (8015750 <__sfp+0x84>)
 80156d6:	681e      	ldr	r6, [r3, #0]
 80156d8:	69b3      	ldr	r3, [r6, #24]
 80156da:	b913      	cbnz	r3, 80156e2 <__sfp+0x16>
 80156dc:	4630      	mov	r0, r6
 80156de:	f7ff ffbd 	bl	801565c <__sinit>
 80156e2:	3648      	adds	r6, #72	; 0x48
 80156e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80156e8:	3b01      	subs	r3, #1
 80156ea:	d503      	bpl.n	80156f4 <__sfp+0x28>
 80156ec:	6833      	ldr	r3, [r6, #0]
 80156ee:	b30b      	cbz	r3, 8015734 <__sfp+0x68>
 80156f0:	6836      	ldr	r6, [r6, #0]
 80156f2:	e7f7      	b.n	80156e4 <__sfp+0x18>
 80156f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80156f8:	b9d5      	cbnz	r5, 8015730 <__sfp+0x64>
 80156fa:	4b16      	ldr	r3, [pc, #88]	; (8015754 <__sfp+0x88>)
 80156fc:	60e3      	str	r3, [r4, #12]
 80156fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015702:	6665      	str	r5, [r4, #100]	; 0x64
 8015704:	f000 f859 	bl	80157ba <__retarget_lock_init_recursive>
 8015708:	f7ff ff96 	bl	8015638 <__sfp_lock_release>
 801570c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015710:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015714:	6025      	str	r5, [r4, #0]
 8015716:	61a5      	str	r5, [r4, #24]
 8015718:	2208      	movs	r2, #8
 801571a:	4629      	mov	r1, r5
 801571c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015720:	f7ff fc56 	bl	8014fd0 <memset>
 8015724:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015728:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801572c:	4620      	mov	r0, r4
 801572e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015730:	3468      	adds	r4, #104	; 0x68
 8015732:	e7d9      	b.n	80156e8 <__sfp+0x1c>
 8015734:	2104      	movs	r1, #4
 8015736:	4638      	mov	r0, r7
 8015738:	f7ff ff62 	bl	8015600 <__sfmoreglue>
 801573c:	4604      	mov	r4, r0
 801573e:	6030      	str	r0, [r6, #0]
 8015740:	2800      	cmp	r0, #0
 8015742:	d1d5      	bne.n	80156f0 <__sfp+0x24>
 8015744:	f7ff ff78 	bl	8015638 <__sfp_lock_release>
 8015748:	230c      	movs	r3, #12
 801574a:	603b      	str	r3, [r7, #0]
 801574c:	e7ee      	b.n	801572c <__sfp+0x60>
 801574e:	bf00      	nop
 8015750:	08017260 	.word	0x08017260
 8015754:	ffff0001 	.word	0xffff0001

08015758 <fiprintf>:
 8015758:	b40e      	push	{r1, r2, r3}
 801575a:	b503      	push	{r0, r1, lr}
 801575c:	4601      	mov	r1, r0
 801575e:	ab03      	add	r3, sp, #12
 8015760:	4805      	ldr	r0, [pc, #20]	; (8015778 <fiprintf+0x20>)
 8015762:	f853 2b04 	ldr.w	r2, [r3], #4
 8015766:	6800      	ldr	r0, [r0, #0]
 8015768:	9301      	str	r3, [sp, #4]
 801576a:	f000 f9e9 	bl	8015b40 <_vfiprintf_r>
 801576e:	b002      	add	sp, #8
 8015770:	f85d eb04 	ldr.w	lr, [sp], #4
 8015774:	b003      	add	sp, #12
 8015776:	4770      	bx	lr
 8015778:	20000094 	.word	0x20000094

0801577c <_fwalk_reent>:
 801577c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015780:	4606      	mov	r6, r0
 8015782:	4688      	mov	r8, r1
 8015784:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015788:	2700      	movs	r7, #0
 801578a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801578e:	f1b9 0901 	subs.w	r9, r9, #1
 8015792:	d505      	bpl.n	80157a0 <_fwalk_reent+0x24>
 8015794:	6824      	ldr	r4, [r4, #0]
 8015796:	2c00      	cmp	r4, #0
 8015798:	d1f7      	bne.n	801578a <_fwalk_reent+0xe>
 801579a:	4638      	mov	r0, r7
 801579c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80157a0:	89ab      	ldrh	r3, [r5, #12]
 80157a2:	2b01      	cmp	r3, #1
 80157a4:	d907      	bls.n	80157b6 <_fwalk_reent+0x3a>
 80157a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80157aa:	3301      	adds	r3, #1
 80157ac:	d003      	beq.n	80157b6 <_fwalk_reent+0x3a>
 80157ae:	4629      	mov	r1, r5
 80157b0:	4630      	mov	r0, r6
 80157b2:	47c0      	blx	r8
 80157b4:	4307      	orrs	r7, r0
 80157b6:	3568      	adds	r5, #104	; 0x68
 80157b8:	e7e9      	b.n	801578e <_fwalk_reent+0x12>

080157ba <__retarget_lock_init_recursive>:
 80157ba:	4770      	bx	lr

080157bc <__retarget_lock_acquire_recursive>:
 80157bc:	4770      	bx	lr

080157be <__retarget_lock_release_recursive>:
 80157be:	4770      	bx	lr

080157c0 <__malloc_lock>:
 80157c0:	4801      	ldr	r0, [pc, #4]	; (80157c8 <__malloc_lock+0x8>)
 80157c2:	f7ff bffb 	b.w	80157bc <__retarget_lock_acquire_recursive>
 80157c6:	bf00      	nop
 80157c8:	2000c299 	.word	0x2000c299

080157cc <__malloc_unlock>:
 80157cc:	4801      	ldr	r0, [pc, #4]	; (80157d4 <__malloc_unlock+0x8>)
 80157ce:	f7ff bff6 	b.w	80157be <__retarget_lock_release_recursive>
 80157d2:	bf00      	nop
 80157d4:	2000c299 	.word	0x2000c299

080157d8 <_realloc_r>:
 80157d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157dc:	4680      	mov	r8, r0
 80157de:	4614      	mov	r4, r2
 80157e0:	460e      	mov	r6, r1
 80157e2:	b921      	cbnz	r1, 80157ee <_realloc_r+0x16>
 80157e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80157e8:	4611      	mov	r1, r2
 80157ea:	f7ff bc7b 	b.w	80150e4 <_malloc_r>
 80157ee:	b92a      	cbnz	r2, 80157fc <_realloc_r+0x24>
 80157f0:	f7ff fc0c 	bl	801500c <_free_r>
 80157f4:	4625      	mov	r5, r4
 80157f6:	4628      	mov	r0, r5
 80157f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157fc:	f000 fecc 	bl	8016598 <_malloc_usable_size_r>
 8015800:	4284      	cmp	r4, r0
 8015802:	4607      	mov	r7, r0
 8015804:	d802      	bhi.n	801580c <_realloc_r+0x34>
 8015806:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801580a:	d812      	bhi.n	8015832 <_realloc_r+0x5a>
 801580c:	4621      	mov	r1, r4
 801580e:	4640      	mov	r0, r8
 8015810:	f7ff fc68 	bl	80150e4 <_malloc_r>
 8015814:	4605      	mov	r5, r0
 8015816:	2800      	cmp	r0, #0
 8015818:	d0ed      	beq.n	80157f6 <_realloc_r+0x1e>
 801581a:	42bc      	cmp	r4, r7
 801581c:	4622      	mov	r2, r4
 801581e:	4631      	mov	r1, r6
 8015820:	bf28      	it	cs
 8015822:	463a      	movcs	r2, r7
 8015824:	f7ff fbac 	bl	8014f80 <memcpy>
 8015828:	4631      	mov	r1, r6
 801582a:	4640      	mov	r0, r8
 801582c:	f7ff fbee 	bl	801500c <_free_r>
 8015830:	e7e1      	b.n	80157f6 <_realloc_r+0x1e>
 8015832:	4635      	mov	r5, r6
 8015834:	e7df      	b.n	80157f6 <_realloc_r+0x1e>

08015836 <__ssputs_r>:
 8015836:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801583a:	688e      	ldr	r6, [r1, #8]
 801583c:	429e      	cmp	r6, r3
 801583e:	4682      	mov	sl, r0
 8015840:	460c      	mov	r4, r1
 8015842:	4690      	mov	r8, r2
 8015844:	461f      	mov	r7, r3
 8015846:	d838      	bhi.n	80158ba <__ssputs_r+0x84>
 8015848:	898a      	ldrh	r2, [r1, #12]
 801584a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801584e:	d032      	beq.n	80158b6 <__ssputs_r+0x80>
 8015850:	6825      	ldr	r5, [r4, #0]
 8015852:	6909      	ldr	r1, [r1, #16]
 8015854:	eba5 0901 	sub.w	r9, r5, r1
 8015858:	6965      	ldr	r5, [r4, #20]
 801585a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801585e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015862:	3301      	adds	r3, #1
 8015864:	444b      	add	r3, r9
 8015866:	106d      	asrs	r5, r5, #1
 8015868:	429d      	cmp	r5, r3
 801586a:	bf38      	it	cc
 801586c:	461d      	movcc	r5, r3
 801586e:	0553      	lsls	r3, r2, #21
 8015870:	d531      	bpl.n	80158d6 <__ssputs_r+0xa0>
 8015872:	4629      	mov	r1, r5
 8015874:	f7ff fc36 	bl	80150e4 <_malloc_r>
 8015878:	4606      	mov	r6, r0
 801587a:	b950      	cbnz	r0, 8015892 <__ssputs_r+0x5c>
 801587c:	230c      	movs	r3, #12
 801587e:	f8ca 3000 	str.w	r3, [sl]
 8015882:	89a3      	ldrh	r3, [r4, #12]
 8015884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015888:	81a3      	strh	r3, [r4, #12]
 801588a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801588e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015892:	6921      	ldr	r1, [r4, #16]
 8015894:	464a      	mov	r2, r9
 8015896:	f7ff fb73 	bl	8014f80 <memcpy>
 801589a:	89a3      	ldrh	r3, [r4, #12]
 801589c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80158a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80158a4:	81a3      	strh	r3, [r4, #12]
 80158a6:	6126      	str	r6, [r4, #16]
 80158a8:	6165      	str	r5, [r4, #20]
 80158aa:	444e      	add	r6, r9
 80158ac:	eba5 0509 	sub.w	r5, r5, r9
 80158b0:	6026      	str	r6, [r4, #0]
 80158b2:	60a5      	str	r5, [r4, #8]
 80158b4:	463e      	mov	r6, r7
 80158b6:	42be      	cmp	r6, r7
 80158b8:	d900      	bls.n	80158bc <__ssputs_r+0x86>
 80158ba:	463e      	mov	r6, r7
 80158bc:	6820      	ldr	r0, [r4, #0]
 80158be:	4632      	mov	r2, r6
 80158c0:	4641      	mov	r1, r8
 80158c2:	f7ff fb6b 	bl	8014f9c <memmove>
 80158c6:	68a3      	ldr	r3, [r4, #8]
 80158c8:	1b9b      	subs	r3, r3, r6
 80158ca:	60a3      	str	r3, [r4, #8]
 80158cc:	6823      	ldr	r3, [r4, #0]
 80158ce:	4433      	add	r3, r6
 80158d0:	6023      	str	r3, [r4, #0]
 80158d2:	2000      	movs	r0, #0
 80158d4:	e7db      	b.n	801588e <__ssputs_r+0x58>
 80158d6:	462a      	mov	r2, r5
 80158d8:	f7ff ff7e 	bl	80157d8 <_realloc_r>
 80158dc:	4606      	mov	r6, r0
 80158de:	2800      	cmp	r0, #0
 80158e0:	d1e1      	bne.n	80158a6 <__ssputs_r+0x70>
 80158e2:	6921      	ldr	r1, [r4, #16]
 80158e4:	4650      	mov	r0, sl
 80158e6:	f7ff fb91 	bl	801500c <_free_r>
 80158ea:	e7c7      	b.n	801587c <__ssputs_r+0x46>

080158ec <_svfiprintf_r>:
 80158ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158f0:	4698      	mov	r8, r3
 80158f2:	898b      	ldrh	r3, [r1, #12]
 80158f4:	061b      	lsls	r3, r3, #24
 80158f6:	b09d      	sub	sp, #116	; 0x74
 80158f8:	4607      	mov	r7, r0
 80158fa:	460d      	mov	r5, r1
 80158fc:	4614      	mov	r4, r2
 80158fe:	d50e      	bpl.n	801591e <_svfiprintf_r+0x32>
 8015900:	690b      	ldr	r3, [r1, #16]
 8015902:	b963      	cbnz	r3, 801591e <_svfiprintf_r+0x32>
 8015904:	2140      	movs	r1, #64	; 0x40
 8015906:	f7ff fbed 	bl	80150e4 <_malloc_r>
 801590a:	6028      	str	r0, [r5, #0]
 801590c:	6128      	str	r0, [r5, #16]
 801590e:	b920      	cbnz	r0, 801591a <_svfiprintf_r+0x2e>
 8015910:	230c      	movs	r3, #12
 8015912:	603b      	str	r3, [r7, #0]
 8015914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015918:	e0d1      	b.n	8015abe <_svfiprintf_r+0x1d2>
 801591a:	2340      	movs	r3, #64	; 0x40
 801591c:	616b      	str	r3, [r5, #20]
 801591e:	2300      	movs	r3, #0
 8015920:	9309      	str	r3, [sp, #36]	; 0x24
 8015922:	2320      	movs	r3, #32
 8015924:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015928:	f8cd 800c 	str.w	r8, [sp, #12]
 801592c:	2330      	movs	r3, #48	; 0x30
 801592e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015ad8 <_svfiprintf_r+0x1ec>
 8015932:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015936:	f04f 0901 	mov.w	r9, #1
 801593a:	4623      	mov	r3, r4
 801593c:	469a      	mov	sl, r3
 801593e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015942:	b10a      	cbz	r2, 8015948 <_svfiprintf_r+0x5c>
 8015944:	2a25      	cmp	r2, #37	; 0x25
 8015946:	d1f9      	bne.n	801593c <_svfiprintf_r+0x50>
 8015948:	ebba 0b04 	subs.w	fp, sl, r4
 801594c:	d00b      	beq.n	8015966 <_svfiprintf_r+0x7a>
 801594e:	465b      	mov	r3, fp
 8015950:	4622      	mov	r2, r4
 8015952:	4629      	mov	r1, r5
 8015954:	4638      	mov	r0, r7
 8015956:	f7ff ff6e 	bl	8015836 <__ssputs_r>
 801595a:	3001      	adds	r0, #1
 801595c:	f000 80aa 	beq.w	8015ab4 <_svfiprintf_r+0x1c8>
 8015960:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015962:	445a      	add	r2, fp
 8015964:	9209      	str	r2, [sp, #36]	; 0x24
 8015966:	f89a 3000 	ldrb.w	r3, [sl]
 801596a:	2b00      	cmp	r3, #0
 801596c:	f000 80a2 	beq.w	8015ab4 <_svfiprintf_r+0x1c8>
 8015970:	2300      	movs	r3, #0
 8015972:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015976:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801597a:	f10a 0a01 	add.w	sl, sl, #1
 801597e:	9304      	str	r3, [sp, #16]
 8015980:	9307      	str	r3, [sp, #28]
 8015982:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015986:	931a      	str	r3, [sp, #104]	; 0x68
 8015988:	4654      	mov	r4, sl
 801598a:	2205      	movs	r2, #5
 801598c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015990:	4851      	ldr	r0, [pc, #324]	; (8015ad8 <_svfiprintf_r+0x1ec>)
 8015992:	f7ea fc55 	bl	8000240 <memchr>
 8015996:	9a04      	ldr	r2, [sp, #16]
 8015998:	b9d8      	cbnz	r0, 80159d2 <_svfiprintf_r+0xe6>
 801599a:	06d0      	lsls	r0, r2, #27
 801599c:	bf44      	itt	mi
 801599e:	2320      	movmi	r3, #32
 80159a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80159a4:	0711      	lsls	r1, r2, #28
 80159a6:	bf44      	itt	mi
 80159a8:	232b      	movmi	r3, #43	; 0x2b
 80159aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80159ae:	f89a 3000 	ldrb.w	r3, [sl]
 80159b2:	2b2a      	cmp	r3, #42	; 0x2a
 80159b4:	d015      	beq.n	80159e2 <_svfiprintf_r+0xf6>
 80159b6:	9a07      	ldr	r2, [sp, #28]
 80159b8:	4654      	mov	r4, sl
 80159ba:	2000      	movs	r0, #0
 80159bc:	f04f 0c0a 	mov.w	ip, #10
 80159c0:	4621      	mov	r1, r4
 80159c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80159c6:	3b30      	subs	r3, #48	; 0x30
 80159c8:	2b09      	cmp	r3, #9
 80159ca:	d94e      	bls.n	8015a6a <_svfiprintf_r+0x17e>
 80159cc:	b1b0      	cbz	r0, 80159fc <_svfiprintf_r+0x110>
 80159ce:	9207      	str	r2, [sp, #28]
 80159d0:	e014      	b.n	80159fc <_svfiprintf_r+0x110>
 80159d2:	eba0 0308 	sub.w	r3, r0, r8
 80159d6:	fa09 f303 	lsl.w	r3, r9, r3
 80159da:	4313      	orrs	r3, r2
 80159dc:	9304      	str	r3, [sp, #16]
 80159de:	46a2      	mov	sl, r4
 80159e0:	e7d2      	b.n	8015988 <_svfiprintf_r+0x9c>
 80159e2:	9b03      	ldr	r3, [sp, #12]
 80159e4:	1d19      	adds	r1, r3, #4
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	9103      	str	r1, [sp, #12]
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	bfbb      	ittet	lt
 80159ee:	425b      	neglt	r3, r3
 80159f0:	f042 0202 	orrlt.w	r2, r2, #2
 80159f4:	9307      	strge	r3, [sp, #28]
 80159f6:	9307      	strlt	r3, [sp, #28]
 80159f8:	bfb8      	it	lt
 80159fa:	9204      	strlt	r2, [sp, #16]
 80159fc:	7823      	ldrb	r3, [r4, #0]
 80159fe:	2b2e      	cmp	r3, #46	; 0x2e
 8015a00:	d10c      	bne.n	8015a1c <_svfiprintf_r+0x130>
 8015a02:	7863      	ldrb	r3, [r4, #1]
 8015a04:	2b2a      	cmp	r3, #42	; 0x2a
 8015a06:	d135      	bne.n	8015a74 <_svfiprintf_r+0x188>
 8015a08:	9b03      	ldr	r3, [sp, #12]
 8015a0a:	1d1a      	adds	r2, r3, #4
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	9203      	str	r2, [sp, #12]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	bfb8      	it	lt
 8015a14:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015a18:	3402      	adds	r4, #2
 8015a1a:	9305      	str	r3, [sp, #20]
 8015a1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015ae8 <_svfiprintf_r+0x1fc>
 8015a20:	7821      	ldrb	r1, [r4, #0]
 8015a22:	2203      	movs	r2, #3
 8015a24:	4650      	mov	r0, sl
 8015a26:	f7ea fc0b 	bl	8000240 <memchr>
 8015a2a:	b140      	cbz	r0, 8015a3e <_svfiprintf_r+0x152>
 8015a2c:	2340      	movs	r3, #64	; 0x40
 8015a2e:	eba0 000a 	sub.w	r0, r0, sl
 8015a32:	fa03 f000 	lsl.w	r0, r3, r0
 8015a36:	9b04      	ldr	r3, [sp, #16]
 8015a38:	4303      	orrs	r3, r0
 8015a3a:	3401      	adds	r4, #1
 8015a3c:	9304      	str	r3, [sp, #16]
 8015a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a42:	4826      	ldr	r0, [pc, #152]	; (8015adc <_svfiprintf_r+0x1f0>)
 8015a44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015a48:	2206      	movs	r2, #6
 8015a4a:	f7ea fbf9 	bl	8000240 <memchr>
 8015a4e:	2800      	cmp	r0, #0
 8015a50:	d038      	beq.n	8015ac4 <_svfiprintf_r+0x1d8>
 8015a52:	4b23      	ldr	r3, [pc, #140]	; (8015ae0 <_svfiprintf_r+0x1f4>)
 8015a54:	bb1b      	cbnz	r3, 8015a9e <_svfiprintf_r+0x1b2>
 8015a56:	9b03      	ldr	r3, [sp, #12]
 8015a58:	3307      	adds	r3, #7
 8015a5a:	f023 0307 	bic.w	r3, r3, #7
 8015a5e:	3308      	adds	r3, #8
 8015a60:	9303      	str	r3, [sp, #12]
 8015a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a64:	4433      	add	r3, r6
 8015a66:	9309      	str	r3, [sp, #36]	; 0x24
 8015a68:	e767      	b.n	801593a <_svfiprintf_r+0x4e>
 8015a6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8015a6e:	460c      	mov	r4, r1
 8015a70:	2001      	movs	r0, #1
 8015a72:	e7a5      	b.n	80159c0 <_svfiprintf_r+0xd4>
 8015a74:	2300      	movs	r3, #0
 8015a76:	3401      	adds	r4, #1
 8015a78:	9305      	str	r3, [sp, #20]
 8015a7a:	4619      	mov	r1, r3
 8015a7c:	f04f 0c0a 	mov.w	ip, #10
 8015a80:	4620      	mov	r0, r4
 8015a82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015a86:	3a30      	subs	r2, #48	; 0x30
 8015a88:	2a09      	cmp	r2, #9
 8015a8a:	d903      	bls.n	8015a94 <_svfiprintf_r+0x1a8>
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d0c5      	beq.n	8015a1c <_svfiprintf_r+0x130>
 8015a90:	9105      	str	r1, [sp, #20]
 8015a92:	e7c3      	b.n	8015a1c <_svfiprintf_r+0x130>
 8015a94:	fb0c 2101 	mla	r1, ip, r1, r2
 8015a98:	4604      	mov	r4, r0
 8015a9a:	2301      	movs	r3, #1
 8015a9c:	e7f0      	b.n	8015a80 <_svfiprintf_r+0x194>
 8015a9e:	ab03      	add	r3, sp, #12
 8015aa0:	9300      	str	r3, [sp, #0]
 8015aa2:	462a      	mov	r2, r5
 8015aa4:	4b0f      	ldr	r3, [pc, #60]	; (8015ae4 <_svfiprintf_r+0x1f8>)
 8015aa6:	a904      	add	r1, sp, #16
 8015aa8:	4638      	mov	r0, r7
 8015aaa:	f3af 8000 	nop.w
 8015aae:	1c42      	adds	r2, r0, #1
 8015ab0:	4606      	mov	r6, r0
 8015ab2:	d1d6      	bne.n	8015a62 <_svfiprintf_r+0x176>
 8015ab4:	89ab      	ldrh	r3, [r5, #12]
 8015ab6:	065b      	lsls	r3, r3, #25
 8015ab8:	f53f af2c 	bmi.w	8015914 <_svfiprintf_r+0x28>
 8015abc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015abe:	b01d      	add	sp, #116	; 0x74
 8015ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ac4:	ab03      	add	r3, sp, #12
 8015ac6:	9300      	str	r3, [sp, #0]
 8015ac8:	462a      	mov	r2, r5
 8015aca:	4b06      	ldr	r3, [pc, #24]	; (8015ae4 <_svfiprintf_r+0x1f8>)
 8015acc:	a904      	add	r1, sp, #16
 8015ace:	4638      	mov	r0, r7
 8015ad0:	f000 f9d4 	bl	8015e7c <_printf_i>
 8015ad4:	e7eb      	b.n	8015aae <_svfiprintf_r+0x1c2>
 8015ad6:	bf00      	nop
 8015ad8:	08017374 	.word	0x08017374
 8015adc:	0801737e 	.word	0x0801737e
 8015ae0:	00000000 	.word	0x00000000
 8015ae4:	08015837 	.word	0x08015837
 8015ae8:	0801737a 	.word	0x0801737a

08015aec <__sfputc_r>:
 8015aec:	6893      	ldr	r3, [r2, #8]
 8015aee:	3b01      	subs	r3, #1
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	b410      	push	{r4}
 8015af4:	6093      	str	r3, [r2, #8]
 8015af6:	da08      	bge.n	8015b0a <__sfputc_r+0x1e>
 8015af8:	6994      	ldr	r4, [r2, #24]
 8015afa:	42a3      	cmp	r3, r4
 8015afc:	db01      	blt.n	8015b02 <__sfputc_r+0x16>
 8015afe:	290a      	cmp	r1, #10
 8015b00:	d103      	bne.n	8015b0a <__sfputc_r+0x1e>
 8015b02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b06:	f000 bb23 	b.w	8016150 <__swbuf_r>
 8015b0a:	6813      	ldr	r3, [r2, #0]
 8015b0c:	1c58      	adds	r0, r3, #1
 8015b0e:	6010      	str	r0, [r2, #0]
 8015b10:	7019      	strb	r1, [r3, #0]
 8015b12:	4608      	mov	r0, r1
 8015b14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b18:	4770      	bx	lr

08015b1a <__sfputs_r>:
 8015b1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b1c:	4606      	mov	r6, r0
 8015b1e:	460f      	mov	r7, r1
 8015b20:	4614      	mov	r4, r2
 8015b22:	18d5      	adds	r5, r2, r3
 8015b24:	42ac      	cmp	r4, r5
 8015b26:	d101      	bne.n	8015b2c <__sfputs_r+0x12>
 8015b28:	2000      	movs	r0, #0
 8015b2a:	e007      	b.n	8015b3c <__sfputs_r+0x22>
 8015b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b30:	463a      	mov	r2, r7
 8015b32:	4630      	mov	r0, r6
 8015b34:	f7ff ffda 	bl	8015aec <__sfputc_r>
 8015b38:	1c43      	adds	r3, r0, #1
 8015b3a:	d1f3      	bne.n	8015b24 <__sfputs_r+0xa>
 8015b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015b40 <_vfiprintf_r>:
 8015b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b44:	460d      	mov	r5, r1
 8015b46:	b09d      	sub	sp, #116	; 0x74
 8015b48:	4614      	mov	r4, r2
 8015b4a:	4698      	mov	r8, r3
 8015b4c:	4606      	mov	r6, r0
 8015b4e:	b118      	cbz	r0, 8015b58 <_vfiprintf_r+0x18>
 8015b50:	6983      	ldr	r3, [r0, #24]
 8015b52:	b90b      	cbnz	r3, 8015b58 <_vfiprintf_r+0x18>
 8015b54:	f7ff fd82 	bl	801565c <__sinit>
 8015b58:	4b89      	ldr	r3, [pc, #548]	; (8015d80 <_vfiprintf_r+0x240>)
 8015b5a:	429d      	cmp	r5, r3
 8015b5c:	d11b      	bne.n	8015b96 <_vfiprintf_r+0x56>
 8015b5e:	6875      	ldr	r5, [r6, #4]
 8015b60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015b62:	07d9      	lsls	r1, r3, #31
 8015b64:	d405      	bmi.n	8015b72 <_vfiprintf_r+0x32>
 8015b66:	89ab      	ldrh	r3, [r5, #12]
 8015b68:	059a      	lsls	r2, r3, #22
 8015b6a:	d402      	bmi.n	8015b72 <_vfiprintf_r+0x32>
 8015b6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015b6e:	f7ff fe25 	bl	80157bc <__retarget_lock_acquire_recursive>
 8015b72:	89ab      	ldrh	r3, [r5, #12]
 8015b74:	071b      	lsls	r3, r3, #28
 8015b76:	d501      	bpl.n	8015b7c <_vfiprintf_r+0x3c>
 8015b78:	692b      	ldr	r3, [r5, #16]
 8015b7a:	b9eb      	cbnz	r3, 8015bb8 <_vfiprintf_r+0x78>
 8015b7c:	4629      	mov	r1, r5
 8015b7e:	4630      	mov	r0, r6
 8015b80:	f000 fb4a 	bl	8016218 <__swsetup_r>
 8015b84:	b1c0      	cbz	r0, 8015bb8 <_vfiprintf_r+0x78>
 8015b86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015b88:	07dc      	lsls	r4, r3, #31
 8015b8a:	d50e      	bpl.n	8015baa <_vfiprintf_r+0x6a>
 8015b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015b90:	b01d      	add	sp, #116	; 0x74
 8015b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b96:	4b7b      	ldr	r3, [pc, #492]	; (8015d84 <_vfiprintf_r+0x244>)
 8015b98:	429d      	cmp	r5, r3
 8015b9a:	d101      	bne.n	8015ba0 <_vfiprintf_r+0x60>
 8015b9c:	68b5      	ldr	r5, [r6, #8]
 8015b9e:	e7df      	b.n	8015b60 <_vfiprintf_r+0x20>
 8015ba0:	4b79      	ldr	r3, [pc, #484]	; (8015d88 <_vfiprintf_r+0x248>)
 8015ba2:	429d      	cmp	r5, r3
 8015ba4:	bf08      	it	eq
 8015ba6:	68f5      	ldreq	r5, [r6, #12]
 8015ba8:	e7da      	b.n	8015b60 <_vfiprintf_r+0x20>
 8015baa:	89ab      	ldrh	r3, [r5, #12]
 8015bac:	0598      	lsls	r0, r3, #22
 8015bae:	d4ed      	bmi.n	8015b8c <_vfiprintf_r+0x4c>
 8015bb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015bb2:	f7ff fe04 	bl	80157be <__retarget_lock_release_recursive>
 8015bb6:	e7e9      	b.n	8015b8c <_vfiprintf_r+0x4c>
 8015bb8:	2300      	movs	r3, #0
 8015bba:	9309      	str	r3, [sp, #36]	; 0x24
 8015bbc:	2320      	movs	r3, #32
 8015bbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015bc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8015bc6:	2330      	movs	r3, #48	; 0x30
 8015bc8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015d8c <_vfiprintf_r+0x24c>
 8015bcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015bd0:	f04f 0901 	mov.w	r9, #1
 8015bd4:	4623      	mov	r3, r4
 8015bd6:	469a      	mov	sl, r3
 8015bd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015bdc:	b10a      	cbz	r2, 8015be2 <_vfiprintf_r+0xa2>
 8015bde:	2a25      	cmp	r2, #37	; 0x25
 8015be0:	d1f9      	bne.n	8015bd6 <_vfiprintf_r+0x96>
 8015be2:	ebba 0b04 	subs.w	fp, sl, r4
 8015be6:	d00b      	beq.n	8015c00 <_vfiprintf_r+0xc0>
 8015be8:	465b      	mov	r3, fp
 8015bea:	4622      	mov	r2, r4
 8015bec:	4629      	mov	r1, r5
 8015bee:	4630      	mov	r0, r6
 8015bf0:	f7ff ff93 	bl	8015b1a <__sfputs_r>
 8015bf4:	3001      	adds	r0, #1
 8015bf6:	f000 80aa 	beq.w	8015d4e <_vfiprintf_r+0x20e>
 8015bfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015bfc:	445a      	add	r2, fp
 8015bfe:	9209      	str	r2, [sp, #36]	; 0x24
 8015c00:	f89a 3000 	ldrb.w	r3, [sl]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	f000 80a2 	beq.w	8015d4e <_vfiprintf_r+0x20e>
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015c10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015c14:	f10a 0a01 	add.w	sl, sl, #1
 8015c18:	9304      	str	r3, [sp, #16]
 8015c1a:	9307      	str	r3, [sp, #28]
 8015c1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015c20:	931a      	str	r3, [sp, #104]	; 0x68
 8015c22:	4654      	mov	r4, sl
 8015c24:	2205      	movs	r2, #5
 8015c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c2a:	4858      	ldr	r0, [pc, #352]	; (8015d8c <_vfiprintf_r+0x24c>)
 8015c2c:	f7ea fb08 	bl	8000240 <memchr>
 8015c30:	9a04      	ldr	r2, [sp, #16]
 8015c32:	b9d8      	cbnz	r0, 8015c6c <_vfiprintf_r+0x12c>
 8015c34:	06d1      	lsls	r1, r2, #27
 8015c36:	bf44      	itt	mi
 8015c38:	2320      	movmi	r3, #32
 8015c3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015c3e:	0713      	lsls	r3, r2, #28
 8015c40:	bf44      	itt	mi
 8015c42:	232b      	movmi	r3, #43	; 0x2b
 8015c44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015c48:	f89a 3000 	ldrb.w	r3, [sl]
 8015c4c:	2b2a      	cmp	r3, #42	; 0x2a
 8015c4e:	d015      	beq.n	8015c7c <_vfiprintf_r+0x13c>
 8015c50:	9a07      	ldr	r2, [sp, #28]
 8015c52:	4654      	mov	r4, sl
 8015c54:	2000      	movs	r0, #0
 8015c56:	f04f 0c0a 	mov.w	ip, #10
 8015c5a:	4621      	mov	r1, r4
 8015c5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015c60:	3b30      	subs	r3, #48	; 0x30
 8015c62:	2b09      	cmp	r3, #9
 8015c64:	d94e      	bls.n	8015d04 <_vfiprintf_r+0x1c4>
 8015c66:	b1b0      	cbz	r0, 8015c96 <_vfiprintf_r+0x156>
 8015c68:	9207      	str	r2, [sp, #28]
 8015c6a:	e014      	b.n	8015c96 <_vfiprintf_r+0x156>
 8015c6c:	eba0 0308 	sub.w	r3, r0, r8
 8015c70:	fa09 f303 	lsl.w	r3, r9, r3
 8015c74:	4313      	orrs	r3, r2
 8015c76:	9304      	str	r3, [sp, #16]
 8015c78:	46a2      	mov	sl, r4
 8015c7a:	e7d2      	b.n	8015c22 <_vfiprintf_r+0xe2>
 8015c7c:	9b03      	ldr	r3, [sp, #12]
 8015c7e:	1d19      	adds	r1, r3, #4
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	9103      	str	r1, [sp, #12]
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	bfbb      	ittet	lt
 8015c88:	425b      	neglt	r3, r3
 8015c8a:	f042 0202 	orrlt.w	r2, r2, #2
 8015c8e:	9307      	strge	r3, [sp, #28]
 8015c90:	9307      	strlt	r3, [sp, #28]
 8015c92:	bfb8      	it	lt
 8015c94:	9204      	strlt	r2, [sp, #16]
 8015c96:	7823      	ldrb	r3, [r4, #0]
 8015c98:	2b2e      	cmp	r3, #46	; 0x2e
 8015c9a:	d10c      	bne.n	8015cb6 <_vfiprintf_r+0x176>
 8015c9c:	7863      	ldrb	r3, [r4, #1]
 8015c9e:	2b2a      	cmp	r3, #42	; 0x2a
 8015ca0:	d135      	bne.n	8015d0e <_vfiprintf_r+0x1ce>
 8015ca2:	9b03      	ldr	r3, [sp, #12]
 8015ca4:	1d1a      	adds	r2, r3, #4
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	9203      	str	r2, [sp, #12]
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	bfb8      	it	lt
 8015cae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015cb2:	3402      	adds	r4, #2
 8015cb4:	9305      	str	r3, [sp, #20]
 8015cb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015d9c <_vfiprintf_r+0x25c>
 8015cba:	7821      	ldrb	r1, [r4, #0]
 8015cbc:	2203      	movs	r2, #3
 8015cbe:	4650      	mov	r0, sl
 8015cc0:	f7ea fabe 	bl	8000240 <memchr>
 8015cc4:	b140      	cbz	r0, 8015cd8 <_vfiprintf_r+0x198>
 8015cc6:	2340      	movs	r3, #64	; 0x40
 8015cc8:	eba0 000a 	sub.w	r0, r0, sl
 8015ccc:	fa03 f000 	lsl.w	r0, r3, r0
 8015cd0:	9b04      	ldr	r3, [sp, #16]
 8015cd2:	4303      	orrs	r3, r0
 8015cd4:	3401      	adds	r4, #1
 8015cd6:	9304      	str	r3, [sp, #16]
 8015cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015cdc:	482c      	ldr	r0, [pc, #176]	; (8015d90 <_vfiprintf_r+0x250>)
 8015cde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015ce2:	2206      	movs	r2, #6
 8015ce4:	f7ea faac 	bl	8000240 <memchr>
 8015ce8:	2800      	cmp	r0, #0
 8015cea:	d03f      	beq.n	8015d6c <_vfiprintf_r+0x22c>
 8015cec:	4b29      	ldr	r3, [pc, #164]	; (8015d94 <_vfiprintf_r+0x254>)
 8015cee:	bb1b      	cbnz	r3, 8015d38 <_vfiprintf_r+0x1f8>
 8015cf0:	9b03      	ldr	r3, [sp, #12]
 8015cf2:	3307      	adds	r3, #7
 8015cf4:	f023 0307 	bic.w	r3, r3, #7
 8015cf8:	3308      	adds	r3, #8
 8015cfa:	9303      	str	r3, [sp, #12]
 8015cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cfe:	443b      	add	r3, r7
 8015d00:	9309      	str	r3, [sp, #36]	; 0x24
 8015d02:	e767      	b.n	8015bd4 <_vfiprintf_r+0x94>
 8015d04:	fb0c 3202 	mla	r2, ip, r2, r3
 8015d08:	460c      	mov	r4, r1
 8015d0a:	2001      	movs	r0, #1
 8015d0c:	e7a5      	b.n	8015c5a <_vfiprintf_r+0x11a>
 8015d0e:	2300      	movs	r3, #0
 8015d10:	3401      	adds	r4, #1
 8015d12:	9305      	str	r3, [sp, #20]
 8015d14:	4619      	mov	r1, r3
 8015d16:	f04f 0c0a 	mov.w	ip, #10
 8015d1a:	4620      	mov	r0, r4
 8015d1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015d20:	3a30      	subs	r2, #48	; 0x30
 8015d22:	2a09      	cmp	r2, #9
 8015d24:	d903      	bls.n	8015d2e <_vfiprintf_r+0x1ee>
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d0c5      	beq.n	8015cb6 <_vfiprintf_r+0x176>
 8015d2a:	9105      	str	r1, [sp, #20]
 8015d2c:	e7c3      	b.n	8015cb6 <_vfiprintf_r+0x176>
 8015d2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015d32:	4604      	mov	r4, r0
 8015d34:	2301      	movs	r3, #1
 8015d36:	e7f0      	b.n	8015d1a <_vfiprintf_r+0x1da>
 8015d38:	ab03      	add	r3, sp, #12
 8015d3a:	9300      	str	r3, [sp, #0]
 8015d3c:	462a      	mov	r2, r5
 8015d3e:	4b16      	ldr	r3, [pc, #88]	; (8015d98 <_vfiprintf_r+0x258>)
 8015d40:	a904      	add	r1, sp, #16
 8015d42:	4630      	mov	r0, r6
 8015d44:	f3af 8000 	nop.w
 8015d48:	4607      	mov	r7, r0
 8015d4a:	1c78      	adds	r0, r7, #1
 8015d4c:	d1d6      	bne.n	8015cfc <_vfiprintf_r+0x1bc>
 8015d4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015d50:	07d9      	lsls	r1, r3, #31
 8015d52:	d405      	bmi.n	8015d60 <_vfiprintf_r+0x220>
 8015d54:	89ab      	ldrh	r3, [r5, #12]
 8015d56:	059a      	lsls	r2, r3, #22
 8015d58:	d402      	bmi.n	8015d60 <_vfiprintf_r+0x220>
 8015d5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015d5c:	f7ff fd2f 	bl	80157be <__retarget_lock_release_recursive>
 8015d60:	89ab      	ldrh	r3, [r5, #12]
 8015d62:	065b      	lsls	r3, r3, #25
 8015d64:	f53f af12 	bmi.w	8015b8c <_vfiprintf_r+0x4c>
 8015d68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015d6a:	e711      	b.n	8015b90 <_vfiprintf_r+0x50>
 8015d6c:	ab03      	add	r3, sp, #12
 8015d6e:	9300      	str	r3, [sp, #0]
 8015d70:	462a      	mov	r2, r5
 8015d72:	4b09      	ldr	r3, [pc, #36]	; (8015d98 <_vfiprintf_r+0x258>)
 8015d74:	a904      	add	r1, sp, #16
 8015d76:	4630      	mov	r0, r6
 8015d78:	f000 f880 	bl	8015e7c <_printf_i>
 8015d7c:	e7e4      	b.n	8015d48 <_vfiprintf_r+0x208>
 8015d7e:	bf00      	nop
 8015d80:	08017334 	.word	0x08017334
 8015d84:	08017354 	.word	0x08017354
 8015d88:	08017314 	.word	0x08017314
 8015d8c:	08017374 	.word	0x08017374
 8015d90:	0801737e 	.word	0x0801737e
 8015d94:	00000000 	.word	0x00000000
 8015d98:	08015b1b 	.word	0x08015b1b
 8015d9c:	0801737a 	.word	0x0801737a

08015da0 <_printf_common>:
 8015da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015da4:	4616      	mov	r6, r2
 8015da6:	4699      	mov	r9, r3
 8015da8:	688a      	ldr	r2, [r1, #8]
 8015daa:	690b      	ldr	r3, [r1, #16]
 8015dac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015db0:	4293      	cmp	r3, r2
 8015db2:	bfb8      	it	lt
 8015db4:	4613      	movlt	r3, r2
 8015db6:	6033      	str	r3, [r6, #0]
 8015db8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015dbc:	4607      	mov	r7, r0
 8015dbe:	460c      	mov	r4, r1
 8015dc0:	b10a      	cbz	r2, 8015dc6 <_printf_common+0x26>
 8015dc2:	3301      	adds	r3, #1
 8015dc4:	6033      	str	r3, [r6, #0]
 8015dc6:	6823      	ldr	r3, [r4, #0]
 8015dc8:	0699      	lsls	r1, r3, #26
 8015dca:	bf42      	ittt	mi
 8015dcc:	6833      	ldrmi	r3, [r6, #0]
 8015dce:	3302      	addmi	r3, #2
 8015dd0:	6033      	strmi	r3, [r6, #0]
 8015dd2:	6825      	ldr	r5, [r4, #0]
 8015dd4:	f015 0506 	ands.w	r5, r5, #6
 8015dd8:	d106      	bne.n	8015de8 <_printf_common+0x48>
 8015dda:	f104 0a19 	add.w	sl, r4, #25
 8015dde:	68e3      	ldr	r3, [r4, #12]
 8015de0:	6832      	ldr	r2, [r6, #0]
 8015de2:	1a9b      	subs	r3, r3, r2
 8015de4:	42ab      	cmp	r3, r5
 8015de6:	dc26      	bgt.n	8015e36 <_printf_common+0x96>
 8015de8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015dec:	1e13      	subs	r3, r2, #0
 8015dee:	6822      	ldr	r2, [r4, #0]
 8015df0:	bf18      	it	ne
 8015df2:	2301      	movne	r3, #1
 8015df4:	0692      	lsls	r2, r2, #26
 8015df6:	d42b      	bmi.n	8015e50 <_printf_common+0xb0>
 8015df8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015dfc:	4649      	mov	r1, r9
 8015dfe:	4638      	mov	r0, r7
 8015e00:	47c0      	blx	r8
 8015e02:	3001      	adds	r0, #1
 8015e04:	d01e      	beq.n	8015e44 <_printf_common+0xa4>
 8015e06:	6823      	ldr	r3, [r4, #0]
 8015e08:	68e5      	ldr	r5, [r4, #12]
 8015e0a:	6832      	ldr	r2, [r6, #0]
 8015e0c:	f003 0306 	and.w	r3, r3, #6
 8015e10:	2b04      	cmp	r3, #4
 8015e12:	bf08      	it	eq
 8015e14:	1aad      	subeq	r5, r5, r2
 8015e16:	68a3      	ldr	r3, [r4, #8]
 8015e18:	6922      	ldr	r2, [r4, #16]
 8015e1a:	bf0c      	ite	eq
 8015e1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015e20:	2500      	movne	r5, #0
 8015e22:	4293      	cmp	r3, r2
 8015e24:	bfc4      	itt	gt
 8015e26:	1a9b      	subgt	r3, r3, r2
 8015e28:	18ed      	addgt	r5, r5, r3
 8015e2a:	2600      	movs	r6, #0
 8015e2c:	341a      	adds	r4, #26
 8015e2e:	42b5      	cmp	r5, r6
 8015e30:	d11a      	bne.n	8015e68 <_printf_common+0xc8>
 8015e32:	2000      	movs	r0, #0
 8015e34:	e008      	b.n	8015e48 <_printf_common+0xa8>
 8015e36:	2301      	movs	r3, #1
 8015e38:	4652      	mov	r2, sl
 8015e3a:	4649      	mov	r1, r9
 8015e3c:	4638      	mov	r0, r7
 8015e3e:	47c0      	blx	r8
 8015e40:	3001      	adds	r0, #1
 8015e42:	d103      	bne.n	8015e4c <_printf_common+0xac>
 8015e44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e4c:	3501      	adds	r5, #1
 8015e4e:	e7c6      	b.n	8015dde <_printf_common+0x3e>
 8015e50:	18e1      	adds	r1, r4, r3
 8015e52:	1c5a      	adds	r2, r3, #1
 8015e54:	2030      	movs	r0, #48	; 0x30
 8015e56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015e5a:	4422      	add	r2, r4
 8015e5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015e60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015e64:	3302      	adds	r3, #2
 8015e66:	e7c7      	b.n	8015df8 <_printf_common+0x58>
 8015e68:	2301      	movs	r3, #1
 8015e6a:	4622      	mov	r2, r4
 8015e6c:	4649      	mov	r1, r9
 8015e6e:	4638      	mov	r0, r7
 8015e70:	47c0      	blx	r8
 8015e72:	3001      	adds	r0, #1
 8015e74:	d0e6      	beq.n	8015e44 <_printf_common+0xa4>
 8015e76:	3601      	adds	r6, #1
 8015e78:	e7d9      	b.n	8015e2e <_printf_common+0x8e>
	...

08015e7c <_printf_i>:
 8015e7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015e80:	7e0f      	ldrb	r7, [r1, #24]
 8015e82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015e84:	2f78      	cmp	r7, #120	; 0x78
 8015e86:	4691      	mov	r9, r2
 8015e88:	4680      	mov	r8, r0
 8015e8a:	460c      	mov	r4, r1
 8015e8c:	469a      	mov	sl, r3
 8015e8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015e92:	d807      	bhi.n	8015ea4 <_printf_i+0x28>
 8015e94:	2f62      	cmp	r7, #98	; 0x62
 8015e96:	d80a      	bhi.n	8015eae <_printf_i+0x32>
 8015e98:	2f00      	cmp	r7, #0
 8015e9a:	f000 80d8 	beq.w	801604e <_printf_i+0x1d2>
 8015e9e:	2f58      	cmp	r7, #88	; 0x58
 8015ea0:	f000 80a3 	beq.w	8015fea <_printf_i+0x16e>
 8015ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015ea8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015eac:	e03a      	b.n	8015f24 <_printf_i+0xa8>
 8015eae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015eb2:	2b15      	cmp	r3, #21
 8015eb4:	d8f6      	bhi.n	8015ea4 <_printf_i+0x28>
 8015eb6:	a101      	add	r1, pc, #4	; (adr r1, 8015ebc <_printf_i+0x40>)
 8015eb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015ebc:	08015f15 	.word	0x08015f15
 8015ec0:	08015f29 	.word	0x08015f29
 8015ec4:	08015ea5 	.word	0x08015ea5
 8015ec8:	08015ea5 	.word	0x08015ea5
 8015ecc:	08015ea5 	.word	0x08015ea5
 8015ed0:	08015ea5 	.word	0x08015ea5
 8015ed4:	08015f29 	.word	0x08015f29
 8015ed8:	08015ea5 	.word	0x08015ea5
 8015edc:	08015ea5 	.word	0x08015ea5
 8015ee0:	08015ea5 	.word	0x08015ea5
 8015ee4:	08015ea5 	.word	0x08015ea5
 8015ee8:	08016035 	.word	0x08016035
 8015eec:	08015f59 	.word	0x08015f59
 8015ef0:	08016017 	.word	0x08016017
 8015ef4:	08015ea5 	.word	0x08015ea5
 8015ef8:	08015ea5 	.word	0x08015ea5
 8015efc:	08016057 	.word	0x08016057
 8015f00:	08015ea5 	.word	0x08015ea5
 8015f04:	08015f59 	.word	0x08015f59
 8015f08:	08015ea5 	.word	0x08015ea5
 8015f0c:	08015ea5 	.word	0x08015ea5
 8015f10:	0801601f 	.word	0x0801601f
 8015f14:	682b      	ldr	r3, [r5, #0]
 8015f16:	1d1a      	adds	r2, r3, #4
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	602a      	str	r2, [r5, #0]
 8015f1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015f20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015f24:	2301      	movs	r3, #1
 8015f26:	e0a3      	b.n	8016070 <_printf_i+0x1f4>
 8015f28:	6820      	ldr	r0, [r4, #0]
 8015f2a:	6829      	ldr	r1, [r5, #0]
 8015f2c:	0606      	lsls	r6, r0, #24
 8015f2e:	f101 0304 	add.w	r3, r1, #4
 8015f32:	d50a      	bpl.n	8015f4a <_printf_i+0xce>
 8015f34:	680e      	ldr	r6, [r1, #0]
 8015f36:	602b      	str	r3, [r5, #0]
 8015f38:	2e00      	cmp	r6, #0
 8015f3a:	da03      	bge.n	8015f44 <_printf_i+0xc8>
 8015f3c:	232d      	movs	r3, #45	; 0x2d
 8015f3e:	4276      	negs	r6, r6
 8015f40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015f44:	485e      	ldr	r0, [pc, #376]	; (80160c0 <_printf_i+0x244>)
 8015f46:	230a      	movs	r3, #10
 8015f48:	e019      	b.n	8015f7e <_printf_i+0x102>
 8015f4a:	680e      	ldr	r6, [r1, #0]
 8015f4c:	602b      	str	r3, [r5, #0]
 8015f4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015f52:	bf18      	it	ne
 8015f54:	b236      	sxthne	r6, r6
 8015f56:	e7ef      	b.n	8015f38 <_printf_i+0xbc>
 8015f58:	682b      	ldr	r3, [r5, #0]
 8015f5a:	6820      	ldr	r0, [r4, #0]
 8015f5c:	1d19      	adds	r1, r3, #4
 8015f5e:	6029      	str	r1, [r5, #0]
 8015f60:	0601      	lsls	r1, r0, #24
 8015f62:	d501      	bpl.n	8015f68 <_printf_i+0xec>
 8015f64:	681e      	ldr	r6, [r3, #0]
 8015f66:	e002      	b.n	8015f6e <_printf_i+0xf2>
 8015f68:	0646      	lsls	r6, r0, #25
 8015f6a:	d5fb      	bpl.n	8015f64 <_printf_i+0xe8>
 8015f6c:	881e      	ldrh	r6, [r3, #0]
 8015f6e:	4854      	ldr	r0, [pc, #336]	; (80160c0 <_printf_i+0x244>)
 8015f70:	2f6f      	cmp	r7, #111	; 0x6f
 8015f72:	bf0c      	ite	eq
 8015f74:	2308      	moveq	r3, #8
 8015f76:	230a      	movne	r3, #10
 8015f78:	2100      	movs	r1, #0
 8015f7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015f7e:	6865      	ldr	r5, [r4, #4]
 8015f80:	60a5      	str	r5, [r4, #8]
 8015f82:	2d00      	cmp	r5, #0
 8015f84:	bfa2      	ittt	ge
 8015f86:	6821      	ldrge	r1, [r4, #0]
 8015f88:	f021 0104 	bicge.w	r1, r1, #4
 8015f8c:	6021      	strge	r1, [r4, #0]
 8015f8e:	b90e      	cbnz	r6, 8015f94 <_printf_i+0x118>
 8015f90:	2d00      	cmp	r5, #0
 8015f92:	d04d      	beq.n	8016030 <_printf_i+0x1b4>
 8015f94:	4615      	mov	r5, r2
 8015f96:	fbb6 f1f3 	udiv	r1, r6, r3
 8015f9a:	fb03 6711 	mls	r7, r3, r1, r6
 8015f9e:	5dc7      	ldrb	r7, [r0, r7]
 8015fa0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015fa4:	4637      	mov	r7, r6
 8015fa6:	42bb      	cmp	r3, r7
 8015fa8:	460e      	mov	r6, r1
 8015faa:	d9f4      	bls.n	8015f96 <_printf_i+0x11a>
 8015fac:	2b08      	cmp	r3, #8
 8015fae:	d10b      	bne.n	8015fc8 <_printf_i+0x14c>
 8015fb0:	6823      	ldr	r3, [r4, #0]
 8015fb2:	07de      	lsls	r6, r3, #31
 8015fb4:	d508      	bpl.n	8015fc8 <_printf_i+0x14c>
 8015fb6:	6923      	ldr	r3, [r4, #16]
 8015fb8:	6861      	ldr	r1, [r4, #4]
 8015fba:	4299      	cmp	r1, r3
 8015fbc:	bfde      	ittt	le
 8015fbe:	2330      	movle	r3, #48	; 0x30
 8015fc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015fc4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8015fc8:	1b52      	subs	r2, r2, r5
 8015fca:	6122      	str	r2, [r4, #16]
 8015fcc:	f8cd a000 	str.w	sl, [sp]
 8015fd0:	464b      	mov	r3, r9
 8015fd2:	aa03      	add	r2, sp, #12
 8015fd4:	4621      	mov	r1, r4
 8015fd6:	4640      	mov	r0, r8
 8015fd8:	f7ff fee2 	bl	8015da0 <_printf_common>
 8015fdc:	3001      	adds	r0, #1
 8015fde:	d14c      	bne.n	801607a <_printf_i+0x1fe>
 8015fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015fe4:	b004      	add	sp, #16
 8015fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015fea:	4835      	ldr	r0, [pc, #212]	; (80160c0 <_printf_i+0x244>)
 8015fec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015ff0:	6829      	ldr	r1, [r5, #0]
 8015ff2:	6823      	ldr	r3, [r4, #0]
 8015ff4:	f851 6b04 	ldr.w	r6, [r1], #4
 8015ff8:	6029      	str	r1, [r5, #0]
 8015ffa:	061d      	lsls	r5, r3, #24
 8015ffc:	d514      	bpl.n	8016028 <_printf_i+0x1ac>
 8015ffe:	07df      	lsls	r7, r3, #31
 8016000:	bf44      	itt	mi
 8016002:	f043 0320 	orrmi.w	r3, r3, #32
 8016006:	6023      	strmi	r3, [r4, #0]
 8016008:	b91e      	cbnz	r6, 8016012 <_printf_i+0x196>
 801600a:	6823      	ldr	r3, [r4, #0]
 801600c:	f023 0320 	bic.w	r3, r3, #32
 8016010:	6023      	str	r3, [r4, #0]
 8016012:	2310      	movs	r3, #16
 8016014:	e7b0      	b.n	8015f78 <_printf_i+0xfc>
 8016016:	6823      	ldr	r3, [r4, #0]
 8016018:	f043 0320 	orr.w	r3, r3, #32
 801601c:	6023      	str	r3, [r4, #0]
 801601e:	2378      	movs	r3, #120	; 0x78
 8016020:	4828      	ldr	r0, [pc, #160]	; (80160c4 <_printf_i+0x248>)
 8016022:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016026:	e7e3      	b.n	8015ff0 <_printf_i+0x174>
 8016028:	0659      	lsls	r1, r3, #25
 801602a:	bf48      	it	mi
 801602c:	b2b6      	uxthmi	r6, r6
 801602e:	e7e6      	b.n	8015ffe <_printf_i+0x182>
 8016030:	4615      	mov	r5, r2
 8016032:	e7bb      	b.n	8015fac <_printf_i+0x130>
 8016034:	682b      	ldr	r3, [r5, #0]
 8016036:	6826      	ldr	r6, [r4, #0]
 8016038:	6961      	ldr	r1, [r4, #20]
 801603a:	1d18      	adds	r0, r3, #4
 801603c:	6028      	str	r0, [r5, #0]
 801603e:	0635      	lsls	r5, r6, #24
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	d501      	bpl.n	8016048 <_printf_i+0x1cc>
 8016044:	6019      	str	r1, [r3, #0]
 8016046:	e002      	b.n	801604e <_printf_i+0x1d2>
 8016048:	0670      	lsls	r0, r6, #25
 801604a:	d5fb      	bpl.n	8016044 <_printf_i+0x1c8>
 801604c:	8019      	strh	r1, [r3, #0]
 801604e:	2300      	movs	r3, #0
 8016050:	6123      	str	r3, [r4, #16]
 8016052:	4615      	mov	r5, r2
 8016054:	e7ba      	b.n	8015fcc <_printf_i+0x150>
 8016056:	682b      	ldr	r3, [r5, #0]
 8016058:	1d1a      	adds	r2, r3, #4
 801605a:	602a      	str	r2, [r5, #0]
 801605c:	681d      	ldr	r5, [r3, #0]
 801605e:	6862      	ldr	r2, [r4, #4]
 8016060:	2100      	movs	r1, #0
 8016062:	4628      	mov	r0, r5
 8016064:	f7ea f8ec 	bl	8000240 <memchr>
 8016068:	b108      	cbz	r0, 801606e <_printf_i+0x1f2>
 801606a:	1b40      	subs	r0, r0, r5
 801606c:	6060      	str	r0, [r4, #4]
 801606e:	6863      	ldr	r3, [r4, #4]
 8016070:	6123      	str	r3, [r4, #16]
 8016072:	2300      	movs	r3, #0
 8016074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016078:	e7a8      	b.n	8015fcc <_printf_i+0x150>
 801607a:	6923      	ldr	r3, [r4, #16]
 801607c:	462a      	mov	r2, r5
 801607e:	4649      	mov	r1, r9
 8016080:	4640      	mov	r0, r8
 8016082:	47d0      	blx	sl
 8016084:	3001      	adds	r0, #1
 8016086:	d0ab      	beq.n	8015fe0 <_printf_i+0x164>
 8016088:	6823      	ldr	r3, [r4, #0]
 801608a:	079b      	lsls	r3, r3, #30
 801608c:	d413      	bmi.n	80160b6 <_printf_i+0x23a>
 801608e:	68e0      	ldr	r0, [r4, #12]
 8016090:	9b03      	ldr	r3, [sp, #12]
 8016092:	4298      	cmp	r0, r3
 8016094:	bfb8      	it	lt
 8016096:	4618      	movlt	r0, r3
 8016098:	e7a4      	b.n	8015fe4 <_printf_i+0x168>
 801609a:	2301      	movs	r3, #1
 801609c:	4632      	mov	r2, r6
 801609e:	4649      	mov	r1, r9
 80160a0:	4640      	mov	r0, r8
 80160a2:	47d0      	blx	sl
 80160a4:	3001      	adds	r0, #1
 80160a6:	d09b      	beq.n	8015fe0 <_printf_i+0x164>
 80160a8:	3501      	adds	r5, #1
 80160aa:	68e3      	ldr	r3, [r4, #12]
 80160ac:	9903      	ldr	r1, [sp, #12]
 80160ae:	1a5b      	subs	r3, r3, r1
 80160b0:	42ab      	cmp	r3, r5
 80160b2:	dcf2      	bgt.n	801609a <_printf_i+0x21e>
 80160b4:	e7eb      	b.n	801608e <_printf_i+0x212>
 80160b6:	2500      	movs	r5, #0
 80160b8:	f104 0619 	add.w	r6, r4, #25
 80160bc:	e7f5      	b.n	80160aa <_printf_i+0x22e>
 80160be:	bf00      	nop
 80160c0:	08017385 	.word	0x08017385
 80160c4:	08017396 	.word	0x08017396

080160c8 <__sread>:
 80160c8:	b510      	push	{r4, lr}
 80160ca:	460c      	mov	r4, r1
 80160cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160d0:	f000 fa6a 	bl	80165a8 <_read_r>
 80160d4:	2800      	cmp	r0, #0
 80160d6:	bfab      	itete	ge
 80160d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80160da:	89a3      	ldrhlt	r3, [r4, #12]
 80160dc:	181b      	addge	r3, r3, r0
 80160de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80160e2:	bfac      	ite	ge
 80160e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80160e6:	81a3      	strhlt	r3, [r4, #12]
 80160e8:	bd10      	pop	{r4, pc}

080160ea <__swrite>:
 80160ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160ee:	461f      	mov	r7, r3
 80160f0:	898b      	ldrh	r3, [r1, #12]
 80160f2:	05db      	lsls	r3, r3, #23
 80160f4:	4605      	mov	r5, r0
 80160f6:	460c      	mov	r4, r1
 80160f8:	4616      	mov	r6, r2
 80160fa:	d505      	bpl.n	8016108 <__swrite+0x1e>
 80160fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016100:	2302      	movs	r3, #2
 8016102:	2200      	movs	r2, #0
 8016104:	f000 f9d0 	bl	80164a8 <_lseek_r>
 8016108:	89a3      	ldrh	r3, [r4, #12]
 801610a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801610e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016112:	81a3      	strh	r3, [r4, #12]
 8016114:	4632      	mov	r2, r6
 8016116:	463b      	mov	r3, r7
 8016118:	4628      	mov	r0, r5
 801611a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801611e:	f000 b869 	b.w	80161f4 <_write_r>

08016122 <__sseek>:
 8016122:	b510      	push	{r4, lr}
 8016124:	460c      	mov	r4, r1
 8016126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801612a:	f000 f9bd 	bl	80164a8 <_lseek_r>
 801612e:	1c43      	adds	r3, r0, #1
 8016130:	89a3      	ldrh	r3, [r4, #12]
 8016132:	bf15      	itete	ne
 8016134:	6560      	strne	r0, [r4, #84]	; 0x54
 8016136:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801613a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801613e:	81a3      	strheq	r3, [r4, #12]
 8016140:	bf18      	it	ne
 8016142:	81a3      	strhne	r3, [r4, #12]
 8016144:	bd10      	pop	{r4, pc}

08016146 <__sclose>:
 8016146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801614a:	f000 b8db 	b.w	8016304 <_close_r>
	...

08016150 <__swbuf_r>:
 8016150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016152:	460e      	mov	r6, r1
 8016154:	4614      	mov	r4, r2
 8016156:	4605      	mov	r5, r0
 8016158:	b118      	cbz	r0, 8016162 <__swbuf_r+0x12>
 801615a:	6983      	ldr	r3, [r0, #24]
 801615c:	b90b      	cbnz	r3, 8016162 <__swbuf_r+0x12>
 801615e:	f7ff fa7d 	bl	801565c <__sinit>
 8016162:	4b21      	ldr	r3, [pc, #132]	; (80161e8 <__swbuf_r+0x98>)
 8016164:	429c      	cmp	r4, r3
 8016166:	d12b      	bne.n	80161c0 <__swbuf_r+0x70>
 8016168:	686c      	ldr	r4, [r5, #4]
 801616a:	69a3      	ldr	r3, [r4, #24]
 801616c:	60a3      	str	r3, [r4, #8]
 801616e:	89a3      	ldrh	r3, [r4, #12]
 8016170:	071a      	lsls	r2, r3, #28
 8016172:	d52f      	bpl.n	80161d4 <__swbuf_r+0x84>
 8016174:	6923      	ldr	r3, [r4, #16]
 8016176:	b36b      	cbz	r3, 80161d4 <__swbuf_r+0x84>
 8016178:	6923      	ldr	r3, [r4, #16]
 801617a:	6820      	ldr	r0, [r4, #0]
 801617c:	1ac0      	subs	r0, r0, r3
 801617e:	6963      	ldr	r3, [r4, #20]
 8016180:	b2f6      	uxtb	r6, r6
 8016182:	4283      	cmp	r3, r0
 8016184:	4637      	mov	r7, r6
 8016186:	dc04      	bgt.n	8016192 <__swbuf_r+0x42>
 8016188:	4621      	mov	r1, r4
 801618a:	4628      	mov	r0, r5
 801618c:	f000 f950 	bl	8016430 <_fflush_r>
 8016190:	bb30      	cbnz	r0, 80161e0 <__swbuf_r+0x90>
 8016192:	68a3      	ldr	r3, [r4, #8]
 8016194:	3b01      	subs	r3, #1
 8016196:	60a3      	str	r3, [r4, #8]
 8016198:	6823      	ldr	r3, [r4, #0]
 801619a:	1c5a      	adds	r2, r3, #1
 801619c:	6022      	str	r2, [r4, #0]
 801619e:	701e      	strb	r6, [r3, #0]
 80161a0:	6963      	ldr	r3, [r4, #20]
 80161a2:	3001      	adds	r0, #1
 80161a4:	4283      	cmp	r3, r0
 80161a6:	d004      	beq.n	80161b2 <__swbuf_r+0x62>
 80161a8:	89a3      	ldrh	r3, [r4, #12]
 80161aa:	07db      	lsls	r3, r3, #31
 80161ac:	d506      	bpl.n	80161bc <__swbuf_r+0x6c>
 80161ae:	2e0a      	cmp	r6, #10
 80161b0:	d104      	bne.n	80161bc <__swbuf_r+0x6c>
 80161b2:	4621      	mov	r1, r4
 80161b4:	4628      	mov	r0, r5
 80161b6:	f000 f93b 	bl	8016430 <_fflush_r>
 80161ba:	b988      	cbnz	r0, 80161e0 <__swbuf_r+0x90>
 80161bc:	4638      	mov	r0, r7
 80161be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161c0:	4b0a      	ldr	r3, [pc, #40]	; (80161ec <__swbuf_r+0x9c>)
 80161c2:	429c      	cmp	r4, r3
 80161c4:	d101      	bne.n	80161ca <__swbuf_r+0x7a>
 80161c6:	68ac      	ldr	r4, [r5, #8]
 80161c8:	e7cf      	b.n	801616a <__swbuf_r+0x1a>
 80161ca:	4b09      	ldr	r3, [pc, #36]	; (80161f0 <__swbuf_r+0xa0>)
 80161cc:	429c      	cmp	r4, r3
 80161ce:	bf08      	it	eq
 80161d0:	68ec      	ldreq	r4, [r5, #12]
 80161d2:	e7ca      	b.n	801616a <__swbuf_r+0x1a>
 80161d4:	4621      	mov	r1, r4
 80161d6:	4628      	mov	r0, r5
 80161d8:	f000 f81e 	bl	8016218 <__swsetup_r>
 80161dc:	2800      	cmp	r0, #0
 80161de:	d0cb      	beq.n	8016178 <__swbuf_r+0x28>
 80161e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80161e4:	e7ea      	b.n	80161bc <__swbuf_r+0x6c>
 80161e6:	bf00      	nop
 80161e8:	08017334 	.word	0x08017334
 80161ec:	08017354 	.word	0x08017354
 80161f0:	08017314 	.word	0x08017314

080161f4 <_write_r>:
 80161f4:	b538      	push	{r3, r4, r5, lr}
 80161f6:	4d07      	ldr	r5, [pc, #28]	; (8016214 <_write_r+0x20>)
 80161f8:	4604      	mov	r4, r0
 80161fa:	4608      	mov	r0, r1
 80161fc:	4611      	mov	r1, r2
 80161fe:	2200      	movs	r2, #0
 8016200:	602a      	str	r2, [r5, #0]
 8016202:	461a      	mov	r2, r3
 8016204:	f7ec f8f7 	bl	80023f6 <_write>
 8016208:	1c43      	adds	r3, r0, #1
 801620a:	d102      	bne.n	8016212 <_write_r+0x1e>
 801620c:	682b      	ldr	r3, [r5, #0]
 801620e:	b103      	cbz	r3, 8016212 <_write_r+0x1e>
 8016210:	6023      	str	r3, [r4, #0]
 8016212:	bd38      	pop	{r3, r4, r5, pc}
 8016214:	2000c29c 	.word	0x2000c29c

08016218 <__swsetup_r>:
 8016218:	4b32      	ldr	r3, [pc, #200]	; (80162e4 <__swsetup_r+0xcc>)
 801621a:	b570      	push	{r4, r5, r6, lr}
 801621c:	681d      	ldr	r5, [r3, #0]
 801621e:	4606      	mov	r6, r0
 8016220:	460c      	mov	r4, r1
 8016222:	b125      	cbz	r5, 801622e <__swsetup_r+0x16>
 8016224:	69ab      	ldr	r3, [r5, #24]
 8016226:	b913      	cbnz	r3, 801622e <__swsetup_r+0x16>
 8016228:	4628      	mov	r0, r5
 801622a:	f7ff fa17 	bl	801565c <__sinit>
 801622e:	4b2e      	ldr	r3, [pc, #184]	; (80162e8 <__swsetup_r+0xd0>)
 8016230:	429c      	cmp	r4, r3
 8016232:	d10f      	bne.n	8016254 <__swsetup_r+0x3c>
 8016234:	686c      	ldr	r4, [r5, #4]
 8016236:	89a3      	ldrh	r3, [r4, #12]
 8016238:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801623c:	0719      	lsls	r1, r3, #28
 801623e:	d42c      	bmi.n	801629a <__swsetup_r+0x82>
 8016240:	06dd      	lsls	r5, r3, #27
 8016242:	d411      	bmi.n	8016268 <__swsetup_r+0x50>
 8016244:	2309      	movs	r3, #9
 8016246:	6033      	str	r3, [r6, #0]
 8016248:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801624c:	81a3      	strh	r3, [r4, #12]
 801624e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016252:	e03e      	b.n	80162d2 <__swsetup_r+0xba>
 8016254:	4b25      	ldr	r3, [pc, #148]	; (80162ec <__swsetup_r+0xd4>)
 8016256:	429c      	cmp	r4, r3
 8016258:	d101      	bne.n	801625e <__swsetup_r+0x46>
 801625a:	68ac      	ldr	r4, [r5, #8]
 801625c:	e7eb      	b.n	8016236 <__swsetup_r+0x1e>
 801625e:	4b24      	ldr	r3, [pc, #144]	; (80162f0 <__swsetup_r+0xd8>)
 8016260:	429c      	cmp	r4, r3
 8016262:	bf08      	it	eq
 8016264:	68ec      	ldreq	r4, [r5, #12]
 8016266:	e7e6      	b.n	8016236 <__swsetup_r+0x1e>
 8016268:	0758      	lsls	r0, r3, #29
 801626a:	d512      	bpl.n	8016292 <__swsetup_r+0x7a>
 801626c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801626e:	b141      	cbz	r1, 8016282 <__swsetup_r+0x6a>
 8016270:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016274:	4299      	cmp	r1, r3
 8016276:	d002      	beq.n	801627e <__swsetup_r+0x66>
 8016278:	4630      	mov	r0, r6
 801627a:	f7fe fec7 	bl	801500c <_free_r>
 801627e:	2300      	movs	r3, #0
 8016280:	6363      	str	r3, [r4, #52]	; 0x34
 8016282:	89a3      	ldrh	r3, [r4, #12]
 8016284:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016288:	81a3      	strh	r3, [r4, #12]
 801628a:	2300      	movs	r3, #0
 801628c:	6063      	str	r3, [r4, #4]
 801628e:	6923      	ldr	r3, [r4, #16]
 8016290:	6023      	str	r3, [r4, #0]
 8016292:	89a3      	ldrh	r3, [r4, #12]
 8016294:	f043 0308 	orr.w	r3, r3, #8
 8016298:	81a3      	strh	r3, [r4, #12]
 801629a:	6923      	ldr	r3, [r4, #16]
 801629c:	b94b      	cbnz	r3, 80162b2 <__swsetup_r+0x9a>
 801629e:	89a3      	ldrh	r3, [r4, #12]
 80162a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80162a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80162a8:	d003      	beq.n	80162b2 <__swsetup_r+0x9a>
 80162aa:	4621      	mov	r1, r4
 80162ac:	4630      	mov	r0, r6
 80162ae:	f000 f933 	bl	8016518 <__smakebuf_r>
 80162b2:	89a0      	ldrh	r0, [r4, #12]
 80162b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80162b8:	f010 0301 	ands.w	r3, r0, #1
 80162bc:	d00a      	beq.n	80162d4 <__swsetup_r+0xbc>
 80162be:	2300      	movs	r3, #0
 80162c0:	60a3      	str	r3, [r4, #8]
 80162c2:	6963      	ldr	r3, [r4, #20]
 80162c4:	425b      	negs	r3, r3
 80162c6:	61a3      	str	r3, [r4, #24]
 80162c8:	6923      	ldr	r3, [r4, #16]
 80162ca:	b943      	cbnz	r3, 80162de <__swsetup_r+0xc6>
 80162cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80162d0:	d1ba      	bne.n	8016248 <__swsetup_r+0x30>
 80162d2:	bd70      	pop	{r4, r5, r6, pc}
 80162d4:	0781      	lsls	r1, r0, #30
 80162d6:	bf58      	it	pl
 80162d8:	6963      	ldrpl	r3, [r4, #20]
 80162da:	60a3      	str	r3, [r4, #8]
 80162dc:	e7f4      	b.n	80162c8 <__swsetup_r+0xb0>
 80162de:	2000      	movs	r0, #0
 80162e0:	e7f7      	b.n	80162d2 <__swsetup_r+0xba>
 80162e2:	bf00      	nop
 80162e4:	20000094 	.word	0x20000094
 80162e8:	08017334 	.word	0x08017334
 80162ec:	08017354 	.word	0x08017354
 80162f0:	08017314 	.word	0x08017314

080162f4 <abort>:
 80162f4:	b508      	push	{r3, lr}
 80162f6:	2006      	movs	r0, #6
 80162f8:	f000 f990 	bl	801661c <raise>
 80162fc:	2001      	movs	r0, #1
 80162fe:	f7ec f853 	bl	80023a8 <_exit>
	...

08016304 <_close_r>:
 8016304:	b538      	push	{r3, r4, r5, lr}
 8016306:	4d06      	ldr	r5, [pc, #24]	; (8016320 <_close_r+0x1c>)
 8016308:	2300      	movs	r3, #0
 801630a:	4604      	mov	r4, r0
 801630c:	4608      	mov	r0, r1
 801630e:	602b      	str	r3, [r5, #0]
 8016310:	f7ec f88d 	bl	800242e <_close>
 8016314:	1c43      	adds	r3, r0, #1
 8016316:	d102      	bne.n	801631e <_close_r+0x1a>
 8016318:	682b      	ldr	r3, [r5, #0]
 801631a:	b103      	cbz	r3, 801631e <_close_r+0x1a>
 801631c:	6023      	str	r3, [r4, #0]
 801631e:	bd38      	pop	{r3, r4, r5, pc}
 8016320:	2000c29c 	.word	0x2000c29c

08016324 <__sflush_r>:
 8016324:	898a      	ldrh	r2, [r1, #12]
 8016326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801632a:	4605      	mov	r5, r0
 801632c:	0710      	lsls	r0, r2, #28
 801632e:	460c      	mov	r4, r1
 8016330:	d458      	bmi.n	80163e4 <__sflush_r+0xc0>
 8016332:	684b      	ldr	r3, [r1, #4]
 8016334:	2b00      	cmp	r3, #0
 8016336:	dc05      	bgt.n	8016344 <__sflush_r+0x20>
 8016338:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801633a:	2b00      	cmp	r3, #0
 801633c:	dc02      	bgt.n	8016344 <__sflush_r+0x20>
 801633e:	2000      	movs	r0, #0
 8016340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016344:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016346:	2e00      	cmp	r6, #0
 8016348:	d0f9      	beq.n	801633e <__sflush_r+0x1a>
 801634a:	2300      	movs	r3, #0
 801634c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016350:	682f      	ldr	r7, [r5, #0]
 8016352:	602b      	str	r3, [r5, #0]
 8016354:	d032      	beq.n	80163bc <__sflush_r+0x98>
 8016356:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016358:	89a3      	ldrh	r3, [r4, #12]
 801635a:	075a      	lsls	r2, r3, #29
 801635c:	d505      	bpl.n	801636a <__sflush_r+0x46>
 801635e:	6863      	ldr	r3, [r4, #4]
 8016360:	1ac0      	subs	r0, r0, r3
 8016362:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016364:	b10b      	cbz	r3, 801636a <__sflush_r+0x46>
 8016366:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016368:	1ac0      	subs	r0, r0, r3
 801636a:	2300      	movs	r3, #0
 801636c:	4602      	mov	r2, r0
 801636e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016370:	6a21      	ldr	r1, [r4, #32]
 8016372:	4628      	mov	r0, r5
 8016374:	47b0      	blx	r6
 8016376:	1c43      	adds	r3, r0, #1
 8016378:	89a3      	ldrh	r3, [r4, #12]
 801637a:	d106      	bne.n	801638a <__sflush_r+0x66>
 801637c:	6829      	ldr	r1, [r5, #0]
 801637e:	291d      	cmp	r1, #29
 8016380:	d82c      	bhi.n	80163dc <__sflush_r+0xb8>
 8016382:	4a2a      	ldr	r2, [pc, #168]	; (801642c <__sflush_r+0x108>)
 8016384:	40ca      	lsrs	r2, r1
 8016386:	07d6      	lsls	r6, r2, #31
 8016388:	d528      	bpl.n	80163dc <__sflush_r+0xb8>
 801638a:	2200      	movs	r2, #0
 801638c:	6062      	str	r2, [r4, #4]
 801638e:	04d9      	lsls	r1, r3, #19
 8016390:	6922      	ldr	r2, [r4, #16]
 8016392:	6022      	str	r2, [r4, #0]
 8016394:	d504      	bpl.n	80163a0 <__sflush_r+0x7c>
 8016396:	1c42      	adds	r2, r0, #1
 8016398:	d101      	bne.n	801639e <__sflush_r+0x7a>
 801639a:	682b      	ldr	r3, [r5, #0]
 801639c:	b903      	cbnz	r3, 80163a0 <__sflush_r+0x7c>
 801639e:	6560      	str	r0, [r4, #84]	; 0x54
 80163a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80163a2:	602f      	str	r7, [r5, #0]
 80163a4:	2900      	cmp	r1, #0
 80163a6:	d0ca      	beq.n	801633e <__sflush_r+0x1a>
 80163a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80163ac:	4299      	cmp	r1, r3
 80163ae:	d002      	beq.n	80163b6 <__sflush_r+0x92>
 80163b0:	4628      	mov	r0, r5
 80163b2:	f7fe fe2b 	bl	801500c <_free_r>
 80163b6:	2000      	movs	r0, #0
 80163b8:	6360      	str	r0, [r4, #52]	; 0x34
 80163ba:	e7c1      	b.n	8016340 <__sflush_r+0x1c>
 80163bc:	6a21      	ldr	r1, [r4, #32]
 80163be:	2301      	movs	r3, #1
 80163c0:	4628      	mov	r0, r5
 80163c2:	47b0      	blx	r6
 80163c4:	1c41      	adds	r1, r0, #1
 80163c6:	d1c7      	bne.n	8016358 <__sflush_r+0x34>
 80163c8:	682b      	ldr	r3, [r5, #0]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d0c4      	beq.n	8016358 <__sflush_r+0x34>
 80163ce:	2b1d      	cmp	r3, #29
 80163d0:	d001      	beq.n	80163d6 <__sflush_r+0xb2>
 80163d2:	2b16      	cmp	r3, #22
 80163d4:	d101      	bne.n	80163da <__sflush_r+0xb6>
 80163d6:	602f      	str	r7, [r5, #0]
 80163d8:	e7b1      	b.n	801633e <__sflush_r+0x1a>
 80163da:	89a3      	ldrh	r3, [r4, #12]
 80163dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80163e0:	81a3      	strh	r3, [r4, #12]
 80163e2:	e7ad      	b.n	8016340 <__sflush_r+0x1c>
 80163e4:	690f      	ldr	r7, [r1, #16]
 80163e6:	2f00      	cmp	r7, #0
 80163e8:	d0a9      	beq.n	801633e <__sflush_r+0x1a>
 80163ea:	0793      	lsls	r3, r2, #30
 80163ec:	680e      	ldr	r6, [r1, #0]
 80163ee:	bf08      	it	eq
 80163f0:	694b      	ldreq	r3, [r1, #20]
 80163f2:	600f      	str	r7, [r1, #0]
 80163f4:	bf18      	it	ne
 80163f6:	2300      	movne	r3, #0
 80163f8:	eba6 0807 	sub.w	r8, r6, r7
 80163fc:	608b      	str	r3, [r1, #8]
 80163fe:	f1b8 0f00 	cmp.w	r8, #0
 8016402:	dd9c      	ble.n	801633e <__sflush_r+0x1a>
 8016404:	6a21      	ldr	r1, [r4, #32]
 8016406:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016408:	4643      	mov	r3, r8
 801640a:	463a      	mov	r2, r7
 801640c:	4628      	mov	r0, r5
 801640e:	47b0      	blx	r6
 8016410:	2800      	cmp	r0, #0
 8016412:	dc06      	bgt.n	8016422 <__sflush_r+0xfe>
 8016414:	89a3      	ldrh	r3, [r4, #12]
 8016416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801641a:	81a3      	strh	r3, [r4, #12]
 801641c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016420:	e78e      	b.n	8016340 <__sflush_r+0x1c>
 8016422:	4407      	add	r7, r0
 8016424:	eba8 0800 	sub.w	r8, r8, r0
 8016428:	e7e9      	b.n	80163fe <__sflush_r+0xda>
 801642a:	bf00      	nop
 801642c:	20400001 	.word	0x20400001

08016430 <_fflush_r>:
 8016430:	b538      	push	{r3, r4, r5, lr}
 8016432:	690b      	ldr	r3, [r1, #16]
 8016434:	4605      	mov	r5, r0
 8016436:	460c      	mov	r4, r1
 8016438:	b913      	cbnz	r3, 8016440 <_fflush_r+0x10>
 801643a:	2500      	movs	r5, #0
 801643c:	4628      	mov	r0, r5
 801643e:	bd38      	pop	{r3, r4, r5, pc}
 8016440:	b118      	cbz	r0, 801644a <_fflush_r+0x1a>
 8016442:	6983      	ldr	r3, [r0, #24]
 8016444:	b90b      	cbnz	r3, 801644a <_fflush_r+0x1a>
 8016446:	f7ff f909 	bl	801565c <__sinit>
 801644a:	4b14      	ldr	r3, [pc, #80]	; (801649c <_fflush_r+0x6c>)
 801644c:	429c      	cmp	r4, r3
 801644e:	d11b      	bne.n	8016488 <_fflush_r+0x58>
 8016450:	686c      	ldr	r4, [r5, #4]
 8016452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016456:	2b00      	cmp	r3, #0
 8016458:	d0ef      	beq.n	801643a <_fflush_r+0xa>
 801645a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801645c:	07d0      	lsls	r0, r2, #31
 801645e:	d404      	bmi.n	801646a <_fflush_r+0x3a>
 8016460:	0599      	lsls	r1, r3, #22
 8016462:	d402      	bmi.n	801646a <_fflush_r+0x3a>
 8016464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016466:	f7ff f9a9 	bl	80157bc <__retarget_lock_acquire_recursive>
 801646a:	4628      	mov	r0, r5
 801646c:	4621      	mov	r1, r4
 801646e:	f7ff ff59 	bl	8016324 <__sflush_r>
 8016472:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016474:	07da      	lsls	r2, r3, #31
 8016476:	4605      	mov	r5, r0
 8016478:	d4e0      	bmi.n	801643c <_fflush_r+0xc>
 801647a:	89a3      	ldrh	r3, [r4, #12]
 801647c:	059b      	lsls	r3, r3, #22
 801647e:	d4dd      	bmi.n	801643c <_fflush_r+0xc>
 8016480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016482:	f7ff f99c 	bl	80157be <__retarget_lock_release_recursive>
 8016486:	e7d9      	b.n	801643c <_fflush_r+0xc>
 8016488:	4b05      	ldr	r3, [pc, #20]	; (80164a0 <_fflush_r+0x70>)
 801648a:	429c      	cmp	r4, r3
 801648c:	d101      	bne.n	8016492 <_fflush_r+0x62>
 801648e:	68ac      	ldr	r4, [r5, #8]
 8016490:	e7df      	b.n	8016452 <_fflush_r+0x22>
 8016492:	4b04      	ldr	r3, [pc, #16]	; (80164a4 <_fflush_r+0x74>)
 8016494:	429c      	cmp	r4, r3
 8016496:	bf08      	it	eq
 8016498:	68ec      	ldreq	r4, [r5, #12]
 801649a:	e7da      	b.n	8016452 <_fflush_r+0x22>
 801649c:	08017334 	.word	0x08017334
 80164a0:	08017354 	.word	0x08017354
 80164a4:	08017314 	.word	0x08017314

080164a8 <_lseek_r>:
 80164a8:	b538      	push	{r3, r4, r5, lr}
 80164aa:	4d07      	ldr	r5, [pc, #28]	; (80164c8 <_lseek_r+0x20>)
 80164ac:	4604      	mov	r4, r0
 80164ae:	4608      	mov	r0, r1
 80164b0:	4611      	mov	r1, r2
 80164b2:	2200      	movs	r2, #0
 80164b4:	602a      	str	r2, [r5, #0]
 80164b6:	461a      	mov	r2, r3
 80164b8:	f7eb ffe0 	bl	800247c <_lseek>
 80164bc:	1c43      	adds	r3, r0, #1
 80164be:	d102      	bne.n	80164c6 <_lseek_r+0x1e>
 80164c0:	682b      	ldr	r3, [r5, #0]
 80164c2:	b103      	cbz	r3, 80164c6 <_lseek_r+0x1e>
 80164c4:	6023      	str	r3, [r4, #0]
 80164c6:	bd38      	pop	{r3, r4, r5, pc}
 80164c8:	2000c29c 	.word	0x2000c29c

080164cc <__swhatbuf_r>:
 80164cc:	b570      	push	{r4, r5, r6, lr}
 80164ce:	460e      	mov	r6, r1
 80164d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164d4:	2900      	cmp	r1, #0
 80164d6:	b096      	sub	sp, #88	; 0x58
 80164d8:	4614      	mov	r4, r2
 80164da:	461d      	mov	r5, r3
 80164dc:	da08      	bge.n	80164f0 <__swhatbuf_r+0x24>
 80164de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80164e2:	2200      	movs	r2, #0
 80164e4:	602a      	str	r2, [r5, #0]
 80164e6:	061a      	lsls	r2, r3, #24
 80164e8:	d410      	bmi.n	801650c <__swhatbuf_r+0x40>
 80164ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80164ee:	e00e      	b.n	801650e <__swhatbuf_r+0x42>
 80164f0:	466a      	mov	r2, sp
 80164f2:	f000 f8af 	bl	8016654 <_fstat_r>
 80164f6:	2800      	cmp	r0, #0
 80164f8:	dbf1      	blt.n	80164de <__swhatbuf_r+0x12>
 80164fa:	9a01      	ldr	r2, [sp, #4]
 80164fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016500:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016504:	425a      	negs	r2, r3
 8016506:	415a      	adcs	r2, r3
 8016508:	602a      	str	r2, [r5, #0]
 801650a:	e7ee      	b.n	80164ea <__swhatbuf_r+0x1e>
 801650c:	2340      	movs	r3, #64	; 0x40
 801650e:	2000      	movs	r0, #0
 8016510:	6023      	str	r3, [r4, #0]
 8016512:	b016      	add	sp, #88	; 0x58
 8016514:	bd70      	pop	{r4, r5, r6, pc}
	...

08016518 <__smakebuf_r>:
 8016518:	898b      	ldrh	r3, [r1, #12]
 801651a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801651c:	079d      	lsls	r5, r3, #30
 801651e:	4606      	mov	r6, r0
 8016520:	460c      	mov	r4, r1
 8016522:	d507      	bpl.n	8016534 <__smakebuf_r+0x1c>
 8016524:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016528:	6023      	str	r3, [r4, #0]
 801652a:	6123      	str	r3, [r4, #16]
 801652c:	2301      	movs	r3, #1
 801652e:	6163      	str	r3, [r4, #20]
 8016530:	b002      	add	sp, #8
 8016532:	bd70      	pop	{r4, r5, r6, pc}
 8016534:	ab01      	add	r3, sp, #4
 8016536:	466a      	mov	r2, sp
 8016538:	f7ff ffc8 	bl	80164cc <__swhatbuf_r>
 801653c:	9900      	ldr	r1, [sp, #0]
 801653e:	4605      	mov	r5, r0
 8016540:	4630      	mov	r0, r6
 8016542:	f7fe fdcf 	bl	80150e4 <_malloc_r>
 8016546:	b948      	cbnz	r0, 801655c <__smakebuf_r+0x44>
 8016548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801654c:	059a      	lsls	r2, r3, #22
 801654e:	d4ef      	bmi.n	8016530 <__smakebuf_r+0x18>
 8016550:	f023 0303 	bic.w	r3, r3, #3
 8016554:	f043 0302 	orr.w	r3, r3, #2
 8016558:	81a3      	strh	r3, [r4, #12]
 801655a:	e7e3      	b.n	8016524 <__smakebuf_r+0xc>
 801655c:	4b0d      	ldr	r3, [pc, #52]	; (8016594 <__smakebuf_r+0x7c>)
 801655e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016560:	89a3      	ldrh	r3, [r4, #12]
 8016562:	6020      	str	r0, [r4, #0]
 8016564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016568:	81a3      	strh	r3, [r4, #12]
 801656a:	9b00      	ldr	r3, [sp, #0]
 801656c:	6163      	str	r3, [r4, #20]
 801656e:	9b01      	ldr	r3, [sp, #4]
 8016570:	6120      	str	r0, [r4, #16]
 8016572:	b15b      	cbz	r3, 801658c <__smakebuf_r+0x74>
 8016574:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016578:	4630      	mov	r0, r6
 801657a:	f000 f87d 	bl	8016678 <_isatty_r>
 801657e:	b128      	cbz	r0, 801658c <__smakebuf_r+0x74>
 8016580:	89a3      	ldrh	r3, [r4, #12]
 8016582:	f023 0303 	bic.w	r3, r3, #3
 8016586:	f043 0301 	orr.w	r3, r3, #1
 801658a:	81a3      	strh	r3, [r4, #12]
 801658c:	89a0      	ldrh	r0, [r4, #12]
 801658e:	4305      	orrs	r5, r0
 8016590:	81a5      	strh	r5, [r4, #12]
 8016592:	e7cd      	b.n	8016530 <__smakebuf_r+0x18>
 8016594:	080155f5 	.word	0x080155f5

08016598 <_malloc_usable_size_r>:
 8016598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801659c:	1f18      	subs	r0, r3, #4
 801659e:	2b00      	cmp	r3, #0
 80165a0:	bfbc      	itt	lt
 80165a2:	580b      	ldrlt	r3, [r1, r0]
 80165a4:	18c0      	addlt	r0, r0, r3
 80165a6:	4770      	bx	lr

080165a8 <_read_r>:
 80165a8:	b538      	push	{r3, r4, r5, lr}
 80165aa:	4d07      	ldr	r5, [pc, #28]	; (80165c8 <_read_r+0x20>)
 80165ac:	4604      	mov	r4, r0
 80165ae:	4608      	mov	r0, r1
 80165b0:	4611      	mov	r1, r2
 80165b2:	2200      	movs	r2, #0
 80165b4:	602a      	str	r2, [r5, #0]
 80165b6:	461a      	mov	r2, r3
 80165b8:	f7eb ff00 	bl	80023bc <_read>
 80165bc:	1c43      	adds	r3, r0, #1
 80165be:	d102      	bne.n	80165c6 <_read_r+0x1e>
 80165c0:	682b      	ldr	r3, [r5, #0]
 80165c2:	b103      	cbz	r3, 80165c6 <_read_r+0x1e>
 80165c4:	6023      	str	r3, [r4, #0]
 80165c6:	bd38      	pop	{r3, r4, r5, pc}
 80165c8:	2000c29c 	.word	0x2000c29c

080165cc <_raise_r>:
 80165cc:	291f      	cmp	r1, #31
 80165ce:	b538      	push	{r3, r4, r5, lr}
 80165d0:	4604      	mov	r4, r0
 80165d2:	460d      	mov	r5, r1
 80165d4:	d904      	bls.n	80165e0 <_raise_r+0x14>
 80165d6:	2316      	movs	r3, #22
 80165d8:	6003      	str	r3, [r0, #0]
 80165da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80165de:	bd38      	pop	{r3, r4, r5, pc}
 80165e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80165e2:	b112      	cbz	r2, 80165ea <_raise_r+0x1e>
 80165e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80165e8:	b94b      	cbnz	r3, 80165fe <_raise_r+0x32>
 80165ea:	4620      	mov	r0, r4
 80165ec:	f000 f830 	bl	8016650 <_getpid_r>
 80165f0:	462a      	mov	r2, r5
 80165f2:	4601      	mov	r1, r0
 80165f4:	4620      	mov	r0, r4
 80165f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80165fa:	f000 b817 	b.w	801662c <_kill_r>
 80165fe:	2b01      	cmp	r3, #1
 8016600:	d00a      	beq.n	8016618 <_raise_r+0x4c>
 8016602:	1c59      	adds	r1, r3, #1
 8016604:	d103      	bne.n	801660e <_raise_r+0x42>
 8016606:	2316      	movs	r3, #22
 8016608:	6003      	str	r3, [r0, #0]
 801660a:	2001      	movs	r0, #1
 801660c:	e7e7      	b.n	80165de <_raise_r+0x12>
 801660e:	2400      	movs	r4, #0
 8016610:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016614:	4628      	mov	r0, r5
 8016616:	4798      	blx	r3
 8016618:	2000      	movs	r0, #0
 801661a:	e7e0      	b.n	80165de <_raise_r+0x12>

0801661c <raise>:
 801661c:	4b02      	ldr	r3, [pc, #8]	; (8016628 <raise+0xc>)
 801661e:	4601      	mov	r1, r0
 8016620:	6818      	ldr	r0, [r3, #0]
 8016622:	f7ff bfd3 	b.w	80165cc <_raise_r>
 8016626:	bf00      	nop
 8016628:	20000094 	.word	0x20000094

0801662c <_kill_r>:
 801662c:	b538      	push	{r3, r4, r5, lr}
 801662e:	4d07      	ldr	r5, [pc, #28]	; (801664c <_kill_r+0x20>)
 8016630:	2300      	movs	r3, #0
 8016632:	4604      	mov	r4, r0
 8016634:	4608      	mov	r0, r1
 8016636:	4611      	mov	r1, r2
 8016638:	602b      	str	r3, [r5, #0]
 801663a:	f7eb fea5 	bl	8002388 <_kill>
 801663e:	1c43      	adds	r3, r0, #1
 8016640:	d102      	bne.n	8016648 <_kill_r+0x1c>
 8016642:	682b      	ldr	r3, [r5, #0]
 8016644:	b103      	cbz	r3, 8016648 <_kill_r+0x1c>
 8016646:	6023      	str	r3, [r4, #0]
 8016648:	bd38      	pop	{r3, r4, r5, pc}
 801664a:	bf00      	nop
 801664c:	2000c29c 	.word	0x2000c29c

08016650 <_getpid_r>:
 8016650:	f7eb be92 	b.w	8002378 <_getpid>

08016654 <_fstat_r>:
 8016654:	b538      	push	{r3, r4, r5, lr}
 8016656:	4d07      	ldr	r5, [pc, #28]	; (8016674 <_fstat_r+0x20>)
 8016658:	2300      	movs	r3, #0
 801665a:	4604      	mov	r4, r0
 801665c:	4608      	mov	r0, r1
 801665e:	4611      	mov	r1, r2
 8016660:	602b      	str	r3, [r5, #0]
 8016662:	f7eb fef0 	bl	8002446 <_fstat>
 8016666:	1c43      	adds	r3, r0, #1
 8016668:	d102      	bne.n	8016670 <_fstat_r+0x1c>
 801666a:	682b      	ldr	r3, [r5, #0]
 801666c:	b103      	cbz	r3, 8016670 <_fstat_r+0x1c>
 801666e:	6023      	str	r3, [r4, #0]
 8016670:	bd38      	pop	{r3, r4, r5, pc}
 8016672:	bf00      	nop
 8016674:	2000c29c 	.word	0x2000c29c

08016678 <_isatty_r>:
 8016678:	b538      	push	{r3, r4, r5, lr}
 801667a:	4d06      	ldr	r5, [pc, #24]	; (8016694 <_isatty_r+0x1c>)
 801667c:	2300      	movs	r3, #0
 801667e:	4604      	mov	r4, r0
 8016680:	4608      	mov	r0, r1
 8016682:	602b      	str	r3, [r5, #0]
 8016684:	f7eb feef 	bl	8002466 <_isatty>
 8016688:	1c43      	adds	r3, r0, #1
 801668a:	d102      	bne.n	8016692 <_isatty_r+0x1a>
 801668c:	682b      	ldr	r3, [r5, #0]
 801668e:	b103      	cbz	r3, 8016692 <_isatty_r+0x1a>
 8016690:	6023      	str	r3, [r4, #0]
 8016692:	bd38      	pop	{r3, r4, r5, pc}
 8016694:	2000c29c 	.word	0x2000c29c

08016698 <_init>:
 8016698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801669a:	bf00      	nop
 801669c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801669e:	bc08      	pop	{r3}
 80166a0:	469e      	mov	lr, r3
 80166a2:	4770      	bx	lr

080166a4 <_fini>:
 80166a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166a6:	bf00      	nop
 80166a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80166aa:	bc08      	pop	{r3}
 80166ac:	469e      	mov	lr, r3
 80166ae:	4770      	bx	lr
